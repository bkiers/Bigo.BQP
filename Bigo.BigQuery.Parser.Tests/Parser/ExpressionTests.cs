using Xunit;

namespace Bigo.BigQuery.Parser.Tests.Parser;

public class ExpressionTests : BaseParserTest
{
    [Theory]
    [InlineData("foo")]
    [InlineData("FOO.bar.baz")]
    [InlineData("STRUCT(\n    STRUCT('Yonge Street' AS street, 'Canada' AS country)\n      AS address).address.country")]
    [InlineData("[\"coffee\", \"tea\", \"milk\"][0]")]
    [InlineData("[\"coffee\", \"tea\", \"milk\"][OFFSET(0)] AS item_offset")]
    [InlineData("STRUCT<INT64, STRING, BOOL>(23, \"tea\", FALSE)[0] AS field_index")]
    [InlineData("STRUCT<INT64, STRING, BOOL>(23, \"tea\", FALSE)[ORDINAL(1)] AS field_ordinal")]
    [InlineData("json_value.class.students[0]['name'] AS first_student")]
    [InlineData("JSON '{\"class\" : {\"students\" : [{\"name\" : \"Jane\"}]}}'")]
    [InlineData("date_expression + int64_expression")]
    [InlineData("date_expression - int64_expression")]
    [InlineData("SELECT DATE \"2020-09-22\" + 1 AS day_later, DATE \"2020-09-22\" - 7 AS week_ago")]
    [InlineData("DATE \"2021-05-20\" - DATE \"2020-04-19\" AS date_diff")]
    [InlineData("TIMESTAMP \"2021-06-01 12:34:56.789\" - TIMESTAMP \"2021-05-31 00:00:00\" AS time_diff")]
    [InlineData("DATE \"2021-04-20\" + INTERVAL 25 HOUR AS date_plus")]
    [InlineData("TIMESTAMP \"2021-05-02 00:01:02.345\" - INTERVAL 10 SECOND AS time_minus")]
    [InlineData("INTERVAL '1:2:3' HOUR TO SECOND * 10 AS mul1")]
    [InlineData("INTERVAL 1 MONTH / 12 AS div2")]
    [InlineData("~X")]
    [InlineData("X | Y")]
    [InlineData("p & k")]
    [InlineData("a << b")]
    [InlineData("c >> d")]
    [InlineData("a = b")]
    [InlineData("a != b")]
    [InlineData("a <> b")]
    [InlineData("a > b")]
    [InlineData("a < b")]
    [InlineData("a >= b")]
    [InlineData("a <= b")]
    [InlineData("a not in b")]
    [InlineData("a in b")]
    [InlineData("a not between x and y")]
    [InlineData("a between x and y")]
    [InlineData("a not like b")]
    [InlineData("a like b")]
    [InlineData("a + b")]
    [InlineData("a - b")]
    [InlineData("-a")]
    [InlineData("+a")]
    [InlineData("not a")]
    [InlineData("a * b")]
    [InlineData("a / b")]
    [InlineData("STRUCT(1, NULL)")]
    [InlineData("EXISTS(SELECT value FROM Words WHERE direction = 'south')")]
    [InlineData("(x = y) OR (x = z)")]
    [InlineData("x NOT IN z")]
    [InlineData("NOT(x IN z)")]
    [InlineData("(Key1, Key2) IN ( (12,34), (56,78))")]
    [InlineData("SELECT STRUCT('blue' AS color, 'round' AS shape) AS info")]
    [InlineData("value IN ('Intend', 'Secure')")]
    [InlineData("value IN ((SELECT 'Intend'), 'Clarity')")]
    [InlineData("expression_1 IS NOT DISTINCT FROM expression_2")]
    [InlineData("X IS NOT FALSE")]
    [InlineData("X IS UNKNOWN")]
    [InlineData("SELECT 'apple' LIKE 'a%'")]
    [InlineData("SELECT 'apple' NOT LIKE 'a%'")]
    [InlineData("EXISTS(SELECT value FROM UNNEST(['%ity%', '%and%']) AS pattern WHERE value LIKE pattern)")]
    [InlineData("'Foo' LIKE '%foo%'")]
    [InlineData(@"COLLATE('\u0061\u030A', 'und:ci') LIKE '%\u00C5%'")]
    [InlineData("value LIKE ANY ('Intend%', '%intention%')")]
    [InlineData("value LIKE ALL ('%ity%')")]
    [InlineData("value LIKE ANY UNNEST(['%ion%', '%and%'])")]
    [InlineData("NULL NOT LIKE ANY ('a', 'b')")]
    [InlineData("COLLATE('a', 'und:ci') LIKE ALL ('a', 'A')")]
    [InlineData("b'a' LIKE ALL (COLLATE('a', 'und:ci'), 'A')")]
    [InlineData("a || b")]
    [InlineData("a || b || c")]
    public void Test(string input)
    {
        ParseAllTokens(input, parser => parser.expression());
    }
}