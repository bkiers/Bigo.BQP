using Xunit;

namespace Bigo.BigQuery.Parser.Tests.Parser;

public class FunctionCallTests : BaseParserTest
{
    [Theory]
    [InlineData("ANY_VALUE(fruit)")]
    [InlineData("ANY_VALUE(fruit) OVER (ORDER BY LENGTH(fruit) ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)")]
    [InlineData("ANY_VALUE(fruit HAVING MAX sold)")]
    [InlineData("ANY_VALUE(fruit HAVING MIN sold)")]
    [InlineData("ARRAY_AGG(x)")]
    [InlineData("ARRAY_AGG(DISTINCT x)")]
    [InlineData("ARRAY_AGG(x IGNORE NULLS)")]
    [InlineData("ARRAY_AGG(x ORDER BY ABS(x))")]
    [InlineData("ARRAY_AGG(x LIMIT 5)")]
    [InlineData("ARRAY_AGG(DISTINCT x ORDER BY x)")]
    [InlineData("ARRAY_AGG(x) OVER (ORDER BY ABS(x))")]
    [InlineData("ARRAY_CONCAT_AGG(x)")]
    [InlineData("ARRAY_CONCAT_AGG(x ORDER BY ARRAY_LENGTH(x))")]
    [InlineData("ARRAY_CONCAT_AGG(x LIMIT 2)")]
    [InlineData("ARRAY_CONCAT_AGG(x ORDER BY ARRAY_LENGTH(x) LIMIT 2)")]
    [InlineData("AVG(x)")]
    [InlineData("AVG(DISTINCT x)")]
    [InlineData("AVG(x) OVER (ORDER BY x ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)")]
    [InlineData("BIT_AND(x)")]
    [InlineData("BIT_OR(x)")]
    [InlineData("BIT_XOR(x)")]
    [InlineData("BIT_XOR(distinct x)")]
    [InlineData("COUNTIF(x<0)")]
    [InlineData("COUNTIF(x<0) OVER (ORDER BY ABS(x) ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)")]
    [InlineData("COUNT(*)")]
    [InlineData("COUNT(x)")]
    [InlineData("COUNT(DISTINCT x)")]
    [InlineData("COUNT(*) OVER (PARTITION BY MOD(x, 3))")]
    [InlineData("COUNT(DISTINCT x) OVER (PARTITION BY MOD(x, 3))")]
    [InlineData("COUNT(DISTINCT IF(x > 0, x, NULL))")]
    [InlineData("COUNT(DISTINCT IF(event_type = 'FAILURE', event_date, NULL))")]
    [InlineData("COUNT(DISTINCT IF(id IN (SELECT id FROM customers), id, NULL))")]
    [InlineData("GROUPING(product_type)")]
    [InlineData("LOGICAL_AND(x < 3)")]
    [InlineData("LOGICAL_OR(x < 3)")]
    [InlineData("MAX_BY(fruit, price)")]
    [InlineData("MAX(x)")]
    [InlineData("MAX(x) OVER (PARTITION BY MOD(x, 2))")]
    [InlineData("MIN_BY(fruit, price)")]
    [InlineData("MIN(x)")]
    [InlineData("MIN(x) OVER (PARTITION BY MOD(x, 2))")]
    [InlineData("STRING_AGG(fruit)")]
    [InlineData("STRING_AGG(fruit, \" & \")")]
    [InlineData("STRING_AGG(DISTINCT fruit, \" & \")")]
    [InlineData("STRING_AGG(fruit, \" & \" ORDER BY LENGTH(fruit))")]
    [InlineData("STRING_AGG(fruit, \" & \" LIMIT 2)")]
    [InlineData("STRING_AGG(DISTINCT fruit, \" & \" ORDER BY fruit DESC LIMIT 2)")]
    [InlineData("SUM(x)")]
    [InlineData("SUM(DISTINCT x)")]
    [InlineData("SUM(x) OVER (PARTITION BY MOD(x, 3))")]
    [InlineData("SUM(DISTINCT x) OVER (PARTITION BY MOD(x, 3))")]
    public void Test(string input)
    {
        ParseAllTokens(input, parser => parser.function_call());
    }
}