using Xunit;

namespace Bigo.BigQuery.Parser.Tests.Parser;

public class FunctionCallTests : BaseParserTest
{
    [Theory]
    [InlineData("ABS(X)")]
    [InlineData("ACOS(X)")]
    [InlineData("ACOSH(X)")]
    [InlineData("ASIN(X)")]
    [InlineData("ASINH(X)")]
    [InlineData("ATAN(X)")]
    [InlineData("ATAN2(X, Y)")]
    [InlineData("ATANH(X)")]
    [InlineData("CBRT(X)")]
    [InlineData("CEIL(X)")]
    [InlineData("CEILING(X)")]
    [InlineData("COS(X)")]
    [InlineData("COSH(X)")]
    [InlineData("COSINE_DISTANCE(vector1, vector2)")]
    [InlineData("COT(X)")]
    [InlineData("COTH(X)")]
    [InlineData("CSC(X)")]
    [InlineData("CSCH(X)")]
    [InlineData("DIV(X, Y)")]
    [InlineData("EXP(X)")]
    [InlineData("EUCLIDEAN_DISTANCE(vector1, vector2)")]
    [InlineData("FLOOR(X)")]
    [InlineData("GREATEST(X1, X2, X3, XN)")]
    [InlineData("IEEE_DIVIDE(X, Y)")]
    [InlineData("IS_INF(X)")]
    [InlineData("IS_NAN(X)")]
    [InlineData("LEAST(X1, X2, X3, XN)")]
    [InlineData("LN(X)")]
    [InlineData("LOG(X)")]
    [InlineData("LOG(X, Y)")]
    [InlineData("LOG10(X)")]
    [InlineData("MOD(X, Y)")]
    [InlineData("POW(X, Y)")]
    [InlineData("POWER(X, Y)")]
    [InlineData("RAND()")]
    [InlineData("RANGE_BUCKET(point, boundaries_array)")]
    [InlineData("ROUND(NUMERIC \"2.25\", 1, \"ROUND_HALF_EVEN\")")]
    [InlineData("ROUND(NaN)")]
    [InlineData("ROUND(-2.8)")]
    [InlineData("SAFE_ADD(X, Y)")]
    [InlineData("SAFE_DIVIDE(X, Y)")]
    [InlineData("SAFE_MULTIPLY(X, Y)")]
    [InlineData("SAFE_NEGATE(X)")]
    [InlineData("SAFE_SUBTRACT(X, Y)")]
    [InlineData("SEC(X)")]
    [InlineData("SECH(X)")]
    [InlineData("SIGN(X)")]
    [InlineData("SIN(X)")]
    [InlineData("sinh(X)")]
    [InlineData("SQRT(X)")]
    [InlineData("TAN(X)")]
    [InlineData("TANH(X)")]
    [InlineData("TRUNC(X)")]
    [InlineData("TRUNC(X, N)")]
    [InlineData("AEAD.DECRYPT_BYTES(keyset, ciphertext, additional_data)")]
    [InlineData("AEAD.DECRYPT_STRING(keyset, ciphertext, additional_data)")]
    [InlineData("KEYS.ROTATE_KEYSET(keyset, key_type)")]
    [InlineData("APPROX_COUNT_DISTINCT(x)")]
    [InlineData("APPROX_TOP_SUM(\n  expression, weight, number\n)")]
    [InlineData("ARRAY_CONCAT([1, 2], [3, 4], [5, 6])")]
    [InlineData("ARRAY_LENGTH([\"coffee\", NULL, \"milk\" ])")]
    [InlineData("ARRAY_REVERSE([1, 2, 3])")]
    [InlineData("ARRAY_TO_STRING(['coffee', 'tea', 'milk', NULL], '--', 'MISSING')")]
    [InlineData("GENERATE_ARRAY(1, 5)")]
    [InlineData("GENERATE_DATE_ARRAY('2016-10-05', '2016-10-08')")]
    [InlineData("GENERATE_DATE_ARRAY(\n '2016-10-05', '2016-10-09', INTERVAL 2 DAY)")]
    [InlineData("GENERATE_DATE_ARRAY('2016-01-01',\n  '2016-12-31', INTERVAL 2 MONTH)")]
    [InlineData("GENERATE_TIMESTAMP_ARRAY('2016-10-05 00:00:00', '2016-10-07 00:00:00', INTERVAL 1 DAY)")]
    [InlineData("BIT_COUNT(a)")]
    [InlineData("CAST(x=1 AS STRING)")]
    [InlineData("CAST('0x123' as INT64)")]
    [InlineData("CAST(input AS INTERVAL)")]
    [InlineData("CAST(\n  '[2020-01-01, 2020-01-02)'\n  AS RANGE<DATE>)")]
    [InlineData("CAST(CURRENT_DATE() AS STRING)")]
    [InlineData("CAST(\"2020-06-02 17:00:53.110+00:00\" AS TIMESTAMP)")]
    [InlineData("PARSE_BIGNUMERIC(\"  -  12.34 \")")]
    [InlineData("CURRENT_DATE()")]
    [InlineData("DATE_TRUNC(DATE '2008-12-25', MONTH)")]
    [InlineData("DATE_TRUNC(date, WEEK(MONDAY))")]
    [InlineData("DATE_TRUNC('2015-06-15', ISOYEAR)")]
    [InlineData("EXTRACT(DAY FROM DATE '2013-12-25')")]
    [InlineData("DATE('2017-11-05')")]
    [InlineData("FORMAT_DATE('%x', DATE '2008-12-25')")]
    [InlineData("FORMAT_DATE('%b %Y', DATE '2008-12-25')")]
    [InlineData("LAST_DAY(DATE '2008-11-25', MONTH)")]
    [InlineData("PARSE_DATE('%A %b %e %Y', 'Thursday Dec 25 2008')")]
    [InlineData("UNIX_DATE(DATE '2008-12-25')")]
    [InlineData("CURRENT_DATETIME()")]
    [InlineData("DATETIME_TRUNC(DATETIME \"2008-12-25 15:30:00\", DAY)")]
    [InlineData("DATETIME(2008, 12, 25, 15, 30, 00)")]
    [InlineData("FORMAT_DATETIME(\"%c\", DATETIME \"2008-12-25 15:30:00\")")]
    [InlineData("PARSE_DATETIME(\"%a %b %e %I:%M:%S %Y\", \"Thu Dec 25 07:30:00 2008\")")]
    [InlineData("ERROR('Show this error message')")]
    [InlineData("AVG(quantity, contribution_bounds_per_group => (0,100))")]
    [InlineData("COUNT(*, contribution_bounds_per_group=>(0, 100))")]
    [InlineData("PERCENTILE_CONT(quantity, 0.5, contribution_bounds_per_row => (0,100))")]
    [InlineData("SUM(quantity, contribution_bounds_per_group => (0,100))")]
    [InlineData("EXTERNAL_QUERY(\n    'connection_id',\n    '''SELECT customer_id, MIN(order_date) AS first_order_date\n       FROM orders\n       GROUP BY customer_id'''\n  )")]
    [InlineData("DLP_DETERMINISTIC_ENCRYPT(\n    DLP_KEY_CHAIN(\n      'gcp-kms://projects/myproject/locations/us/keyRings/kms-test/cryptoKeys/test-KEK',\n      b'\\012\\044\\000\\325\\155\\264\\153\\246\\071\\172\\130\\372\\305\\103\\047\\342\\356\\061\\077\\014\\030\\126\\147\\041\\126\\150\\012\\036\\020\\202\\215\\044\\267\\310\\331\\014\\116\\233\\022\\071\\000\\363\\344\\230\\067\\274\\007\\340\\273\\016\\212\\151\\226\\064\\200\\377\\303\\207\\103\\147\\052\\267\\035\\350\\004\\147\\365\\251\\271\\133\\062\\251\\246\\152\\177\\017\\005\\270\\044\\141\\211\\116\\337\\043\\035\\263\\122\\340\\110\\333\\266\\220\\377\\247\\204\\215\\233'),\n    'Plaintext',\n    '',\n    'aad') ")]
    [InlineData("SHA512(\"Hello World\")")]
    [InlineData("HLL_COUNT.MERGE_PARTIAL(HLL_sketch)")]
    [InlineData("MAKE_INTERVAL(hour => 10, second => 20)")]
    [InlineData("JSON_EXTRACT(JSON '{\"class\": {\"students\": [{\"id\": 5}, {\"id\": 12}]}}', '$.class')")]
    [InlineData("KLL_QUANTILES.INIT_INT64(x, 1000)")]
    [InlineData("NTH_VALUE(finish_time, 2)\n    OVER w1 as second_fastest")]
    [InlineData("PERCENTILE_CONT(x, 0.9) OVER()")]
    [InlineData("VECTOR_SEARCH(\n    TABLE mydataset.table1,\n    'my_embedding',\n    (SELECT query_id, embedding FROM mydataset.table2),\n    'embedding',\n    top_k => 2)")]
    [InlineData("SEARCH(R'foo bar baz', R'foo bar') ")]
    [InlineData("SEARCH(\n    R'foo bar baz',\n    R'\"foo\\ bar\"',\n    analyzer_options=>'{\"delimiters\": [\" \"]}')")]
    [InlineData("SEARCH(\n    R'ant orange apple avocado',\n    R'\"ant apple\"',\n    analyzer=>'PATTERN_ANALYZER',\n    analyzer_options=>'{\"patterns\": [\"a[a-z]\"]}') ")]
    [InlineData("CORR(y, x)")]
    [InlineData("STRPOS('foo@example.com', '@')")]
    [InlineData("EXTERNAL_OBJECT_TRANSFORM(TABLE mydataset.myobjecttable, ['SIGNED_URL'])")]
    [InlineData("TEXT_ANALYZE(\n  'I like pie, you like-pie, they like 2 PIEs.',\n  analyzer=>'NO_OP_ANALYZER'\n)")]
    [InlineData("TF_IDF(f, 10, 2) OVER()")]
    [InlineData("TIME_DIFF(TIME \"15:30:00\", TIME \"14:35:00\", MINUTE)")]
    [InlineData("TIME_SUB(TIME \"15:30:00\", INTERVAL 10 MINUTE)")]
    [InlineData("ANY_VALUE(fruit)")]
    [InlineData("ANY_VALUE(fruit) OVER (ORDER BY LENGTH(fruit) ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)")]
    [InlineData("ANY_VALUE(fruit HAVING MAX sold)")]
    [InlineData("ANY_VALUE(fruit HAVING MIN sold)")]
    [InlineData("ARRAY_AGG(x)")]
    [InlineData("ARRAY_AGG(DISTINCT x)")]
    [InlineData("ARRAY_AGG(x IGNORE NULLS)")]
    [InlineData("ARRAY_AGG(x ORDER BY ABS(x))")]
    [InlineData("ARRAY_AGG(x LIMIT 5)")]
    [InlineData("ARRAY_AGG(DISTINCT x ORDER BY x)")]
    [InlineData("ARRAY_AGG(x) OVER (ORDER BY ABS(x))")]
    [InlineData("ARRAY_CONCAT_AGG(x)")]
    [InlineData("ARRAY_CONCAT_AGG(x ORDER BY ARRAY_LENGTH(x))")]
    [InlineData("ARRAY_CONCAT_AGG(x LIMIT 2)")]
    [InlineData("ARRAY_CONCAT_AGG(x ORDER BY ARRAY_LENGTH(x) LIMIT 2)")]
    [InlineData("AVG(x)")]
    [InlineData("AVG(DISTINCT x)")]
    [InlineData("AVG(x) OVER (ORDER BY x ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)")]
    [InlineData("BIT_AND(x)")]
    [InlineData("BIT_OR(x)")]
    [InlineData("BIT_XOR(x)")]
    [InlineData("BIT_XOR(distinct x)")]
    [InlineData("COUNTIF(x<0)")]
    [InlineData("COUNTIF(x<0) OVER (ORDER BY ABS(x) ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)")]
    [InlineData("COUNT(*)")]
    [InlineData("COUNT(x)")]
    [InlineData("COUNT(DISTINCT x)")]
    [InlineData("COUNT(*) OVER (PARTITION BY MOD(x, 3))")]
    [InlineData("COUNT(DISTINCT x) OVER (PARTITION BY MOD(x, 3))")]
    [InlineData("COUNT(DISTINCT IF(x > 0, x, NULL))")]
    [InlineData("COUNT(DISTINCT IF(event_type = 'FAILURE', event_date, NULL))")]
    [InlineData("COUNT(DISTINCT IF(id IN (SELECT id FROM customers), id, NULL))")]
    [InlineData("GROUPING(product_type)")]
    [InlineData("LOGICAL_AND(x < 3)")]
    [InlineData("LOGICAL_OR(x < 3)")]
    [InlineData("MAX_BY(fruit, price)")]
    [InlineData("MAX(x)")]
    [InlineData("MAX(x) OVER (PARTITION BY MOD(x, 2))")]
    [InlineData("MIN_BY(fruit, price)")]
    [InlineData("MIN(x)")]
    [InlineData("MIN(x) OVER (PARTITION BY MOD(x, 2))")]
    [InlineData("STRING_AGG(fruit)")]
    [InlineData("STRING_AGG(fruit, \" & \")")]
    [InlineData("STRING_AGG(DISTINCT fruit, \" & \")")]
    [InlineData("STRING_AGG(fruit, \" & \" ORDER BY LENGTH(fruit))")]
    [InlineData("STRING_AGG(fruit, \" & \" LIMIT 2)")]
    [InlineData("STRING_AGG(DISTINCT fruit, \" & \" ORDER BY fruit DESC LIMIT 2)")]
    [InlineData("SUM(x)")]
    [InlineData("SUM(DISTINCT x)")]
    [InlineData("SUM(x) OVER (PARTITION BY MOD(x, 3))")]
    [InlineData("SUM(DISTINCT x) OVER (PARTITION BY MOD(x, 3))")]
    public void Test(string input)
    {
        ParseAllTokens(input, parser => parser.function_call());
    }
}