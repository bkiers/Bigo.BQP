//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./BigQueryLexerBase.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BigO.BigQuery.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BigQueryLexerBase : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		UNQUOTED_IDENTIFIER=1, QUOTED_IDENTIFIER=2, STRING_LITERAL=3, RAW_STRING_LITERAL=4, 
		BYTES_LITERAL=5, RAW_BYTES_LITERAL=6, INTEGER_LITERAL=7, FLOATING_POINT_LITERAL=8, 
		UNEXPECTED=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"UNQUOTED_IDENTIFIER", "QUOTED_IDENTIFIER", "STRING_LITERAL", "RAW_STRING_LITERAL", 
		"BYTES_LITERAL", "RAW_BYTES_LITERAL", "INTEGER_LITERAL", "FLOATING_POINT_LITERAL", 
		"UNEXPECTED", "ESCAPE_SEQUENCE", "OCTAL_DIGIT", "HEX_DIGIT", "DIGIT", 
		"DIGITS"
	};


	public BigQueryLexerBase(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BigQueryLexerBase(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "UNQUOTED_IDENTIFIER", "QUOTED_IDENTIFIER", "STRING_LITERAL", "RAW_STRING_LITERAL", 
		"BYTES_LITERAL", "RAW_BYTES_LITERAL", "INTEGER_LITERAL", "FLOATING_POINT_LITERAL", 
		"UNEXPECTED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BigQueryLexerBase.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BigQueryLexerBase() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,9,256,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,
		0,5,0,32,8,0,10,0,12,0,35,9,0,1,1,1,1,5,1,39,8,1,10,1,12,1,42,9,1,1,1,
		1,1,1,2,1,2,1,2,5,2,49,8,2,10,2,12,2,52,9,2,1,2,1,2,1,2,1,2,5,2,58,8,2,
		10,2,12,2,61,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,70,8,2,10,2,12,2,73,9,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,84,8,2,10,2,12,2,87,9,2,1,2,
		1,2,1,2,3,2,92,8,2,1,3,1,3,1,3,5,3,97,8,3,10,3,12,3,100,9,3,1,3,1,3,1,
		3,5,3,105,8,3,10,3,12,3,108,9,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,116,8,3,10,
		3,12,3,119,9,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,129,8,3,10,3,12,3,132,
		9,3,1,3,1,3,1,3,3,3,137,8,3,1,4,1,4,1,4,1,5,1,5,3,5,144,8,5,1,5,1,5,3,
		5,148,8,5,3,5,150,8,5,1,5,1,5,1,6,3,6,155,8,6,1,6,1,6,1,6,4,6,160,8,6,
		11,6,12,6,161,1,6,4,6,165,8,6,11,6,12,6,166,3,6,169,8,6,1,7,3,7,172,8,
		7,1,7,1,7,1,7,3,7,177,8,7,1,7,1,7,3,7,181,8,7,1,7,3,7,184,8,7,1,7,3,7,
		187,8,7,1,7,3,7,190,8,7,1,7,1,7,1,7,1,7,3,7,196,8,7,1,7,3,7,199,8,7,1,
		7,1,7,1,7,3,7,204,8,7,1,7,1,7,3,7,208,8,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,244,8,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,4,13,253,8,13,11,13,12,13,254,7,40,71,85,98,106,117,130,
		0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,0,25,0,27,0,
		1,0,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,
		13,34,34,92,92,4,0,10,10,13,13,39,39,92,92,1,0,92,92,2,0,66,66,98,98,2,
		0,82,82,114,114,2,0,43,43,45,45,2,0,88,88,120,120,10,0,34,34,39,39,63,
		63,92,92,96,98,102,102,110,110,114,114,116,116,118,118,1,0,48,55,3,0,48,
		57,65,70,97,102,1,0,48,57,293,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,1,29,1,0,0,0,3,36,1,0,0,0,5,91,1,0,0,0,7,93,1,0,0,0,9,138,1,0,0,0,11,
		149,1,0,0,0,13,154,1,0,0,0,15,207,1,0,0,0,17,209,1,0,0,0,19,243,1,0,0,
		0,21,245,1,0,0,0,23,247,1,0,0,0,25,249,1,0,0,0,27,252,1,0,0,0,29,33,7,
		0,0,0,30,32,7,1,0,0,31,30,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,
		0,0,0,34,2,1,0,0,0,35,33,1,0,0,0,36,40,5,96,0,0,37,39,9,0,0,0,38,37,1,
		0,0,0,39,42,1,0,0,0,40,41,1,0,0,0,40,38,1,0,0,0,41,43,1,0,0,0,42,40,1,
		0,0,0,43,44,5,96,0,0,44,4,1,0,0,0,45,50,5,34,0,0,46,49,8,2,0,0,47,49,3,
		19,9,0,48,46,1,0,0,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,51,1,
		0,0,0,51,53,1,0,0,0,52,50,1,0,0,0,53,92,5,34,0,0,54,59,5,39,0,0,55,58,
		8,3,0,0,56,58,3,19,9,0,57,55,1,0,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,
		1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,92,5,39,0,0,63,64,
		5,34,0,0,64,65,5,34,0,0,65,66,5,34,0,0,66,71,1,0,0,0,67,70,8,4,0,0,68,
		70,3,19,9,0,69,67,1,0,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,72,1,0,0,0,71,
		69,1,0,0,0,72,74,1,0,0,0,73,71,1,0,0,0,74,75,5,34,0,0,75,76,5,34,0,0,76,
		92,5,34,0,0,77,78,5,39,0,0,78,79,5,39,0,0,79,80,5,39,0,0,80,85,1,0,0,0,
		81,84,8,4,0,0,82,84,3,19,9,0,83,81,1,0,0,0,83,82,1,0,0,0,84,87,1,0,0,0,
		85,86,1,0,0,0,85,83,1,0,0,0,86,88,1,0,0,0,87,85,1,0,0,0,88,89,5,39,0,0,
		89,90,5,39,0,0,90,92,5,39,0,0,91,45,1,0,0,0,91,54,1,0,0,0,91,63,1,0,0,
		0,91,77,1,0,0,0,92,6,1,0,0,0,93,136,5,82,0,0,94,98,5,34,0,0,95,97,9,0,
		0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,99,1,0,0,0,98,96,1,0,0,0,99,101,1,
		0,0,0,100,98,1,0,0,0,101,137,5,34,0,0,102,106,5,39,0,0,103,105,9,0,0,0,
		104,103,1,0,0,0,105,108,1,0,0,0,106,107,1,0,0,0,106,104,1,0,0,0,107,109,
		1,0,0,0,108,106,1,0,0,0,109,137,5,39,0,0,110,111,5,34,0,0,111,112,5,34,
		0,0,112,113,5,34,0,0,113,117,1,0,0,0,114,116,9,0,0,0,115,114,1,0,0,0,116,
		119,1,0,0,0,117,118,1,0,0,0,117,115,1,0,0,0,118,120,1,0,0,0,119,117,1,
		0,0,0,120,121,5,34,0,0,121,122,5,34,0,0,122,137,5,34,0,0,123,124,5,39,
		0,0,124,125,5,39,0,0,125,126,5,39,0,0,126,130,1,0,0,0,127,129,9,0,0,0,
		128,127,1,0,0,0,129,132,1,0,0,0,130,131,1,0,0,0,130,128,1,0,0,0,131,133,
		1,0,0,0,132,130,1,0,0,0,133,134,5,39,0,0,134,135,5,39,0,0,135,137,5,39,
		0,0,136,94,1,0,0,0,136,102,1,0,0,0,136,110,1,0,0,0,136,123,1,0,0,0,137,
		8,1,0,0,0,138,139,7,5,0,0,139,140,3,5,2,0,140,10,1,0,0,0,141,143,7,6,0,
		0,142,144,7,5,0,0,143,142,1,0,0,0,143,144,1,0,0,0,144,150,1,0,0,0,145,
		147,7,5,0,0,146,148,7,6,0,0,147,146,1,0,0,0,147,148,1,0,0,0,148,150,1,
		0,0,0,149,141,1,0,0,0,149,145,1,0,0,0,150,151,1,0,0,0,151,152,3,5,2,0,
		152,12,1,0,0,0,153,155,7,7,0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,168,
		1,0,0,0,156,157,5,48,0,0,157,159,7,8,0,0,158,160,3,23,11,0,159,158,1,0,
		0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,169,1,0,0,0,163,
		165,3,25,12,0,164,163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,
		1,0,0,0,167,169,1,0,0,0,168,156,1,0,0,0,168,164,1,0,0,0,169,14,1,0,0,0,
		170,172,7,7,0,0,171,170,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,174,
		3,27,13,0,174,176,5,46,0,0,175,177,3,27,13,0,176,175,1,0,0,0,176,177,1,
		0,0,0,177,183,1,0,0,0,178,180,5,69,0,0,179,181,7,7,0,0,180,179,1,0,0,0,
		180,181,1,0,0,0,181,182,1,0,0,0,182,184,3,27,13,0,183,178,1,0,0,0,183,
		184,1,0,0,0,184,208,1,0,0,0,185,187,7,7,0,0,186,185,1,0,0,0,186,187,1,
		0,0,0,187,189,1,0,0,0,188,190,3,27,13,0,189,188,1,0,0,0,189,190,1,0,0,
		0,190,191,1,0,0,0,191,192,5,46,0,0,192,198,3,27,13,0,193,195,5,69,0,0,
		194,196,7,7,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,197,199,
		3,27,13,0,198,193,1,0,0,0,198,199,1,0,0,0,199,208,1,0,0,0,200,201,3,27,
		13,0,201,203,5,69,0,0,202,204,7,7,0,0,203,202,1,0,0,0,203,204,1,0,0,0,
		204,205,1,0,0,0,205,206,3,27,13,0,206,208,1,0,0,0,207,171,1,0,0,0,207,
		186,1,0,0,0,207,200,1,0,0,0,208,16,1,0,0,0,209,210,9,0,0,0,210,18,1,0,
		0,0,211,212,5,92,0,0,212,244,7,9,0,0,213,214,5,92,0,0,214,215,3,21,10,
		0,215,216,3,21,10,0,216,217,3,21,10,0,217,244,1,0,0,0,218,219,5,92,0,0,
		219,220,7,8,0,0,220,221,3,23,11,0,221,222,3,23,11,0,222,244,1,0,0,0,223,
		224,5,92,0,0,224,225,5,117,0,0,225,226,1,0,0,0,226,227,3,23,11,0,227,228,
		3,23,11,0,228,229,3,23,11,0,229,230,3,23,11,0,230,244,1,0,0,0,231,232,
		5,92,0,0,232,233,5,85,0,0,233,234,1,0,0,0,234,235,3,23,11,0,235,236,3,
		23,11,0,236,237,3,23,11,0,237,238,3,23,11,0,238,239,3,23,11,0,239,240,
		3,23,11,0,240,241,3,23,11,0,241,242,3,23,11,0,242,244,1,0,0,0,243,211,
		1,0,0,0,243,213,1,0,0,0,243,218,1,0,0,0,243,223,1,0,0,0,243,231,1,0,0,
		0,244,20,1,0,0,0,245,246,7,10,0,0,246,22,1,0,0,0,247,248,7,11,0,0,248,
		24,1,0,0,0,249,250,7,12,0,0,250,26,1,0,0,0,251,253,3,25,12,0,252,251,1,
		0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,28,1,0,0,0,36,
		0,33,40,48,50,57,59,69,71,83,85,91,98,106,117,130,136,143,147,149,154,
		161,166,168,171,176,180,183,186,189,195,198,203,207,243,254,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BigO.BigQuery.Parser
