//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./BigQueryParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BigO.BigQuery.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BigQueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BNOT=1, CONCAT=2, SCOL=3, ARROW=4, BAND=5, BXOR=6, BOR=7, STAR=8, DIV=9, 
		PLUS=10, SUB=11, DOT=12, COMMA=13, OPAR=14, CPAR=15, OBR=16, CBR=17, LT=18, 
		GT=19, LTE=20, GTE=21, EQ=22, NEQ=23, ALL=24, AND=25, ANY=26, ARRAY=27, 
		AS=28, ASC=29, ASSERT_ROWS_MODIFIED=30, AT=31, BETWEEN=32, BY=33, CASE=34, 
		CAST=35, COLLATE=36, CONTAINS=37, CREATE=38, CROSS=39, CUBE=40, CURRENT=41, 
		DEFAULT=42, DEFINE=43, DESC=44, DISTINCT=45, ELSE=46, END=47, ENUM=48, 
		ESCAPE=49, EXCEPT=50, EXCLUDE=51, EXISTS=52, EXTRACT=53, FALSE=54, FETCH=55, 
		FOLLOWING=56, FOR=57, FROM=58, FULL=59, GROUP=60, GROUPING=61, GROUPS=62, 
		HASH=63, HAVING=64, IF=65, IGNORE=66, IN=67, INNER=68, INTERSECT=69, INTERVAL=70, 
		INTO=71, IS=72, JOIN=73, LATERAL=74, LEFT=75, LIKE=76, LIMIT=77, LOOKUP=78, 
		MERGE=79, NATURAL=80, NEW=81, NO=82, NOT=83, NULL=84, NULLS=85, OF=86, 
		ON=87, OR=88, ORDER=89, OUTER=90, OVER=91, PARTITION=92, PRECEDING=93, 
		PROTO=94, QUALIFY=95, RANGE=96, RECURSIVE=97, RESPECT=98, RIGHT=99, ROLLUP=100, 
		ROWS=101, SELECT=102, SET=103, SOME=104, STRUCT=105, TABLESAMPLE=106, 
		THEN=107, TO=108, TREAT=109, TRUE=110, UNBOUNDED=111, UNION=112, UNNEST=113, 
		USING=114, WHEN=115, WHERE=116, WINDOW=117, WITH=118, WITHIN=119, BIGNUMERIC=120, 
		DATE=121, DATETIME=122, NUMERIC=123, TIMESTAMP=124, YEAR=125, QUARTER=126, 
		MONTH=127, WEEK=128, DAY=129, HOUR=130, MINUTE=131, SECOND=132, MILLISECOND=133, 
		MICROSECOND=134, JSON=135, OFFSET=136, NAME=137, STRICT=138, CORRESPONDING=139, 
		DIFFERENTIAL_PRIVACY=140, OPTIONS=141, VALUE=142, REPLACE=143, SYSTEM=144, 
		PERCENT=145, PIVOT=146, UNPIVOT=147, SYSTEM_TIME=148, ROW=149, INCLUDE=150, 
		FORMAT=151, SETS=152, AVG=153, SCHEMA=154, TEMP=155, TEMPORARY=156, TABLE=157, 
		CONSTRAINT=158, ENFORCED=159, PRIMARY=160, KEY=161, FOREIGN=162, REFERENCES=163, 
		CLUSTER=164, CONNECTION=165, ARRAY_AGG=166, COPY=167, SNAPSHOT=168, CLONE=169, 
		VIEW=170, DROP=171, SEARCH=172, INDEX=173, VECTOR=174, ASSIGNMENT=175, 
		RESERVATION=176, CAPACITY=177, ACCESS=178, POLICY=179, POLICIES=180, PROCEDURE=181, 
		FUNCTION=182, EXTERNAL=183, MATERIALIZED=184, CASCADE=185, RESTRICT=186, 
		UNDROP=187, REPLICA=188, COLUMNS=189, RETURNS=190, DETERMINISTIC=191, 
		LANGUAGE=192, REMOTE=193, AGGREGATE=194, TYPE=195, OUT=196, INOUT=197, 
		BEGIN=198, SECURITY=199, INVOKER=200, COALESCE=201, NULLIF=202, IFNULL=203, 
		GRANT=204, FILTER=205, COLUMN=206, STORING=207, ALTER=208, ADD=209, RENAME=210, 
		DATA=211, ORGANIZATION=212, PROJECT=213, BI_CAPACITY=214, ANY_VALUE=215, 
		MAX=216, MIN=217, ARRAY_CONCAT_AGG=218, BIT_AND=219, BIT_OR=220, BIT_XOR=221, 
		COUNT=222, COUNTIF=223, LOGICAL_AND=224, LOGICAL_OR=225, MAX_BY=226, MIN_BY=227, 
		STRING_AGG=228, SUM=229, TIMEZONE=230, NAN=231, INF=232, UNQUOTED_IDENTIFIER=233, 
		QUOTED_IDENTIFIER=234, STRING_LITERAL=235, RAW_STRING_LITERAL=236, BYTES_LITERAL=237, 
		RAW_BYTES_LITERAL=238, INTEGER_LITERAL=239, FLOATING_POINT_LITERAL=240, 
		SPACES=241, COMMENT=242, UNEXPECTED=243;
	public const int
		RULE_statements = 0, RULE_single_statement = 1, RULE_statement = 2, RULE_ddl_statement = 3, 
		RULE_dml_statement = 4, RULE_dcl_statement = 5, RULE_procedural_statement = 6, 
		RULE_export_statement = 7, RULE_load_statement = 8, RULE_debugging_statement = 9, 
		RULE_declare = 10, RULE_query_statement = 11, RULE_create_table = 12, 
		RULE_create_table_like = 13, RULE_create_table_copy = 14, RULE_create_snapshot_table = 15, 
		RULE_create_table_clone = 16, RULE_create_view = 17, RULE_create_materialized_view = 18, 
		RULE_create_materialized_view_as_replica = 19, RULE_create_external_schema = 20, 
		RULE_create_external_table = 21, RULE_column_name_schemas = 22, RULE_column_name_schema = 23, 
		RULE_create_function = 24, RULE_named_parameters = 25, RULE_named_parameter = 26, 
		RULE_create_js_function = 27, RULE_create_py_function = 28, RULE_create_remote_function = 29, 
		RULE_create_aggregate_function = 30, RULE_function_parameters = 31, RULE_function_parameter = 32, 
		RULE_create_aggregate_js_function = 33, RULE_create_table_function = 34, 
		RULE_table_function_parameters = 35, RULE_table_function_parameter = 36, 
		RULE_column_declarations = 37, RULE_column_declaration = 38, RULE_create_procedure = 39, 
		RULE_procedure_arguments = 40, RULE_procedure_argument = 41, RULE_create_stored_procedure = 42, 
		RULE_create_row_access_policy = 43, RULE_create_capacity = 44, RULE_create_reservation = 45, 
		RULE_create_assignment = 46, RULE_create_search_index = 47, RULE_columns = 48, 
		RULE_column = 49, RULE_create_vector_index = 50, RULE_alter_schema_set_default_collate = 51, 
		RULE_alter_schema_set_options = 52, RULE_alter_schema_add_replica = 53, 
		RULE_alter_schema_drop_replica = 54, RULE_alter_table_set_options = 55, 
		RULE_alter_table_add_column = 56, RULE_alter_table_add_foreign_key = 57, 
		RULE_add_foreign_key = 58, RULE_alter_table_add_primary_key = 59, RULE_alter_table_rename = 60, 
		RULE_alter_table_rename_column = 61, RULE_rename_column = 62, RULE_column_to_column = 63, 
		RULE_alter_table_drop_column = 64, RULE_drop_column = 65, RULE_alter_table_drop_constraint = 66, 
		RULE_alter_table_drop_primary_key = 67, RULE_alter_table_set_default_collate = 68, 
		RULE_alter_table_column_set_options = 69, RULE_alter_table_column_drop_not_null = 70, 
		RULE_alter_table_column_set_data_type = 71, RULE_alter_table_column_set_default = 72, 
		RULE_alter_table_column_drop_default = 73, RULE_alter_view = 74, RULE_alter_materialized_view = 75, 
		RULE_alter_organization = 76, RULE_alter_project = 77, RULE_alter_bi_capacity = 78, 
		RULE_alter_capacity = 79, RULE_alter_reservation = 80, RULE_undrop_schema = 81, 
		RULE_drop_schema = 82, RULE_drop_table = 83, RULE_drop_snapshot_table = 84, 
		RULE_drop_external_table = 85, RULE_drop_view = 86, RULE_drop_materialized_view = 87, 
		RULE_drop_function = 88, RULE_drop_table_function = 89, RULE_drop_procedure = 90, 
		RULE_drop_row_access_policy = 91, RULE_drop_capacity = 92, RULE_drop_reservation = 93, 
		RULE_drop_assignment = 94, RULE_drop_search_index = 95, RULE_drop_vector_index = 96, 
		RULE_view_column_name_list = 97, RULE_view_column = 98, RULE_column_constraint_definitions = 99, 
		RULE_column_constraint_definition = 100, RULE_column_definition = 101, 
		RULE_primary_key = 102, RULE_foreign_key = 103, RULE_foreign_reference = 104, 
		RULE_create_schema = 105, RULE_query_expression = 106, RULE_query_expr_tail = 107, 
		RULE_set_operation_tail = 108, RULE_non_recursive_cte = 109, RULE_recursive_cte = 110, 
		RULE_recursive_union_operation = 111, RULE_select = 112, RULE_group_by_specification = 113, 
		RULE_grouping_sets_specification = 114, RULE_grouping_list = 115, RULE_grouping_list_item = 116, 
		RULE_cube_specification = 117, RULE_groupable_item_set = 118, RULE_rollup_specification = 119, 
		RULE_window_clause = 120, RULE_named_window_expression = 121, RULE_window_specification = 122, 
		RULE_window_frame_clause = 123, RULE_frame_start = 124, RULE_frame_between = 125, 
		RULE_frame_end_a = 126, RULE_frame_end_b = 127, RULE_frame_end_c = 128, 
		RULE_differential_privacy_clause = 129, RULE_from_clauses = 130, RULE_from_clause = 131, 
		RULE_from_item = 132, RULE_unnest_operator = 133, RULE_cross_join_operator = 134, 
		RULE_condition_join_operator = 135, RULE_join_condition = 136, RULE_on_clause = 137, 
		RULE_using_clause = 138, RULE_pivot_operator = 139, RULE_unpivot_operator = 140, 
		RULE_single_column_unpivot = 141, RULE_multi_column_unpivot = 142, RULE_columns_to_unpivot = 143, 
		RULE_column_sets_to_unpivot = 144, RULE_tablesample_operator = 145, RULE_option_parameters = 146, 
		RULE_option_parameter = 147, RULE_select_list = 148, RULE_select_list_item = 149, 
		RULE_select_all = 150, RULE_expression = 151, RULE_expressions = 152, 
		RULE_case_expression = 153, RULE_case_ = 154, RULE_coalesce = 155, RULE_if_ = 156, 
		RULE_ifnull = 157, RULE_nullif = 158, RULE_expressions_as_alias = 159, 
		RULE_expressions_asc_desc = 160, RULE_literal = 161, RULE_numeric_literal = 162, 
		RULE_big_numeric_literal = 163, RULE_array_literal = 164, RULE_struct_literal = 165, 
		RULE_data_type = 166, RULE_string_literal = 167, RULE_date_literal = 168, 
		RULE_datetime_literal = 169, RULE_timestamp_literal = 170, RULE_range_literal = 171, 
		RULE_interval_literal = 172, RULE_json_literal = 173, RULE_byte_literal = 174, 
		RULE_identifier = 175, RULE_as_alias = 176, RULE_function_call = 177, 
		RULE_function_name = 178, RULE_function_arguments = 179, RULE_function_expressions = 180, 
		RULE_function_expression = 181, RULE_optional_clauses = 182, RULE_limit_clause = 183, 
		RULE_order_by_keys = 184, RULE_order_by_key = 185, RULE_window_function = 186, 
		RULE_over_clause = 187, RULE_format_clause = 188, RULE_set = 189, RULE_path_expressions = 190, 
		RULE_path_expression = 191, RULE_as_column_names = 192, RULE_as_column_name = 193, 
		RULE_reserved = 194, RULE_datetime_part = 195;
	public static readonly string[] ruleNames = {
		"statements", "single_statement", "statement", "ddl_statement", "dml_statement", 
		"dcl_statement", "procedural_statement", "export_statement", "load_statement", 
		"debugging_statement", "declare", "query_statement", "create_table", "create_table_like", 
		"create_table_copy", "create_snapshot_table", "create_table_clone", "create_view", 
		"create_materialized_view", "create_materialized_view_as_replica", "create_external_schema", 
		"create_external_table", "column_name_schemas", "column_name_schema", 
		"create_function", "named_parameters", "named_parameter", "create_js_function", 
		"create_py_function", "create_remote_function", "create_aggregate_function", 
		"function_parameters", "function_parameter", "create_aggregate_js_function", 
		"create_table_function", "table_function_parameters", "table_function_parameter", 
		"column_declarations", "column_declaration", "create_procedure", "procedure_arguments", 
		"procedure_argument", "create_stored_procedure", "create_row_access_policy", 
		"create_capacity", "create_reservation", "create_assignment", "create_search_index", 
		"columns", "column", "create_vector_index", "alter_schema_set_default_collate", 
		"alter_schema_set_options", "alter_schema_add_replica", "alter_schema_drop_replica", 
		"alter_table_set_options", "alter_table_add_column", "alter_table_add_foreign_key", 
		"add_foreign_key", "alter_table_add_primary_key", "alter_table_rename", 
		"alter_table_rename_column", "rename_column", "column_to_column", "alter_table_drop_column", 
		"drop_column", "alter_table_drop_constraint", "alter_table_drop_primary_key", 
		"alter_table_set_default_collate", "alter_table_column_set_options", "alter_table_column_drop_not_null", 
		"alter_table_column_set_data_type", "alter_table_column_set_default", 
		"alter_table_column_drop_default", "alter_view", "alter_materialized_view", 
		"alter_organization", "alter_project", "alter_bi_capacity", "alter_capacity", 
		"alter_reservation", "undrop_schema", "drop_schema", "drop_table", "drop_snapshot_table", 
		"drop_external_table", "drop_view", "drop_materialized_view", "drop_function", 
		"drop_table_function", "drop_procedure", "drop_row_access_policy", "drop_capacity", 
		"drop_reservation", "drop_assignment", "drop_search_index", "drop_vector_index", 
		"view_column_name_list", "view_column", "column_constraint_definitions", 
		"column_constraint_definition", "column_definition", "primary_key", "foreign_key", 
		"foreign_reference", "create_schema", "query_expression", "query_expr_tail", 
		"set_operation_tail", "non_recursive_cte", "recursive_cte", "recursive_union_operation", 
		"select", "group_by_specification", "grouping_sets_specification", "grouping_list", 
		"grouping_list_item", "cube_specification", "groupable_item_set", "rollup_specification", 
		"window_clause", "named_window_expression", "window_specification", "window_frame_clause", 
		"frame_start", "frame_between", "frame_end_a", "frame_end_b", "frame_end_c", 
		"differential_privacy_clause", "from_clauses", "from_clause", "from_item", 
		"unnest_operator", "cross_join_operator", "condition_join_operator", "join_condition", 
		"on_clause", "using_clause", "pivot_operator", "unpivot_operator", "single_column_unpivot", 
		"multi_column_unpivot", "columns_to_unpivot", "column_sets_to_unpivot", 
		"tablesample_operator", "option_parameters", "option_parameter", "select_list", 
		"select_list_item", "select_all", "expression", "expressions", "case_expression", 
		"case_", "coalesce", "if_", "ifnull", "nullif", "expressions_as_alias", 
		"expressions_asc_desc", "literal", "numeric_literal", "big_numeric_literal", 
		"array_literal", "struct_literal", "data_type", "string_literal", "date_literal", 
		"datetime_literal", "timestamp_literal", "range_literal", "interval_literal", 
		"json_literal", "byte_literal", "identifier", "as_alias", "function_call", 
		"function_name", "function_arguments", "function_expressions", "function_expression", 
		"optional_clauses", "limit_clause", "order_by_keys", "order_by_key", "window_function", 
		"over_clause", "format_clause", "set", "path_expressions", "path_expression", 
		"as_column_names", "as_column_name", "reserved", "datetime_part"
	};

	private static readonly string[] _LiteralNames = {
		null, "'~'", "'||'", "';'", "'=>'", "'&'", "'^'", "'|'", "'*'", "'/'", 
		"'+'", "'-'", "'.'", "','", "'('", "')'", "'['", "']'", "'<'", "'>'", 
		"'<='", "'>='", "'='", null, "'ALL'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", 
		"'ASC'", "'ASSERT_ROWS_MODIFIED'", "'AT'", "'BETWEEN'", "'BY'", "'CASE'", 
		"'CAST'", "'COLLATE'", "'CONTAINS'", "'CREATE'", "'CROSS'", "'CUBE'", 
		"'CURRENT'", "'DEFAULT'", "'DEFINE'", "'DESC'", "'DISTINCT'", "'ELSE'", 
		"'END'", "'ENUM'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDE'", "'EXISTS'", "'EXTRACT'", 
		"'FALSE'", "'FETCH'", "'FOLLOWING'", "'FOR'", "'FROM'", "'FULL'", "'GROUP'", 
		"'GROUPING'", "'GROUPS'", "'HASH'", "'HAVING'", "'IF'", "'IGNORE'", "'IN'", 
		"'INNER'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'JOIN'", "'LATERAL'", 
		"'LEFT'", "'LIKE'", "'LIMIT'", "'LOOKUP'", "'MERGE'", "'NATURAL'", "'NEW'", 
		"'NO'", "'NOT'", "'NULL'", "'NULLS'", "'OF'", "'ON'", "'OR'", "'ORDER'", 
		"'OUTER'", "'OVER'", "'PARTITION'", "'PRECEDING'", "'PROTO'", "'QUALIFY'", 
		"'RANGE'", "'RECURSIVE'", "'RESPECT'", "'RIGHT'", "'ROLLUP'", "'ROWS'", 
		"'SELECT'", "'SET'", "'SOME'", "'STRUCT'", "'TABLESAMPLE'", "'THEN'", 
		"'TO'", "'TREAT'", "'TRUE'", "'UNBOUNDED'", "'UNION'", "'UNNEST'", "'USING'", 
		"'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'BIGNUMERIC'", 
		"'DATE'", "'DATETIME'", "'NUMERIC'", "'TIMESTAMP'", "'YEAR'", "'QUARTER'", 
		"'MONTH'", "'WEEK'", "'DAY'", "'HOUR'", "'MINUTE'", "'SECOND'", "'MILLISECOND'", 
		"'MICROSECOND'", "'JSON'", "'OFFSET'", "'NAME'", "'STRICT'", "'CORRESPONDING'", 
		"'DIFFERENTIAL_PRIVACY'", "'OPTIONS'", "'VALUE'", "'REPLACE'", "'SYSTEM'", 
		"'PERCENT'", "'PIVOT'", "'UNPIVOT'", "'SYSTEM_TIME'", "'ROW'", "'INCLUDE'", 
		"'FORMAT'", "'SETS'", "'AVG'", "'SCHEMA'", "'TEMP'", "'TEMPORARY'", "'TABLE'", 
		"'CONSTRAINT'", "'ENFORCED'", "'PRIMARY'", "'KEY'", "'FOREIGN'", "'REFERENCES'", 
		"'CLUSTER'", "'CONNECTION'", "'ARRAY_AGG'", "'COPY'", "'SNAPSHOT'", "'CLONE'", 
		"'VIEW'", "'DROP'", "'SEARCH'", "'INDEX'", "'VECTOR'", "'ASSIGNMENT'", 
		"'RESERVATION'", "'CAPACITY'", "'ACCESS'", "'POLICY'", "'POLICIES'", "'PROCEDURE'", 
		"'FUNCTION'", "'EXTERNAL'", "'MATERIALIZED'", "'CASCADE'", "'RESTRICT'", 
		"'UNDROP'", "'REPLICA'", "'COLUMNS'", "'RETURNS'", "'DETERMINISTIC'", 
		"'LANGUAGE'", "'REMOTE'", "'AGGREGATE'", "'TYPE'", "'OUT'", "'INOUT'", 
		"'BEGIN'", "'SECURITY'", "'INVOKER'", "'COALESCE'", "'NULLIF'", "'IFNULL'", 
		"'GRANT'", "'FILTER'", "'COLUMN'", "'STORING'", "'ALTER'", "'ADD'", "'RENAME'", 
		"'DATA'", "'ORGANIZATION'", "'PROJECT'", "'BI_CAPACITY'", "'ANY_VALUE'", 
		"'MAX'", "'MIN'", "'ARRAY_CONCAT_AGG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", 
		"'COUNT'", "'COUNTIF'", "'LOGICAL_AND'", "'LOGICAL_OR'", "'MAX_BY'", "'MIN_BY'", 
		"'STRING_AGG'", "'SUM'", "'TIMEZONE'", "'NAN'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BNOT", "CONCAT", "SCOL", "ARROW", "BAND", "BXOR", "BOR", "STAR", 
		"DIV", "PLUS", "SUB", "DOT", "COMMA", "OPAR", "CPAR", "OBR", "CBR", "LT", 
		"GT", "LTE", "GTE", "EQ", "NEQ", "ALL", "AND", "ANY", "ARRAY", "AS", "ASC", 
		"ASSERT_ROWS_MODIFIED", "AT", "BETWEEN", "BY", "CASE", "CAST", "COLLATE", 
		"CONTAINS", "CREATE", "CROSS", "CUBE", "CURRENT", "DEFAULT", "DEFINE", 
		"DESC", "DISTINCT", "ELSE", "END", "ENUM", "ESCAPE", "EXCEPT", "EXCLUDE", 
		"EXISTS", "EXTRACT", "FALSE", "FETCH", "FOLLOWING", "FOR", "FROM", "FULL", 
		"GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "IF", "IGNORE", "IN", 
		"INNER", "INTERSECT", "INTERVAL", "INTO", "IS", "JOIN", "LATERAL", "LEFT", 
		"LIKE", "LIMIT", "LOOKUP", "MERGE", "NATURAL", "NEW", "NO", "NOT", "NULL", 
		"NULLS", "OF", "ON", "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", 
		"PROTO", "QUALIFY", "RANGE", "RECURSIVE", "RESPECT", "RIGHT", "ROLLUP", 
		"ROWS", "SELECT", "SET", "SOME", "STRUCT", "TABLESAMPLE", "THEN", "TO", 
		"TREAT", "TRUE", "UNBOUNDED", "UNION", "UNNEST", "USING", "WHEN", "WHERE", 
		"WINDOW", "WITH", "WITHIN", "BIGNUMERIC", "DATE", "DATETIME", "NUMERIC", 
		"TIMESTAMP", "YEAR", "QUARTER", "MONTH", "WEEK", "DAY", "HOUR", "MINUTE", 
		"SECOND", "MILLISECOND", "MICROSECOND", "JSON", "OFFSET", "NAME", "STRICT", 
		"CORRESPONDING", "DIFFERENTIAL_PRIVACY", "OPTIONS", "VALUE", "REPLACE", 
		"SYSTEM", "PERCENT", "PIVOT", "UNPIVOT", "SYSTEM_TIME", "ROW", "INCLUDE", 
		"FORMAT", "SETS", "AVG", "SCHEMA", "TEMP", "TEMPORARY", "TABLE", "CONSTRAINT", 
		"ENFORCED", "PRIMARY", "KEY", "FOREIGN", "REFERENCES", "CLUSTER", "CONNECTION", 
		"ARRAY_AGG", "COPY", "SNAPSHOT", "CLONE", "VIEW", "DROP", "SEARCH", "INDEX", 
		"VECTOR", "ASSIGNMENT", "RESERVATION", "CAPACITY", "ACCESS", "POLICY", 
		"POLICIES", "PROCEDURE", "FUNCTION", "EXTERNAL", "MATERIALIZED", "CASCADE", 
		"RESTRICT", "UNDROP", "REPLICA", "COLUMNS", "RETURNS", "DETERMINISTIC", 
		"LANGUAGE", "REMOTE", "AGGREGATE", "TYPE", "OUT", "INOUT", "BEGIN", "SECURITY", 
		"INVOKER", "COALESCE", "NULLIF", "IFNULL", "GRANT", "FILTER", "COLUMN", 
		"STORING", "ALTER", "ADD", "RENAME", "DATA", "ORGANIZATION", "PROJECT", 
		"BI_CAPACITY", "ANY_VALUE", "MAX", "MIN", "ARRAY_CONCAT_AGG", "BIT_AND", 
		"BIT_OR", "BIT_XOR", "COUNT", "COUNTIF", "LOGICAL_AND", "LOGICAL_OR", 
		"MAX_BY", "MIN_BY", "STRING_AGG", "SUM", "TIMEZONE", "NAN", "INF", "UNQUOTED_IDENTIFIER", 
		"QUOTED_IDENTIFIER", "STRING_LITERAL", "RAW_STRING_LITERAL", "BYTES_LITERAL", 
		"RAW_BYTES_LITERAL", "INTEGER_LITERAL", "FLOATING_POINT_LITERAL", "SPACES", 
		"COMMENT", "UNEXPECTED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BigQueryParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BigQueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BigQueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BigQueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigQueryParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 0, RULE_statements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 392;
				Match(SCOL);
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 398;
			statement();
			State = 407;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 400;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 399;
						Match(SCOL);
						}
						}
						State = 402;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 404;
					statement();
					}
					} 
				}
				State = 409;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 410;
				Match(SCOL);
				}
				}
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 416;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigQueryParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_statementContext single_statement() {
		Single_statementContext _localctx = new Single_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_single_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 418;
				Match(SCOL);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 424;
			statement();
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 425;
				Match(SCOL);
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 431;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_statementContext ddl_statement() {
			return GetRuleContext<Ddl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dml_statementContext dml_statement() {
			return GetRuleContext<Dml_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dcl_statementContext dcl_statement() {
			return GetRuleContext<Dcl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_statementContext procedural_statement() {
			return GetRuleContext<Procedural_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_statementContext export_statement() {
			return GetRuleContext<Export_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Load_statementContext load_statement() {
			return GetRuleContext<Load_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Debugging_statementContext debugging_statement() {
			return GetRuleContext<Debugging_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433;
				query_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434;
				ddl_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 435;
				dml_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 436;
				dcl_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 437;
				procedural_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 438;
				export_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 439;
				load_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 440;
				debugging_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_likeContext create_table_like() {
			return GetRuleContext<Create_table_likeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_copyContext create_table_copy() {
			return GetRuleContext<Create_table_copyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_snapshot_tableContext create_snapshot_table() {
			return GetRuleContext<Create_snapshot_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_cloneContext create_table_clone() {
			return GetRuleContext<Create_table_cloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_materialized_viewContext create_materialized_view() {
			return GetRuleContext<Create_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_materialized_view_as_replicaContext create_materialized_view_as_replica() {
			return GetRuleContext<Create_materialized_view_as_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_schemaContext create_external_schema() {
			return GetRuleContext<Create_external_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_tableContext create_external_table() {
			return GetRuleContext<Create_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_functionContext create_function() {
			return GetRuleContext<Create_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_js_functionContext create_js_function() {
			return GetRuleContext<Create_js_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_py_functionContext create_py_function() {
			return GetRuleContext<Create_py_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_remote_functionContext create_remote_function() {
			return GetRuleContext<Create_remote_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_aggregate_functionContext create_aggregate_function() {
			return GetRuleContext<Create_aggregate_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_aggregate_js_functionContext create_aggregate_js_function() {
			return GetRuleContext<Create_aggregate_js_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_functionContext create_table_function() {
			return GetRuleContext<Create_table_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_procedureContext create_procedure() {
			return GetRuleContext<Create_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_stored_procedureContext create_stored_procedure() {
			return GetRuleContext<Create_stored_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_row_access_policyContext create_row_access_policy() {
			return GetRuleContext<Create_row_access_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_capacityContext create_capacity() {
			return GetRuleContext<Create_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_reservationContext create_reservation() {
			return GetRuleContext<Create_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_assignmentContext create_assignment() {
			return GetRuleContext<Create_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_search_indexContext create_search_index() {
			return GetRuleContext<Create_search_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_vector_indexContext create_vector_index() {
			return GetRuleContext<Create_vector_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_set_default_collateContext alter_schema_set_default_collate() {
			return GetRuleContext<Alter_schema_set_default_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_set_optionsContext alter_schema_set_options() {
			return GetRuleContext<Alter_schema_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_add_replicaContext alter_schema_add_replica() {
			return GetRuleContext<Alter_schema_add_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_drop_replicaContext alter_schema_drop_replica() {
			return GetRuleContext<Alter_schema_drop_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_optionsContext alter_table_set_options() {
			return GetRuleContext<Alter_table_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_foreign_keyContext alter_table_add_foreign_key() {
			return GetRuleContext<Alter_table_add_foreign_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_primary_keyContext alter_table_add_primary_key() {
			return GetRuleContext<Alter_table_add_primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_renameContext alter_table_rename() {
			return GetRuleContext<Alter_table_renameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_rename_columnContext alter_table_rename_column() {
			return GetRuleContext<Alter_table_rename_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_constraintContext alter_table_drop_constraint() {
			return GetRuleContext<Alter_table_drop_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_primary_keyContext alter_table_drop_primary_key() {
			return GetRuleContext<Alter_table_drop_primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_default_collateContext alter_table_set_default_collate() {
			return GetRuleContext<Alter_table_set_default_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_optionsContext alter_table_column_set_options() {
			return GetRuleContext<Alter_table_column_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_drop_not_nullContext alter_table_column_drop_not_null() {
			return GetRuleContext<Alter_table_column_drop_not_nullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_data_typeContext alter_table_column_set_data_type() {
			return GetRuleContext<Alter_table_column_set_data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_defaultContext alter_table_column_set_default() {
			return GetRuleContext<Alter_table_column_set_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_drop_defaultContext alter_table_column_drop_default() {
			return GetRuleContext<Alter_table_column_drop_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_viewContext alter_view() {
			return GetRuleContext<Alter_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_materialized_viewContext alter_materialized_view() {
			return GetRuleContext<Alter_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_organizationContext alter_organization() {
			return GetRuleContext<Alter_organizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_projectContext alter_project() {
			return GetRuleContext<Alter_projectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_bi_capacityContext alter_bi_capacity() {
			return GetRuleContext<Alter_bi_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_capacityContext alter_capacity() {
			return GetRuleContext<Alter_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_reservationContext alter_reservation() {
			return GetRuleContext<Alter_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Undrop_schemaContext undrop_schema() {
			return GetRuleContext<Undrop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_snapshot_tableContext drop_snapshot_table() {
			return GetRuleContext<Drop_snapshot_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_materialized_viewContext drop_materialized_view() {
			return GetRuleContext<Drop_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_functionContext drop_table_function() {
			return GetRuleContext<Drop_table_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_row_access_policyContext drop_row_access_policy() {
			return GetRuleContext<Drop_row_access_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_capacityContext drop_capacity() {
			return GetRuleContext<Drop_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_reservationContext drop_reservation() {
			return GetRuleContext<Drop_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_assignmentContext drop_assignment() {
			return GetRuleContext<Drop_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_search_indexContext drop_search_index() {
			return GetRuleContext<Drop_search_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_vector_indexContext drop_vector_index() {
			return GetRuleContext<Drop_vector_indexContext>(0);
		}
		public Ddl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDdl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDdl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_statementContext ddl_statement() {
		Ddl_statementContext _localctx = new Ddl_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_ddl_statement);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443;
				create_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444;
				create_table();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 445;
				create_table_like();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 446;
				create_table_copy();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 447;
				create_snapshot_table();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 448;
				create_table_clone();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 449;
				create_view();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 450;
				create_materialized_view();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 451;
				create_materialized_view_as_replica();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 452;
				create_external_schema();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 453;
				create_external_table();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 454;
				create_function();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 455;
				create_js_function();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 456;
				create_py_function();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 457;
				create_remote_function();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 458;
				create_aggregate_function();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 459;
				create_aggregate_js_function();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 460;
				create_table_function();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 461;
				create_procedure();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 462;
				create_stored_procedure();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 463;
				create_row_access_policy();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 464;
				create_capacity();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 465;
				create_reservation();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 466;
				create_assignment();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 467;
				create_search_index();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 468;
				create_vector_index();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 469;
				alter_schema_set_default_collate();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 470;
				alter_schema_set_options();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 471;
				alter_schema_add_replica();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 472;
				alter_schema_drop_replica();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 473;
				alter_table_set_options();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 474;
				alter_table_add_column();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 475;
				alter_table_add_foreign_key();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 476;
				alter_table_add_primary_key();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 477;
				alter_table_rename();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 478;
				alter_table_rename_column();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 479;
				alter_table_drop_column();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 480;
				alter_table_drop_constraint();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 481;
				alter_table_drop_primary_key();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 482;
				alter_table_set_default_collate();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 483;
				alter_table_column_set_options();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 484;
				alter_table_column_drop_not_null();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 485;
				alter_table_column_set_data_type();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 486;
				alter_table_column_set_default();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 487;
				alter_table_column_drop_default();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 488;
				alter_view();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 489;
				alter_materialized_view();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 490;
				alter_organization();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 491;
				alter_project();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 492;
				alter_bi_capacity();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 493;
				alter_capacity();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 494;
				alter_reservation();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 495;
				undrop_schema();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 496;
				drop_schema();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 497;
				drop_table();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 498;
				drop_snapshot_table();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 499;
				drop_external_table();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 500;
				drop_view();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 501;
				drop_materialized_view();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 502;
				drop_function();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 503;
				drop_table_function();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 504;
				drop_procedure();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 505;
				drop_row_access_policy();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 506;
				drop_capacity();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 507;
				drop_reservation();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 508;
				drop_assignment();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 509;
				drop_search_index();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 510;
				drop_vector_index();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dml_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDml_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDml_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_statementContext dml_statement() {
		Dml_statementContext _localctx = new Dml_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_dml_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dcl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dcl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDcl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDcl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dcl_statementContext dcl_statement() {
		Dcl_statementContext _localctx = new Dcl_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_dcl_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedural_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public Procedural_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedural_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedural_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedural_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedural_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedural_statementContext procedural_statement() {
		Procedural_statementContext _localctx = new Procedural_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_procedural_statement);
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517;
				declare();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 518;
				set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Export_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_statementContext export_statement() {
		Export_statementContext _localctx = new Export_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_export_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Load_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLoad_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLoad_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_statementContext load_statement() {
		Load_statementContext _localctx = new Load_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_load_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Debugging_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Debugging_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debugging_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDebugging_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDebugging_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebugging_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Debugging_statementContext debugging_statement() {
		Debugging_statementContext _localctx = new Debugging_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_debugging_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 20, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Query_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_statementContext query_statement() {
		Query_statementContext _localctx = new Query_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_query_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionsContext column_constraint_definitions() {
			return GetRuleContext<Column_constraint_definitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 24, RULE_create_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(CREATE);
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 532;
				Match(OR);
				State = 533;
				Match(REPLACE);
				}
			}

			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 536;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 539;
			Match(TABLE);
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 540;
				Match(IF);
				State = 541;
				Match(NOT);
				State = 542;
				Match(EXISTS);
				}
			}

			State = 545;
			_localctx.table_name = path_expression();
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 546;
				Match(OPAR);
				State = 547;
				column_constraint_definitions();
				State = 548;
				Match(CPAR);
				}
			}

			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 552;
				Match(DEFAULT);
				State = 553;
				Match(COLLATE);
				State = 554;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 557;
				Match(PARTITION);
				State = 558;
				Match(BY);
				State = 559;
				expression(0);
				}
			}

			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 562;
				Match(CLUSTER);
				State = 563;
				Match(BY);
				State = 564;
				path_expressions();
				}
			}

			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 567;
				Match(WITH);
				State = 568;
				Match(CONNECTION);
				State = 569;
				_localctx.connection_name = identifier();
				}
			}

			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 572;
				Match(OPTIONS);
				State = 573;
				Match(OPAR);
				State = 574;
				option_parameters();
				State = 575;
				Match(CPAR);
				}
			}

			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 579;
				Match(AS);
				State = 580;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_likeContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_table_likeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_like(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_likeContext create_table_like() {
		Create_table_likeContext _localctx = new Create_table_likeContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_table_like);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(CREATE);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 584;
				Match(OR);
				State = 585;
				Match(REPLACE);
				}
			}

			State = 588;
			Match(TABLE);
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 589;
				Match(IF);
				State = 590;
				Match(NOT);
				State = 591;
				Match(EXISTS);
				}
			}

			State = 594;
			_localctx.table_name = path_expression();
			State = 595;
			Match(LIKE);
			State = 604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 599;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 596;
					_localctx.project_name = identifier();
					State = 597;
					Match(DOT);
					}
					break;
				}
				State = 601;
				_localctx.dataset_name = identifier();
				State = 602;
				Match(DOT);
				}
				break;
			}
			State = 606;
			_localctx.source_table_name = identifier();
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 607;
				Match(DEFAULT);
				State = 608;
				Match(COLLATE);
				State = 609;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 612;
				Match(PARTITION);
				State = 613;
				Match(BY);
				State = 614;
				expression(0);
				}
			}

			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 617;
				Match(CLUSTER);
				State = 618;
				Match(BY);
				State = 619;
				path_expressions();
				}
			}

			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 622;
				Match(WITH);
				State = 623;
				Match(CONNECTION);
				State = 624;
				_localctx.connection_name = identifier();
				}
			}

			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 627;
				Match(OPTIONS);
				State = 628;
				Match(OPAR);
				State = 629;
				option_parameters();
				State = 630;
				Match(CPAR);
				}
			}

			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 634;
				Match(AS);
				State = 635;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_copyContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Path_expressionContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(BigQueryParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_table_copyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_copy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_copy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_copy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_copy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_copyContext create_table_copy() {
		Create_table_copyContext _localctx = new Create_table_copyContext(Context, State);
		EnterRule(_localctx, 28, RULE_create_table_copy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			Match(CREATE);
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 639;
				Match(OR);
				State = 640;
				Match(REPLACE);
				}
			}

			State = 643;
			Match(TABLE);
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 644;
				Match(IF);
				State = 645;
				Match(NOT);
				State = 646;
				Match(EXISTS);
				}
			}

			State = 649;
			_localctx.table_name = path_expression();
			State = 650;
			Match(COPY);
			State = 651;
			_localctx.source_table_name = path_expression();
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 652;
				Match(DEFAULT);
				State = 653;
				Match(COLLATE);
				State = 654;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 657;
				Match(PARTITION);
				State = 658;
				Match(BY);
				State = 659;
				expression(0);
				}
			}

			State = 665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 662;
				Match(CLUSTER);
				State = 663;
				Match(BY);
				State = 664;
				path_expressions();
				}
			}

			State = 670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 667;
				Match(WITH);
				State = 668;
				Match(CONNECTION);
				State = 669;
				_localctx.connection_name = identifier();
				}
			}

			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 672;
				Match(OPTIONS);
				State = 673;
				Match(OPAR);
				State = 674;
				option_parameters();
				State = 675;
				Match(CPAR);
				}
			}

			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 679;
				Match(AS);
				State = 680;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_snapshot_tableContext : ParserRuleContext {
		public Path_expressionContext table_snapshot_name;
		public Path_expressionContext source_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_snapshot_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_snapshot_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_snapshot_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_snapshot_tableContext create_snapshot_table() {
		Create_snapshot_tableContext _localctx = new Create_snapshot_tableContext(Context, State);
		EnterRule(_localctx, 30, RULE_create_snapshot_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(CREATE);
			State = 684;
			Match(SNAPSHOT);
			State = 685;
			Match(TABLE);
			State = 689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 686;
				Match(IF);
				State = 687;
				Match(NOT);
				State = 688;
				Match(EXISTS);
				}
			}

			State = 691;
			_localctx.table_snapshot_name = path_expression();
			State = 692;
			Match(CLONE);
			State = 693;
			_localctx.source_table_name = path_expression();
			State = 699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 694;
				Match(FOR);
				State = 695;
				Match(SYSTEM_TIME);
				State = 696;
				Match(AS);
				State = 697;
				Match(OF);
				State = 698;
				expression(0);
				}
			}

			State = 706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 701;
				Match(OPTIONS);
				State = 702;
				Match(OPAR);
				State = 703;
				option_parameters();
				State = 704;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_cloneContext : ParserRuleContext {
		public Path_expressionContext destination_table_name;
		public Path_expressionContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(BigQueryParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(BigQueryParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_table_cloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_clone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_clone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_clone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_clone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_cloneContext create_table_clone() {
		Create_table_cloneContext _localctx = new Create_table_cloneContext(Context, State);
		EnterRule(_localctx, 32, RULE_create_table_clone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(CREATE);
			State = 709;
			Match(TABLE);
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 710;
				Match(IF);
				State = 711;
				Match(NOT);
				State = 712;
				Match(EXISTS);
				}
			}

			State = 715;
			_localctx.destination_table_name = path_expression();
			State = 716;
			Match(CLONE);
			State = 717;
			_localctx.source_table_name = path_expression();
			State = 723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 718;
				Match(FOR);
				State = 719;
				Match(SYSTEM_TIME);
				State = 720;
				Match(AS);
				State = 721;
				Match(OF);
				State = 722;
				expression(0);
				}
			}

			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 725;
				Match(DEFAULT);
				State = 726;
				Match(COLLATE);
				State = 727;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 730;
				Match(PARTITION);
				State = 731;
				Match(BY);
				State = 732;
				expression(0);
				}
			}

			State = 738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 735;
				Match(CLUSTER);
				State = 736;
				Match(BY);
				State = 737;
				path_expressions();
				}
			}

			State = 743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 740;
				Match(WITH);
				State = 741;
				Match(CONNECTION);
				State = 742;
				_localctx.connection_name = identifier();
				}
			}

			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 745;
				Match(OPTIONS);
				State = 746;
				Match(OPAR);
				State = 747;
				option_parameters();
				State = 748;
				Match(CPAR);
				}
			}

			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 752;
				Match(AS);
				State = 753;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public Path_expressionContext view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_column_name_listContext view_column_name_list() {
			return GetRuleContext<View_column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 34, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			Match(CREATE);
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 757;
				Match(OR);
				State = 758;
				Match(REPLACE);
				}
			}

			State = 761;
			Match(VIEW);
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 762;
				Match(IF);
				State = 763;
				Match(NOT);
				State = 764;
				Match(EXISTS);
				}
			}

			State = 767;
			_localctx.view_name = path_expression();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 768;
				Match(OPAR);
				State = 769;
				view_column_name_list();
				State = 770;
				Match(CPAR);
				}
			}

			State = 779;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 774;
				Match(OPTIONS);
				State = 775;
				Match(OPAR);
				State = 776;
				option_parameters();
				State = 777;
				Match(CPAR);
				}
			}

			State = 781;
			Match(AS);
			State = 782;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_materialized_viewContext : ParserRuleContext {
		public Path_expressionContext materialized_view_name;
		public Path_expressionsContext clustering_column_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Create_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_materialized_viewContext create_materialized_view() {
		Create_materialized_viewContext _localctx = new Create_materialized_viewContext(Context, State);
		EnterRule(_localctx, 36, RULE_create_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(CREATE);
			State = 787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 785;
				Match(OR);
				State = 786;
				Match(REPLACE);
				}
			}

			State = 789;
			Match(MATERIALIZED);
			State = 790;
			Match(VIEW);
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 791;
				Match(IF);
				State = 792;
				Match(NOT);
				State = 793;
				Match(EXISTS);
				}
			}

			State = 796;
			_localctx.materialized_view_name = path_expression();
			State = 800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 797;
				Match(PARTITION);
				State = 798;
				Match(BY);
				State = 799;
				expression(0);
				}
			}

			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 802;
				Match(CLUSTER);
				State = 803;
				Match(BY);
				State = 804;
				_localctx.clustering_column_list = path_expressions();
				}
			}

			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 807;
				Match(OPTIONS);
				State = 808;
				Match(OPAR);
				State = 809;
				option_parameters();
				State = 810;
				Match(CPAR);
				}
			}

			State = 814;
			Match(AS);
			State = 815;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_materialized_view_as_replicaContext : ParserRuleContext {
		public Path_expressionContext replica_name;
		public Path_expressionContext source_materialized_view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_materialized_view_as_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_materialized_view_as_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_materialized_view_as_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_materialized_view_as_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_materialized_view_as_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_materialized_view_as_replicaContext create_materialized_view_as_replica() {
		Create_materialized_view_as_replicaContext _localctx = new Create_materialized_view_as_replicaContext(Context, State);
		EnterRule(_localctx, 38, RULE_create_materialized_view_as_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(CREATE);
			State = 818;
			Match(MATERIALIZED);
			State = 819;
			Match(VIEW);
			State = 820;
			_localctx.replica_name = path_expression();
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 821;
				Match(OPTIONS);
				State = 822;
				Match(OPAR);
				State = 823;
				option_parameters();
				State = 824;
				Match(CPAR);
				}
			}

			State = 828;
			Match(AS);
			State = 829;
			Match(REPLICA);
			State = 830;
			Match(OF);
			State = 831;
			_localctx.source_materialized_view_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_schemaContext : ParserRuleContext {
		public Path_expressionContext dataset_name;
		public Path_expressionContext connection_namepath_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_external_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_schemaContext create_external_schema() {
		Create_external_schemaContext _localctx = new Create_external_schemaContext(Context, State);
		EnterRule(_localctx, 40, RULE_create_external_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(CREATE);
			State = 834;
			Match(EXTERNAL);
			State = 835;
			Match(SCHEMA);
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 836;
				Match(IF);
				State = 837;
				Match(NOT);
				State = 838;
				Match(EXISTS);
				}
			}

			State = 841;
			_localctx.dataset_name = path_expression();
			State = 845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 842;
				Match(WITH);
				State = 843;
				Match(CONNECTION);
				State = 844;
				_localctx.connection_namepath_expression = path_expression();
				}
			}

			State = 852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 847;
				Match(OPTIONS);
				State = 848;
				Match(OPAR);
				State = 849;
				option_parameters();
				State = 850;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_tableContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Column_name_schemasContext column_names;
		public IdentifierContext connection_name;
		public Column_name_schemasContext partition_columns;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(BigQueryParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(BigQueryParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext[] column_name_schemas() {
			return GetRuleContexts<Column_name_schemasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext column_name_schemas(int i) {
			return GetRuleContext<Column_name_schemasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_tableContext create_external_table() {
		Create_external_tableContext _localctx = new Create_external_tableContext(Context, State);
		EnterRule(_localctx, 42, RULE_create_external_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			Match(CREATE);
			State = 857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 855;
				Match(OR);
				State = 856;
				Match(REPLACE);
				}
			}

			State = 859;
			Match(EXTERNAL);
			State = 860;
			Match(TABLE);
			State = 864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 861;
				Match(IF);
				State = 862;
				Match(NOT);
				State = 863;
				Match(EXISTS);
				}
			}

			State = 866;
			_localctx.table_name = path_expression();
			State = 871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 867;
				Match(OPAR);
				State = 868;
				_localctx.column_names = column_name_schemas();
				State = 869;
				Match(CPAR);
				}
			}

			State = 879;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 873;
				Match(WITH);
				State = 874;
				Match(CONNECTION);
				State = 877;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BIGNUMERIC:
				case DATE:
				case DATETIME:
				case NUMERIC:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MILLISECOND:
				case MICROSECOND:
				case JSON:
				case OFFSET:
				case NAME:
				case STRICT:
				case CORRESPONDING:
				case DIFFERENTIAL_PRIVACY:
				case OPTIONS:
				case VALUE:
				case REPLACE:
				case SYSTEM:
				case PERCENT:
				case PIVOT:
				case UNPIVOT:
				case SYSTEM_TIME:
				case ROW:
				case INCLUDE:
				case FORMAT:
				case SETS:
				case AVG:
				case SCHEMA:
				case TEMP:
				case TEMPORARY:
				case TABLE:
				case CONSTRAINT:
				case ENFORCED:
				case PRIMARY:
				case KEY:
				case FOREIGN:
				case REFERENCES:
				case CLUSTER:
				case CONNECTION:
				case ARRAY_AGG:
				case COPY:
				case SNAPSHOT:
				case CLONE:
				case VIEW:
				case DROP:
				case SEARCH:
				case INDEX:
				case VECTOR:
				case ASSIGNMENT:
				case RESERVATION:
				case ACCESS:
				case POLICY:
				case POLICIES:
				case PROCEDURE:
				case FUNCTION:
				case REPLICA:
				case COLUMNS:
				case RETURNS:
				case DETERMINISTIC:
				case LANGUAGE:
				case REMOTE:
				case AGGREGATE:
				case TYPE:
				case OUT:
				case INOUT:
				case BEGIN:
				case SECURITY:
				case INVOKER:
				case COALESCE:
				case NULLIF:
				case IFNULL:
				case GRANT:
				case FILTER:
				case COLUMN:
				case STORING:
				case ALTER:
				case ADD:
				case RENAME:
				case DATA:
				case ORGANIZATION:
				case PROJECT:
				case BI_CAPACITY:
				case ANY_VALUE:
				case MAX:
				case MIN:
				case ARRAY_CONCAT_AGG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case COUNTIF:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case MAX_BY:
				case MIN_BY:
				case STRING_AGG:
				case SUM:
				case UNQUOTED_IDENTIFIER:
				case QUOTED_IDENTIFIER:
					{
					State = 875;
					_localctx.connection_name = identifier();
					}
					break;
				case DEFAULT:
					{
					State = 876;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 881;
				Match(WITH);
				State = 882;
				Match(PARTITION);
				State = 883;
				Match(COLUMNS);
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPAR) {
					{
					State = 884;
					Match(OPAR);
					State = 885;
					_localctx.partition_columns = column_name_schemas();
					State = 886;
					Match(CPAR);
					}
				}

				}
			}

			State = 892;
			Match(OPTIONS);
			State = 893;
			Match(OPAR);
			State = 894;
			option_parameters();
			State = 895;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_schemasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemaContext[] column_name_schema() {
			return GetRuleContexts<Column_name_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemaContext column_name_schema(int i) {
			return GetRuleContext<Column_name_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_name_schemasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_schemas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_schemas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_schemas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_schemas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_schemasContext column_name_schemas() {
		Column_name_schemasContext _localctx = new Column_name_schemasContext(Context, State);
		EnterRule(_localctx, 44, RULE_column_name_schemas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			column_name_schema();
			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 898;
				Match(COMMA);
				State = 899;
				column_name_schema();
				}
				}
				State = 904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_schemaContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Column_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_schemaContext column_name_schema() {
		Column_name_schemaContext _localctx = new Column_name_schemaContext(Context, State);
		EnterRule(_localctx, 46, RULE_column_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			_localctx.column_name = identifier();
			State = 906;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_functionContext create_function() {
		Create_functionContext _localctx = new Create_functionContext(Context, State);
		EnterRule(_localctx, 48, RULE_create_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			Match(CREATE);
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 909;
				Match(OR);
				State = 910;
				Match(REPLACE);
				}
			}

			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 913;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 916;
			Match(FUNCTION);
			State = 920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 917;
				Match(IF);
				State = 918;
				Match(NOT);
				State = 919;
				Match(EXISTS);
				}
			}

			State = 930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 925;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 922;
					_localctx.project_name = identifier();
					State = 923;
					Match(DOT);
					}
					break;
				}
				State = 927;
				_localctx.dataset_name = identifier();
				State = 928;
				Match(DOT);
				}
				break;
			}
			State = 932;
			identifier();
			State = 933;
			Match(OPAR);
			State = 935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 934;
				named_parameters();
				}
			}

			State = 937;
			Match(CPAR);
			State = 940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 938;
				Match(RETURNS);
				State = 939;
				data_type();
				}
			}

			State = 942;
			Match(AS);
			State = 943;
			Match(OPAR);
			State = 944;
			expression(0);
			State = 945;
			Match(CPAR);
			State = 951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 946;
				Match(OPTIONS);
				State = 947;
				Match(OPAR);
				State = 948;
				option_parameters();
				State = 949;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_parameterContext[] named_parameter() {
			return GetRuleContexts<Named_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parameterContext named_parameter(int i) {
			return GetRuleContext<Named_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Named_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_parametersContext named_parameters() {
		Named_parametersContext _localctx = new Named_parametersContext(Context, State);
		EnterRule(_localctx, 50, RULE_named_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			named_parameter();
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 954;
				Match(COMMA);
				State = 955;
				named_parameter();
				}
				}
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_parameterContext : ParserRuleContext {
		public IdentifierContext param_name;
		public Data_typeContext param_type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Named_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_parameterContext named_parameter() {
		Named_parameterContext _localctx = new Named_parameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_named_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			_localctx.param_name = identifier();
			State = 962;
			_localctx.param_type = data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_js_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext javascript_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(BigQueryParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_js_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_js_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_js_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_js_functionContext create_js_function() {
		Create_js_functionContext _localctx = new Create_js_functionContext(Context, State);
		EnterRule(_localctx, 54, RULE_create_js_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964;
			Match(CREATE);
			State = 967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 965;
				Match(OR);
				State = 966;
				Match(REPLACE);
				}
			}

			State = 970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 969;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 972;
			Match(FUNCTION);
			State = 976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 973;
				Match(IF);
				State = 974;
				Match(NOT);
				State = 975;
				Match(EXISTS);
				}
			}

			State = 986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 981;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 978;
					_localctx.project_name = identifier();
					State = 979;
					Match(DOT);
					}
					break;
				}
				State = 983;
				_localctx.dataset_name = identifier();
				State = 984;
				Match(DOT);
				}
				break;
			}
			State = 988;
			identifier();
			State = 989;
			Match(OPAR);
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 990;
				named_parameters();
				}
			}

			State = 993;
			Match(CPAR);
			State = 994;
			Match(RETURNS);
			State = 995;
			data_type();
			State = 999;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DETERMINISTIC:
				{
				State = 996;
				Match(DETERMINISTIC);
				}
				break;
			case NOT:
				{
				State = 997;
				Match(NOT);
				State = 998;
				Match(DETERMINISTIC);
				}
				break;
			case LANGUAGE:
				break;
			default:
				break;
			}
			State = 1001;
			Match(LANGUAGE);
			State = 1002;
			identifier();
			State = 1008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1003;
				Match(OPTIONS);
				State = 1004;
				Match(OPAR);
				State = 1005;
				option_parameters();
				State = 1006;
				Match(CPAR);
				}
			}

			State = 1010;
			Match(AS);
			State = 1011;
			_localctx.javascript_code = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_py_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext connection_path;
		public String_literalContext python_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Create_py_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_py_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_py_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_py_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_py_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_py_functionContext create_py_function() {
		Create_py_functionContext _localctx = new Create_py_functionContext(Context, State);
		EnterRule(_localctx, 56, RULE_create_py_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			Match(CREATE);
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1014;
				Match(OR);
				State = 1015;
				Match(REPLACE);
				}
			}

			State = 1019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1018;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1021;
			Match(FUNCTION);
			State = 1025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1022;
				Match(IF);
				State = 1023;
				Match(NOT);
				State = 1024;
				Match(EXISTS);
				}
			}

			State = 1035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1030;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 1027;
					_localctx.project_name = identifier();
					State = 1028;
					Match(DOT);
					}
					break;
				}
				State = 1032;
				_localctx.dataset_name = identifier();
				State = 1033;
				Match(DOT);
				}
				break;
			}
			State = 1037;
			identifier();
			State = 1038;
			Match(OPAR);
			State = 1040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 1039;
				named_parameters();
				}
			}

			State = 1042;
			Match(CPAR);
			State = 1043;
			Match(RETURNS);
			State = 1044;
			data_type();
			State = 1045;
			Match(LANGUAGE);
			State = 1046;
			identifier();
			State = 1050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1047;
				Match(WITH);
				State = 1048;
				Match(CONNECTION);
				State = 1049;
				_localctx.connection_path = path_expression();
				}
			}

			State = 1052;
			Match(OPTIONS);
			State = 1053;
			Match(OPAR);
			State = 1054;
			option_parameters();
			State = 1055;
			Match(CPAR);
			State = 1056;
			Match(AS);
			State = 1057;
			_localctx.python_code = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext connection_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_remote_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_remote_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_functionContext create_remote_function() {
		Create_remote_functionContext _localctx = new Create_remote_functionContext(Context, State);
		EnterRule(_localctx, 58, RULE_create_remote_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			Match(CREATE);
			State = 1062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1060;
				Match(OR);
				State = 1061;
				Match(REPLACE);
				}
			}

			State = 1065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1064;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1067;
			Match(FUNCTION);
			State = 1071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1068;
				Match(IF);
				State = 1069;
				Match(NOT);
				State = 1070;
				Match(EXISTS);
				}
			}

			State = 1081;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 1076;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 1073;
					_localctx.project_name = identifier();
					State = 1074;
					Match(DOT);
					}
					break;
				}
				State = 1078;
				_localctx.dataset_name = identifier();
				State = 1079;
				Match(DOT);
				}
				break;
			}
			State = 1083;
			identifier();
			State = 1084;
			Match(OPAR);
			State = 1086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 1085;
				named_parameters();
				}
			}

			State = 1088;
			Match(CPAR);
			State = 1089;
			Match(RETURNS);
			State = 1090;
			data_type();
			State = 1091;
			Match(REMOTE);
			State = 1092;
			Match(WITH);
			State = 1093;
			Match(CONNECTION);
			State = 1094;
			_localctx.connection_path = path_expression();
			State = 1100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1095;
				Match(OPTIONS);
				State = 1096;
				Match(OPAR);
				State = 1097;
				option_parameters();
				State = 1098;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_aggregate_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_aggregate_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_aggregate_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_aggregate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_aggregate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_aggregate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_aggregate_functionContext create_aggregate_function() {
		Create_aggregate_functionContext _localctx = new Create_aggregate_functionContext(Context, State);
		EnterRule(_localctx, 60, RULE_create_aggregate_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			Match(CREATE);
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1103;
				Match(OR);
				State = 1104;
				Match(REPLACE);
				}
			}

			State = 1108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1107;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1110;
			Match(AGGREGATE);
			State = 1111;
			Match(FUNCTION);
			State = 1115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1112;
				Match(IF);
				State = 1113;
				Match(NOT);
				State = 1114;
				Match(EXISTS);
				}
			}

			State = 1125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1120;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 1117;
					_localctx.project_name = identifier();
					State = 1118;
					Match(DOT);
					}
					break;
				}
				State = 1122;
				_localctx.dataset_name = identifier();
				State = 1123;
				Match(DOT);
				}
				break;
			}
			State = 1127;
			identifier();
			State = 1128;
			Match(OPAR);
			State = 1130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 1129;
				function_parameters();
				}
			}

			State = 1132;
			Match(CPAR);
			State = 1135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1133;
				Match(RETURNS);
				State = 1134;
				data_type();
				}
			}

			State = 1137;
			Match(AS);
			State = 1138;
			Match(OPAR);
			State = 1139;
			expression(0);
			State = 1140;
			Match(CPAR);
			State = 1146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1141;
				Match(OPTIONS);
				State = 1142;
				Match(OPAR);
				State = 1143;
				option_parameters();
				State = 1144;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parametersContext function_parameters() {
		Function_parametersContext _localctx = new Function_parametersContext(Context, State);
		EnterRule(_localctx, 62, RULE_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			function_parameter();
			State = 1153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1149;
				Match(COMMA);
				State = 1150;
				function_parameter();
				}
				}
				State = 1155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		public Path_expressionContext parameter_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 64, RULE_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1156;
			_localctx.parameter_name = path_expression();
			State = 1157;
			data_type();
			State = 1160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1158;
				Match(NOT);
				State = 1159;
				Match(AGGREGATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_aggregate_js_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext function_body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_aggregate_js_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_aggregate_js_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_aggregate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_aggregate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_aggregate_js_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_aggregate_js_functionContext create_aggregate_js_function() {
		Create_aggregate_js_functionContext _localctx = new Create_aggregate_js_functionContext(Context, State);
		EnterRule(_localctx, 66, RULE_create_aggregate_js_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162;
			Match(CREATE);
			State = 1165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1163;
				Match(OR);
				State = 1164;
				Match(REPLACE);
				}
			}

			State = 1168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1167;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1170;
			Match(AGGREGATE);
			State = 1171;
			Match(FUNCTION);
			State = 1175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1172;
				Match(IF);
				State = 1173;
				Match(NOT);
				State = 1174;
				Match(EXISTS);
				}
			}

			State = 1185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 1177;
					_localctx.project_name = identifier();
					State = 1178;
					Match(DOT);
					}
					break;
				}
				State = 1182;
				_localctx.dataset_name = identifier();
				State = 1183;
				Match(DOT);
				}
				break;
			}
			State = 1187;
			identifier();
			State = 1188;
			Match(OPAR);
			State = 1190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 1189;
				function_parameters();
				}
			}

			State = 1192;
			Match(CPAR);
			State = 1193;
			Match(RETURNS);
			State = 1194;
			data_type();
			State = 1195;
			Match(LANGUAGE);
			State = 1196;
			identifier();
			State = 1202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1197;
				Match(OPTIONS);
				State = 1198;
				Match(OPAR);
				State = 1199;
				option_parameters();
				State = 1200;
				Match(CPAR);
				}
			}

			State = 1204;
			Match(AS);
			State = 1205;
			_localctx.function_body = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLE() { return GetTokens(BigQueryParser.TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE(int i) {
			return GetToken(BigQueryParser.TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parametersContext table_function_parameters() {
			return GetRuleContext<Table_function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationsContext column_declarations() {
			return GetRuleContext<Column_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_table_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_functionContext create_table_function() {
		Create_table_functionContext _localctx = new Create_table_functionContext(Context, State);
		EnterRule(_localctx, 68, RULE_create_table_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207;
			Match(CREATE);
			State = 1210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1208;
				Match(OR);
				State = 1209;
				Match(REPLACE);
				}
			}

			State = 1212;
			Match(TABLE);
			State = 1213;
			Match(FUNCTION);
			State = 1217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1214;
				Match(IF);
				State = 1215;
				Match(NOT);
				State = 1216;
				Match(EXISTS);
				}
			}

			State = 1227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
				case 1:
					{
					State = 1219;
					_localctx.project_name = identifier();
					State = 1220;
					Match(DOT);
					}
					break;
				}
				State = 1224;
				_localctx.dataset_name = identifier();
				State = 1225;
				Match(DOT);
				}
				break;
			}
			State = 1229;
			identifier();
			State = 1230;
			Match(OPAR);
			State = 1232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 1231;
				table_function_parameters();
				}
			}

			State = 1234;
			Match(CPAR);
			State = 1241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1235;
				Match(RETURNS);
				State = 1236;
				Match(TABLE);
				State = 1237;
				Match(LT);
				State = 1238;
				column_declarations();
				State = 1239;
				Match(GT);
				}
			}

			State = 1248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1243;
				Match(OPTIONS);
				State = 1244;
				Match(OPAR);
				State = 1245;
				option_parameters();
				State = 1246;
				Match(CPAR);
				}
			}

			State = 1250;
			Match(AS);
			State = 1251;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parameterContext[] table_function_parameter() {
			return GetRuleContexts<Table_function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parameterContext table_function_parameter(int i) {
			return GetRuleContext<Table_function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Table_function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTable_function_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTable_function_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_parametersContext table_function_parameters() {
		Table_function_parametersContext _localctx = new Table_function_parametersContext(Context, State);
		EnterRule(_localctx, 70, RULE_table_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			table_function_parameter();
			State = 1258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1254;
				Match(COMMA);
				State = 1255;
				table_function_parameter();
				}
				}
				State = 1260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_parameterContext : ParserRuleContext {
		public Path_expressionContext parameter_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		public Table_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTable_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTable_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_parameterContext table_function_parameter() {
		Table_function_parameterContext _localctx = new Table_function_parameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_table_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261;
			_localctx.parameter_name = path_expression();
			State = 1265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
			case STRUCT:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 1262;
				data_type();
				}
				break;
			case ANY:
				{
				State = 1263;
				Match(ANY);
				State = 1264;
				Match(TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationsContext column_declarations() {
		Column_declarationsContext _localctx = new Column_declarationsContext(Context, State);
		EnterRule(_localctx, 74, RULE_column_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			column_declaration();
			State = 1272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1268;
				Match(COMMA);
				State = 1269;
				column_declaration();
				}
				}
				State = 1274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275;
			_localctx.column_name = path_expression();
			State = 1276;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentsContext procedure_arguments() {
			return GetRuleContext<Procedure_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public Create_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedureContext create_procedure() {
		Create_procedureContext _localctx = new Create_procedureContext(Context, State);
		EnterRule(_localctx, 78, RULE_create_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278;
			Match(CREATE);
			State = 1281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1279;
				Match(OR);
				State = 1280;
				Match(REPLACE);
				}
			}

			State = 1283;
			Match(PROCEDURE);
			State = 1287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1284;
				Match(IF);
				State = 1285;
				Match(NOT);
				State = 1286;
				Match(EXISTS);
				}
			}

			State = 1297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 1292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
				case 1:
					{
					State = 1289;
					_localctx.project_name = identifier();
					State = 1290;
					Match(DOT);
					}
					break;
				}
				State = 1294;
				_localctx.dataset_name = identifier();
				State = 1295;
				Match(DOT);
				}
				break;
			}
			State = 1299;
			identifier();
			State = 1300;
			Match(OPAR);
			State = 1302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -9007199254740991L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & -139681957192663041L) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & 858993459199L) != 0)) {
				{
				State = 1301;
				procedure_arguments();
				}
			}

			State = 1304;
			Match(CPAR);
			State = 1310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1305;
				Match(OPTIONS);
				State = 1306;
				Match(OPAR);
				State = 1307;
				option_parameters();
				State = 1308;
				Match(CPAR);
				}
			}

			State = 1312;
			Match(BEGIN);
			State = 1316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 1313;
				Match(SCOL);
				}
				}
				State = 1318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1319;
			statement();
			State = 1328;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 1320;
						Match(SCOL);
						}
						}
						State = 1323;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 1325;
					statement();
					}
					} 
				}
				State = 1330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			State = 1334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 1331;
				Match(SCOL);
				}
				}
				State = 1336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1337;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentContext[] procedure_argument() {
			return GetRuleContexts<Procedure_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentContext procedure_argument(int i) {
			return GetRuleContext<Procedure_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Procedure_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedure_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedure_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_argumentsContext procedure_arguments() {
		Procedure_argumentsContext _localctx = new Procedure_argumentsContext(Context, State);
		EnterRule(_localctx, 80, RULE_procedure_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			procedure_argument();
			State = 1344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1340;
				Match(COMMA);
				State = 1341;
				procedure_argument();
				}
				}
				State = 1346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_argumentContext : ParserRuleContext {
		public Path_expressionContext argument_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(BigQueryParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(BigQueryParser.INOUT, 0); }
		public Procedure_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedure_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedure_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_argumentContext procedure_argument() {
		Procedure_argumentContext _localctx = new Procedure_argumentContext(Context, State);
		EnterRule(_localctx, 82, RULE_procedure_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				{
				State = 1347;
				_la = TokenStream.LA(1);
				if ( !(_la==IN || _la==OUT || _la==INOUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1350;
			_localctx.argument_name = path_expression();
			State = 1351;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_stored_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext language;
		public String_literalContext pyspark_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentsContext procedure_arguments() {
			return GetRuleContext<Procedure_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(BigQueryParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(BigQueryParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_stored_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_stored_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_stored_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_stored_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_stored_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_stored_procedureContext create_stored_procedure() {
		Create_stored_procedureContext _localctx = new Create_stored_procedureContext(Context, State);
		EnterRule(_localctx, 84, RULE_create_stored_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1353;
			Match(CREATE);
			State = 1356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1354;
				Match(OR);
				State = 1355;
				Match(REPLACE);
				}
			}

			State = 1358;
			Match(PROCEDURE);
			State = 1362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1359;
				Match(IF);
				State = 1360;
				Match(NOT);
				State = 1361;
				Match(EXISTS);
				}
			}

			State = 1372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1367;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
				case 1:
					{
					State = 1364;
					_localctx.project_name = identifier();
					State = 1365;
					Match(DOT);
					}
					break;
				}
				State = 1369;
				_localctx.dataset_name = identifier();
				State = 1370;
				Match(DOT);
				}
				break;
			}
			State = 1374;
			identifier();
			State = 1375;
			Match(OPAR);
			State = 1377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -9007199254740991L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & -139681957192663041L) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & 858993459199L) != 0)) {
				{
				State = 1376;
				procedure_arguments();
				}
			}

			State = 1379;
			Match(CPAR);
			State = 1383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 1380;
				Match(EXTERNAL);
				State = 1381;
				Match(SECURITY);
				State = 1382;
				Match(INVOKER);
				}
			}

			State = 1385;
			Match(WITH);
			State = 1386;
			Match(CONNECTION);
			State = 1387;
			path_expression();
			State = 1393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1388;
				Match(OPTIONS);
				State = 1389;
				Match(OPAR);
				State = 1390;
				option_parameters();
				State = 1391;
				Match(CPAR);
				}
			}

			State = 1395;
			Match(LANGUAGE);
			State = 1396;
			_localctx.language = identifier();
			State = 1399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1397;
				Match(AS);
				State = 1398;
				_localctx.pyspark_code = string_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_row_access_policyContext : ParserRuleContext {
		public Path_expressionContext row_access_policy_name;
		public Path_expressionContext table_name;
		public ExpressionsContext grantee_list;
		public ExpressionContext filter_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(BigQueryParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Create_row_access_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_row_access_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_row_access_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_row_access_policyContext create_row_access_policy() {
		Create_row_access_policyContext _localctx = new Create_row_access_policyContext(Context, State);
		EnterRule(_localctx, 86, RULE_create_row_access_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			Match(CREATE);
			State = 1404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1402;
				Match(OR);
				State = 1403;
				Match(REPLACE);
				}
			}

			State = 1406;
			Match(ROW);
			State = 1407;
			Match(ACCESS);
			State = 1408;
			Match(POLICY);
			State = 1412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1409;
				Match(IF);
				State = 1410;
				Match(NOT);
				State = 1411;
				Match(EXISTS);
				}
			}

			State = 1414;
			_localctx.row_access_policy_name = path_expression();
			State = 1415;
			Match(ON);
			State = 1416;
			_localctx.table_name = path_expression();
			State = 1423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GRANT) {
				{
				State = 1417;
				Match(GRANT);
				State = 1418;
				Match(TO);
				State = 1419;
				Match(OPAR);
				State = 1420;
				_localctx.grantee_list = expressions();
				State = 1421;
				Match(CPAR);
				}
			}

			State = 1425;
			Match(FILTER);
			State = 1426;
			Match(USING);
			State = 1427;
			Match(OPAR);
			State = 1428;
			_localctx.filter_expression = expression(0);
			State = 1429;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_capacityContext create_capacity() {
		Create_capacityContext _localctx = new Create_capacityContext(Context, State);
		EnterRule(_localctx, 88, RULE_create_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1431;
			Match(CREATE);
			State = 1432;
			Match(CAPACITY);
			State = 1433;
			expression(0);
			State = 1434;
			Match(OPTIONS);
			State = 1435;
			Match(OPAR);
			State = 1436;
			option_parameters();
			State = 1437;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_reservationContext create_reservation() {
		Create_reservationContext _localctx = new Create_reservationContext(Context, State);
		EnterRule(_localctx, 90, RULE_create_reservation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439;
			Match(CREATE);
			State = 1440;
			Match(RESERVATION);
			State = 1441;
			expression(0);
			State = 1442;
			Match(OPTIONS);
			State = 1443;
			Match(OPAR);
			State = 1444;
			option_parameters();
			State = 1445;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_assignmentContext create_assignment() {
		Create_assignmentContext _localctx = new Create_assignmentContext(Context, State);
		EnterRule(_localctx, 92, RULE_create_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447;
			Match(CREATE);
			State = 1448;
			Match(ASSIGNMENT);
			State = 1449;
			expression(0);
			State = 1450;
			Match(OPTIONS);
			State = 1451;
			Match(OPAR);
			State = 1452;
			option_parameters();
			State = 1453;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTIONS() { return GetTokens(BigQueryParser.OPTIONS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS(int i) {
			return GetToken(BigQueryParser.OPTIONS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		public Create_search_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_search_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_indexContext create_search_index() {
		Create_search_indexContext _localctx = new Create_search_indexContext(Context, State);
		EnterRule(_localctx, 94, RULE_create_search_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455;
			Match(CREATE);
			State = 1456;
			Match(SEARCH);
			State = 1457;
			Match(INDEX);
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1458;
				Match(IF);
				State = 1459;
				Match(NOT);
				State = 1460;
				Match(EXISTS);
				}
			}

			State = 1463;
			_localctx.index_name = path_expression();
			State = 1464;
			Match(ON);
			State = 1465;
			_localctx.table_name = path_expression();
			State = 1466;
			Match(OPAR);
			State = 1479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 1467;
				Match(ALL);
				State = 1468;
				Match(COLUMNS);
				State = 1476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1469;
					Match(WITH);
					State = 1470;
					Match(COLUMN);
					State = 1471;
					Match(OPTIONS);
					State = 1472;
					Match(OPAR);
					State = 1473;
					columns();
					State = 1474;
					Match(CPAR);
					}
				}

				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 1478;
				columns();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1481;
			Match(CPAR);
			State = 1487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1482;
				Match(OPTIONS);
				State = 1483;
				Match(OPAR);
				State = 1484;
				option_parameters();
				State = 1485;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsContext columns() {
		ColumnsContext _localctx = new ColumnsContext(Context, State);
		EnterRule(_localctx, 96, RULE_columns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489;
			column();
			State = 1494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1490;
				Match(COMMA);
				State = 1491;
				column();
				}
				}
				State = 1496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 98, RULE_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			_localctx.column_name = path_expression();
			State = 1499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				{
				State = 1498;
				data_type();
				}
				break;
			}
			State = 1506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1501;
				Match(OPTIONS);
				State = 1502;
				Match(OPAR);
				State = 1503;
				option_parameters();
				State = 1504;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_vector_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORING() { return GetToken(BigQueryParser.STORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Create_vector_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_vector_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_vector_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_vector_indexContext create_vector_index() {
		Create_vector_indexContext _localctx = new Create_vector_indexContext(Context, State);
		EnterRule(_localctx, 100, RULE_create_vector_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1508;
			Match(CREATE);
			State = 1511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1509;
				Match(OR);
				State = 1510;
				Match(REPLACE);
				}
			}

			State = 1513;
			Match(VECTOR);
			State = 1514;
			Match(INDEX);
			State = 1518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1515;
				Match(IF);
				State = 1516;
				Match(NOT);
				State = 1517;
				Match(EXISTS);
				}
			}

			State = 1520;
			_localctx.index_name = path_expression();
			State = 1521;
			Match(ON);
			State = 1522;
			_localctx.table_name = path_expression();
			State = 1523;
			Match(OPAR);
			State = 1524;
			_localctx.column_name = path_expression();
			State = 1525;
			Match(CPAR);
			State = 1531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORING) {
				{
				State = 1526;
				Match(STORING);
				State = 1527;
				Match(OPAR);
				State = 1528;
				path_expressions();
				State = 1529;
				Match(CPAR);
				}
			}

			State = 1533;
			Match(OPTIONS);
			State = 1534;
			Match(OPAR);
			State = 1535;
			option_parameters();
			State = 1536;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_set_default_collateContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Alter_schema_set_default_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_set_default_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_set_default_collate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_set_default_collateContext alter_schema_set_default_collate() {
		Alter_schema_set_default_collateContext _localctx = new Alter_schema_set_default_collateContext(Context, State);
		EnterRule(_localctx, 102, RULE_alter_schema_set_default_collate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1538;
			Match(ALTER);
			State = 1539;
			Match(SCHEMA);
			State = 1542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1540;
				Match(IF);
				State = 1541;
				Match(EXISTS);
				}
			}

			State = 1547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 1544;
				_localctx.project_name = identifier();
				State = 1545;
				Match(DOT);
				}
				break;
			}
			State = 1549;
			_localctx.dataset_name = identifier();
			State = 1550;
			Match(SET);
			State = 1551;
			Match(DEFAULT);
			State = 1552;
			Match(COLLATE);
			State = 1553;
			_localctx.collate_specification = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_set_optionsContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Alter_schema_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_set_optionsContext alter_schema_set_options() {
		Alter_schema_set_optionsContext _localctx = new Alter_schema_set_optionsContext(Context, State);
		EnterRule(_localctx, 104, RULE_alter_schema_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555;
			Match(ALTER);
			State = 1556;
			Match(SCHEMA);
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1557;
				Match(IF);
				State = 1558;
				Match(EXISTS);
				}
			}

			State = 1564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1561;
				_localctx.project_name = identifier();
				State = 1562;
				Match(DOT);
				}
				break;
			}
			State = 1566;
			_localctx.dataset_name = identifier();
			State = 1567;
			Match(SET);
			State = 1568;
			Match(OPTIONS);
			State = 1569;
			Match(OPAR);
			State = 1570;
			option_parameters();
			State = 1571;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_add_replicaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext replica_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_schema_add_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_add_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_add_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_add_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_add_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_add_replicaContext alter_schema_add_replica() {
		Alter_schema_add_replicaContext _localctx = new Alter_schema_add_replicaContext(Context, State);
		EnterRule(_localctx, 106, RULE_alter_schema_add_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573;
			Match(ALTER);
			State = 1574;
			Match(SCHEMA);
			State = 1577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1575;
				Match(IF);
				State = 1576;
				Match(EXISTS);
				}
			}

			State = 1582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1579;
				_localctx.project_name = identifier();
				State = 1580;
				Match(DOT);
				}
				break;
			}
			State = 1584;
			_localctx.dataset_name = identifier();
			State = 1585;
			Match(ADD);
			State = 1586;
			Match(REPLICA);
			State = 1587;
			_localctx.replica_name = path_expression();
			State = 1593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1588;
				Match(OPTIONS);
				State = 1589;
				Match(OPAR);
				State = 1590;
				option_parameters();
				State = 1591;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_drop_replicaContext : ParserRuleContext {
		public Path_expressionContext dataset_name;
		public ExpressionContext replica_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_schema_drop_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_drop_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_drop_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_drop_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_drop_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_drop_replicaContext alter_schema_drop_replica() {
		Alter_schema_drop_replicaContext _localctx = new Alter_schema_drop_replicaContext(Context, State);
		EnterRule(_localctx, 108, RULE_alter_schema_drop_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595;
			Match(ALTER);
			State = 1596;
			Match(SCHEMA);
			State = 1599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1597;
				Match(IF);
				State = 1598;
				Match(EXISTS);
				}
			}

			State = 1601;
			_localctx.dataset_name = path_expression();
			State = 1602;
			Match(DROP);
			State = 1603;
			Match(REPLICA);
			State = 1604;
			_localctx.replica_name = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_optionsContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_optionsContext alter_table_set_options() {
		Alter_table_set_optionsContext _localctx = new Alter_table_set_optionsContext(Context, State);
		EnterRule(_localctx, 110, RULE_alter_table_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606;
			Match(ALTER);
			State = 1607;
			Match(TABLE);
			State = 1610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1608;
				Match(IF);
				State = 1609;
				Match(EXISTS);
				}
			}

			State = 1612;
			_localctx.table_name = path_expression();
			State = 1613;
			Match(SET);
			State = 1614;
			Match(OPTIONS);
			State = 1615;
			Match(OPAR);
			State = 1616;
			option_parameters();
			State = 1617;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(BigQueryParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(BigQueryParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLUMN() { return GetTokens(BigQueryParser.COLUMN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN(int i) {
			return GetToken(BigQueryParser.COLUMN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_add_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_columnContext alter_table_add_column() {
		Alter_table_add_columnContext _localctx = new Alter_table_add_columnContext(Context, State);
		EnterRule(_localctx, 112, RULE_alter_table_add_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619;
			Match(ALTER);
			State = 1620;
			Match(TABLE);
			State = 1621;
			_localctx.table_name = path_expression();
			State = 1622;
			Match(ADD);
			State = 1623;
			Match(COLUMN);
			State = 1627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1624;
				Match(IF);
				State = 1625;
				Match(NOT);
				State = 1626;
				Match(EXISTS);
				}
			}

			State = 1629;
			column();
			State = 1641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1630;
				Match(COMMA);
				State = 1631;
				Match(ADD);
				State = 1632;
				Match(COLUMN);
				State = 1636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1633;
					Match(IF);
					State = 1634;
					Match(NOT);
					State = 1635;
					Match(EXISTS);
					}
				}

				State = 1638;
				column();
				}
				}
				State = 1643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_foreign_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Add_foreign_keyContext[] add_foreign_key() {
			return GetRuleContexts<Add_foreign_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_foreign_keyContext add_foreign_key(int i) {
			return GetRuleContext<Add_foreign_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_add_foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_foreign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_foreign_keyContext alter_table_add_foreign_key() {
		Alter_table_add_foreign_keyContext _localctx = new Alter_table_add_foreign_keyContext(Context, State);
		EnterRule(_localctx, 114, RULE_alter_table_add_foreign_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644;
			Match(ALTER);
			State = 1645;
			Match(TABLE);
			State = 1654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				{
				State = 1649;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
				case 1:
					{
					State = 1646;
					_localctx.project_name = identifier();
					State = 1647;
					Match(DOT);
					}
					break;
				}
				State = 1651;
				_localctx.dataset_name = identifier();
				State = 1652;
				Match(DOT);
				}
				break;
			}
			State = 1656;
			_localctx.fk_table_name = identifier();
			State = 1657;
			add_foreign_key();
			State = 1662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1658;
				Match(COMMA);
				State = 1659;
				add_foreign_key();
				}
				}
				State = 1664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_foreign_keyContext : ParserRuleContext {
		public IdentifierContext constraint_name;
		public IdentifierContext pk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext[] columns() {
			return GetRuleContexts<ColumnsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns(int i) {
			return GetRuleContext<ColumnsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		public Add_foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAdd_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAdd_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_foreign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_foreign_keyContext add_foreign_key() {
		Add_foreign_keyContext _localctx = new Add_foreign_keyContext(Context, State);
		EnterRule(_localctx, 116, RULE_add_foreign_key);
		int _la;
		try {
			State = 1697;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1665;
				Match(ADD);
				State = 1673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1666;
					Match(CONSTRAINT);
					State = 1670;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IF) {
						{
						State = 1667;
						Match(IF);
						State = 1668;
						Match(NOT);
						State = 1669;
						Match(EXISTS);
						}
					}

					State = 1672;
					_localctx.constraint_name = identifier();
					}
				}

				State = 1675;
				Match(FOREIGN);
				State = 1676;
				Match(KEY);
				State = 1677;
				Match(OPAR);
				State = 1678;
				columns();
				State = 1679;
				Match(CPAR);
				State = 1680;
				Match(REFERENCES);
				State = 1681;
				_localctx.pk_table_name = identifier();
				State = 1682;
				Match(OPAR);
				State = 1683;
				columns();
				State = 1684;
				Match(CPAR);
				State = 1685;
				Match(NOT);
				State = 1686;
				Match(ENFORCED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1688;
				Match(ADD);
				State = 1689;
				Match(PRIMARY);
				State = 1690;
				Match(KEY);
				State = 1691;
				Match(OPAR);
				State = 1692;
				columns();
				State = 1693;
				Match(CPAR);
				State = 1694;
				Match(NOT);
				State = 1695;
				Match(ENFORCED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_primary_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Alter_table_add_primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_primary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_primary_keyContext alter_table_add_primary_key() {
		Alter_table_add_primary_keyContext _localctx = new Alter_table_add_primary_keyContext(Context, State);
		EnterRule(_localctx, 118, RULE_alter_table_add_primary_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1699;
			Match(ALTER);
			State = 1700;
			Match(TABLE);
			State = 1709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
				case 1:
					{
					State = 1701;
					_localctx.project_name = identifier();
					State = 1702;
					Match(DOT);
					}
					break;
				}
				State = 1706;
				_localctx.dataset_name = identifier();
				State = 1707;
				Match(DOT);
				}
				break;
			}
			State = 1711;
			_localctx.fk_table_name = identifier();
			State = 1712;
			Match(ADD);
			State = 1713;
			Match(PRIMARY);
			State = 1714;
			Match(KEY);
			State = 1715;
			Match(OPAR);
			State = 1716;
			columns();
			State = 1717;
			Match(CPAR);
			State = 1718;
			Match(NOT);
			State = 1719;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_renameContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Path_expressionContext new_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_renameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_rename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_renameContext alter_table_rename() {
		Alter_table_renameContext _localctx = new Alter_table_renameContext(Context, State);
		EnterRule(_localctx, 120, RULE_alter_table_rename);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1721;
			Match(ALTER);
			State = 1722;
			Match(TABLE);
			State = 1725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1723;
				Match(IF);
				State = 1724;
				Match(EXISTS);
				}
			}

			State = 1727;
			_localctx.table_name = path_expression();
			State = 1728;
			Match(RENAME);
			State = 1729;
			Match(TO);
			State = 1730;
			_localctx.new_table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_rename_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rename_columnContext[] rename_column() {
			return GetRuleContexts<Rename_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rename_columnContext rename_column(int i) {
			return GetRuleContext<Rename_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_rename_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_rename_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_rename_columnContext alter_table_rename_column() {
		Alter_table_rename_columnContext _localctx = new Alter_table_rename_columnContext(Context, State);
		EnterRule(_localctx, 122, RULE_alter_table_rename_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1732;
			Match(ALTER);
			State = 1733;
			Match(TABLE);
			State = 1736;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1734;
				Match(IF);
				State = 1735;
				Match(EXISTS);
				}
			}

			State = 1738;
			_localctx.table_name = path_expression();
			State = 1739;
			rename_column();
			State = 1744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1740;
				Match(COMMA);
				State = 1741;
				rename_column();
				}
				}
				State = 1746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rename_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_to_columnContext[] column_to_column() {
			return GetRuleContexts<Column_to_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_to_columnContext column_to_column(int i) {
			return GetRuleContext<Column_to_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Rename_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rename_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRename_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rename_columnContext rename_column() {
		Rename_columnContext _localctx = new Rename_columnContext(Context, State);
		EnterRule(_localctx, 124, RULE_rename_column);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1747;
			Match(RENAME);
			State = 1748;
			Match(COLUMN);
			State = 1751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1749;
				Match(IF);
				State = 1750;
				Match(EXISTS);
				}
			}

			State = 1753;
			column_to_column();
			State = 1758;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1754;
					Match(COMMA);
					State = 1755;
					column_to_column();
					}
					} 
				}
				State = 1760;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_to_columnContext : ParserRuleContext {
		public IdentifierContext column_name;
		public IdentifierContext new_column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_to_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_to_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_to_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_to_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_to_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_to_columnContext column_to_column() {
		Column_to_columnContext _localctx = new Column_to_columnContext(Context, State);
		EnterRule(_localctx, 126, RULE_column_to_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1761;
			_localctx.column_name = identifier();
			State = 1762;
			Match(TO);
			State = 1763;
			_localctx.new_column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_columnContext[] drop_column() {
			return GetRuleContexts<Drop_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_columnContext drop_column(int i) {
			return GetRuleContext<Drop_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_columnContext alter_table_drop_column() {
		Alter_table_drop_columnContext _localctx = new Alter_table_drop_columnContext(Context, State);
		EnterRule(_localctx, 128, RULE_alter_table_drop_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			Match(ALTER);
			State = 1766;
			Match(TABLE);
			State = 1767;
			_localctx.table_name = path_expression();
			State = 1768;
			drop_column();
			State = 1773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1769;
				Match(COMMA);
				State = 1770;
				drop_column();
				}
				}
				State = 1775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_columnContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_columnContext drop_column() {
		Drop_columnContext _localctx = new Drop_columnContext(Context, State);
		EnterRule(_localctx, 130, RULE_drop_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776;
			Match(DROP);
			State = 1777;
			Match(COLUMN);
			State = 1780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1778;
				Match(IF);
				State = 1779;
				Match(EXISTS);
				}
			}

			State = 1782;
			_localctx.column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_constraintContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		public ExpressionContext constraint_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_drop_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_constraintContext alter_table_drop_constraint() {
		Alter_table_drop_constraintContext _localctx = new Alter_table_drop_constraintContext(Context, State);
		EnterRule(_localctx, 132, RULE_alter_table_drop_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784;
			Match(ALTER);
			State = 1785;
			Match(TABLE);
			State = 1794;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 1789;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1786;
					_localctx.project_name = identifier();
					State = 1787;
					Match(DOT);
					}
					break;
				}
				State = 1791;
				_localctx.dataset_name = identifier();
				State = 1792;
				Match(DOT);
				}
				break;
			}
			State = 1796;
			_localctx.fk_table_name = identifier();
			State = 1797;
			Match(DROP);
			State = 1798;
			Match(CONSTRAINT);
			State = 1801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				{
				State = 1799;
				Match(IF);
				State = 1800;
				Match(EXISTS);
				}
				break;
			}
			State = 1803;
			_localctx.constraint_name = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_primary_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_drop_primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_primary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_primary_keyContext alter_table_drop_primary_key() {
		Alter_table_drop_primary_keyContext _localctx = new Alter_table_drop_primary_keyContext(Context, State);
		EnterRule(_localctx, 134, RULE_alter_table_drop_primary_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1805;
			Match(ALTER);
			State = 1806;
			Match(TABLE);
			State = 1815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				{
				State = 1810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1807;
					_localctx.project_name = identifier();
					State = 1808;
					Match(DOT);
					}
					break;
				}
				State = 1812;
				_localctx.dataset_name = identifier();
				State = 1813;
				Match(DOT);
				}
				break;
			}
			State = 1817;
			_localctx.fk_table_name = identifier();
			State = 1818;
			Match(DROP);
			State = 1819;
			Match(PRIMARY);
			State = 1820;
			Match(KEY);
			State = 1823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1821;
				Match(IF);
				State = 1822;
				Match(EXISTS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_default_collateContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Alter_table_set_default_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_default_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_set_default_collate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_default_collateContext alter_table_set_default_collate() {
		Alter_table_set_default_collateContext _localctx = new Alter_table_set_default_collateContext(Context, State);
		EnterRule(_localctx, 136, RULE_alter_table_set_default_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1825;
			Match(ALTER);
			State = 1826;
			Match(TABLE);
			State = 1827;
			_localctx.table_name = path_expression();
			State = 1828;
			Match(SET);
			State = 1829;
			Match(DEFAULT);
			State = 1830;
			Match(COLLATE);
			State = 1831;
			_localctx.collate_specification = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_optionsContext : ParserRuleContext {
		public Path_expressionContext name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_optionsContext alter_table_column_set_options() {
		Alter_table_column_set_optionsContext _localctx = new Alter_table_column_set_optionsContext(Context, State);
		EnterRule(_localctx, 138, RULE_alter_table_column_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1833;
			Match(ALTER);
			State = 1834;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==VIEW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1835;
				Match(IF);
				State = 1836;
				Match(EXISTS);
				}
			}

			State = 1839;
			_localctx.name = path_expression();
			State = 1840;
			Match(ALTER);
			State = 1841;
			Match(COLUMN);
			State = 1844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1842;
				Match(IF);
				State = 1843;
				Match(EXISTS);
				}
			}

			State = 1846;
			_localctx.column_name = identifier();
			State = 1847;
			Match(SET);
			State = 1848;
			Match(OPTIONS);
			State = 1849;
			Match(OPAR);
			State = 1850;
			option_parameters();
			State = 1851;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_drop_not_nullContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_drop_not_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_drop_not_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_drop_not_null(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_drop_not_nullContext alter_table_column_drop_not_null() {
		Alter_table_column_drop_not_nullContext _localctx = new Alter_table_column_drop_not_nullContext(Context, State);
		EnterRule(_localctx, 140, RULE_alter_table_column_drop_not_null);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1853;
			Match(ALTER);
			State = 1854;
			Match(TABLE);
			State = 1857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1855;
				Match(IF);
				State = 1856;
				Match(EXISTS);
				}
			}

			State = 1859;
			_localctx.table_name = path_expression();
			State = 1860;
			Match(ALTER);
			State = 1861;
			Match(COLUMN);
			State = 1864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1862;
				Match(IF);
				State = 1863;
				Match(EXISTS);
				}
			}

			State = 1866;
			_localctx.column_name = identifier();
			State = 1867;
			Match(DROP);
			State = 1868;
			Match(NOT);
			State = 1869;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_data_typeContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BigQueryParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_data_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_data_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_data_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_data_typeContext alter_table_column_set_data_type() {
		Alter_table_column_set_data_typeContext _localctx = new Alter_table_column_set_data_typeContext(Context, State);
		EnterRule(_localctx, 142, RULE_alter_table_column_set_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871;
			Match(ALTER);
			State = 1872;
			Match(TABLE);
			State = 1875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1873;
				Match(IF);
				State = 1874;
				Match(EXISTS);
				}
			}

			State = 1877;
			_localctx.table_name = path_expression();
			State = 1878;
			Match(ALTER);
			State = 1879;
			Match(COLUMN);
			State = 1882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1880;
				Match(IF);
				State = 1881;
				Match(EXISTS);
				}
			}

			State = 1884;
			_localctx.column_name = identifier();
			State = 1885;
			Match(SET);
			State = 1886;
			Match(DATA);
			State = 1887;
			Match(TYPE);
			State = 1888;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_defaultContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_defaultContext alter_table_column_set_default() {
		Alter_table_column_set_defaultContext _localctx = new Alter_table_column_set_defaultContext(Context, State);
		EnterRule(_localctx, 144, RULE_alter_table_column_set_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1890;
			Match(ALTER);
			State = 1891;
			Match(TABLE);
			State = 1894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1892;
				Match(IF);
				State = 1893;
				Match(EXISTS);
				}
			}

			State = 1896;
			_localctx.table_name = path_expression();
			State = 1897;
			Match(ALTER);
			State = 1898;
			Match(COLUMN);
			State = 1901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1899;
				Match(IF);
				State = 1900;
				Match(EXISTS);
				}
			}

			State = 1903;
			_localctx.column_name = identifier();
			State = 1904;
			Match(SET);
			State = 1905;
			Match(DEFAULT);
			State = 1906;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_drop_defaultContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_drop_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_drop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_drop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_drop_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_drop_defaultContext alter_table_column_drop_default() {
		Alter_table_column_drop_defaultContext _localctx = new Alter_table_column_drop_defaultContext(Context, State);
		EnterRule(_localctx, 146, RULE_alter_table_column_drop_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			Match(ALTER);
			State = 1909;
			Match(TABLE);
			State = 1912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1910;
				Match(IF);
				State = 1911;
				Match(EXISTS);
				}
			}

			State = 1914;
			_localctx.table_name = path_expression();
			State = 1915;
			Match(ALTER);
			State = 1916;
			Match(COLUMN);
			State = 1919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1917;
				Match(IF);
				State = 1918;
				Match(EXISTS);
				}
			}

			State = 1921;
			_localctx.column_name = identifier();
			State = 1922;
			Match(DROP);
			State = 1923;
			Match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_viewContext : ParserRuleContext {
		public Path_expressionContext view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_viewContext alter_view() {
		Alter_viewContext _localctx = new Alter_viewContext(Context, State);
		EnterRule(_localctx, 148, RULE_alter_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1925;
			Match(ALTER);
			State = 1926;
			Match(VIEW);
			State = 1929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1927;
				Match(IF);
				State = 1928;
				Match(EXISTS);
				}
			}

			State = 1931;
			_localctx.view_name = path_expression();
			State = 1932;
			Match(SET);
			State = 1933;
			Match(OPTIONS);
			State = 1934;
			Match(OPAR);
			State = 1935;
			option_parameters();
			State = 1936;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_materialized_viewContext : ParserRuleContext {
		public Path_expressionContext materialized_view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_materialized_viewContext alter_materialized_view() {
		Alter_materialized_viewContext _localctx = new Alter_materialized_viewContext(Context, State);
		EnterRule(_localctx, 150, RULE_alter_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1938;
			Match(ALTER);
			State = 1939;
			Match(MATERIALIZED);
			State = 1940;
			Match(VIEW);
			State = 1943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1941;
				Match(IF);
				State = 1942;
				Match(EXISTS);
				}
			}

			State = 1945;
			_localctx.materialized_view_name = path_expression();
			State = 1946;
			Match(SET);
			State = 1947;
			Match(OPTIONS);
			State = 1948;
			Match(OPAR);
			State = 1949;
			option_parameters();
			State = 1950;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_organizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION() { return GetToken(BigQueryParser.ORGANIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_organizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_organization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_organization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_organization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_organization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_organizationContext alter_organization() {
		Alter_organizationContext _localctx = new Alter_organizationContext(Context, State);
		EnterRule(_localctx, 152, RULE_alter_organization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952;
			Match(ALTER);
			State = 1953;
			Match(ORGANIZATION);
			State = 1954;
			Match(SET);
			State = 1955;
			Match(OPTIONS);
			State = 1956;
			Match(OPAR);
			State = 1957;
			option_parameters();
			State = 1958;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_projectContext : ParserRuleContext {
		public Path_expressionContext project_id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROJECT() { return GetToken(BigQueryParser.PROJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Alter_projectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_project; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_project(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_project(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_project(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_projectContext alter_project() {
		Alter_projectContext _localctx = new Alter_projectContext(Context, State);
		EnterRule(_localctx, 154, RULE_alter_project);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1960;
			Match(ALTER);
			State = 1961;
			Match(PROJECT);
			State = 1962;
			_localctx.project_id = path_expression();
			State = 1963;
			Match(SET);
			State = 1964;
			Match(OPTIONS);
			State = 1965;
			Match(OPAR);
			State = 1966;
			option_parameters();
			State = 1967;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_bi_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BI_CAPACITY() { return GetToken(BigQueryParser.BI_CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_bi_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_bi_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_bi_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_bi_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_bi_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_bi_capacityContext alter_bi_capacity() {
		Alter_bi_capacityContext _localctx = new Alter_bi_capacityContext(Context, State);
		EnterRule(_localctx, 156, RULE_alter_bi_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1969;
			Match(ALTER);
			State = 1970;
			Match(BI_CAPACITY);
			State = 1971;
			path_expression();
			State = 1972;
			Match(SET);
			State = 1973;
			Match(OPTIONS);
			State = 1974;
			Match(OPAR);
			State = 1975;
			option_parameters();
			State = 1976;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_capacityContext alter_capacity() {
		Alter_capacityContext _localctx = new Alter_capacityContext(Context, State);
		EnterRule(_localctx, 158, RULE_alter_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1978;
			Match(ALTER);
			State = 1979;
			Match(CAPACITY);
			State = 1980;
			path_expression();
			State = 1981;
			Match(SET);
			State = 1982;
			Match(OPTIONS);
			State = 1983;
			Match(OPAR);
			State = 1984;
			option_parameters();
			State = 1985;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_reservationContext alter_reservation() {
		Alter_reservationContext _localctx = new Alter_reservationContext(Context, State);
		EnterRule(_localctx, 160, RULE_alter_reservation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987;
			Match(ALTER);
			State = 1988;
			Match(RESERVATION);
			State = 1989;
			path_expression();
			State = 1990;
			Match(SET);
			State = 1991;
			Match(OPTIONS);
			State = 1992;
			Match(OPAR);
			State = 1993;
			option_parameters();
			State = 1994;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Undrop_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDROP() { return GetToken(BigQueryParser.UNDROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Undrop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undrop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUndrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUndrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Undrop_schemaContext undrop_schema() {
		Undrop_schemaContext _localctx = new Undrop_schemaContext(Context, State);
		EnterRule(_localctx, 162, RULE_undrop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996;
			Match(UNDROP);
			State = 1997;
			Match(SCHEMA);
			State = 2001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1998;
				Match(IF);
				State = 1999;
				Match(NOT);
				State = 2000;
				Match(EXISTS);
				}
			}

			State = 2006;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				{
				State = 2003;
				_localctx.project_name = identifier();
				State = 2004;
				Match(DOT);
				}
				break;
			}
			State = 2008;
			_localctx.dataset_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(BigQueryParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(BigQueryParser.RESTRICT, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(Context, State);
		EnterRule(_localctx, 164, RULE_drop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010;
			Match(DROP);
			State = 2012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 2011;
				Match(EXTERNAL);
				}
			}

			State = 2014;
			Match(SCHEMA);
			State = 2017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2015;
				Match(IF);
				State = 2016;
				Match(EXISTS);
				}
			}

			State = 2022;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				{
				State = 2019;
				_localctx.project_name = identifier();
				State = 2020;
				Match(DOT);
				}
				break;
			}
			State = 2024;
			_localctx.dataset_name = identifier();
			State = 2026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2025;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 166, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2028;
			Match(DROP);
			State = 2029;
			Match(TABLE);
			State = 2032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2030;
				Match(IF);
				State = 2031;
				Match(EXISTS);
				}
			}

			State = 2034;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_snapshot_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_snapshot_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_snapshot_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_snapshot_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_snapshot_tableContext drop_snapshot_table() {
		Drop_snapshot_tableContext _localctx = new Drop_snapshot_tableContext(Context, State);
		EnterRule(_localctx, 168, RULE_drop_snapshot_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2036;
			Match(DROP);
			State = 2037;
			Match(SNAPSHOT);
			State = 2038;
			Match(TABLE);
			State = 2041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2039;
				Match(IF);
				State = 2040;
				Match(EXISTS);
				}
			}

			State = 2043;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(Context, State);
		EnterRule(_localctx, 170, RULE_drop_external_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2045;
			Match(DROP);
			State = 2046;
			Match(EXTERNAL);
			State = 2047;
			Match(TABLE);
			State = 2050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2048;
				Match(IF);
				State = 2049;
				Match(EXISTS);
				}
			}

			State = 2052;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 172, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2054;
			Match(DROP);
			State = 2055;
			Match(VIEW);
			State = 2058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2056;
				Match(IF);
				State = 2057;
				Match(EXISTS);
				}
			}

			State = 2060;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_materialized_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_materialized_viewContext drop_materialized_view() {
		Drop_materialized_viewContext _localctx = new Drop_materialized_viewContext(Context, State);
		EnterRule(_localctx, 174, RULE_drop_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2062;
			Match(DROP);
			State = 2063;
			Match(MATERIALIZED);
			State = 2064;
			Match(VIEW);
			State = 2067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2065;
				Match(IF);
				State = 2066;
				Match(EXISTS);
				}
			}

			State = 2069;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 176, RULE_drop_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071;
			Match(DROP);
			State = 2072;
			Match(FUNCTION);
			State = 2075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2073;
				Match(IF);
				State = 2074;
				Match(EXISTS);
				}
			}

			State = 2085;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				{
				State = 2080;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
				case 1:
					{
					State = 2077;
					_localctx.project_name = identifier();
					State = 2078;
					Match(DOT);
					}
					break;
				}
				State = 2082;
				_localctx.dataset_name = identifier();
				State = 2083;
				Match(DOT);
				}
				break;
			}
			State = 2087;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_table_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_functionContext drop_table_function() {
		Drop_table_functionContext _localctx = new Drop_table_functionContext(Context, State);
		EnterRule(_localctx, 178, RULE_drop_table_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089;
			Match(DROP);
			State = 2090;
			Match(TABLE);
			State = 2091;
			Match(FUNCTION);
			State = 2094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2092;
				Match(IF);
				State = 2093;
				Match(EXISTS);
				}
			}

			State = 2104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 2099;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
				case 1:
					{
					State = 2096;
					_localctx.project_name = identifier();
					State = 2097;
					Match(DOT);
					}
					break;
				}
				State = 2101;
				_localctx.dataset_name = identifier();
				State = 2102;
				Match(DOT);
				}
				break;
			}
			State = 2106;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext procedure_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 180, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2108;
			Match(DROP);
			State = 2109;
			Match(PROCEDURE);
			State = 2112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2110;
				Match(IF);
				State = 2111;
				Match(EXISTS);
				}
			}

			State = 2122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				{
				State = 2117;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
				case 1:
					{
					State = 2114;
					_localctx.project_name = identifier();
					State = 2115;
					Match(DOT);
					}
					break;
				}
				State = 2119;
				_localctx.dataset_name = identifier();
				State = 2120;
				Match(DOT);
				}
				break;
			}
			State = 2124;
			_localctx.procedure_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_row_access_policyContext : ParserRuleContext {
		public Path_expressionContext row_access_policy_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICIES() { return GetToken(BigQueryParser.POLICIES, 0); }
		public Drop_row_access_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_row_access_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_row_access_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_row_access_policyContext drop_row_access_policy() {
		Drop_row_access_policyContext _localctx = new Drop_row_access_policyContext(Context, State);
		EnterRule(_localctx, 182, RULE_drop_row_access_policy);
		int _la;
		try {
			State = 2145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2126;
				Match(DROP);
				State = 2127;
				Match(ROW);
				State = 2128;
				Match(ACCESS);
				State = 2129;
				Match(POLICY);
				State = 2132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2130;
					Match(IF);
					State = 2131;
					Match(EXISTS);
					}
				}

				State = 2134;
				_localctx.row_access_policy_name = path_expression();
				State = 2135;
				Match(ON);
				State = 2136;
				_localctx.table_name = path_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2138;
				Match(DROP);
				State = 2139;
				Match(ALL);
				State = 2140;
				Match(ROW);
				State = 2141;
				Match(ACCESS);
				State = 2142;
				Match(POLICIES);
				State = 2143;
				Match(ON);
				State = 2144;
				_localctx.table_name = path_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_capacityContext drop_capacity() {
		Drop_capacityContext _localctx = new Drop_capacityContext(Context, State);
		EnterRule(_localctx, 184, RULE_drop_capacity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2147;
			Match(DROP);
			State = 2148;
			Match(CAPACITY);
			State = 2151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2149;
				Match(IF);
				State = 2150;
				Match(EXISTS);
				}
			}

			State = 2153;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_reservationContext drop_reservation() {
		Drop_reservationContext _localctx = new Drop_reservationContext(Context, State);
		EnterRule(_localctx, 186, RULE_drop_reservation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			Match(DROP);
			State = 2156;
			Match(RESERVATION);
			State = 2159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2157;
				Match(IF);
				State = 2158;
				Match(EXISTS);
				}
			}

			State = 2161;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assignmentContext drop_assignment() {
		Drop_assignmentContext _localctx = new Drop_assignmentContext(Context, State);
		EnterRule(_localctx, 188, RULE_drop_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2163;
			Match(DROP);
			State = 2164;
			Match(ASSIGNMENT);
			State = 2167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2165;
				Match(IF);
				State = 2166;
				Match(EXISTS);
				}
			}

			State = 2169;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_search_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_search_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_indexContext drop_search_index() {
		Drop_search_indexContext _localctx = new Drop_search_indexContext(Context, State);
		EnterRule(_localctx, 190, RULE_drop_search_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2171;
			Match(DROP);
			State = 2172;
			Match(SEARCH);
			State = 2173;
			Match(INDEX);
			State = 2176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2174;
				Match(IF);
				State = 2175;
				Match(EXISTS);
				}
			}

			State = 2178;
			_localctx.index_name = path_expression();
			State = 2179;
			Match(ON);
			State = 2180;
			_localctx.table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_vector_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_vector_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_vector_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_vector_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_vector_indexContext drop_vector_index() {
		Drop_vector_indexContext _localctx = new Drop_vector_indexContext(Context, State);
		EnterRule(_localctx, 192, RULE_drop_vector_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2182;
			Match(DROP);
			State = 2183;
			Match(SEARCH);
			State = 2184;
			Match(INDEX);
			State = 2187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2185;
				Match(IF);
				State = 2186;
				Match(EXISTS);
				}
			}

			State = 2189;
			_localctx.index_name = path_expression();
			State = 2190;
			Match(ON);
			State = 2191;
			_localctx.table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_column_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public View_columnContext[] view_column() {
			return GetRuleContexts<View_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_columnContext view_column(int i) {
			return GetRuleContext<View_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public View_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterView_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitView_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_column_name_listContext view_column_name_list() {
		View_column_name_listContext _localctx = new View_column_name_listContext(Context, State);
		EnterRule(_localctx, 194, RULE_view_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2193;
			view_column();
			State = 2198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2194;
				Match(COMMA);
				State = 2195;
				view_column();
				}
				}
				State = 2200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_columnContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public View_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterView_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitView_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_columnContext view_column() {
		View_columnContext _localctx = new View_columnContext(Context, State);
		EnterRule(_localctx, 196, RULE_view_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			_localctx.column_name = path_expression();
			State = 2207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2202;
				Match(OPTIONS);
				State = 2203;
				Match(OPAR);
				State = 2204;
				option_parameters();
				State = 2205;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraint_definitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionContext[] column_constraint_definition() {
			return GetRuleContexts<Column_constraint_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionContext column_constraint_definition(int i) {
			return GetRuleContext<Column_constraint_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_constraint_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint_definitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraint_definitionsContext column_constraint_definitions() {
		Column_constraint_definitionsContext _localctx = new Column_constraint_definitionsContext(Context, State);
		EnterRule(_localctx, 198, RULE_column_constraint_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2209;
			column_constraint_definition();
			State = 2214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2210;
				Match(COMMA);
				State = 2211;
				column_constraint_definition();
				}
				}
				State = 2216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraint_definitionContext : ParserRuleContext {
		public IdentifierContext constraint_name;
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_keyContext primary_key() {
			return GetRuleContext<Primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_keyContext[] foreign_key() {
			return GetRuleContexts<Foreign_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_keyContext foreign_key(int i) {
			return GetRuleContext<Foreign_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRAINT() { return GetTokens(BigQueryParser.CONSTRAINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT(int i) {
			return GetToken(BigQueryParser.CONSTRAINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_constraint_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraint_definitionContext column_constraint_definition() {
		Column_constraint_definitionContext _localctx = new Column_constraint_definitionContext(Context, State);
		EnterRule(_localctx, 200, RULE_column_constraint_definition);
		int _la;
		try {
			int _alt;
			State = 2235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2217;
				column_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2218;
				primary_key();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2219;
					Match(CONSTRAINT);
					State = 2220;
					_localctx.constraint_name = identifier();
					}
				}

				State = 2223;
				foreign_key();
				State = 2232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2224;
						Match(COMMA);
						State = 2227;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==CONSTRAINT) {
							{
							State = 2225;
							Match(CONSTRAINT);
							State = 2226;
							_localctx.constraint_name = identifier();
							}
						}

						State = 2229;
						foreign_key();
						}
						} 
					}
					State = 2234;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 202, RULE_column_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2237;
			_localctx.column_name = path_expression();
			State = 2238;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_keyContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPrimary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPrimary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_keyContext primary_key() {
		Primary_keyContext _localctx = new Primary_keyContext(Context, State);
		EnterRule(_localctx, 204, RULE_primary_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240;
			Match(PRIMARY);
			State = 2241;
			Match(KEY);
			State = 2242;
			Match(OPAR);
			State = 2243;
			_localctx.column_names = path_expressions();
			State = 2244;
			Match(CPAR);
			State = 2245;
			Match(NOT);
			State = 2246;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_keyContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_referenceContext foreign_reference() {
			return GetRuleContext<Foreign_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterForeign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitForeign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_keyContext foreign_key() {
		Foreign_keyContext _localctx = new Foreign_keyContext(Context, State);
		EnterRule(_localctx, 206, RULE_foreign_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2248;
			Match(FOREIGN);
			State = 2249;
			Match(KEY);
			State = 2250;
			Match(OPAR);
			State = 2251;
			_localctx.column_names = path_expressions();
			State = 2252;
			Match(CPAR);
			State = 2253;
			foreign_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_referenceContext : ParserRuleContext {
		public IdentifierContext primary_key_table;
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Foreign_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterForeign_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitForeign_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_referenceContext foreign_reference() {
		Foreign_referenceContext _localctx = new Foreign_referenceContext(Context, State);
		EnterRule(_localctx, 208, RULE_foreign_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2255;
			Match(REFERENCES);
			State = 2256;
			_localctx.primary_key_table = identifier();
			State = 2257;
			Match(OPAR);
			State = 2258;
			_localctx.column_names = path_expressions();
			State = 2259;
			Match(CPAR);
			State = 2260;
			Match(NOT);
			State = 2261;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(Context, State);
		EnterRule(_localctx, 210, RULE_create_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2263;
			Match(CREATE);
			State = 2264;
			Match(SCHEMA);
			State = 2268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2265;
				Match(IF);
				State = 2266;
				Match(NOT);
				State = 2267;
				Match(EXISTS);
				}
			}

			State = 2273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				{
				State = 2270;
				_localctx.project_name = identifier();
				State = 2271;
				Match(DOT);
				}
				break;
			}
			State = 2275;
			_localctx.dataset_name = identifier();
			State = 2279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 2276;
				Match(DEFAULT);
				State = 2277;
				Match(COLLATE);
				State = 2278;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 2286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2281;
				Match(OPTIONS);
				State = 2282;
				Match(OPAR);
				State = 2283;
				option_parameters();
				State = 2284;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expr_tailContext query_expr_tail() {
			return GetRuleContext<Query_expr_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_recursive_cteContext[] non_recursive_cte() {
			return GetRuleContexts<Non_recursive_cteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_recursive_cteContext non_recursive_cte(int i) {
			return GetRuleContext<Non_recursive_cteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_cteContext[] recursive_cte() {
			return GetRuleContexts<Recursive_cteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_cteContext recursive_cte(int i) {
			return GetRuleContext<Recursive_cteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_operation_tailContext set_operation_tail() {
			return GetRuleContext<Set_operation_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(BigQueryParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		return query_expression(0);
	}

	private Query_expressionContext query_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Query_expressionContext _localctx = new Query_expressionContext(Context, _parentState);
		Query_expressionContext _prevctx = _localctx;
		int _startState = 212;
		EnterRecursionRule(_localctx, 212, RULE_query_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 2289;
				Match(WITH);
				State = 2291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RECURSIVE) {
					{
					State = 2290;
					Match(RECURSIVE);
					}
				}

				State = 2295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
				case 1:
					{
					State = 2293;
					non_recursive_cte();
					}
					break;
				case 2:
					{
					State = 2294;
					recursive_cte();
					}
					break;
				}
				State = 2304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2297;
					Match(COMMA);
					State = 2300;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
					case 1:
						{
						State = 2298;
						non_recursive_cte();
						}
						break;
					case 2:
						{
						State = 2299;
						recursive_cte();
						}
						break;
					}
					}
					}
					State = 2306;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2315;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
				case 1:
					{
					State = 2307;
					select();
					}
					break;
				case 2:
					{
					State = 2308;
					Match(OPAR);
					State = 2309;
					query_expression(0);
					State = 2310;
					Match(CPAR);
					}
					break;
				case 3:
					{
					State = 2312;
					query_expression(0);
					State = 2313;
					set_operation_tail();
					}
					break;
				}
				State = 2317;
				query_expr_tail();
				}
				break;
			case SELECT:
				{
				State = 2319;
				select();
				State = 2320;
				query_expr_tail();
				}
				break;
			case OPAR:
				{
				State = 2322;
				Match(OPAR);
				State = 2323;
				query_expression(0);
				State = 2324;
				Match(CPAR);
				State = 2325;
				query_expr_tail();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2335;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Query_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_query_expression);
					State = 2329;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2330;
					set_operation_tail();
					State = 2331;
					query_expr_tail();
					}
					} 
				}
				State = 2337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Query_expr_tailContext : ParserRuleContext {
		public ExpressionContext order_by;
		public ExpressionContext skip_rows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(BigQueryParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(BigQueryParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(BigQueryParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(BigQueryParser.DESC, i);
		}
		public Query_expr_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expr_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expr_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expr_tailContext query_expr_tail() {
		Query_expr_tailContext _localctx = new Query_expr_tailContext(Context, State);
		EnterRule(_localctx, 214, RULE_query_expr_tail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				{
				State = 2338;
				Match(ORDER);
				State = 2339;
				Match(BY);
				State = 2340;
				_localctx.order_by = expression(0);
				State = 2342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2341;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 2351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2344;
						Match(COMMA);
						State = 2345;
						expression(0);
						State = 2347;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
						case 1:
							{
							State = 2346;
							_la = TokenStream.LA(1);
							if ( !(_la==ASC || _la==DESC) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						}
						} 
					}
					State = 2353;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				}
				}
				break;
			}
			State = 2362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				{
				State = 2356;
				Match(LIMIT);
				State = 2357;
				expression(0);
				State = 2360;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
				case 1:
					{
					State = 2358;
					Match(OFFSET);
					State = 2359;
					_localctx.skip_rows = expression(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_operation_tailContext : ParserRuleContext {
		public Path_expressionsContext column_list_3;
		public Path_expressionsContext column_list_4;
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(BigQueryParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BigQueryParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORRESPONDING() { return GetToken(BigQueryParser.CORRESPONDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(BigQueryParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Set_operation_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operation_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSet_operation_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSet_operation_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_operation_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_operation_tailContext set_operation_tail() {
		Set_operation_tailContext _localctx = new Set_operation_tailContext(Context, State);
		EnterRule(_localctx, 216, RULE_set_operation_tail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				{
				State = 2364;
				Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
				{
				State = 2365;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==LEFT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2366;
					Match(OUTER);
					}
				}

				}
				break;
			case EXCEPT:
			case INTERSECT:
			case UNION:
				break;
			default:
				break;
			}
			State = 2377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 2371;
				Match(UNION);
				State = 2372;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case INTERSECT:
				{
				State = 2373;
				Match(INTERSECT);
				State = 2374;
				Match(DISTINCT);
				}
				break;
			case EXCEPT:
				{
				State = 2375;
				Match(EXCEPT);
				State = 2376;
				Match(DISTINCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY || _la==STRICT || _la==CORRESPONDING) {
				{
				State = 2399;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BY:
					{
					State = 2379;
					Match(BY);
					State = 2380;
					Match(NAME);
					State = 2386;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ON) {
						{
						State = 2381;
						Match(ON);
						State = 2382;
						Match(OPAR);
						State = 2383;
						_localctx.column_list_3 = path_expressions();
						State = 2384;
						Match(CPAR);
						}
					}

					}
					break;
				case STRICT:
				case CORRESPONDING:
					{
					State = 2389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRICT) {
						{
						State = 2388;
						Match(STRICT);
						}
					}

					State = 2391;
					Match(CORRESPONDING);
					State = 2397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BY) {
						{
						State = 2392;
						Match(BY);
						State = 2393;
						Match(OPAR);
						State = 2394;
						_localctx.column_list_4 = path_expressions();
						State = 2395;
						Match(CPAR);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 2403;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_recursive_cteContext : ParserRuleContext {
		public IdentifierContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Non_recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNon_recursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNon_recursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_recursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_recursive_cteContext non_recursive_cte() {
		Non_recursive_cteContext _localctx = new Non_recursive_cteContext(Context, State);
		EnterRule(_localctx, 218, RULE_non_recursive_cte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2405;
			_localctx.cte_name = identifier();
			State = 2406;
			Match(AS);
			State = 2407;
			Match(OPAR);
			State = 2408;
			query_expression(0);
			State = 2409;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_cteContext : ParserRuleContext {
		public IdentifierContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_union_operationContext recursive_union_operation() {
			return GetRuleContext<Recursive_union_operationContext>(0);
		}
		public Recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_cteContext recursive_cte() {
		Recursive_cteContext _localctx = new Recursive_cteContext(Context, State);
		EnterRule(_localctx, 220, RULE_recursive_cte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2411;
			_localctx.cte_name = identifier();
			State = 2412;
			Match(AS);
			{
			State = 2413;
			recursive_union_operation();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_union_operationContext : ParserRuleContext {
		public Query_expressionContext base_term;
		public Query_expressionContext recursive_term;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public Recursive_union_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_union_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRecursive_union_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRecursive_union_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_union_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_union_operationContext recursive_union_operation() {
		Recursive_union_operationContext _localctx = new Recursive_union_operationContext(Context, State);
		EnterRule(_localctx, 222, RULE_recursive_union_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2415;
			_localctx.base_term = query_expression(0);
			State = 2416;
			Match(UNION);
			State = 2417;
			Match(ALL);
			State = 2418;
			_localctx.recursive_term = query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(BigQueryParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Differential_privacy_clauseContext differential_privacy_clause() {
			return GetRuleContext<Differential_privacy_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_clausesContext from_clauses() {
			return GetRuleContext<From_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_specificationContext group_by_specification() {
			return GetRuleContext<Group_by_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY() { return GetToken(BigQueryParser.QUALIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(BigQueryParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(BigQueryParser.VALUE, 0); }
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 224, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2420;
			Match(SELECT);
			State = 2423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 2421;
				Match(WITH);
				State = 2422;
				differential_privacy_clause();
				}
				break;
			}
			State = 2426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				{
				State = 2425;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 2428;
				Match(AS);
				State = 2429;
				_la = TokenStream.LA(1);
				if ( !(_la==STRUCT || _la==VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2432;
			select_list();
			State = 2435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				{
				State = 2433;
				Match(FROM);
				State = 2434;
				from_clauses();
				}
				break;
			}
			State = 2439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 2437;
				Match(WHERE);
				State = 2438;
				expression(0);
				}
				break;
			}
			State = 2444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 2441;
				Match(GROUP);
				State = 2442;
				Match(BY);
				State = 2443;
				group_by_specification();
				}
				break;
			}
			State = 2448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 2446;
				Match(HAVING);
				State = 2447;
				expression(0);
				}
				break;
			}
			State = 2452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 2450;
				Match(QUALIFY);
				State = 2451;
				expression(0);
				}
				break;
			}
			State = 2456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				{
				State = 2454;
				Match(WINDOW);
				State = 2455;
				window_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_specificationContext : ParserRuleContext {
		public ExpressionsContext groupable_items;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_specificationContext grouping_sets_specification() {
			return GetRuleContext<Grouping_sets_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_specificationContext rollup_specification() {
			return GetRuleContext<Rollup_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Group_by_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_specificationContext group_by_specification() {
		Group_by_specificationContext _localctx = new Group_by_specificationContext(Context, State);
		EnterRule(_localctx, 226, RULE_group_by_specification);
		try {
			State = 2465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2458;
				_localctx.groupable_items = expressions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2459;
				Match(ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2460;
				grouping_sets_specification();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2461;
				rollup_specification();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2462;
				cube_specification();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2463;
				Match(OPAR);
				State = 2464;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(BigQueryParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(BigQueryParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Grouping_sets_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_specificationContext grouping_sets_specification() {
		Grouping_sets_specificationContext _localctx = new Grouping_sets_specificationContext(Context, State);
		EnterRule(_localctx, 228, RULE_grouping_sets_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2467;
			Match(GROUP);
			State = 2468;
			Match(BY);
			State = 2469;
			Match(GROUPING);
			State = 2470;
			Match(SETS);
			State = 2471;
			Match(OPAR);
			State = 2472;
			grouping_list();
			State = 2473;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_list_itemContext[] grouping_list_item() {
			return GetRuleContexts<Grouping_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_list_itemContext grouping_list_item(int i) {
			return GetRuleContext<Grouping_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Grouping_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_listContext grouping_list() {
		Grouping_listContext _localctx = new Grouping_listContext(Context, State);
		EnterRule(_localctx, 230, RULE_grouping_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475;
			grouping_list_item();
			State = 2480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2476;
				Match(COMMA);
				State = 2477;
				grouping_list_item();
				}
				}
				State = 2482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_list_itemContext : ParserRuleContext {
		public ExpressionContext groupable_item;
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_specificationContext rollup_specification() {
			return GetRuleContext<Rollup_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Groupable_item_setContext groupable_item_set() {
			return GetRuleContext<Groupable_item_setContext>(0);
		}
		public Grouping_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_list_itemContext grouping_list_item() {
		Grouping_list_itemContext _localctx = new Grouping_list_itemContext(Context, State);
		EnterRule(_localctx, 232, RULE_grouping_list_item);
		try {
			State = 2487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2483;
				rollup_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2484;
				cube_specification();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2485;
				_localctx.groupable_item = expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2486;
				groupable_item_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(BigQueryParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Cube_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCube_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCube_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cube_specificationContext cube_specification() {
		Cube_specificationContext _localctx = new Cube_specificationContext(Context, State);
		EnterRule(_localctx, 234, RULE_cube_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2489;
			Match(GROUP);
			State = 2490;
			Match(BY);
			State = 2491;
			Match(CUBE);
			State = 2492;
			Match(OPAR);
			State = 2493;
			grouping_list();
			State = 2494;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupable_item_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Groupable_item_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupable_item_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGroupable_item_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGroupable_item_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupable_item_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupable_item_setContext groupable_item_set() {
		Groupable_item_setContext _localctx = new Groupable_item_setContext(Context, State);
		EnterRule(_localctx, 236, RULE_groupable_item_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496;
			Match(OPAR);
			State = 2497;
			expressions();
			State = 2498;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(BigQueryParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Rollup_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRollup_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRollup_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_specificationContext rollup_specification() {
		Rollup_specificationContext _localctx = new Rollup_specificationContext(Context, State);
		EnterRule(_localctx, 238, RULE_rollup_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500;
			Match(GROUP);
			State = 2501;
			Match(BY);
			State = 2502;
			Match(ROLLUP);
			State = 2503;
			Match(OPAR);
			State = 2504;
			grouping_list();
			State = 2505;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_window_expressionContext[] named_window_expression() {
			return GetRuleContexts<Named_window_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_window_expressionContext named_window_expression(int i) {
			return GetRuleContext<Named_window_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 240, RULE_window_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507;
			named_window_expression();
			State = 2512;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,276,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2508;
					Match(COMMA);
					State = 2509;
					named_window_expression();
					}
					} 
				}
				State = 2514;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,276,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_window_expressionContext : ParserRuleContext {
		public Path_expressionContext named_window_1;
		public Path_expressionContext named_window_2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Named_window_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_window_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_window_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_window_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_window_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_window_expressionContext named_window_expression() {
		Named_window_expressionContext _localctx = new Named_window_expressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_named_window_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2515;
			_localctx.named_window_1 = path_expression();
			State = 2516;
			Match(AS);
			State = 2522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 2517;
				_localctx.named_window_2 = path_expression();
				}
				break;
			case OPAR:
				{
				State = 2518;
				Match(OPAR);
				State = 2519;
				window_specification();
				State = 2520;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		public Path_expressionContext named_window;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expressions_asc_descContext expressions_asc_desc() {
			return GetRuleContext<Expressions_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_clauseContext window_frame_clause() {
			return GetRuleContext<Window_frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 244, RULE_window_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 2524;
				_localctx.named_window = path_expression();
				}
			}

			State = 2530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2527;
				Match(PARTITION);
				State = 2528;
				Match(BY);
				State = 2529;
				expressions();
				}
			}

			State = 2535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 2532;
				Match(ORDER);
				State = 2533;
				Match(BY);
				State = 2534;
				expressions_asc_desc();
				}
			}

			State = 2538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 2537;
				window_frame_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(BigQueryParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_startContext frame_start() {
			return GetRuleContext<Frame_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_betweenContext frame_between() {
			return GetRuleContext<Frame_betweenContext>(0);
		}
		public Window_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_clauseContext window_frame_clause() {
		Window_frame_clauseContext _localctx = new Window_frame_clauseContext(Context, State);
		EnterRule(_localctx, 246, RULE_window_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2540;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 2541;
				frame_start();
				}
				break;
			case 2:
				{
				State = 2542;
				frame_between();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		public Frame_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_startContext frame_start() {
		Frame_startContext _localctx = new Frame_startContext(Context, State);
		EnterRule(_localctx, 248, RULE_frame_start);
		int _la;
		try {
			State = 2554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2545;
				Match(UNBOUNDED);
				State = 2546;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2547;
				expression(0);
				State = 2548;
				Match(PRECEDING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CURRENT) {
					{
					State = 2550;
					Match(CURRENT);
					State = 2551;
					Match(ROW);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_betweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_aContext frame_end_a() {
			return GetRuleContext<Frame_end_aContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_bContext frame_end_b() {
			return GetRuleContext<Frame_end_bContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_cContext frame_end_c() {
			return GetRuleContext<Frame_end_cContext>(0);
		}
		public Frame_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_between(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_betweenContext frame_between() {
		Frame_betweenContext _localctx = new Frame_betweenContext(Context, State);
		EnterRule(_localctx, 250, RULE_frame_between);
		try {
			State = 2578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2556;
				Match(BETWEEN);
				State = 2557;
				Match(UNBOUNDED);
				State = 2558;
				Match(PRECEDING);
				State = 2559;
				Match(AND);
				State = 2560;
				frame_end_a();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2561;
				Match(BETWEEN);
				State = 2562;
				expression(0);
				State = 2563;
				Match(PRECEDING);
				State = 2564;
				Match(AND);
				State = 2565;
				frame_end_a();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2567;
				Match(BETWEEN);
				State = 2568;
				Match(CURRENT);
				State = 2569;
				Match(ROW);
				State = 2570;
				Match(AND);
				State = 2571;
				frame_end_b();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2572;
				Match(BETWEEN);
				State = 2573;
				expression(0);
				State = 2574;
				Match(FOLLOWING);
				State = 2575;
				Match(AND);
				State = 2576;
				frame_end_c();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_aContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_a(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_aContext frame_end_a() {
		Frame_end_aContext _localctx = new Frame_end_aContext(Context, State);
		EnterRule(_localctx, 252, RULE_frame_end_a);
		try {
			State = 2590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2580;
				expression(0);
				State = 2581;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2583;
				Match(CURRENT);
				State = 2584;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2585;
				expression(0);
				State = 2586;
				Match(FOLLOWING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2588;
				Match(UNBOUNDED);
				State = 2589;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_bContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_bContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_b; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_b(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_b(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_b(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_bContext frame_end_b() {
		Frame_end_bContext _localctx = new Frame_end_bContext(Context, State);
		EnterRule(_localctx, 254, RULE_frame_end_b);
		try {
			State = 2599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2592;
				Match(CURRENT);
				State = 2593;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2594;
				expression(0);
				State = 2595;
				Match(FOLLOWING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2597;
				Match(UNBOUNDED);
				State = 2598;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_cContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_cContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_c(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_cContext frame_end_c() {
		Frame_end_cContext _localctx = new Frame_end_cContext(Context, State);
		EnterRule(_localctx, 256, RULE_frame_end_c);
		try {
			State = 2606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2601;
				expression(0);
				State = 2602;
				Match(FOLLOWING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2604;
				Match(UNBOUNDED);
				State = 2605;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Differential_privacy_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL_PRIVACY() { return GetToken(BigQueryParser.DIFFERENTIAL_PRIVACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Differential_privacy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_differential_privacy_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDifferential_privacy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDifferential_privacy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferential_privacy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Differential_privacy_clauseContext differential_privacy_clause() {
		Differential_privacy_clauseContext _localctx = new Differential_privacy_clauseContext(Context, State);
		EnterRule(_localctx, 258, RULE_differential_privacy_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2608;
			Match(DIFFERENTIAL_PRIVACY);
			State = 2609;
			Match(OPTIONS);
			State = 2610;
			Match(OPAR);
			State = 2611;
			option_parameters();
			State = 2612;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext[] from_clause() {
			return GetRuleContexts<From_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause(int i) {
			return GetRuleContext<From_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public From_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clausesContext from_clauses() {
		From_clausesContext _localctx = new From_clausesContext(Context, State);
		EnterRule(_localctx, 260, RULE_from_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2614;
			from_clause();
			State = 2619;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,289,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2615;
					Match(COMMA);
					State = 2616;
					from_clause();
					}
					} 
				}
				State = 2621;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,289,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext from_item() {
			return GetRuleContext<From_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pivot_operatorContext pivot_operator() {
			return GetRuleContext<Pivot_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unpivot_operatorContext unpivot_operator() {
			return GetRuleContext<Unpivot_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_operatorContext tablesample_operator() {
			return GetRuleContext<Tablesample_operatorContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 262, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2622;
			from_item(0);
			State = 2625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				{
				State = 2623;
				pivot_operator();
				}
				break;
			case 2:
				{
				State = 2624;
				unpivot_operator();
				}
				break;
			}
			State = 2628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				{
				State = 2627;
				tablesample_operator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_itemContext : ParserRuleContext {
		public IdentifierContext table_name;
		public ExpressionContext timestamp_expression;
		public Path_expressionContext field_path;
		public Path_expressionContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext[] from_item() {
			return GetRuleContexts<From_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext from_item(int i) {
			return GetRuleContext<From_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cross_join_operatorContext cross_join_operator() {
			return GetRuleContext<Cross_join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Condition_join_operatorContext condition_join_operator() {
			return GetRuleContext<Condition_join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_conditionContext join_condition() {
			return GetRuleContext<Join_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unnest_operatorContext unnest_operator() {
			return GetRuleContext<Unnest_operatorContext>(0);
		}
		public From_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_itemContext from_item() {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		From_itemContext _localctx = new From_itemContext(Context, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 264;
		EnterRecursionRule(_localctx, 264, RULE_from_item, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				{
				State = 2631;
				_localctx.table_name = identifier();
				State = 2633;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
				case 1:
					{
					State = 2632;
					as_alias();
					}
					break;
				}
				State = 2640;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
				case 1:
					{
					State = 2635;
					Match(FOR);
					State = 2636;
					Match(SYSTEM_TIME);
					State = 2637;
					Match(AS);
					State = 2638;
					Match(OF);
					State = 2639;
					_localctx.timestamp_expression = expression(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2642;
				Match(OPAR);
				State = 2652;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
				case 1:
					{
					State = 2643;
					from_item(0);
					State = 2644;
					cross_join_operator();
					State = 2645;
					from_item(0);
					}
					break;
				case 2:
					{
					State = 2647;
					from_item(0);
					State = 2648;
					condition_join_operator();
					State = 2649;
					from_item(0);
					State = 2650;
					join_condition();
					}
					break;
				}
				State = 2654;
				Match(CPAR);
				}
				break;
			case 3:
				{
				State = 2656;
				Match(OPAR);
				State = 2657;
				query_expression(0);
				State = 2658;
				Match(CPAR);
				State = 2660;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
				case 1:
					{
					State = 2659;
					as_alias();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 2662;
				_localctx.field_path = path_expression();
				}
				break;
			case 5:
				{
				State = 2663;
				unnest_operator();
				}
				break;
			case 6:
				{
				State = 2664;
				_localctx.cte_name = path_expression();
				State = 2666;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
				case 1:
					{
					State = 2665;
					as_alias();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2681;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2679;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
					case 1:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_from_item);
						State = 2670;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 2671;
						cross_join_operator();
						State = 2672;
						from_item(8);
						}
						break;
					case 2:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_from_item);
						State = 2674;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 2675;
						condition_join_operator();
						State = 2676;
						from_item(0);
						State = 2677;
						join_condition();
						}
						break;
					}
					} 
				}
				State = 2683;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unnest_operatorContext : ParserRuleContext {
		public ExpressionContext array;
		public Path_expressionContext array_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		public Unnest_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnest_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUnnest_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUnnest_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnest_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unnest_operatorContext unnest_operator() {
		Unnest_operatorContext _localctx = new Unnest_operatorContext(Context, State);
		EnterRule(_localctx, 266, RULE_unnest_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNNEST:
				{
				State = 2684;
				Match(UNNEST);
				State = 2685;
				Match(OPAR);
				State = 2686;
				_localctx.array = expression(0);
				State = 2687;
				Match(CPAR);
				State = 2689;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
				case 1:
					{
					State = 2688;
					as_alias();
					}
					break;
				}
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 2691;
				_localctx.array_path = path_expression();
				State = 2693;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
				case 1:
					{
					State = 2692;
					as_alias();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				{
				State = 2697;
				Match(WITH);
				State = 2698;
				Match(OFFSET);
				State = 2700;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
				case 1:
					{
					State = 2699;
					as_alias();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(BigQueryParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		public Cross_join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCross_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCross_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCross_join_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cross_join_operatorContext cross_join_operator() {
		Cross_join_operatorContext _localctx = new Cross_join_operatorContext(Context, State);
		EnterRule(_localctx, 268, RULE_cross_join_operator);
		try {
			State = 2707;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2704;
				Match(CROSS);
				State = 2705;
				Match(JOIN);
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2706;
				Match(COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BigQueryParser.RIGHT, 0); }
		public Condition_join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCondition_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCondition_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_join_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_join_operatorContext condition_join_operator() {
		Condition_join_operatorContext _localctx = new Condition_join_operatorContext(Context, State);
		EnterRule(_localctx, 270, RULE_condition_join_operator);
		int _la;
		try {
			State = 2728;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER) {
					{
					State = 2709;
					Match(INNER);
					}
				}

				State = 2712;
				Match(JOIN);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2713;
				Match(FULL);
				State = 2715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2714;
					Match(OUTER);
					}
				}

				State = 2717;
				Match(JOIN);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2718;
				Match(LEFT);
				State = 2720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2719;
					Match(OUTER);
					}
				}

				State = 2722;
				Match(JOIN);
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2723;
				Match(RIGHT);
				State = 2725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2724;
					Match(OUTER);
					}
				}

				State = 2727;
				Match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public On_clauseContext on_clause() {
			return GetRuleContext<On_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterJoin_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitJoin_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_conditionContext join_condition() {
		Join_conditionContext _localctx = new Join_conditionContext(Context, State);
		EnterRule(_localctx, 272, RULE_join_condition);
		try {
			State = 2732;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2730;
				on_clause();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2731;
				using_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public On_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOn_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOn_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_clauseContext on_clause() {
		On_clauseContext _localctx = new On_clauseContext(Context, State);
		EnterRule(_localctx, 274, RULE_on_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2734;
			Match(ON);
			State = 2735;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		public Path_expressionsContext column_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 276, RULE_using_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2737;
			Match(USING);
			State = 2738;
			Match(OPAR);
			State = 2739;
			_localctx.column_list = path_expressions();
			State = 2740;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_operatorContext : ParserRuleContext {
		public IdentifierContext input_column;
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(BigQueryParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expressions_as_aliasContext expressions_as_alias() {
			return GetRuleContext<Expressions_as_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public Pivot_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_operatorContext pivot_operator() {
		Pivot_operatorContext _localctx = new Pivot_operatorContext(Context, State);
		EnterRule(_localctx, 278, RULE_pivot_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2742;
			Match(PIVOT);
			State = 2743;
			Match(OPAR);
			State = 2744;
			function_call();
			State = 2746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 2745;
				as_alias();
				}
			}

			State = 2755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2748;
				Match(COMMA);
				State = 2749;
				function_call();
				State = 2751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
					{
					State = 2750;
					as_alias();
					}
				}

				}
				}
				State = 2757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2758;
			Match(FOR);
			State = 2759;
			_localctx.input_column = identifier();
			State = 2760;
			Match(IN);
			State = 2761;
			Match(OPAR);
			State = 2762;
			expressions_as_alias();
			State = 2763;
			Match(CPAR);
			State = 2764;
			Match(CPAR);
			State = 2767;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				{
				State = 2765;
				Match(AS);
				State = 2766;
				_localctx.alias = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_operatorContext : ParserRuleContext {
		public As_aliasContext unpivot_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(BigQueryParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_column_unpivotContext single_column_unpivot() {
			return GetRuleContext<Single_column_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multi_column_unpivotContext multi_column_unpivot() {
			return GetRuleContext<Multi_column_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BigQueryParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(BigQueryParser.EXCLUDE, 0); }
		public Unpivot_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_operatorContext unpivot_operator() {
		Unpivot_operatorContext _localctx = new Unpivot_operatorContext(Context, State);
		EnterRule(_localctx, 280, RULE_unpivot_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2769;
			Match(UNPIVOT);
			State = 2774;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				{
				State = 2770;
				Match(INCLUDE);
				State = 2771;
				Match(NULLS);
				}
				break;
			case EXCLUDE:
				{
				State = 2772;
				Match(EXCLUDE);
				State = 2773;
				Match(NULLS);
				}
				break;
			case OPAR:
				break;
			default:
				break;
			}
			State = 2776;
			Match(OPAR);
			State = 2779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				{
				State = 2777;
				single_column_unpivot();
				}
				break;
			case 2:
				{
				State = 2778;
				multi_column_unpivot();
				}
				break;
			}
			State = 2781;
			Match(CPAR);
			State = 2782;
			_localctx.unpivot_alias = as_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_column_unpivotContext : ParserRuleContext {
		public ExpressionsContext values_column;
		public Path_expressionContext name_column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Columns_to_unpivotContext columns_to_unpivot() {
			return GetRuleContext<Columns_to_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Single_column_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_column_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSingle_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSingle_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_column_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_column_unpivotContext single_column_unpivot() {
		Single_column_unpivotContext _localctx = new Single_column_unpivotContext(Context, State);
		EnterRule(_localctx, 282, RULE_single_column_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2784;
			_localctx.values_column = expressions();
			State = 2785;
			Match(FOR);
			State = 2786;
			_localctx.name_column = path_expression();
			State = 2787;
			Match(IN);
			State = 2788;
			Match(OPAR);
			State = 2789;
			columns_to_unpivot();
			State = 2790;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_column_unpivotContext : ParserRuleContext {
		public Path_expressionContext name_column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_sets_to_unpivotContext column_sets_to_unpivot() {
			return GetRuleContext<Column_sets_to_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Multi_column_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_column_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMulti_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMulti_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_column_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_column_unpivotContext multi_column_unpivot() {
		Multi_column_unpivotContext _localctx = new Multi_column_unpivotContext(Context, State);
		EnterRule(_localctx, 284, RULE_multi_column_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2792;
			Match(OPAR);
			State = 2793;
			expressions();
			State = 2794;
			Match(CPAR);
			State = 2795;
			Match(FOR);
			State = 2796;
			_localctx.name_column = path_expression();
			State = 2797;
			Match(IN);
			State = 2798;
			Match(OPAR);
			State = 2799;
			column_sets_to_unpivot();
			State = 2800;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Columns_to_unpivotContext : ParserRuleContext {
		public IdentifierContext row_value_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Columns_to_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns_to_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumns_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumns_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns_to_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Columns_to_unpivotContext columns_to_unpivot() {
		Columns_to_unpivotContext _localctx = new Columns_to_unpivotContext(Context, State);
		EnterRule(_localctx, 286, RULE_columns_to_unpivot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2802;
			expression(0);
			State = 2804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 2803;
				as_alias();
				}
			}

			State = 2813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2806;
				Match(COMMA);
				State = 2807;
				expression(0);
				State = 2809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
					{
					State = 2808;
					_localctx.row_value_alias = identifier();
					}
				}

				}
				}
				State = 2815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_sets_to_unpivotContext : ParserRuleContext {
		public IdentifierContext row_value_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_sets_to_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_sets_to_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_sets_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_sets_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_sets_to_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_sets_to_unpivotContext column_sets_to_unpivot() {
		Column_sets_to_unpivotContext _localctx = new Column_sets_to_unpivotContext(Context, State);
		EnterRule(_localctx, 288, RULE_column_sets_to_unpivot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2816;
			Match(OPAR);
			State = 2817;
			expression(0);
			State = 2819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 2818;
				as_alias();
				}
			}

			State = 2828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2821;
				Match(COMMA);
				State = 2822;
				expression(0);
				State = 2824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
					{
					State = 2823;
					_localctx.row_value_alias = identifier();
					}
				}

				}
				}
				State = 2830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2831;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_operatorContext : ParserRuleContext {
		public ExpressionContext percent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(BigQueryParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(BigQueryParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BigQueryParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Tablesample_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTablesample_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTablesample_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablesample_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_operatorContext tablesample_operator() {
		Tablesample_operatorContext _localctx = new Tablesample_operatorContext(Context, State);
		EnterRule(_localctx, 290, RULE_tablesample_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2833;
			Match(TABLESAMPLE);
			State = 2834;
			Match(SYSTEM);
			State = 2835;
			Match(OPAR);
			State = 2836;
			_localctx.percent = expression(0);
			State = 2837;
			Match(PERCENT);
			State = 2838;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Option_parameterContext[] option_parameter() {
			return GetRuleContexts<Option_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parameterContext option_parameter(int i) {
			return GetRuleContext<Option_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Option_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOption_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOption_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_parametersContext option_parameters() {
		Option_parametersContext _localctx = new Option_parametersContext(Context, State);
		EnterRule(_localctx, 292, RULE_option_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2840;
			option_parameter();
			State = 2845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2841;
				Match(COMMA);
				State = 2842;
				option_parameter();
				}
				}
				State = 2847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Option_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOption_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOption_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_parameterContext option_parameter() {
		Option_parameterContext _localctx = new Option_parameterContext(Context, State);
		EnterRule(_localctx, 294, RULE_option_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2848;
			identifier();
			State = 2849;
			Match(EQ);
			State = 2850;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_itemContext[] select_list_item() {
			return GetRuleContexts<Select_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_itemContext select_list_item(int i) {
			return GetRuleContext<Select_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 296, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2852;
			select_list_item();
			State = 2857;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,325,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2853;
					Match(COMMA);
					State = 2854;
					select_list_item();
					}
					} 
				}
				State = 2859;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,325,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_allContext select_all() {
			return GetRuleContext<Select_allContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		public Select_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_itemContext select_list_item() {
		Select_list_itemContext _localctx = new Select_list_itemContext(Context, State);
		EnterRule(_localctx, 298, RULE_select_list_item);
		try {
			State = 2865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2860;
				select_all();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2861;
				expression(0);
				State = 2863;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
				case 1:
					{
					State = 2862;
					as_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_allContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_column_namesContext as_column_names() {
			return GetRuleContext<As_column_namesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Select_allContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_all(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_allContext select_all() {
		Select_allContext _localctx = new Select_allContext(Context, State);
		EnterRule(_localctx, 300, RULE_select_all);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -16692222L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1117455657541304321L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 561025808072703L) != 0)) {
				{
				State = 2867;
				expression(0);
				State = 2868;
				Match(DOT);
				}
			}

			State = 2872;
			Match(STAR);
			State = 2878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				{
				State = 2873;
				Match(EXCEPT);
				State = 2874;
				Match(OPAR);
				State = 2875;
				_localctx.column_names = path_expressions();
				State = 2876;
				Match(CPAR);
				}
				break;
			}
			State = 2885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				{
				State = 2880;
				Match(REPLACE);
				State = 2881;
				Match(OPAR);
				State = 2882;
				as_column_names();
				State = 2883;
				Match(CPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BigQueryParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(BigQueryParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNOT() { return GetToken(BigQueryParser.BNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_Context case_() {
			return GetRuleContext<Case_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoalesceContext coalesce() {
			return GetRuleContext<CoalesceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_Context if_() {
			return GetRuleContext<If_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfnullContext ifnull() {
			return GetRuleContext<IfnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullifContext nullif() {
			return GetRuleContext<NullifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BigQueryParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(BigQueryParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(BigQueryParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(BigQueryParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(BigQueryParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(BigQueryParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND() { return GetToken(BigQueryParser.BAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BXOR() { return GetToken(BigQueryParser.BXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR() { return GetToken(BigQueryParser.BOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(BigQueryParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(BigQueryParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(BigQueryParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BigQueryParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(BigQueryParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBR() { return GetToken(BigQueryParser.OBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBR() { return GetToken(BigQueryParser.CBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 302;
		EnterRecursionRule(_localctx, 302, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2917;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				{
				State = 2888;
				Match(OPAR);
				State = 2889;
				expression(0);
				State = 2890;
				Match(CPAR);
				}
				break;
			case 2:
				{
				State = 2892;
				select();
				}
				break;
			case 3:
				{
				State = 2893;
				path_expression();
				}
				break;
			case 4:
				{
				State = 2894;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3074L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2895;
				expression(26);
				}
				break;
			case 5:
				{
				State = 2896;
				Match(NOT);
				State = 2897;
				expression(16);
				}
				break;
			case 6:
				{
				State = 2898;
				Match(EXISTS);
				State = 2899;
				Match(OPAR);
				State = 2900;
				expression(0);
				State = 2901;
				Match(CPAR);
				}
				break;
			case 7:
				{
				State = 2903;
				Match(UNNEST);
				State = 2904;
				Match(OPAR);
				State = 2905;
				expression(0);
				State = 2906;
				Match(CPAR);
				}
				break;
			case 8:
				{
				State = 2908;
				function_call();
				}
				break;
			case 9:
				{
				State = 2909;
				window_function();
				}
				break;
			case 10:
				{
				State = 2910;
				literal();
				}
				break;
			case 11:
				{
				State = 2911;
				case_expression();
				}
				break;
			case 12:
				{
				State = 2912;
				case_();
				}
				break;
			case 13:
				{
				State = 2913;
				coalesce();
				}
				break;
			case 14:
				{
				State = 2914;
				if_();
				}
				break;
			case 15:
				{
				State = 2915;
				ifnull();
				}
				break;
			case 16:
				{
				State = 2916;
				nullif();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2998;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2996;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2919;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 2920;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 772L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2921;
						expression(26);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2922;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 2923;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2924;
						expression(25);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2925;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 2930;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case LT:
							{
							State = 2926;
							Match(LT);
							State = 2927;
							Match(LT);
							}
							break;
						case GT:
							{
							State = 2928;
							Match(GT);
							State = 2929;
							Match(GT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2932;
						expression(24);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2933;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 2934;
						Match(BAND);
						State = 2935;
						expression(23);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2936;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 2937;
						Match(BXOR);
						State = 2938;
						expression(22);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2939;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 2940;
						Match(BOR);
						State = 2941;
						expression(21);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2942;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 2953;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case EQ:
							{
							State = 2943;
							Match(EQ);
							}
							break;
						case NEQ:
							{
							State = 2944;
							Match(NEQ);
							}
							break;
						case LT:
							{
							State = 2945;
							Match(LT);
							}
							break;
						case GT:
							{
							State = 2946;
							Match(GT);
							}
							break;
						case LTE:
							{
							State = 2947;
							Match(LTE);
							}
							break;
						case GTE:
							{
							State = 2948;
							Match(GTE);
							}
							break;
						case BETWEEN:
						case IN:
						case LIKE:
						case NOT:
							{
							State = 2950;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==NOT) {
								{
								State = 2949;
								Match(NOT);
								}
							}

							State = 2952;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & 17626545782785L) != 0)) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2955;
						expression(20);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2956;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 2957;
						Match(IS);
						State = 2959;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2958;
							Match(NOT);
							}
						}

						State = 2961;
						Match(DISTINCT);
						State = 2962;
						Match(FROM);
						State = 2963;
						expression(18);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2964;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 2965;
						Match(AND);
						State = 2966;
						expression(16);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2967;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 2968;
						Match(OR);
						State = 2969;
						expression(15);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2970;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 2972;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2971;
							Match(NOT);
							}
						}

						State = 2974;
						Match(LIKE);
						State = 2975;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2976;
						expression(11);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2977;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 2978;
						Match(DOT);
						State = 2979;
						path_expression();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2980;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 2981;
						Match(OBR);
						State = 2982;
						expression(0);
						State = 2983;
						Match(CBR);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2985;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 2986;
						Match(IS);
						State = 2988;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2987;
							Match(NOT);
							}
						}

						State = 2990;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 72057595111669761L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2991;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 2993;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AS) {
							{
							State = 2992;
							Match(AS);
							}
						}

						State = 2995;
						_localctx.alias = identifier();
						}
						break;
					}
					} 
				}
				State = 3000;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 304, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3001;
			expression(0);
			State = 3006;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,341,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3002;
					Match(COMMA);
					State = 3003;
					expression(0);
					}
					} 
				}
				State = 3008;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,341,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext expr_to_match;
		public ExpressionContext result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(Context, State);
		EnterRule(_localctx, 306, RULE_case_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009;
			Match(CASE);
			State = 3010;
			expression(0);
			State = 3016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3011;
				Match(WHEN);
				State = 3012;
				_localctx.expr_to_match = expression(0);
				State = 3013;
				Match(THEN);
				State = 3014;
				_localctx.result = expression(0);
				}
				}
				State = 3018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 3022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3020;
				Match(ELSE);
				State = 3021;
				_localctx.else_result = expression(0);
				}
			}

			State = 3024;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_Context : ParserRuleContext {
		public ExpressionContext expr_to_match;
		public ExpressionContext result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Case_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_Context case_() {
		Case_Context _localctx = new Case_Context(Context, State);
		EnterRule(_localctx, 308, RULE_case_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3026;
			Match(CASE);
			State = 3032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3027;
				Match(WHEN);
				State = 3028;
				_localctx.expr_to_match = expression(0);
				State = 3029;
				Match(THEN);
				State = 3030;
				_localctx.result = expression(0);
				}
				}
				State = 3034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 3038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3036;
				Match(ELSE);
				State = 3037;
				_localctx.else_result = expression(0);
				}
			}

			State = 3040;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoalesceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(BigQueryParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public CoalesceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coalesce; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCoalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCoalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoalesceContext coalesce() {
		CoalesceContext _localctx = new CoalesceContext(Context, State);
		EnterRule(_localctx, 310, RULE_coalesce);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3042;
			Match(COALESCE);
			State = 3043;
			Match(OPAR);
			State = 3044;
			expressions();
			State = 3045;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_Context : ParserRuleContext {
		public ExpressionContext expr;
		public ExpressionContext true_result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public If_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIf_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIf_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_Context if_() {
		If_Context _localctx = new If_Context(Context, State);
		EnterRule(_localctx, 312, RULE_if_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3047;
			Match(IF);
			State = 3048;
			Match(OPAR);
			State = 3049;
			_localctx.expr = expression(0);
			State = 3050;
			Match(COMMA);
			State = 3051;
			_localctx.true_result = expression(0);
			State = 3052;
			Match(COMMA);
			State = 3053;
			_localctx.else_result = expression(0);
			State = 3054;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfnullContext : ParserRuleContext {
		public ExpressionContext null_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(BigQueryParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public IfnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIfnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIfnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfnullContext ifnull() {
		IfnullContext _localctx = new IfnullContext(Context, State);
		EnterRule(_localctx, 314, RULE_ifnull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3056;
			Match(IFNULL);
			State = 3057;
			Match(OPAR);
			State = 3058;
			expression(0);
			State = 3059;
			Match(COMMA);
			State = 3060;
			_localctx.null_result = expression(0);
			State = 3061;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullifContext : ParserRuleContext {
		public ExpressionContext expr_to_match;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(BigQueryParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public NullifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNullif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNullif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullifContext nullif() {
		NullifContext _localctx = new NullifContext(Context, State);
		EnterRule(_localctx, 316, RULE_nullif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3063;
			Match(NULLIF);
			State = 3064;
			Match(OPAR);
			State = 3065;
			expression(0);
			State = 3066;
			Match(COMMA);
			State = 3067;
			_localctx.expr_to_match = expression(0);
			State = 3068;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expressions_as_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Expressions_as_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions_as_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions_as_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions_as_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions_as_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expressions_as_aliasContext expressions_as_alias() {
		Expressions_as_aliasContext _localctx = new Expressions_as_aliasContext(Context, State);
		EnterRule(_localctx, 318, RULE_expressions_as_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3070;
			expressions();
			State = 3072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
				{
				State = 3071;
				as_alias();
				}
			}

			State = 3081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3074;
				Match(COMMA);
				State = 3075;
				expressions();
				State = 3077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) {
					{
					State = 3076;
					as_alias();
					}
				}

				}
				}
				State = 3083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expressions_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(BigQueryParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(BigQueryParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(BigQueryParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(BigQueryParser.DESC, i);
		}
		public Expressions_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expressions_asc_descContext expressions_asc_desc() {
		Expressions_asc_descContext _localctx = new Expressions_asc_descContext(Context, State);
		EnterRule(_localctx, 320, RULE_expressions_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3084;
			expression(0);
			State = 3086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3085;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3088;
				Match(COMMA);
				State = 3089;
				expression(0);
				State = 3091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 3090;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 3097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Byte_literalContext byte_literal() {
			return GetRuleContext<Byte_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Big_numeric_literalContext big_numeric_literal() {
			return GetRuleContext<Big_numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_literalContext array_literal() {
			return GetRuleContext<Array_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_literalContext struct_literal() {
			return GetRuleContext<Struct_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_literalContext date_literal() {
			return GetRuleContext<Date_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_literalContext datetime_literal() {
			return GetRuleContext<Datetime_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Timestamp_literalContext timestamp_literal() {
			return GetRuleContext<Timestamp_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interval_literalContext interval_literal() {
			return GetRuleContext<Interval_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_literalContext json_literal() {
			return GetRuleContext<Json_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BigQueryParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(BigQueryParser.FLOATING_POINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 322, RULE_literal);
		try {
			State = 3115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3098;
				string_literal();
				}
				break;
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3099;
				byte_literal();
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3100;
				numeric_literal();
				}
				break;
			case BIGNUMERIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3101;
				big_numeric_literal();
				}
				break;
			case OBR:
			case ARRAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3102;
				array_literal();
				}
				break;
			case OPAR:
			case STRUCT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3103;
				struct_literal();
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3104;
				date_literal();
				}
				break;
			case DATETIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3105;
				datetime_literal();
				}
				break;
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3106;
				timestamp_literal();
				}
				break;
			case RANGE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3107;
				range_literal();
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3108;
				interval_literal();
				}
				break;
			case JSON:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3109;
				json_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3110;
				Match(INTEGER_LITERAL);
				}
				break;
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3111;
				Match(FLOATING_POINT_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3112;
				Match(NULL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3113;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3114;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(BigQueryParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 324, RULE_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3117;
			Match(NUMERIC);
			State = 3118;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Big_numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGNUMERIC() { return GetToken(BigQueryParser.BIGNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Big_numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_big_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterBig_numeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitBig_numeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBig_numeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Big_numeric_literalContext big_numeric_literal() {
		Big_numeric_literalContext _localctx = new Big_numeric_literalContext(Context, State);
		EnterRule(_localctx, 326, RULE_big_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3120;
			Match(BIGNUMERIC);
			State = 3121;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBR() { return GetToken(BigQueryParser.OBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBR() { return GetToken(BigQueryParser.CBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		public Array_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterArray_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitArray_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_literalContext array_literal() {
		Array_literalContext _localctx = new Array_literalContext(Context, State);
		EnterRule(_localctx, 328, RULE_array_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARRAY) {
				{
				State = 3123;
				Match(ARRAY);
				State = 3128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3124;
					Match(LT);
					State = 3125;
					data_type();
					State = 3126;
					Match(GT);
					}
				}

				}
			}

			State = 3132;
			Match(OBR);
			State = 3134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -16692222L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1117455657541304321L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 561025808072703L) != 0)) {
				{
				State = 3133;
				expressions();
				}
			}

			State = 3136;
			Match(CBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Struct_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_literalContext struct_literal() {
		Struct_literalContext _localctx = new Struct_literalContext(Context, State);
		EnterRule(_localctx, 330, RULE_struct_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRUCT) {
				{
				State = 3138;
				Match(STRUCT);
				State = 3150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3139;
					Match(LT);
					State = 3140;
					data_type();
					State = 3145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3141;
						Match(COMMA);
						State = 3142;
						data_type();
						}
						}
						State = 3147;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3148;
					Match(GT);
					}
				}

				}
			}

			State = 3154;
			Match(OPAR);
			State = 3155;
			expressions();
			State = 3156;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 332, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				{
				State = 3158;
				Match(ARRAY);
				State = 3163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3159;
					Match(LT);
					State = 3160;
					data_type();
					State = 3161;
					Match(GT);
					}
				}

				}
				break;
			case 2:
				{
				State = 3165;
				Match(STRUCT);
				State = 3177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3166;
					Match(LT);
					State = 3167;
					data_type();
					State = 3172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3168;
						Match(COMMA);
						State = 3169;
						data_type();
						}
						}
						State = 3174;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3175;
					Match(GT);
					}
				}

				}
				break;
			case 3:
				{
				State = 3179;
				identifier();
				State = 3180;
				data_type();
				}
				break;
			case 4:
				{
				State = 3182;
				identifier();
				}
				break;
			}
			State = 3189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
			case 1:
				{
				State = 3185;
				Match(OPAR);
				State = 3186;
				expressions();
				State = 3187;
				Match(CPAR);
				}
				break;
			}
			State = 3193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				{
				State = 3191;
				Match(COLLATE);
				State = 3192;
				string_literal();
				}
				break;
			}
			State = 3197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				{
				State = 3195;
				Match(NOT);
				State = 3196;
				Match(NULL);
				}
				break;
			}
			State = 3204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
			case 1:
				{
				State = 3199;
				Match(OPTIONS);
				State = 3200;
				Match(OPAR);
				State = 3201;
				option_parameters();
				State = 3202;
				Match(CPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BigQueryParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LITERAL() { return GetToken(BigQueryParser.RAW_STRING_LITERAL, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 334, RULE_string_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3206;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==RAW_STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Date_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_literalContext date_literal() {
		Date_literalContext _localctx = new Date_literalContext(Context, State);
		EnterRule(_localctx, 336, RULE_date_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3208;
			Match(DATE);
			State = 3209;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDatetime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDatetime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_literalContext datetime_literal() {
		Datetime_literalContext _localctx = new Datetime_literalContext(Context, State);
		EnterRule(_localctx, 338, RULE_datetime_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3211;
			Match(DATETIME);
			State = 3212;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timestamp_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestamp_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTimestamp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTimestamp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestamp_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timestamp_literalContext timestamp_literal() {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(Context, State);
		EnterRule(_localctx, 340, RULE_timestamp_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3214;
			Match(TIMESTAMP);
			State = 3215;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 342, RULE_range_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3217;
			Match(RANGE);
			State = 3218;
			Match(LT);
			State = 3219;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3220;
			Match(GT);
			State = 3221;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(BigQueryParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_partContext[] datetime_part() {
			return GetRuleContexts<Datetime_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_partContext datetime_part(int i) {
			return GetRuleContext<Datetime_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		public Interval_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterInterval_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitInterval_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interval_literalContext interval_literal() {
		Interval_literalContext _localctx = new Interval_literalContext(Context, State);
		EnterRule(_localctx, 344, RULE_interval_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3223;
			Match(INTERVAL);
			State = 3232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
			case 1:
				{
				State = 3224;
				expression(0);
				State = 3225;
				datetime_part();
				}
				break;
			case 2:
				{
				State = 3227;
				string_literal();
				State = 3228;
				datetime_part();
				State = 3229;
				Match(TO);
				State = 3230;
				datetime_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(BigQueryParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Json_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterJson_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitJson_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Json_literalContext json_literal() {
		Json_literalContext _localctx = new Json_literalContext(Context, State);
		EnterRule(_localctx, 346, RULE_json_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3234;
			Match(JSON);
			State = 3235;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Byte_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES_LITERAL() { return GetToken(BigQueryParser.BYTES_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_BYTES_LITERAL() { return GetToken(BigQueryParser.RAW_BYTES_LITERAL, 0); }
		public Byte_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byte_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterByte_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitByte_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByte_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Byte_literalContext byte_literal() {
		Byte_literalContext _localctx = new Byte_literalContext(Context, State);
		EnterRule(_localctx, 348, RULE_byte_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3237;
			_la = TokenStream.LA(1);
			if ( !(_la==BYTES_LITERAL || _la==RAW_BYTES_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_IDENTIFIER() { return GetToken(BigQueryParser.UNQUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(BigQueryParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGNUMERIC() { return GetToken(BigQueryParser.BIGNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(BigQueryParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(BigQueryParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(BigQueryParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(BigQueryParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(BigQueryParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(BigQueryParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(BigQueryParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(BigQueryParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(BigQueryParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(BigQueryParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(BigQueryParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(BigQueryParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BigQueryParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(BigQueryParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORRESPONDING() { return GetToken(BigQueryParser.CORRESPONDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL_PRIVACY() { return GetToken(BigQueryParser.DIFFERENTIAL_PRIVACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(BigQueryParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(BigQueryParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BigQueryParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(BigQueryParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(BigQueryParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BigQueryParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(BigQueryParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(BigQueryParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(BigQueryParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_AGG() { return GetToken(BigQueryParser.ARRAY_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(BigQueryParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICIES() { return GetToken(BigQueryParser.POLICIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(BigQueryParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(BigQueryParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(BigQueryParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(BigQueryParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(BigQueryParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(BigQueryParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(BigQueryParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(BigQueryParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(BigQueryParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORING() { return GetToken(BigQueryParser.STORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BigQueryParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION() { return GetToken(BigQueryParser.ORGANIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROJECT() { return GetToken(BigQueryParser.PROJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BI_CAPACITY() { return GetToken(BigQueryParser.BI_CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_VALUE() { return GetToken(BigQueryParser.ANY_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(BigQueryParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(BigQueryParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_CONCAT_AGG() { return GetToken(BigQueryParser.ARRAY_CONCAT_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(BigQueryParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(BigQueryParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(BigQueryParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(BigQueryParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTIF() { return GetToken(BigQueryParser.COUNTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(BigQueryParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(BigQueryParser.LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_BY() { return GetToken(BigQueryParser.MAX_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_BY() { return GetToken(BigQueryParser.MIN_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_AGG() { return GetToken(BigQueryParser.STRING_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(BigQueryParser.SUM, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 350, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3239;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109951162777599L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_aliasContext : ParserRuleContext {
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public As_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_aliasContext as_alias() {
		As_aliasContext _localctx = new As_aliasContext(Context, State);
		EnterRule(_localctx, 352, RULE_as_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3241;
				Match(AS);
				}
			}

			State = 3244;
			_localctx.alias = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 354, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3246;
			function_name();
			State = 3247;
			Match(OPAR);
			State = 3249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -16691966L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1117455657541304321L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 561025808072703L) != 0)) {
				{
				State = 3248;
				function_arguments();
				}
			}

			State = 3251;
			Match(CPAR);
			State = 3254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				{
				State = 3252;
				Match(OVER);
				State = 3253;
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved() {
			return GetRuleContext<ReservedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 356, RULE_function_name);
		try {
			State = 3258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3256;
				reserved();
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3257;
				path_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Optional_clausesContext optional_clauses() {
			return GetRuleContext<Optional_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionsContext function_expressions() {
			return GetRuleContext<Function_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 358, RULE_function_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				{
				State = 3260;
				Match(DISTINCT);
				}
				break;
			}
			State = 3265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				{
				State = 3263;
				Match(STAR);
				}
				break;
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				{
				State = 3264;
				function_expressions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3267;
			optional_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionContext[] function_expression() {
			return GetRuleContexts<Function_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionContext function_expression(int i) {
			return GetRuleContext<Function_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Function_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_expressionsContext function_expressions() {
		Function_expressionsContext _localctx = new Function_expressionsContext(Context, State);
		EnterRule(_localctx, 360, RULE_function_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3269;
			function_expression();
			State = 3274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3270;
				Match(COMMA);
				State = 3271;
				function_expression();
				}
				}
				State = 3276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(BigQueryParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(BigQueryParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(BigQueryParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(BigQueryParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(BigQueryParser.RESPECT, 0); }
		public Function_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_expressionContext function_expression() {
		Function_expressionContext _localctx = new Function_expressionContext(Context, State);
		EnterRule(_localctx, 362, RULE_function_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3277;
			expression(0);
			State = 3287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				{
				State = 3278;
				Match(FROM);
				State = 3279;
				expression(0);
				}
				break;
			case ARROW:
				{
				State = 3280;
				Match(ARROW);
				State = 3281;
				expression(0);
				}
				break;
			case HAVING:
				{
				State = 3282;
				Match(HAVING);
				State = 3283;
				_la = TokenStream.LA(1);
				if ( !(_la==MAX || _la==MIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3284;
				expression(0);
				}
				break;
			case IGNORE:
			case RESPECT:
				{
				State = 3285;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==RESPECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3286;
				Match(NULLS);
				}
				break;
			case COMMA:
			case CPAR:
			case LIMIT:
			case ORDER:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keysContext order_by_keys() {
			return GetRuleContext<Order_by_keysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public Optional_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOptional_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOptional_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptional_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optional_clausesContext optional_clauses() {
		Optional_clausesContext _localctx = new Optional_clausesContext(Context, State);
		EnterRule(_localctx, 364, RULE_optional_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3289;
				order_by_keys();
				}
			}

			State = 3293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3292;
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 366, RULE_limit_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3295;
			Match(LIMIT);
			State = 3296;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_keysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keyContext[] order_by_key() {
			return GetRuleContexts<Order_by_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keyContext order_by_key(int i) {
			return GetRuleContext<Order_by_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Order_by_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_keys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_keysContext order_by_keys() {
		Order_by_keysContext _localctx = new Order_by_keysContext(Context, State);
		EnterRule(_localctx, 368, RULE_order_by_keys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3298;
			order_by_key();
			State = 3303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3299;
				Match(COMMA);
				State = 3300;
				order_by_key();
				}
				}
				State = 3305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_keyContext : ParserRuleContext {
		public ExpressionContext key;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BigQueryParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(BigQueryParser.DESC, 0); }
		public Order_by_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_keyContext order_by_key() {
		Order_by_keyContext _localctx = new Order_by_keyContext(Context, State);
		EnterRule(_localctx, 370, RULE_order_by_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3306;
			Match(ORDER);
			State = 3307;
			Match(BY);
			State = 3308;
			_localctx.key = expression(0);
			State = 3310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3309;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 372, RULE_window_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3312;
			identifier();
			State = 3313;
			Match(OPAR);
			State = 3316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				{
				State = 3314;
				expressions();
				}
				break;
			case STAR:
				{
				State = 3315;
				Match(STAR);
				}
				break;
			case CPAR:
				break;
			default:
				break;
			}
			State = 3318;
			Match(CPAR);
			State = 3319;
			Match(OVER);
			State = 3320;
			over_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public IdentifierContext named_window;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 374, RULE_over_clause);
		try {
			State = 3327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3322;
				_localctx.named_window = identifier();
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3323;
				Match(OPAR);
				State = 3324;
				window_specification();
				State = 3325;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_clauseContext : ParserRuleContext {
		public ExpressionContext format_string_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(BigQueryParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Format_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFormat_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFormat_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormat_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Format_clauseContext format_clause() {
		Format_clauseContext _localctx = new Format_clauseContext(Context, State);
		EnterRule(_localctx, 376, RULE_format_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3329;
			Match(FORMAT);
			State = 3330;
			_localctx.format_string_expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public Path_expressionContext variable_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 378, RULE_set);
		try {
			State = 3346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3332;
				Match(SET);
				State = 3333;
				_localctx.variable_name = path_expression();
				State = 3334;
				Match(EQ);
				State = 3335;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3337;
				Match(SET);
				State = 3338;
				Match(OPAR);
				State = 3339;
				path_expressions();
				State = 3340;
				Match(CPAR);
				State = 3341;
				Match(EQ);
				State = 3342;
				Match(OPAR);
				State = 3343;
				expressions();
				State = 3344;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Path_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPath_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPath_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionsContext path_expressions() {
		Path_expressionsContext _localctx = new Path_expressionsContext(Context, State);
		EnterRule(_localctx, 380, RULE_path_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3348;
			path_expression();
			State = 3353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3349;
				Match(COMMA);
				State = 3350;
				path_expression();
				}
				}
				State = 3355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext[] reserved() {
			return GetRuleContexts<ReservedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved(int i) {
			return GetRuleContext<ReservedContext>(i);
		}
		public Path_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionContext path_expression() {
		Path_expressionContext _localctx = new Path_expressionContext(Context, State);
		EnterRule(_localctx, 382, RULE_path_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3356;
			identifier();
			State = 3364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,385,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3357;
					Match(DOT);
					State = 3360;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case BIGNUMERIC:
					case DATE:
					case DATETIME:
					case NUMERIC:
					case TIMESTAMP:
					case YEAR:
					case QUARTER:
					case MONTH:
					case WEEK:
					case DAY:
					case HOUR:
					case MINUTE:
					case SECOND:
					case MILLISECOND:
					case MICROSECOND:
					case JSON:
					case OFFSET:
					case NAME:
					case STRICT:
					case CORRESPONDING:
					case DIFFERENTIAL_PRIVACY:
					case OPTIONS:
					case VALUE:
					case REPLACE:
					case SYSTEM:
					case PERCENT:
					case PIVOT:
					case UNPIVOT:
					case SYSTEM_TIME:
					case ROW:
					case INCLUDE:
					case FORMAT:
					case SETS:
					case AVG:
					case SCHEMA:
					case TEMP:
					case TEMPORARY:
					case TABLE:
					case CONSTRAINT:
					case ENFORCED:
					case PRIMARY:
					case KEY:
					case FOREIGN:
					case REFERENCES:
					case CLUSTER:
					case CONNECTION:
					case ARRAY_AGG:
					case COPY:
					case SNAPSHOT:
					case CLONE:
					case VIEW:
					case DROP:
					case SEARCH:
					case INDEX:
					case VECTOR:
					case ASSIGNMENT:
					case RESERVATION:
					case ACCESS:
					case POLICY:
					case POLICIES:
					case PROCEDURE:
					case FUNCTION:
					case REPLICA:
					case COLUMNS:
					case RETURNS:
					case DETERMINISTIC:
					case LANGUAGE:
					case REMOTE:
					case AGGREGATE:
					case TYPE:
					case OUT:
					case INOUT:
					case BEGIN:
					case SECURITY:
					case INVOKER:
					case COALESCE:
					case NULLIF:
					case IFNULL:
					case GRANT:
					case FILTER:
					case COLUMN:
					case STORING:
					case ALTER:
					case ADD:
					case RENAME:
					case DATA:
					case ORGANIZATION:
					case PROJECT:
					case BI_CAPACITY:
					case ANY_VALUE:
					case MAX:
					case MIN:
					case ARRAY_CONCAT_AGG:
					case BIT_AND:
					case BIT_OR:
					case BIT_XOR:
					case COUNT:
					case COUNTIF:
					case LOGICAL_AND:
					case LOGICAL_OR:
					case MAX_BY:
					case MIN_BY:
					case STRING_AGG:
					case SUM:
					case UNQUOTED_IDENTIFIER:
					case QUOTED_IDENTIFIER:
						{
						State = 3358;
						identifier();
						}
						break;
					case ALL:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSERT_ROWS_MODIFIED:
					case AT:
					case BETWEEN:
					case BY:
					case CASE:
					case CAST:
					case COLLATE:
					case CONTAINS:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case DEFAULT:
					case DEFINE:
					case DESC:
					case DISTINCT:
					case ELSE:
					case END:
					case ENUM:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDE:
					case EXISTS:
					case EXTRACT:
					case FALSE:
					case FETCH:
					case FOLLOWING:
					case FOR:
					case FROM:
					case FULL:
					case GROUP:
					case GROUPING:
					case GROUPS:
					case HASH:
					case HAVING:
					case IF:
					case IGNORE:
					case IN:
					case INNER:
					case INTERSECT:
					case INTERVAL:
					case INTO:
					case IS:
					case JOIN:
					case LATERAL:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOOKUP:
					case MERGE:
					case NATURAL:
					case NEW:
					case NO:
					case NOT:
					case NULL:
					case NULLS:
					case OF:
					case ON:
					case OR:
					case ORDER:
					case OUTER:
					case OVER:
					case PARTITION:
					case PRECEDING:
					case PROTO:
					case QUALIFY:
					case RANGE:
					case RECURSIVE:
					case RESPECT:
					case RIGHT:
					case ROLLUP:
					case ROWS:
					case SELECT:
					case SET:
					case SOME:
					case STRUCT:
					case TABLESAMPLE:
					case THEN:
					case TO:
					case TREAT:
					case TRUE:
					case UNBOUNDED:
					case UNION:
					case UNNEST:
					case USING:
					case WHEN:
					case WHERE:
					case WINDOW:
					case WITH:
					case WITHIN:
						{
						State = 3359;
						reserved();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 3366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,385,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public As_column_nameContext[] as_column_name() {
			return GetRuleContexts<As_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_column_nameContext as_column_name(int i) {
			return GetRuleContext<As_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public As_column_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_namesContext as_column_names() {
		As_column_namesContext _localctx = new As_column_namesContext(Context, State);
		EnterRule(_localctx, 384, RULE_as_column_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3367;
			as_column_name();
			State = 3372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3368;
				Match(COMMA);
				State = 3369;
				as_column_name();
				}
				}
				State = 3374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_nameContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public As_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_nameContext as_column_name() {
		As_column_nameContext _localctx = new As_column_nameContext(Context, State);
		EnterRule(_localctx, 386, RULE_as_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3375;
			expression(0);
			State = 3376;
			Match(AS);
			State = 3377;
			_localctx.column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BigQueryParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT_ROWS_MODIFIED() { return GetToken(BigQueryParser.ASSERT_ROWS_MODIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BigQueryParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(BigQueryParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(BigQueryParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(BigQueryParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(BigQueryParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BigQueryParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(BigQueryParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(BigQueryParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(BigQueryParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(BigQueryParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(BigQueryParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(BigQueryParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(BigQueryParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(BigQueryParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(BigQueryParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(BigQueryParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(BigQueryParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(BigQueryParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(BigQueryParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BigQueryParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(BigQueryParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOKUP() { return GetToken(BigQueryParser.LOOKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(BigQueryParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(BigQueryParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(BigQueryParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(BigQueryParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(BigQueryParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY() { return GetToken(BigQueryParser.QUALIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(BigQueryParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(BigQueryParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BigQueryParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(BigQueryParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(BigQueryParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(BigQueryParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(BigQueryParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(BigQueryParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BigQueryParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(BigQueryParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(BigQueryParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(BigQueryParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(BigQueryParser.WITHIN, 0); }
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 388, RULE_reserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3379;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -16777216L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 72057594037927935L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(BigQueryParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(BigQueryParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(BigQueryParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(BigQueryParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(BigQueryParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(BigQueryParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(BigQueryParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(BigQueryParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(BigQueryParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(BigQueryParser.MICROSECOND, 0); }
		public Datetime_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDatetime_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDatetime_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_partContext datetime_part() {
		Datetime_partContext _localctx = new Datetime_partContext(Context, State);
		EnterRule(_localctx, 390, RULE_datetime_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3381;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & 1023L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 106: return query_expression_sempred((Query_expressionContext)_localctx, predIndex);
		case 132: return from_item_sempred((From_itemContext)_localctx, predIndex);
		case 151: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool query_expression_sempred(Query_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 25);
		case 4: return Precpred(Context, 24);
		case 5: return Precpred(Context, 23);
		case 6: return Precpred(Context, 22);
		case 7: return Precpred(Context, 21);
		case 8: return Precpred(Context, 20);
		case 9: return Precpred(Context, 19);
		case 10: return Precpred(Context, 17);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 14);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 28);
		case 15: return Precpred(Context, 27);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,243,3384,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,1,0,5,0,394,8,0,10,0,12,0,397,9,0,1,0,1,0,4,0,401,8,0,11,0,
		12,0,402,1,0,5,0,406,8,0,10,0,12,0,409,9,0,1,0,5,0,412,8,0,10,0,12,0,415,
		9,0,1,0,1,0,1,1,5,1,420,8,1,10,1,12,1,423,9,1,1,1,1,1,5,1,427,8,1,10,1,
		12,1,430,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,442,8,2,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,512,8,3,1,
		4,1,4,1,5,1,5,1,6,1,6,3,6,520,8,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
		11,1,11,1,12,1,12,1,12,3,12,535,8,12,1,12,3,12,538,8,12,1,12,1,12,1,12,
		1,12,3,12,544,8,12,1,12,1,12,1,12,1,12,1,12,3,12,551,8,12,1,12,1,12,1,
		12,3,12,556,8,12,1,12,1,12,1,12,3,12,561,8,12,1,12,1,12,1,12,3,12,566,
		8,12,1,12,1,12,1,12,3,12,571,8,12,1,12,1,12,1,12,1,12,1,12,3,12,578,8,
		12,1,12,1,12,3,12,582,8,12,1,13,1,13,1,13,3,13,587,8,13,1,13,1,13,1,13,
		1,13,3,13,593,8,13,1,13,1,13,1,13,1,13,1,13,3,13,600,8,13,1,13,1,13,1,
		13,3,13,605,8,13,1,13,1,13,1,13,1,13,3,13,611,8,13,1,13,1,13,1,13,3,13,
		616,8,13,1,13,1,13,1,13,3,13,621,8,13,1,13,1,13,1,13,3,13,626,8,13,1,13,
		1,13,1,13,1,13,1,13,3,13,633,8,13,1,13,1,13,3,13,637,8,13,1,14,1,14,1,
		14,3,14,642,8,14,1,14,1,14,1,14,1,14,3,14,648,8,14,1,14,1,14,1,14,1,14,
		1,14,1,14,3,14,656,8,14,1,14,1,14,1,14,3,14,661,8,14,1,14,1,14,1,14,3,
		14,666,8,14,1,14,1,14,1,14,3,14,671,8,14,1,14,1,14,1,14,1,14,1,14,3,14,
		678,8,14,1,14,1,14,3,14,682,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,690,
		8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,700,8,15,1,15,1,15,1,
		15,1,15,1,15,3,15,707,8,15,1,16,1,16,1,16,1,16,1,16,3,16,714,8,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,724,8,16,1,16,1,16,1,16,3,16,729,
		8,16,1,16,1,16,1,16,3,16,734,8,16,1,16,1,16,1,16,3,16,739,8,16,1,16,1,
		16,1,16,3,16,744,8,16,1,16,1,16,1,16,1,16,1,16,3,16,751,8,16,1,16,1,16,
		3,16,755,8,16,1,17,1,17,1,17,3,17,760,8,17,1,17,1,17,1,17,1,17,3,17,766,
		8,17,1,17,1,17,1,17,1,17,1,17,3,17,773,8,17,1,17,1,17,1,17,1,17,1,17,3,
		17,780,8,17,1,17,1,17,1,17,1,18,1,18,1,18,3,18,788,8,18,1,18,1,18,1,18,
		1,18,1,18,3,18,795,8,18,1,18,1,18,1,18,1,18,3,18,801,8,18,1,18,1,18,1,
		18,3,18,806,8,18,1,18,1,18,1,18,1,18,1,18,3,18,813,8,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,827,8,19,1,19,1,19,1,
		19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,840,8,20,1,20,1,20,1,20,
		1,20,3,20,846,8,20,1,20,1,20,1,20,1,20,1,20,3,20,853,8,20,1,21,1,21,1,
		21,3,21,858,8,21,1,21,1,21,1,21,1,21,1,21,3,21,865,8,21,1,21,1,21,1,21,
		1,21,1,21,3,21,872,8,21,1,21,1,21,1,21,1,21,3,21,878,8,21,3,21,880,8,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,889,8,21,3,21,891,8,21,1,21,1,
		21,1,21,1,21,1,21,1,22,1,22,1,22,5,22,901,8,22,10,22,12,22,904,9,22,1,
		23,1,23,1,23,1,24,1,24,1,24,3,24,912,8,24,1,24,3,24,915,8,24,1,24,1,24,
		1,24,1,24,3,24,921,8,24,1,24,1,24,1,24,3,24,926,8,24,1,24,1,24,1,24,3,
		24,931,8,24,1,24,1,24,1,24,3,24,936,8,24,1,24,1,24,1,24,3,24,941,8,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,952,8,24,1,25,1,25,1,
		25,5,25,957,8,25,10,25,12,25,960,9,25,1,26,1,26,1,26,1,27,1,27,1,27,3,
		27,968,8,27,1,27,3,27,971,8,27,1,27,1,27,1,27,1,27,3,27,977,8,27,1,27,
		1,27,1,27,3,27,982,8,27,1,27,1,27,1,27,3,27,987,8,27,1,27,1,27,1,27,3,
		27,992,8,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,1000,8,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,3,27,1009,8,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,
		1017,8,28,1,28,3,28,1020,8,28,1,28,1,28,1,28,1,28,3,28,1026,8,28,1,28,
		1,28,1,28,3,28,1031,8,28,1,28,1,28,1,28,3,28,1036,8,28,1,28,1,28,1,28,
		3,28,1041,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1051,8,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,1063,8,29,1,29,
		3,29,1066,8,29,1,29,1,29,1,29,1,29,3,29,1072,8,29,1,29,1,29,1,29,3,29,
		1077,8,29,1,29,1,29,1,29,3,29,1082,8,29,1,29,1,29,1,29,3,29,1087,8,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,1101,
		8,29,1,30,1,30,1,30,3,30,1106,8,30,1,30,3,30,1109,8,30,1,30,1,30,1,30,
		1,30,1,30,3,30,1116,8,30,1,30,1,30,1,30,3,30,1121,8,30,1,30,1,30,1,30,
		3,30,1126,8,30,1,30,1,30,1,30,3,30,1131,8,30,1,30,1,30,1,30,3,30,1136,
		8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1147,8,30,1,31,
		1,31,1,31,5,31,1152,8,31,10,31,12,31,1155,9,31,1,32,1,32,1,32,1,32,3,32,
		1161,8,32,1,33,1,33,1,33,3,33,1166,8,33,1,33,3,33,1169,8,33,1,33,1,33,
		1,33,1,33,1,33,3,33,1176,8,33,1,33,1,33,1,33,3,33,1181,8,33,1,33,1,33,
		1,33,3,33,1186,8,33,1,33,1,33,1,33,3,33,1191,8,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,3,33,1203,8,33,1,33,1,33,1,33,1,34,1,34,
		1,34,3,34,1211,8,34,1,34,1,34,1,34,1,34,1,34,3,34,1218,8,34,1,34,1,34,
		1,34,3,34,1223,8,34,1,34,1,34,1,34,3,34,1228,8,34,1,34,1,34,1,34,3,34,
		1233,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1242,8,34,1,34,1,34,
		1,34,1,34,1,34,3,34,1249,8,34,1,34,1,34,1,34,1,35,1,35,1,35,5,35,1257,
		8,35,10,35,12,35,1260,9,35,1,36,1,36,1,36,1,36,3,36,1266,8,36,1,37,1,37,
		1,37,5,37,1271,8,37,10,37,12,37,1274,9,37,1,38,1,38,1,38,1,39,1,39,1,39,
		3,39,1282,8,39,1,39,1,39,1,39,1,39,3,39,1288,8,39,1,39,1,39,1,39,3,39,
		1293,8,39,1,39,1,39,1,39,3,39,1298,8,39,1,39,1,39,1,39,3,39,1303,8,39,
		1,39,1,39,1,39,1,39,1,39,1,39,3,39,1311,8,39,1,39,1,39,5,39,1315,8,39,
		10,39,12,39,1318,9,39,1,39,1,39,4,39,1322,8,39,11,39,12,39,1323,1,39,5,
		39,1327,8,39,10,39,12,39,1330,9,39,1,39,5,39,1333,8,39,10,39,12,39,1336,
		9,39,1,39,1,39,1,40,1,40,1,40,5,40,1343,8,40,10,40,12,40,1346,9,40,1,41,
		3,41,1349,8,41,1,41,1,41,1,41,1,42,1,42,1,42,3,42,1357,8,42,1,42,1,42,
		1,42,1,42,3,42,1363,8,42,1,42,1,42,1,42,3,42,1368,8,42,1,42,1,42,1,42,
		3,42,1373,8,42,1,42,1,42,1,42,3,42,1378,8,42,1,42,1,42,1,42,1,42,3,42,
		1384,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1394,8,42,1,42,
		1,42,1,42,1,42,3,42,1400,8,42,1,43,1,43,1,43,3,43,1405,8,43,1,43,1,43,
		1,43,1,43,1,43,1,43,3,43,1413,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,3,43,1424,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
		1462,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
		1,47,3,47,1477,8,47,1,47,3,47,1480,8,47,1,47,1,47,1,47,1,47,1,47,1,47,
		3,47,1488,8,47,1,48,1,48,1,48,5,48,1493,8,48,10,48,12,48,1496,9,48,1,49,
		1,49,3,49,1500,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1507,8,49,1,50,1,50,
		1,50,3,50,1512,8,50,1,50,1,50,1,50,1,50,1,50,3,50,1519,8,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1532,8,50,1,50,1,50,
		1,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,1543,8,51,1,51,1,51,1,51,3,51,
		1548,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,3,52,1560,
		8,52,1,52,1,52,1,52,3,52,1565,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,53,1,53,1,53,1,53,3,53,1578,8,53,1,53,1,53,1,53,3,53,1583,8,53,1,53,
		1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1594,8,53,1,54,1,54,1,54,
		1,54,3,54,1600,8,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,3,55,
		1611,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,3,56,1628,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,
		1637,8,56,1,56,5,56,1640,8,56,10,56,12,56,1643,9,56,1,57,1,57,1,57,1,57,
		1,57,3,57,1650,8,57,1,57,1,57,1,57,3,57,1655,8,57,1,57,1,57,1,57,1,57,
		5,57,1661,8,57,10,57,12,57,1664,9,57,1,58,1,58,1,58,1,58,1,58,3,58,1671,
		8,58,1,58,3,58,1674,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
		1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,
		1698,8,58,1,59,1,59,1,59,1,59,1,59,3,59,1705,8,59,1,59,1,59,1,59,3,59,
		1710,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,
		1,60,1,60,3,60,1726,8,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
		3,61,1737,8,61,1,61,1,61,1,61,1,61,5,61,1743,8,61,10,61,12,61,1746,9,61,
		1,62,1,62,1,62,1,62,3,62,1752,8,62,1,62,1,62,1,62,5,62,1757,8,62,10,62,
		12,62,1760,9,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,5,64,
		1772,8,64,10,64,12,64,1775,9,64,1,65,1,65,1,65,1,65,3,65,1781,8,65,1,65,
		1,65,1,66,1,66,1,66,1,66,1,66,3,66,1790,8,66,1,66,1,66,1,66,3,66,1795,
		8,66,1,66,1,66,1,66,1,66,1,66,3,66,1802,8,66,1,66,1,66,1,67,1,67,1,67,
		1,67,1,67,3,67,1811,8,67,1,67,1,67,1,67,3,67,1816,8,67,1,67,1,67,1,67,
		1,67,1,67,1,67,3,67,1824,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
		1,69,1,69,1,69,1,69,3,69,1838,8,69,1,69,1,69,1,69,1,69,1,69,3,69,1845,
		8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,1858,
		8,70,1,70,1,70,1,70,1,70,1,70,3,70,1865,8,70,1,70,1,70,1,70,1,70,1,70,
		1,71,1,71,1,71,1,71,3,71,1876,8,71,1,71,1,71,1,71,1,71,1,71,3,71,1883,
		8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,1895,8,72,
		1,72,1,72,1,72,1,72,1,72,3,72,1902,8,72,1,72,1,72,1,72,1,72,1,72,1,73,
		1,73,1,73,1,73,3,73,1913,8,73,1,73,1,73,1,73,1,73,1,73,3,73,1920,8,73,
		1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,3,74,1930,8,74,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,3,75,1944,8,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,
		1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,
		1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,3,81,2002,
		8,81,1,81,1,81,1,81,3,81,2007,8,81,1,81,1,81,1,82,1,82,3,82,2013,8,82,
		1,82,1,82,1,82,3,82,2018,8,82,1,82,1,82,1,82,3,82,2023,8,82,1,82,1,82,
		3,82,2027,8,82,1,83,1,83,1,83,1,83,3,83,2033,8,83,1,83,1,83,1,84,1,84,
		1,84,1,84,1,84,3,84,2042,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,
		2051,8,85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,2059,8,86,1,86,1,86,1,87,
		1,87,1,87,1,87,1,87,3,87,2068,8,87,1,87,1,87,1,88,1,88,1,88,1,88,3,88,
		2076,8,88,1,88,1,88,1,88,3,88,2081,8,88,1,88,1,88,1,88,3,88,2086,8,88,
		1,88,1,88,1,89,1,89,1,89,1,89,1,89,3,89,2095,8,89,1,89,1,89,1,89,3,89,
		2100,8,89,1,89,1,89,1,89,3,89,2105,8,89,1,89,1,89,1,90,1,90,1,90,1,90,
		3,90,2113,8,90,1,90,1,90,1,90,3,90,2118,8,90,1,90,1,90,1,90,3,90,2123,
		8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,3,91,2133,8,91,1,91,1,91,
		1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,2146,8,91,1,92,1,92,
		1,92,1,92,3,92,2152,8,92,1,92,1,92,1,93,1,93,1,93,1,93,3,93,2160,8,93,
		1,93,1,93,1,94,1,94,1,94,1,94,3,94,2168,8,94,1,94,1,94,1,95,1,95,1,95,
		1,95,1,95,3,95,2177,8,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,
		3,96,2188,8,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,5,97,2197,8,97,10,97,
		12,97,2200,9,97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2208,8,98,1,99,1,99,
		1,99,5,99,2213,8,99,10,99,12,99,2216,9,99,1,100,1,100,1,100,1,100,3,100,
		2222,8,100,1,100,1,100,1,100,1,100,3,100,2228,8,100,1,100,5,100,2231,8,
		100,10,100,12,100,2234,9,100,3,100,2236,8,100,1,101,1,101,1,101,1,102,
		1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,
		1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,105,1,105,
		1,105,1,105,1,105,3,105,2269,8,105,1,105,1,105,1,105,3,105,2274,8,105,
		1,105,1,105,1,105,1,105,3,105,2280,8,105,1,105,1,105,1,105,1,105,1,105,
		3,105,2287,8,105,1,106,1,106,1,106,3,106,2292,8,106,1,106,1,106,3,106,
		2296,8,106,1,106,1,106,1,106,3,106,2301,8,106,5,106,2303,8,106,10,106,
		12,106,2306,9,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,
		2316,8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
		3,106,2328,8,106,1,106,1,106,1,106,1,106,5,106,2334,8,106,10,106,12,106,
		2337,9,106,1,107,1,107,1,107,1,107,3,107,2343,8,107,1,107,1,107,1,107,
		3,107,2348,8,107,5,107,2350,8,107,10,107,12,107,2353,9,107,3,107,2355,
		8,107,1,107,1,107,1,107,1,107,3,107,2361,8,107,3,107,2363,8,107,1,108,
		1,108,1,108,3,108,2368,8,108,3,108,2370,8,108,1,108,1,108,1,108,1,108,
		1,108,1,108,3,108,2378,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
		3,108,2387,8,108,1,108,3,108,2390,8,108,1,108,1,108,1,108,1,108,1,108,
		1,108,3,108,2398,8,108,3,108,2400,8,108,3,108,2402,8,108,1,108,1,108,1,
		109,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,111,1,111,
		1,111,1,111,1,111,1,112,1,112,1,112,3,112,2424,8,112,1,112,3,112,2427,
		8,112,1,112,1,112,3,112,2431,8,112,1,112,1,112,1,112,3,112,2436,8,112,
		1,112,1,112,3,112,2440,8,112,1,112,1,112,1,112,3,112,2445,8,112,1,112,
		1,112,3,112,2449,8,112,1,112,1,112,3,112,2453,8,112,1,112,1,112,3,112,
		2457,8,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,2466,8,113,
		1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,115,1,115,1,115,5,115,
		2479,8,115,10,115,12,115,2482,9,115,1,116,1,116,1,116,1,116,3,116,2488,
		8,116,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,
		1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,120,1,120,1,120,5,120,2511,
		8,120,10,120,12,120,2514,9,120,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
		3,121,2523,8,121,1,122,3,122,2526,8,122,1,122,1,122,1,122,3,122,2531,8,
		122,1,122,1,122,1,122,3,122,2536,8,122,1,122,3,122,2539,8,122,1,123,1,
		123,1,123,3,123,2544,8,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,
		124,2553,8,124,3,124,2555,8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,
		125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
		1,125,1,125,1,125,1,125,3,125,2579,8,125,1,126,1,126,1,126,1,126,1,126,
		1,126,1,126,1,126,1,126,1,126,3,126,2591,8,126,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,3,127,2600,8,127,1,128,1,128,1,128,1,128,1,128,3,128,
		2607,8,128,1,129,1,129,1,129,1,129,1,129,1,129,1,130,1,130,1,130,5,130,
		2618,8,130,10,130,12,130,2621,9,130,1,131,1,131,1,131,3,131,2626,8,131,
		1,131,3,131,2629,8,131,1,132,1,132,1,132,3,132,2634,8,132,1,132,1,132,
		1,132,1,132,1,132,3,132,2641,8,132,1,132,1,132,1,132,1,132,1,132,1,132,
		1,132,1,132,1,132,1,132,3,132,2653,8,132,1,132,1,132,1,132,1,132,1,132,
		1,132,3,132,2661,8,132,1,132,1,132,1,132,1,132,3,132,2667,8,132,3,132,
		2669,8,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,5,132,
		2680,8,132,10,132,12,132,2683,9,132,1,133,1,133,1,133,1,133,1,133,3,133,
		2690,8,133,1,133,1,133,3,133,2694,8,133,3,133,2696,8,133,1,133,1,133,1,
		133,3,133,2701,8,133,3,133,2703,8,133,1,134,1,134,1,134,3,134,2708,8,134,
		1,135,3,135,2711,8,135,1,135,1,135,1,135,3,135,2716,8,135,1,135,1,135,
		1,135,3,135,2721,8,135,1,135,1,135,1,135,3,135,2726,8,135,1,135,3,135,
		2729,8,135,1,136,1,136,3,136,2733,8,136,1,137,1,137,1,137,1,138,1,138,
		1,138,1,138,1,138,1,139,1,139,1,139,1,139,3,139,2747,8,139,1,139,1,139,
		1,139,3,139,2752,8,139,5,139,2754,8,139,10,139,12,139,2757,9,139,1,139,
		1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,2768,8,139,1,140,
		1,140,1,140,1,140,1,140,3,140,2775,8,140,1,140,1,140,1,140,3,140,2780,
		8,140,1,140,1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
		1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,143,1,143,
		3,143,2805,8,143,1,143,1,143,1,143,3,143,2810,8,143,5,143,2812,8,143,10,
		143,12,143,2815,9,143,1,144,1,144,1,144,3,144,2820,8,144,1,144,1,144,1,
		144,3,144,2825,8,144,5,144,2827,8,144,10,144,12,144,2830,9,144,1,144,1,
		144,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,5,146,
		2844,8,146,10,146,12,146,2847,9,146,1,147,1,147,1,147,1,147,1,148,1,148,
		1,148,5,148,2856,8,148,10,148,12,148,2859,9,148,1,149,1,149,1,149,3,149,
		2864,8,149,3,149,2866,8,149,1,150,1,150,1,150,3,150,2871,8,150,1,150,1,
		150,1,150,1,150,1,150,1,150,3,150,2879,8,150,1,150,1,150,1,150,1,150,1,
		150,3,150,2886,8,150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,
		151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,2918,
		8,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		3,151,2931,8,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,2951,8,151,
		1,151,3,151,2954,8,151,1,151,1,151,1,151,1,151,3,151,2960,8,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,2973,
		8,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,3,151,2989,8,151,1,151,1,151,1,151,3,151,2994,8,151,
		1,151,5,151,2997,8,151,10,151,12,151,3000,9,151,1,152,1,152,1,152,5,152,
		3005,8,152,10,152,12,152,3008,9,152,1,153,1,153,1,153,1,153,1,153,1,153,
		1,153,4,153,3017,8,153,11,153,12,153,3018,1,153,1,153,3,153,3023,8,153,
		1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,154,4,154,3033,8,154,11,154,
		12,154,3034,1,154,1,154,3,154,3039,8,154,1,154,1,154,1,155,1,155,1,155,
		1,155,1,155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,157,
		1,157,1,157,1,157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,158,
		1,158,1,159,1,159,3,159,3073,8,159,1,159,1,159,1,159,3,159,3078,8,159,
		5,159,3080,8,159,10,159,12,159,3083,9,159,1,160,1,160,3,160,3087,8,160,
		1,160,1,160,1,160,3,160,3092,8,160,5,160,3094,8,160,10,160,12,160,3097,
		9,160,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
		1,161,1,161,1,161,1,161,1,161,1,161,3,161,3116,8,161,1,162,1,162,1,162,
		1,163,1,163,1,163,1,164,1,164,1,164,1,164,1,164,3,164,3129,8,164,3,164,
		3131,8,164,1,164,1,164,3,164,3135,8,164,1,164,1,164,1,165,1,165,1,165,
		1,165,1,165,5,165,3144,8,165,10,165,12,165,3147,9,165,1,165,1,165,3,165,
		3151,8,165,3,165,3153,8,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,
		1,166,1,166,3,166,3164,8,166,1,166,1,166,1,166,1,166,1,166,5,166,3171,
		8,166,10,166,12,166,3174,9,166,1,166,1,166,3,166,3178,8,166,1,166,1,166,
		1,166,1,166,3,166,3184,8,166,1,166,1,166,1,166,1,166,3,166,3190,8,166,
		1,166,1,166,3,166,3194,8,166,1,166,1,166,3,166,3198,8,166,1,166,1,166,
		1,166,1,166,1,166,3,166,3205,8,166,1,167,1,167,1,168,1,168,1,168,1,169,
		1,169,1,169,1,170,1,170,1,170,1,171,1,171,1,171,1,171,1,171,1,171,1,172,
		1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,3233,8,172,1,173,
		1,173,1,173,1,174,1,174,1,175,1,175,1,176,3,176,3243,8,176,1,176,1,176,
		1,177,1,177,1,177,3,177,3250,8,177,1,177,1,177,1,177,3,177,3255,8,177,
		1,178,1,178,3,178,3259,8,178,1,179,3,179,3262,8,179,1,179,1,179,3,179,
		3266,8,179,1,179,1,179,1,180,1,180,1,180,5,180,3273,8,180,10,180,12,180,
		3276,9,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
		3,181,3288,8,181,1,182,3,182,3291,8,182,1,182,3,182,3294,8,182,1,183,1,
		183,1,183,1,184,1,184,1,184,5,184,3302,8,184,10,184,12,184,3305,9,184,
		1,185,1,185,1,185,1,185,3,185,3311,8,185,1,186,1,186,1,186,1,186,3,186,
		3317,8,186,1,186,1,186,1,186,1,186,1,187,1,187,1,187,1,187,1,187,3,187,
		3328,8,187,1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,3347,8,189,1,190,1,190,
		1,190,5,190,3352,8,190,10,190,12,190,3355,9,190,1,191,1,191,1,191,1,191,
		3,191,3361,8,191,5,191,3363,8,191,10,191,12,191,3366,9,191,1,192,1,192,
		1,192,5,192,3371,8,192,10,192,12,192,3374,9,192,1,193,1,193,1,193,1,193,
		1,194,1,194,1,195,1,195,1,195,0,3,212,264,302,196,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
		146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
		182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
		218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
		254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
		290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
		326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
		362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,0,23,1,0,155,
		156,2,0,67,67,196,197,2,0,157,157,170,170,1,0,185,186,2,0,29,29,44,44,
		2,0,59,59,75,75,2,0,24,24,45,45,2,0,105,105,142,142,2,0,96,96,101,101,
		2,0,1,1,10,11,2,0,2,2,8,9,1,0,10,11,3,0,32,32,67,67,76,76,3,0,24,24,26,
		26,104,104,3,0,54,54,84,84,110,110,1,0,235,236,2,0,121,122,124,124,1,0,
		237,238,4,0,120,176,178,182,188,229,233,234,1,0,216,217,2,0,66,66,98,98,
		1,0,24,119,1,0,125,134,3725,0,395,1,0,0,0,2,421,1,0,0,0,4,441,1,0,0,0,
		6,511,1,0,0,0,8,513,1,0,0,0,10,515,1,0,0,0,12,519,1,0,0,0,14,521,1,0,0,
		0,16,523,1,0,0,0,18,525,1,0,0,0,20,527,1,0,0,0,22,529,1,0,0,0,24,531,1,
		0,0,0,26,583,1,0,0,0,28,638,1,0,0,0,30,683,1,0,0,0,32,708,1,0,0,0,34,756,
		1,0,0,0,36,784,1,0,0,0,38,817,1,0,0,0,40,833,1,0,0,0,42,854,1,0,0,0,44,
		897,1,0,0,0,46,905,1,0,0,0,48,908,1,0,0,0,50,953,1,0,0,0,52,961,1,0,0,
		0,54,964,1,0,0,0,56,1013,1,0,0,0,58,1059,1,0,0,0,60,1102,1,0,0,0,62,1148,
		1,0,0,0,64,1156,1,0,0,0,66,1162,1,0,0,0,68,1207,1,0,0,0,70,1253,1,0,0,
		0,72,1261,1,0,0,0,74,1267,1,0,0,0,76,1275,1,0,0,0,78,1278,1,0,0,0,80,1339,
		1,0,0,0,82,1348,1,0,0,0,84,1353,1,0,0,0,86,1401,1,0,0,0,88,1431,1,0,0,
		0,90,1439,1,0,0,0,92,1447,1,0,0,0,94,1455,1,0,0,0,96,1489,1,0,0,0,98,1497,
		1,0,0,0,100,1508,1,0,0,0,102,1538,1,0,0,0,104,1555,1,0,0,0,106,1573,1,
		0,0,0,108,1595,1,0,0,0,110,1606,1,0,0,0,112,1619,1,0,0,0,114,1644,1,0,
		0,0,116,1697,1,0,0,0,118,1699,1,0,0,0,120,1721,1,0,0,0,122,1732,1,0,0,
		0,124,1747,1,0,0,0,126,1761,1,0,0,0,128,1765,1,0,0,0,130,1776,1,0,0,0,
		132,1784,1,0,0,0,134,1805,1,0,0,0,136,1825,1,0,0,0,138,1833,1,0,0,0,140,
		1853,1,0,0,0,142,1871,1,0,0,0,144,1890,1,0,0,0,146,1908,1,0,0,0,148,1925,
		1,0,0,0,150,1938,1,0,0,0,152,1952,1,0,0,0,154,1960,1,0,0,0,156,1969,1,
		0,0,0,158,1978,1,0,0,0,160,1987,1,0,0,0,162,1996,1,0,0,0,164,2010,1,0,
		0,0,166,2028,1,0,0,0,168,2036,1,0,0,0,170,2045,1,0,0,0,172,2054,1,0,0,
		0,174,2062,1,0,0,0,176,2071,1,0,0,0,178,2089,1,0,0,0,180,2108,1,0,0,0,
		182,2145,1,0,0,0,184,2147,1,0,0,0,186,2155,1,0,0,0,188,2163,1,0,0,0,190,
		2171,1,0,0,0,192,2182,1,0,0,0,194,2193,1,0,0,0,196,2201,1,0,0,0,198,2209,
		1,0,0,0,200,2235,1,0,0,0,202,2237,1,0,0,0,204,2240,1,0,0,0,206,2248,1,
		0,0,0,208,2255,1,0,0,0,210,2263,1,0,0,0,212,2327,1,0,0,0,214,2354,1,0,
		0,0,216,2369,1,0,0,0,218,2405,1,0,0,0,220,2411,1,0,0,0,222,2415,1,0,0,
		0,224,2420,1,0,0,0,226,2465,1,0,0,0,228,2467,1,0,0,0,230,2475,1,0,0,0,
		232,2487,1,0,0,0,234,2489,1,0,0,0,236,2496,1,0,0,0,238,2500,1,0,0,0,240,
		2507,1,0,0,0,242,2515,1,0,0,0,244,2525,1,0,0,0,246,2540,1,0,0,0,248,2554,
		1,0,0,0,250,2578,1,0,0,0,252,2590,1,0,0,0,254,2599,1,0,0,0,256,2606,1,
		0,0,0,258,2608,1,0,0,0,260,2614,1,0,0,0,262,2622,1,0,0,0,264,2668,1,0,
		0,0,266,2695,1,0,0,0,268,2707,1,0,0,0,270,2728,1,0,0,0,272,2732,1,0,0,
		0,274,2734,1,0,0,0,276,2737,1,0,0,0,278,2742,1,0,0,0,280,2769,1,0,0,0,
		282,2784,1,0,0,0,284,2792,1,0,0,0,286,2802,1,0,0,0,288,2816,1,0,0,0,290,
		2833,1,0,0,0,292,2840,1,0,0,0,294,2848,1,0,0,0,296,2852,1,0,0,0,298,2865,
		1,0,0,0,300,2870,1,0,0,0,302,2917,1,0,0,0,304,3001,1,0,0,0,306,3009,1,
		0,0,0,308,3026,1,0,0,0,310,3042,1,0,0,0,312,3047,1,0,0,0,314,3056,1,0,
		0,0,316,3063,1,0,0,0,318,3070,1,0,0,0,320,3084,1,0,0,0,322,3115,1,0,0,
		0,324,3117,1,0,0,0,326,3120,1,0,0,0,328,3130,1,0,0,0,330,3152,1,0,0,0,
		332,3183,1,0,0,0,334,3206,1,0,0,0,336,3208,1,0,0,0,338,3211,1,0,0,0,340,
		3214,1,0,0,0,342,3217,1,0,0,0,344,3223,1,0,0,0,346,3234,1,0,0,0,348,3237,
		1,0,0,0,350,3239,1,0,0,0,352,3242,1,0,0,0,354,3246,1,0,0,0,356,3258,1,
		0,0,0,358,3261,1,0,0,0,360,3269,1,0,0,0,362,3277,1,0,0,0,364,3290,1,0,
		0,0,366,3295,1,0,0,0,368,3298,1,0,0,0,370,3306,1,0,0,0,372,3312,1,0,0,
		0,374,3327,1,0,0,0,376,3329,1,0,0,0,378,3346,1,0,0,0,380,3348,1,0,0,0,
		382,3356,1,0,0,0,384,3367,1,0,0,0,386,3375,1,0,0,0,388,3379,1,0,0,0,390,
		3381,1,0,0,0,392,394,5,3,0,0,393,392,1,0,0,0,394,397,1,0,0,0,395,393,1,
		0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,407,3,4,2,0,
		399,401,5,3,0,0,400,399,1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,
		1,0,0,0,403,404,1,0,0,0,404,406,3,4,2,0,405,400,1,0,0,0,406,409,1,0,0,
		0,407,405,1,0,0,0,407,408,1,0,0,0,408,413,1,0,0,0,409,407,1,0,0,0,410,
		412,5,3,0,0,411,410,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,1,
		0,0,0,414,416,1,0,0,0,415,413,1,0,0,0,416,417,5,0,0,1,417,1,1,0,0,0,418,
		420,5,3,0,0,419,418,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,
		0,0,0,422,424,1,0,0,0,423,421,1,0,0,0,424,428,3,4,2,0,425,427,5,3,0,0,
		426,425,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,
		1,0,0,0,430,428,1,0,0,0,431,432,5,0,0,1,432,3,1,0,0,0,433,442,3,22,11,
		0,434,442,3,6,3,0,435,442,3,8,4,0,436,442,3,10,5,0,437,442,3,12,6,0,438,
		442,3,14,7,0,439,442,3,16,8,0,440,442,3,18,9,0,441,433,1,0,0,0,441,434,
		1,0,0,0,441,435,1,0,0,0,441,436,1,0,0,0,441,437,1,0,0,0,441,438,1,0,0,
		0,441,439,1,0,0,0,441,440,1,0,0,0,442,5,1,0,0,0,443,512,3,210,105,0,444,
		512,3,24,12,0,445,512,3,26,13,0,446,512,3,28,14,0,447,512,3,30,15,0,448,
		512,3,32,16,0,449,512,3,34,17,0,450,512,3,36,18,0,451,512,3,38,19,0,452,
		512,3,40,20,0,453,512,3,42,21,0,454,512,3,48,24,0,455,512,3,54,27,0,456,
		512,3,56,28,0,457,512,3,58,29,0,458,512,3,60,30,0,459,512,3,66,33,0,460,
		512,3,68,34,0,461,512,3,78,39,0,462,512,3,84,42,0,463,512,3,86,43,0,464,
		512,3,88,44,0,465,512,3,90,45,0,466,512,3,92,46,0,467,512,3,94,47,0,468,
		512,3,100,50,0,469,512,3,102,51,0,470,512,3,104,52,0,471,512,3,106,53,
		0,472,512,3,108,54,0,473,512,3,110,55,0,474,512,3,112,56,0,475,512,3,114,
		57,0,476,512,3,118,59,0,477,512,3,120,60,0,478,512,3,122,61,0,479,512,
		3,128,64,0,480,512,3,132,66,0,481,512,3,134,67,0,482,512,3,136,68,0,483,
		512,3,138,69,0,484,512,3,140,70,0,485,512,3,142,71,0,486,512,3,144,72,
		0,487,512,3,146,73,0,488,512,3,148,74,0,489,512,3,150,75,0,490,512,3,152,
		76,0,491,512,3,154,77,0,492,512,3,156,78,0,493,512,3,158,79,0,494,512,
		3,160,80,0,495,512,3,162,81,0,496,512,3,164,82,0,497,512,3,166,83,0,498,
		512,3,168,84,0,499,512,3,170,85,0,500,512,3,172,86,0,501,512,3,174,87,
		0,502,512,3,176,88,0,503,512,3,178,89,0,504,512,3,180,90,0,505,512,3,182,
		91,0,506,512,3,184,92,0,507,512,3,186,93,0,508,512,3,188,94,0,509,512,
		3,190,95,0,510,512,3,192,96,0,511,443,1,0,0,0,511,444,1,0,0,0,511,445,
		1,0,0,0,511,446,1,0,0,0,511,447,1,0,0,0,511,448,1,0,0,0,511,449,1,0,0,
		0,511,450,1,0,0,0,511,451,1,0,0,0,511,452,1,0,0,0,511,453,1,0,0,0,511,
		454,1,0,0,0,511,455,1,0,0,0,511,456,1,0,0,0,511,457,1,0,0,0,511,458,1,
		0,0,0,511,459,1,0,0,0,511,460,1,0,0,0,511,461,1,0,0,0,511,462,1,0,0,0,
		511,463,1,0,0,0,511,464,1,0,0,0,511,465,1,0,0,0,511,466,1,0,0,0,511,467,
		1,0,0,0,511,468,1,0,0,0,511,469,1,0,0,0,511,470,1,0,0,0,511,471,1,0,0,
		0,511,472,1,0,0,0,511,473,1,0,0,0,511,474,1,0,0,0,511,475,1,0,0,0,511,
		476,1,0,0,0,511,477,1,0,0,0,511,478,1,0,0,0,511,479,1,0,0,0,511,480,1,
		0,0,0,511,481,1,0,0,0,511,482,1,0,0,0,511,483,1,0,0,0,511,484,1,0,0,0,
		511,485,1,0,0,0,511,486,1,0,0,0,511,487,1,0,0,0,511,488,1,0,0,0,511,489,
		1,0,0,0,511,490,1,0,0,0,511,491,1,0,0,0,511,492,1,0,0,0,511,493,1,0,0,
		0,511,494,1,0,0,0,511,495,1,0,0,0,511,496,1,0,0,0,511,497,1,0,0,0,511,
		498,1,0,0,0,511,499,1,0,0,0,511,500,1,0,0,0,511,501,1,0,0,0,511,502,1,
		0,0,0,511,503,1,0,0,0,511,504,1,0,0,0,511,505,1,0,0,0,511,506,1,0,0,0,
		511,507,1,0,0,0,511,508,1,0,0,0,511,509,1,0,0,0,511,510,1,0,0,0,512,7,
		1,0,0,0,513,514,3,302,151,0,514,9,1,0,0,0,515,516,3,302,151,0,516,11,1,
		0,0,0,517,520,3,20,10,0,518,520,3,378,189,0,519,517,1,0,0,0,519,518,1,
		0,0,0,520,13,1,0,0,0,521,522,3,302,151,0,522,15,1,0,0,0,523,524,3,302,
		151,0,524,17,1,0,0,0,525,526,3,302,151,0,526,19,1,0,0,0,527,528,3,302,
		151,0,528,21,1,0,0,0,529,530,3,212,106,0,530,23,1,0,0,0,531,534,5,38,0,
		0,532,533,5,88,0,0,533,535,5,143,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,
		537,1,0,0,0,536,538,7,0,0,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,1,
		0,0,0,539,543,5,157,0,0,540,541,5,65,0,0,541,542,5,83,0,0,542,544,5,52,
		0,0,543,540,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,550,3,382,191,
		0,546,547,5,14,0,0,547,548,3,198,99,0,548,549,5,15,0,0,549,551,1,0,0,0,
		550,546,1,0,0,0,550,551,1,0,0,0,551,555,1,0,0,0,552,553,5,42,0,0,553,554,
		5,36,0,0,554,556,3,334,167,0,555,552,1,0,0,0,555,556,1,0,0,0,556,560,1,
		0,0,0,557,558,5,92,0,0,558,559,5,33,0,0,559,561,3,302,151,0,560,557,1,
		0,0,0,560,561,1,0,0,0,561,565,1,0,0,0,562,563,5,164,0,0,563,564,5,33,0,
		0,564,566,3,380,190,0,565,562,1,0,0,0,565,566,1,0,0,0,566,570,1,0,0,0,
		567,568,5,118,0,0,568,569,5,165,0,0,569,571,3,350,175,0,570,567,1,0,0,
		0,570,571,1,0,0,0,571,577,1,0,0,0,572,573,5,141,0,0,573,574,5,14,0,0,574,
		575,3,292,146,0,575,576,5,15,0,0,576,578,1,0,0,0,577,572,1,0,0,0,577,578,
		1,0,0,0,578,581,1,0,0,0,579,580,5,28,0,0,580,582,3,22,11,0,581,579,1,0,
		0,0,581,582,1,0,0,0,582,25,1,0,0,0,583,586,5,38,0,0,584,585,5,88,0,0,585,
		587,5,143,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,592,
		5,157,0,0,589,590,5,65,0,0,590,591,5,83,0,0,591,593,5,52,0,0,592,589,1,
		0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,3,382,191,0,595,604,5,76,
		0,0,596,597,3,350,175,0,597,598,5,12,0,0,598,600,1,0,0,0,599,596,1,0,0,
		0,599,600,1,0,0,0,600,601,1,0,0,0,601,602,3,350,175,0,602,603,5,12,0,0,
		603,605,1,0,0,0,604,599,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,610,
		3,350,175,0,607,608,5,42,0,0,608,609,5,36,0,0,609,611,3,334,167,0,610,
		607,1,0,0,0,610,611,1,0,0,0,611,615,1,0,0,0,612,613,5,92,0,0,613,614,5,
		33,0,0,614,616,3,302,151,0,615,612,1,0,0,0,615,616,1,0,0,0,616,620,1,0,
		0,0,617,618,5,164,0,0,618,619,5,33,0,0,619,621,3,380,190,0,620,617,1,0,
		0,0,620,621,1,0,0,0,621,625,1,0,0,0,622,623,5,118,0,0,623,624,5,165,0,
		0,624,626,3,350,175,0,625,622,1,0,0,0,625,626,1,0,0,0,626,632,1,0,0,0,
		627,628,5,141,0,0,628,629,5,14,0,0,629,630,3,292,146,0,630,631,5,15,0,
		0,631,633,1,0,0,0,632,627,1,0,0,0,632,633,1,0,0,0,633,636,1,0,0,0,634,
		635,5,28,0,0,635,637,3,22,11,0,636,634,1,0,0,0,636,637,1,0,0,0,637,27,
		1,0,0,0,638,641,5,38,0,0,639,640,5,88,0,0,640,642,5,143,0,0,641,639,1,
		0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,647,5,157,0,0,644,645,5,65,0,
		0,645,646,5,83,0,0,646,648,5,52,0,0,647,644,1,0,0,0,647,648,1,0,0,0,648,
		649,1,0,0,0,649,650,3,382,191,0,650,651,5,167,0,0,651,655,3,382,191,0,
		652,653,5,42,0,0,653,654,5,36,0,0,654,656,3,334,167,0,655,652,1,0,0,0,
		655,656,1,0,0,0,656,660,1,0,0,0,657,658,5,92,0,0,658,659,5,33,0,0,659,
		661,3,302,151,0,660,657,1,0,0,0,660,661,1,0,0,0,661,665,1,0,0,0,662,663,
		5,164,0,0,663,664,5,33,0,0,664,666,3,380,190,0,665,662,1,0,0,0,665,666,
		1,0,0,0,666,670,1,0,0,0,667,668,5,118,0,0,668,669,5,165,0,0,669,671,3,
		350,175,0,670,667,1,0,0,0,670,671,1,0,0,0,671,677,1,0,0,0,672,673,5,141,
		0,0,673,674,5,14,0,0,674,675,3,292,146,0,675,676,5,15,0,0,676,678,1,0,
		0,0,677,672,1,0,0,0,677,678,1,0,0,0,678,681,1,0,0,0,679,680,5,28,0,0,680,
		682,3,22,11,0,681,679,1,0,0,0,681,682,1,0,0,0,682,29,1,0,0,0,683,684,5,
		38,0,0,684,685,5,168,0,0,685,689,5,157,0,0,686,687,5,65,0,0,687,688,5,
		83,0,0,688,690,5,52,0,0,689,686,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,
		0,691,692,3,382,191,0,692,693,5,169,0,0,693,699,3,382,191,0,694,695,5,
		57,0,0,695,696,5,148,0,0,696,697,5,28,0,0,697,698,5,86,0,0,698,700,3,302,
		151,0,699,694,1,0,0,0,699,700,1,0,0,0,700,706,1,0,0,0,701,702,5,141,0,
		0,702,703,5,14,0,0,703,704,3,292,146,0,704,705,5,15,0,0,705,707,1,0,0,
		0,706,701,1,0,0,0,706,707,1,0,0,0,707,31,1,0,0,0,708,709,5,38,0,0,709,
		713,5,157,0,0,710,711,5,65,0,0,711,712,5,83,0,0,712,714,5,52,0,0,713,710,
		1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,3,382,191,0,716,717,5,
		169,0,0,717,723,3,382,191,0,718,719,5,57,0,0,719,720,5,148,0,0,720,721,
		5,28,0,0,721,722,5,86,0,0,722,724,3,302,151,0,723,718,1,0,0,0,723,724,
		1,0,0,0,724,728,1,0,0,0,725,726,5,42,0,0,726,727,5,36,0,0,727,729,3,334,
		167,0,728,725,1,0,0,0,728,729,1,0,0,0,729,733,1,0,0,0,730,731,5,92,0,0,
		731,732,5,33,0,0,732,734,3,302,151,0,733,730,1,0,0,0,733,734,1,0,0,0,734,
		738,1,0,0,0,735,736,5,164,0,0,736,737,5,33,0,0,737,739,3,380,190,0,738,
		735,1,0,0,0,738,739,1,0,0,0,739,743,1,0,0,0,740,741,5,118,0,0,741,742,
		5,165,0,0,742,744,3,350,175,0,743,740,1,0,0,0,743,744,1,0,0,0,744,750,
		1,0,0,0,745,746,5,141,0,0,746,747,5,14,0,0,747,748,3,292,146,0,748,749,
		5,15,0,0,749,751,1,0,0,0,750,745,1,0,0,0,750,751,1,0,0,0,751,754,1,0,0,
		0,752,753,5,28,0,0,753,755,3,22,11,0,754,752,1,0,0,0,754,755,1,0,0,0,755,
		33,1,0,0,0,756,759,5,38,0,0,757,758,5,88,0,0,758,760,5,143,0,0,759,757,
		1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,765,5,170,0,0,762,763,5,65,
		0,0,763,764,5,83,0,0,764,766,5,52,0,0,765,762,1,0,0,0,765,766,1,0,0,0,
		766,767,1,0,0,0,767,772,3,382,191,0,768,769,5,14,0,0,769,770,3,194,97,
		0,770,771,5,15,0,0,771,773,1,0,0,0,772,768,1,0,0,0,772,773,1,0,0,0,773,
		779,1,0,0,0,774,775,5,141,0,0,775,776,5,14,0,0,776,777,3,292,146,0,777,
		778,5,15,0,0,778,780,1,0,0,0,779,774,1,0,0,0,779,780,1,0,0,0,780,781,1,
		0,0,0,781,782,5,28,0,0,782,783,3,212,106,0,783,35,1,0,0,0,784,787,5,38,
		0,0,785,786,5,88,0,0,786,788,5,143,0,0,787,785,1,0,0,0,787,788,1,0,0,0,
		788,789,1,0,0,0,789,790,5,184,0,0,790,794,5,170,0,0,791,792,5,65,0,0,792,
		793,5,83,0,0,793,795,5,52,0,0,794,791,1,0,0,0,794,795,1,0,0,0,795,796,
		1,0,0,0,796,800,3,382,191,0,797,798,5,92,0,0,798,799,5,33,0,0,799,801,
		3,302,151,0,800,797,1,0,0,0,800,801,1,0,0,0,801,805,1,0,0,0,802,803,5,
		164,0,0,803,804,5,33,0,0,804,806,3,380,190,0,805,802,1,0,0,0,805,806,1,
		0,0,0,806,812,1,0,0,0,807,808,5,141,0,0,808,809,5,14,0,0,809,810,3,292,
		146,0,810,811,5,15,0,0,811,813,1,0,0,0,812,807,1,0,0,0,812,813,1,0,0,0,
		813,814,1,0,0,0,814,815,5,28,0,0,815,816,3,212,106,0,816,37,1,0,0,0,817,
		818,5,38,0,0,818,819,5,184,0,0,819,820,5,170,0,0,820,826,3,382,191,0,821,
		822,5,141,0,0,822,823,5,14,0,0,823,824,3,292,146,0,824,825,5,15,0,0,825,
		827,1,0,0,0,826,821,1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,828,829,5,
		28,0,0,829,830,5,188,0,0,830,831,5,86,0,0,831,832,3,382,191,0,832,39,1,
		0,0,0,833,834,5,38,0,0,834,835,5,183,0,0,835,839,5,154,0,0,836,837,5,65,
		0,0,837,838,5,83,0,0,838,840,5,52,0,0,839,836,1,0,0,0,839,840,1,0,0,0,
		840,841,1,0,0,0,841,845,3,382,191,0,842,843,5,118,0,0,843,844,5,165,0,
		0,844,846,3,382,191,0,845,842,1,0,0,0,845,846,1,0,0,0,846,852,1,0,0,0,
		847,848,5,141,0,0,848,849,5,14,0,0,849,850,3,292,146,0,850,851,5,15,0,
		0,851,853,1,0,0,0,852,847,1,0,0,0,852,853,1,0,0,0,853,41,1,0,0,0,854,857,
		5,38,0,0,855,856,5,88,0,0,856,858,5,143,0,0,857,855,1,0,0,0,857,858,1,
		0,0,0,858,859,1,0,0,0,859,860,5,183,0,0,860,864,5,157,0,0,861,862,5,65,
		0,0,862,863,5,83,0,0,863,865,5,52,0,0,864,861,1,0,0,0,864,865,1,0,0,0,
		865,866,1,0,0,0,866,871,3,382,191,0,867,868,5,14,0,0,868,869,3,44,22,0,
		869,870,5,15,0,0,870,872,1,0,0,0,871,867,1,0,0,0,871,872,1,0,0,0,872,879,
		1,0,0,0,873,874,5,118,0,0,874,877,5,165,0,0,875,878,3,350,175,0,876,878,
		5,42,0,0,877,875,1,0,0,0,877,876,1,0,0,0,878,880,1,0,0,0,879,873,1,0,0,
		0,879,880,1,0,0,0,880,890,1,0,0,0,881,882,5,118,0,0,882,883,5,92,0,0,883,
		888,5,189,0,0,884,885,5,14,0,0,885,886,3,44,22,0,886,887,5,15,0,0,887,
		889,1,0,0,0,888,884,1,0,0,0,888,889,1,0,0,0,889,891,1,0,0,0,890,881,1,
		0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,893,5,141,0,0,893,894,5,14,0,
		0,894,895,3,292,146,0,895,896,5,15,0,0,896,43,1,0,0,0,897,902,3,46,23,
		0,898,899,5,13,0,0,899,901,3,46,23,0,900,898,1,0,0,0,901,904,1,0,0,0,902,
		900,1,0,0,0,902,903,1,0,0,0,903,45,1,0,0,0,904,902,1,0,0,0,905,906,3,350,
		175,0,906,907,3,332,166,0,907,47,1,0,0,0,908,911,5,38,0,0,909,910,5,88,
		0,0,910,912,5,143,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,
		913,915,7,0,0,0,914,913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,920,
		5,182,0,0,917,918,5,65,0,0,918,919,5,83,0,0,919,921,5,52,0,0,920,917,1,
		0,0,0,920,921,1,0,0,0,921,930,1,0,0,0,922,923,3,350,175,0,923,924,5,12,
		0,0,924,926,1,0,0,0,925,922,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,
		928,3,350,175,0,928,929,5,12,0,0,929,931,1,0,0,0,930,925,1,0,0,0,930,931,
		1,0,0,0,931,932,1,0,0,0,932,933,3,350,175,0,933,935,5,14,0,0,934,936,3,
		50,25,0,935,934,1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,940,5,15,0,
		0,938,939,5,190,0,0,939,941,3,332,166,0,940,938,1,0,0,0,940,941,1,0,0,
		0,941,942,1,0,0,0,942,943,5,28,0,0,943,944,5,14,0,0,944,945,3,302,151,
		0,945,951,5,15,0,0,946,947,5,141,0,0,947,948,5,14,0,0,948,949,3,292,146,
		0,949,950,5,15,0,0,950,952,1,0,0,0,951,946,1,0,0,0,951,952,1,0,0,0,952,
		49,1,0,0,0,953,958,3,52,26,0,954,955,5,13,0,0,955,957,3,52,26,0,956,954,
		1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,51,1,0,0,0,
		960,958,1,0,0,0,961,962,3,350,175,0,962,963,3,332,166,0,963,53,1,0,0,0,
		964,967,5,38,0,0,965,966,5,88,0,0,966,968,5,143,0,0,967,965,1,0,0,0,967,
		968,1,0,0,0,968,970,1,0,0,0,969,971,7,0,0,0,970,969,1,0,0,0,970,971,1,
		0,0,0,971,972,1,0,0,0,972,976,5,182,0,0,973,974,5,65,0,0,974,975,5,83,
		0,0,975,977,5,52,0,0,976,973,1,0,0,0,976,977,1,0,0,0,977,986,1,0,0,0,978,
		979,3,350,175,0,979,980,5,12,0,0,980,982,1,0,0,0,981,978,1,0,0,0,981,982,
		1,0,0,0,982,983,1,0,0,0,983,984,3,350,175,0,984,985,5,12,0,0,985,987,1,
		0,0,0,986,981,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,3,350,175,
		0,989,991,5,14,0,0,990,992,3,50,25,0,991,990,1,0,0,0,991,992,1,0,0,0,992,
		993,1,0,0,0,993,994,5,15,0,0,994,995,5,190,0,0,995,999,3,332,166,0,996,
		1000,5,191,0,0,997,998,5,83,0,0,998,1000,5,191,0,0,999,996,1,0,0,0,999,
		997,1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1002,5,192,0,0,1002,
		1008,3,350,175,0,1003,1004,5,141,0,0,1004,1005,5,14,0,0,1005,1006,3,292,
		146,0,1006,1007,5,15,0,0,1007,1009,1,0,0,0,1008,1003,1,0,0,0,1008,1009,
		1,0,0,0,1009,1010,1,0,0,0,1010,1011,5,28,0,0,1011,1012,3,334,167,0,1012,
		55,1,0,0,0,1013,1016,5,38,0,0,1014,1015,5,88,0,0,1015,1017,5,143,0,0,1016,
		1014,1,0,0,0,1016,1017,1,0,0,0,1017,1019,1,0,0,0,1018,1020,7,0,0,0,1019,
		1018,1,0,0,0,1019,1020,1,0,0,0,1020,1021,1,0,0,0,1021,1025,5,182,0,0,1022,
		1023,5,65,0,0,1023,1024,5,83,0,0,1024,1026,5,52,0,0,1025,1022,1,0,0,0,
		1025,1026,1,0,0,0,1026,1035,1,0,0,0,1027,1028,3,350,175,0,1028,1029,5,
		12,0,0,1029,1031,1,0,0,0,1030,1027,1,0,0,0,1030,1031,1,0,0,0,1031,1032,
		1,0,0,0,1032,1033,3,350,175,0,1033,1034,5,12,0,0,1034,1036,1,0,0,0,1035,
		1030,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,3,350,175,0,
		1038,1040,5,14,0,0,1039,1041,3,50,25,0,1040,1039,1,0,0,0,1040,1041,1,0,
		0,0,1041,1042,1,0,0,0,1042,1043,5,15,0,0,1043,1044,5,190,0,0,1044,1045,
		3,332,166,0,1045,1046,5,192,0,0,1046,1050,3,350,175,0,1047,1048,5,118,
		0,0,1048,1049,5,165,0,0,1049,1051,3,382,191,0,1050,1047,1,0,0,0,1050,1051,
		1,0,0,0,1051,1052,1,0,0,0,1052,1053,5,141,0,0,1053,1054,5,14,0,0,1054,
		1055,3,292,146,0,1055,1056,5,15,0,0,1056,1057,5,28,0,0,1057,1058,3,334,
		167,0,1058,57,1,0,0,0,1059,1062,5,38,0,0,1060,1061,5,88,0,0,1061,1063,
		5,143,0,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,1066,
		7,0,0,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,1067,1071,
		5,182,0,0,1068,1069,5,65,0,0,1069,1070,5,83,0,0,1070,1072,5,52,0,0,1071,
		1068,1,0,0,0,1071,1072,1,0,0,0,1072,1081,1,0,0,0,1073,1074,3,350,175,0,
		1074,1075,5,12,0,0,1075,1077,1,0,0,0,1076,1073,1,0,0,0,1076,1077,1,0,0,
		0,1077,1078,1,0,0,0,1078,1079,3,350,175,0,1079,1080,5,12,0,0,1080,1082,
		1,0,0,0,1081,1076,1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1084,
		3,350,175,0,1084,1086,5,14,0,0,1085,1087,3,50,25,0,1086,1085,1,0,0,0,1086,
		1087,1,0,0,0,1087,1088,1,0,0,0,1088,1089,5,15,0,0,1089,1090,5,190,0,0,
		1090,1091,3,332,166,0,1091,1092,5,193,0,0,1092,1093,5,118,0,0,1093,1094,
		5,165,0,0,1094,1100,3,382,191,0,1095,1096,5,141,0,0,1096,1097,5,14,0,0,
		1097,1098,3,292,146,0,1098,1099,5,15,0,0,1099,1101,1,0,0,0,1100,1095,1,
		0,0,0,1100,1101,1,0,0,0,1101,59,1,0,0,0,1102,1105,5,38,0,0,1103,1104,5,
		88,0,0,1104,1106,5,143,0,0,1105,1103,1,0,0,0,1105,1106,1,0,0,0,1106,1108,
		1,0,0,0,1107,1109,7,0,0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,
		1,0,0,0,1110,1111,5,194,0,0,1111,1115,5,182,0,0,1112,1113,5,65,0,0,1113,
		1114,5,83,0,0,1114,1116,5,52,0,0,1115,1112,1,0,0,0,1115,1116,1,0,0,0,1116,
		1125,1,0,0,0,1117,1118,3,350,175,0,1118,1119,5,12,0,0,1119,1121,1,0,0,
		0,1120,1117,1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1123,3,350,
		175,0,1123,1124,5,12,0,0,1124,1126,1,0,0,0,1125,1120,1,0,0,0,1125,1126,
		1,0,0,0,1126,1127,1,0,0,0,1127,1128,3,350,175,0,1128,1130,5,14,0,0,1129,
		1131,3,62,31,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,
		1135,5,15,0,0,1133,1134,5,190,0,0,1134,1136,3,332,166,0,1135,1133,1,0,
		0,0,1135,1136,1,0,0,0,1136,1137,1,0,0,0,1137,1138,5,28,0,0,1138,1139,5,
		14,0,0,1139,1140,3,302,151,0,1140,1146,5,15,0,0,1141,1142,5,141,0,0,1142,
		1143,5,14,0,0,1143,1144,3,292,146,0,1144,1145,5,15,0,0,1145,1147,1,0,0,
		0,1146,1141,1,0,0,0,1146,1147,1,0,0,0,1147,61,1,0,0,0,1148,1153,3,64,32,
		0,1149,1150,5,13,0,0,1150,1152,3,64,32,0,1151,1149,1,0,0,0,1152,1155,1,
		0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,63,1,0,0,0,1155,1153,1,
		0,0,0,1156,1157,3,382,191,0,1157,1160,3,332,166,0,1158,1159,5,83,0,0,1159,
		1161,5,194,0,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,65,1,0,0,0,1162,
		1165,5,38,0,0,1163,1164,5,88,0,0,1164,1166,5,143,0,0,1165,1163,1,0,0,0,
		1165,1166,1,0,0,0,1166,1168,1,0,0,0,1167,1169,7,0,0,0,1168,1167,1,0,0,
		0,1168,1169,1,0,0,0,1169,1170,1,0,0,0,1170,1171,5,194,0,0,1171,1175,5,
		182,0,0,1172,1173,5,65,0,0,1173,1174,5,83,0,0,1174,1176,5,52,0,0,1175,
		1172,1,0,0,0,1175,1176,1,0,0,0,1176,1185,1,0,0,0,1177,1178,3,350,175,0,
		1178,1179,5,12,0,0,1179,1181,1,0,0,0,1180,1177,1,0,0,0,1180,1181,1,0,0,
		0,1181,1182,1,0,0,0,1182,1183,3,350,175,0,1183,1184,5,12,0,0,1184,1186,
		1,0,0,0,1185,1180,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1188,
		3,350,175,0,1188,1190,5,14,0,0,1189,1191,3,62,31,0,1190,1189,1,0,0,0,1190,
		1191,1,0,0,0,1191,1192,1,0,0,0,1192,1193,5,15,0,0,1193,1194,5,190,0,0,
		1194,1195,3,332,166,0,1195,1196,5,192,0,0,1196,1202,3,350,175,0,1197,1198,
		5,141,0,0,1198,1199,5,14,0,0,1199,1200,3,292,146,0,1200,1201,5,15,0,0,
		1201,1203,1,0,0,0,1202,1197,1,0,0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,
		0,1204,1205,5,28,0,0,1205,1206,3,334,167,0,1206,67,1,0,0,0,1207,1210,5,
		38,0,0,1208,1209,5,88,0,0,1209,1211,5,143,0,0,1210,1208,1,0,0,0,1210,1211,
		1,0,0,0,1211,1212,1,0,0,0,1212,1213,5,157,0,0,1213,1217,5,182,0,0,1214,
		1215,5,65,0,0,1215,1216,5,83,0,0,1216,1218,5,52,0,0,1217,1214,1,0,0,0,
		1217,1218,1,0,0,0,1218,1227,1,0,0,0,1219,1220,3,350,175,0,1220,1221,5,
		12,0,0,1221,1223,1,0,0,0,1222,1219,1,0,0,0,1222,1223,1,0,0,0,1223,1224,
		1,0,0,0,1224,1225,3,350,175,0,1225,1226,5,12,0,0,1226,1228,1,0,0,0,1227,
		1222,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1230,3,350,175,0,
		1230,1232,5,14,0,0,1231,1233,3,70,35,0,1232,1231,1,0,0,0,1232,1233,1,0,
		0,0,1233,1234,1,0,0,0,1234,1241,5,15,0,0,1235,1236,5,190,0,0,1236,1237,
		5,157,0,0,1237,1238,5,18,0,0,1238,1239,3,74,37,0,1239,1240,5,19,0,0,1240,
		1242,1,0,0,0,1241,1235,1,0,0,0,1241,1242,1,0,0,0,1242,1248,1,0,0,0,1243,
		1244,5,141,0,0,1244,1245,5,14,0,0,1245,1246,3,292,146,0,1246,1247,5,15,
		0,0,1247,1249,1,0,0,0,1248,1243,1,0,0,0,1248,1249,1,0,0,0,1249,1250,1,
		0,0,0,1250,1251,5,28,0,0,1251,1252,3,302,151,0,1252,69,1,0,0,0,1253,1258,
		3,72,36,0,1254,1255,5,13,0,0,1255,1257,3,72,36,0,1256,1254,1,0,0,0,1257,
		1260,1,0,0,0,1258,1256,1,0,0,0,1258,1259,1,0,0,0,1259,71,1,0,0,0,1260,
		1258,1,0,0,0,1261,1265,3,382,191,0,1262,1266,3,332,166,0,1263,1264,5,26,
		0,0,1264,1266,5,195,0,0,1265,1262,1,0,0,0,1265,1263,1,0,0,0,1266,73,1,
		0,0,0,1267,1272,3,76,38,0,1268,1269,5,13,0,0,1269,1271,3,76,38,0,1270,
		1268,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,1,0,0,0,1273,
		75,1,0,0,0,1274,1272,1,0,0,0,1275,1276,3,382,191,0,1276,1277,3,332,166,
		0,1277,77,1,0,0,0,1278,1281,5,38,0,0,1279,1280,5,88,0,0,1280,1282,5,143,
		0,0,1281,1279,1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1287,5,
		181,0,0,1284,1285,5,65,0,0,1285,1286,5,83,0,0,1286,1288,5,52,0,0,1287,
		1284,1,0,0,0,1287,1288,1,0,0,0,1288,1297,1,0,0,0,1289,1290,3,350,175,0,
		1290,1291,5,12,0,0,1291,1293,1,0,0,0,1292,1289,1,0,0,0,1292,1293,1,0,0,
		0,1293,1294,1,0,0,0,1294,1295,3,350,175,0,1295,1296,5,12,0,0,1296,1298,
		1,0,0,0,1297,1292,1,0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1300,
		3,350,175,0,1300,1302,5,14,0,0,1301,1303,3,80,40,0,1302,1301,1,0,0,0,1302,
		1303,1,0,0,0,1303,1304,1,0,0,0,1304,1310,5,15,0,0,1305,1306,5,141,0,0,
		1306,1307,5,14,0,0,1307,1308,3,292,146,0,1308,1309,5,15,0,0,1309,1311,
		1,0,0,0,1310,1305,1,0,0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1316,
		5,198,0,0,1313,1315,5,3,0,0,1314,1313,1,0,0,0,1315,1318,1,0,0,0,1316,1314,
		1,0,0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,0,1318,1316,1,0,0,0,1319,1328,
		3,4,2,0,1320,1322,5,3,0,0,1321,1320,1,0,0,0,1322,1323,1,0,0,0,1323,1321,
		1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1327,3,4,2,0,1326,1321,
		1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1334,
		1,0,0,0,1330,1328,1,0,0,0,1331,1333,5,3,0,0,1332,1331,1,0,0,0,1333,1336,
		1,0,0,0,1334,1332,1,0,0,0,1334,1335,1,0,0,0,1335,1337,1,0,0,0,1336,1334,
		1,0,0,0,1337,1338,5,47,0,0,1338,79,1,0,0,0,1339,1344,3,82,41,0,1340,1341,
		5,13,0,0,1341,1343,3,82,41,0,1342,1340,1,0,0,0,1343,1346,1,0,0,0,1344,
		1342,1,0,0,0,1344,1345,1,0,0,0,1345,81,1,0,0,0,1346,1344,1,0,0,0,1347,
		1349,7,1,0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,1350,1,0,0,0,1350,
		1351,3,382,191,0,1351,1352,3,332,166,0,1352,83,1,0,0,0,1353,1356,5,38,
		0,0,1354,1355,5,88,0,0,1355,1357,5,143,0,0,1356,1354,1,0,0,0,1356,1357,
		1,0,0,0,1357,1358,1,0,0,0,1358,1362,5,181,0,0,1359,1360,5,65,0,0,1360,
		1361,5,83,0,0,1361,1363,5,52,0,0,1362,1359,1,0,0,0,1362,1363,1,0,0,0,1363,
		1372,1,0,0,0,1364,1365,3,350,175,0,1365,1366,5,12,0,0,1366,1368,1,0,0,
		0,1367,1364,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,1370,3,350,
		175,0,1370,1371,5,12,0,0,1371,1373,1,0,0,0,1372,1367,1,0,0,0,1372,1373,
		1,0,0,0,1373,1374,1,0,0,0,1374,1375,3,350,175,0,1375,1377,5,14,0,0,1376,
		1378,3,80,40,0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1379,1,0,0,0,1379,
		1383,5,15,0,0,1380,1381,5,183,0,0,1381,1382,5,199,0,0,1382,1384,5,200,
		0,0,1383,1380,1,0,0,0,1383,1384,1,0,0,0,1384,1385,1,0,0,0,1385,1386,5,
		118,0,0,1386,1387,5,165,0,0,1387,1393,3,382,191,0,1388,1389,5,141,0,0,
		1389,1390,5,14,0,0,1390,1391,3,292,146,0,1391,1392,5,15,0,0,1392,1394,
		1,0,0,0,1393,1388,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,
		5,192,0,0,1396,1399,3,350,175,0,1397,1398,5,28,0,0,1398,1400,3,334,167,
		0,1399,1397,1,0,0,0,1399,1400,1,0,0,0,1400,85,1,0,0,0,1401,1404,5,38,0,
		0,1402,1403,5,88,0,0,1403,1405,5,143,0,0,1404,1402,1,0,0,0,1404,1405,1,
		0,0,0,1405,1406,1,0,0,0,1406,1407,5,149,0,0,1407,1408,5,178,0,0,1408,1412,
		5,179,0,0,1409,1410,5,65,0,0,1410,1411,5,83,0,0,1411,1413,5,52,0,0,1412,
		1409,1,0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,1415,3,382,191,0,
		1415,1416,5,87,0,0,1416,1423,3,382,191,0,1417,1418,5,204,0,0,1418,1419,
		5,108,0,0,1419,1420,5,14,0,0,1420,1421,3,304,152,0,1421,1422,5,15,0,0,
		1422,1424,1,0,0,0,1423,1417,1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,
		0,1425,1426,5,205,0,0,1426,1427,5,114,0,0,1427,1428,5,14,0,0,1428,1429,
		3,302,151,0,1429,1430,5,15,0,0,1430,87,1,0,0,0,1431,1432,5,38,0,0,1432,
		1433,5,177,0,0,1433,1434,3,302,151,0,1434,1435,5,141,0,0,1435,1436,5,14,
		0,0,1436,1437,3,292,146,0,1437,1438,5,15,0,0,1438,89,1,0,0,0,1439,1440,
		5,38,0,0,1440,1441,5,176,0,0,1441,1442,3,302,151,0,1442,1443,5,141,0,0,
		1443,1444,5,14,0,0,1444,1445,3,292,146,0,1445,1446,5,15,0,0,1446,91,1,
		0,0,0,1447,1448,5,38,0,0,1448,1449,5,175,0,0,1449,1450,3,302,151,0,1450,
		1451,5,141,0,0,1451,1452,5,14,0,0,1452,1453,3,292,146,0,1453,1454,5,15,
		0,0,1454,93,1,0,0,0,1455,1456,5,38,0,0,1456,1457,5,172,0,0,1457,1461,5,
		173,0,0,1458,1459,5,65,0,0,1459,1460,5,83,0,0,1460,1462,5,52,0,0,1461,
		1458,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1464,3,382,191,0,
		1464,1465,5,87,0,0,1465,1466,3,382,191,0,1466,1479,5,14,0,0,1467,1468,
		5,24,0,0,1468,1476,5,189,0,0,1469,1470,5,118,0,0,1470,1471,5,206,0,0,1471,
		1472,5,141,0,0,1472,1473,5,14,0,0,1473,1474,3,96,48,0,1474,1475,5,15,0,
		0,1475,1477,1,0,0,0,1476,1469,1,0,0,0,1476,1477,1,0,0,0,1477,1480,1,0,
		0,0,1478,1480,3,96,48,0,1479,1467,1,0,0,0,1479,1478,1,0,0,0,1480,1481,
		1,0,0,0,1481,1487,5,15,0,0,1482,1483,5,141,0,0,1483,1484,5,14,0,0,1484,
		1485,3,292,146,0,1485,1486,5,15,0,0,1486,1488,1,0,0,0,1487,1482,1,0,0,
		0,1487,1488,1,0,0,0,1488,95,1,0,0,0,1489,1494,3,98,49,0,1490,1491,5,13,
		0,0,1491,1493,3,98,49,0,1492,1490,1,0,0,0,1493,1496,1,0,0,0,1494,1492,
		1,0,0,0,1494,1495,1,0,0,0,1495,97,1,0,0,0,1496,1494,1,0,0,0,1497,1499,
		3,382,191,0,1498,1500,3,332,166,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,
		1500,1506,1,0,0,0,1501,1502,5,141,0,0,1502,1503,5,14,0,0,1503,1504,3,292,
		146,0,1504,1505,5,15,0,0,1505,1507,1,0,0,0,1506,1501,1,0,0,0,1506,1507,
		1,0,0,0,1507,99,1,0,0,0,1508,1511,5,38,0,0,1509,1510,5,88,0,0,1510,1512,
		5,143,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,1513,1514,
		5,174,0,0,1514,1518,5,173,0,0,1515,1516,5,65,0,0,1516,1517,5,83,0,0,1517,
		1519,5,52,0,0,1518,1515,1,0,0,0,1518,1519,1,0,0,0,1519,1520,1,0,0,0,1520,
		1521,3,382,191,0,1521,1522,5,87,0,0,1522,1523,3,382,191,0,1523,1524,5,
		14,0,0,1524,1525,3,382,191,0,1525,1531,5,15,0,0,1526,1527,5,207,0,0,1527,
		1528,5,14,0,0,1528,1529,3,380,190,0,1529,1530,5,15,0,0,1530,1532,1,0,0,
		0,1531,1526,1,0,0,0,1531,1532,1,0,0,0,1532,1533,1,0,0,0,1533,1534,5,141,
		0,0,1534,1535,5,14,0,0,1535,1536,3,292,146,0,1536,1537,5,15,0,0,1537,101,
		1,0,0,0,1538,1539,5,208,0,0,1539,1542,5,154,0,0,1540,1541,5,65,0,0,1541,
		1543,5,52,0,0,1542,1540,1,0,0,0,1542,1543,1,0,0,0,1543,1547,1,0,0,0,1544,
		1545,3,350,175,0,1545,1546,5,12,0,0,1546,1548,1,0,0,0,1547,1544,1,0,0,
		0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1550,3,350,175,0,1550,1551,
		5,103,0,0,1551,1552,5,42,0,0,1552,1553,5,36,0,0,1553,1554,3,334,167,0,
		1554,103,1,0,0,0,1555,1556,5,208,0,0,1556,1559,5,154,0,0,1557,1558,5,65,
		0,0,1558,1560,5,52,0,0,1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,1564,1,
		0,0,0,1561,1562,3,350,175,0,1562,1563,5,12,0,0,1563,1565,1,0,0,0,1564,
		1561,1,0,0,0,1564,1565,1,0,0,0,1565,1566,1,0,0,0,1566,1567,3,350,175,0,
		1567,1568,5,103,0,0,1568,1569,5,141,0,0,1569,1570,5,14,0,0,1570,1571,3,
		292,146,0,1571,1572,5,15,0,0,1572,105,1,0,0,0,1573,1574,5,208,0,0,1574,
		1577,5,154,0,0,1575,1576,5,65,0,0,1576,1578,5,52,0,0,1577,1575,1,0,0,0,
		1577,1578,1,0,0,0,1578,1582,1,0,0,0,1579,1580,3,350,175,0,1580,1581,5,
		12,0,0,1581,1583,1,0,0,0,1582,1579,1,0,0,0,1582,1583,1,0,0,0,1583,1584,
		1,0,0,0,1584,1585,3,350,175,0,1585,1586,5,209,0,0,1586,1587,5,188,0,0,
		1587,1593,3,382,191,0,1588,1589,5,141,0,0,1589,1590,5,14,0,0,1590,1591,
		3,292,146,0,1591,1592,5,15,0,0,1592,1594,1,0,0,0,1593,1588,1,0,0,0,1593,
		1594,1,0,0,0,1594,107,1,0,0,0,1595,1596,5,208,0,0,1596,1599,5,154,0,0,
		1597,1598,5,65,0,0,1598,1600,5,52,0,0,1599,1597,1,0,0,0,1599,1600,1,0,
		0,0,1600,1601,1,0,0,0,1601,1602,3,382,191,0,1602,1603,5,171,0,0,1603,1604,
		5,188,0,0,1604,1605,3,302,151,0,1605,109,1,0,0,0,1606,1607,5,208,0,0,1607,
		1610,5,157,0,0,1608,1609,5,65,0,0,1609,1611,5,52,0,0,1610,1608,1,0,0,0,
		1610,1611,1,0,0,0,1611,1612,1,0,0,0,1612,1613,3,382,191,0,1613,1614,5,
		103,0,0,1614,1615,5,141,0,0,1615,1616,5,14,0,0,1616,1617,3,292,146,0,1617,
		1618,5,15,0,0,1618,111,1,0,0,0,1619,1620,5,208,0,0,1620,1621,5,157,0,0,
		1621,1622,3,382,191,0,1622,1623,5,209,0,0,1623,1627,5,206,0,0,1624,1625,
		5,65,0,0,1625,1626,5,83,0,0,1626,1628,5,52,0,0,1627,1624,1,0,0,0,1627,
		1628,1,0,0,0,1628,1629,1,0,0,0,1629,1641,3,98,49,0,1630,1631,5,13,0,0,
		1631,1632,5,209,0,0,1632,1636,5,206,0,0,1633,1634,5,65,0,0,1634,1635,5,
		83,0,0,1635,1637,5,52,0,0,1636,1633,1,0,0,0,1636,1637,1,0,0,0,1637,1638,
		1,0,0,0,1638,1640,3,98,49,0,1639,1630,1,0,0,0,1640,1643,1,0,0,0,1641,1639,
		1,0,0,0,1641,1642,1,0,0,0,1642,113,1,0,0,0,1643,1641,1,0,0,0,1644,1645,
		5,208,0,0,1645,1654,5,157,0,0,1646,1647,3,350,175,0,1647,1648,5,12,0,0,
		1648,1650,1,0,0,0,1649,1646,1,0,0,0,1649,1650,1,0,0,0,1650,1651,1,0,0,
		0,1651,1652,3,350,175,0,1652,1653,5,12,0,0,1653,1655,1,0,0,0,1654,1649,
		1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,0,0,1656,1657,3,350,175,0,1657,
		1662,3,116,58,0,1658,1659,5,13,0,0,1659,1661,3,116,58,0,1660,1658,1,0,
		0,0,1661,1664,1,0,0,0,1662,1660,1,0,0,0,1662,1663,1,0,0,0,1663,115,1,0,
		0,0,1664,1662,1,0,0,0,1665,1673,5,209,0,0,1666,1670,5,158,0,0,1667,1668,
		5,65,0,0,1668,1669,5,83,0,0,1669,1671,5,52,0,0,1670,1667,1,0,0,0,1670,
		1671,1,0,0,0,1671,1672,1,0,0,0,1672,1674,3,350,175,0,1673,1666,1,0,0,0,
		1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,1676,5,162,0,0,1676,1677,5,161,
		0,0,1677,1678,5,14,0,0,1678,1679,3,96,48,0,1679,1680,5,15,0,0,1680,1681,
		5,163,0,0,1681,1682,3,350,175,0,1682,1683,5,14,0,0,1683,1684,3,96,48,0,
		1684,1685,5,15,0,0,1685,1686,5,83,0,0,1686,1687,5,159,0,0,1687,1698,1,
		0,0,0,1688,1689,5,209,0,0,1689,1690,5,160,0,0,1690,1691,5,161,0,0,1691,
		1692,5,14,0,0,1692,1693,3,96,48,0,1693,1694,5,15,0,0,1694,1695,5,83,0,
		0,1695,1696,5,159,0,0,1696,1698,1,0,0,0,1697,1665,1,0,0,0,1697,1688,1,
		0,0,0,1698,117,1,0,0,0,1699,1700,5,208,0,0,1700,1709,5,157,0,0,1701,1702,
		3,350,175,0,1702,1703,5,12,0,0,1703,1705,1,0,0,0,1704,1701,1,0,0,0,1704,
		1705,1,0,0,0,1705,1706,1,0,0,0,1706,1707,3,350,175,0,1707,1708,5,12,0,
		0,1708,1710,1,0,0,0,1709,1704,1,0,0,0,1709,1710,1,0,0,0,1710,1711,1,0,
		0,0,1711,1712,3,350,175,0,1712,1713,5,209,0,0,1713,1714,5,160,0,0,1714,
		1715,5,161,0,0,1715,1716,5,14,0,0,1716,1717,3,96,48,0,1717,1718,5,15,0,
		0,1718,1719,5,83,0,0,1719,1720,5,159,0,0,1720,119,1,0,0,0,1721,1722,5,
		208,0,0,1722,1725,5,157,0,0,1723,1724,5,65,0,0,1724,1726,5,52,0,0,1725,
		1723,1,0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,1728,3,382,191,0,
		1728,1729,5,210,0,0,1729,1730,5,108,0,0,1730,1731,3,382,191,0,1731,121,
		1,0,0,0,1732,1733,5,208,0,0,1733,1736,5,157,0,0,1734,1735,5,65,0,0,1735,
		1737,5,52,0,0,1736,1734,1,0,0,0,1736,1737,1,0,0,0,1737,1738,1,0,0,0,1738,
		1739,3,382,191,0,1739,1744,3,124,62,0,1740,1741,5,13,0,0,1741,1743,3,124,
		62,0,1742,1740,1,0,0,0,1743,1746,1,0,0,0,1744,1742,1,0,0,0,1744,1745,1,
		0,0,0,1745,123,1,0,0,0,1746,1744,1,0,0,0,1747,1748,5,210,0,0,1748,1751,
		5,206,0,0,1749,1750,5,65,0,0,1750,1752,5,52,0,0,1751,1749,1,0,0,0,1751,
		1752,1,0,0,0,1752,1753,1,0,0,0,1753,1758,3,126,63,0,1754,1755,5,13,0,0,
		1755,1757,3,126,63,0,1756,1754,1,0,0,0,1757,1760,1,0,0,0,1758,1756,1,0,
		0,0,1758,1759,1,0,0,0,1759,125,1,0,0,0,1760,1758,1,0,0,0,1761,1762,3,350,
		175,0,1762,1763,5,108,0,0,1763,1764,3,350,175,0,1764,127,1,0,0,0,1765,
		1766,5,208,0,0,1766,1767,5,157,0,0,1767,1768,3,382,191,0,1768,1773,3,130,
		65,0,1769,1770,5,13,0,0,1770,1772,3,130,65,0,1771,1769,1,0,0,0,1772,1775,
		1,0,0,0,1773,1771,1,0,0,0,1773,1774,1,0,0,0,1774,129,1,0,0,0,1775,1773,
		1,0,0,0,1776,1777,5,171,0,0,1777,1780,5,206,0,0,1778,1779,5,65,0,0,1779,
		1781,5,52,0,0,1780,1778,1,0,0,0,1780,1781,1,0,0,0,1781,1782,1,0,0,0,1782,
		1783,3,350,175,0,1783,131,1,0,0,0,1784,1785,5,208,0,0,1785,1794,5,157,
		0,0,1786,1787,3,350,175,0,1787,1788,5,12,0,0,1788,1790,1,0,0,0,1789,1786,
		1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,1791,1792,3,350,175,0,1792,
		1793,5,12,0,0,1793,1795,1,0,0,0,1794,1789,1,0,0,0,1794,1795,1,0,0,0,1795,
		1796,1,0,0,0,1796,1797,3,350,175,0,1797,1798,5,171,0,0,1798,1801,5,158,
		0,0,1799,1800,5,65,0,0,1800,1802,5,52,0,0,1801,1799,1,0,0,0,1801,1802,
		1,0,0,0,1802,1803,1,0,0,0,1803,1804,3,302,151,0,1804,133,1,0,0,0,1805,
		1806,5,208,0,0,1806,1815,5,157,0,0,1807,1808,3,350,175,0,1808,1809,5,12,
		0,0,1809,1811,1,0,0,0,1810,1807,1,0,0,0,1810,1811,1,0,0,0,1811,1812,1,
		0,0,0,1812,1813,3,350,175,0,1813,1814,5,12,0,0,1814,1816,1,0,0,0,1815,
		1810,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,1818,3,350,175,0,
		1818,1819,5,171,0,0,1819,1820,5,160,0,0,1820,1823,5,161,0,0,1821,1822,
		5,65,0,0,1822,1824,5,52,0,0,1823,1821,1,0,0,0,1823,1824,1,0,0,0,1824,135,
		1,0,0,0,1825,1826,5,208,0,0,1826,1827,5,157,0,0,1827,1828,3,382,191,0,
		1828,1829,5,103,0,0,1829,1830,5,42,0,0,1830,1831,5,36,0,0,1831,1832,3,
		334,167,0,1832,137,1,0,0,0,1833,1834,5,208,0,0,1834,1837,7,2,0,0,1835,
		1836,5,65,0,0,1836,1838,5,52,0,0,1837,1835,1,0,0,0,1837,1838,1,0,0,0,1838,
		1839,1,0,0,0,1839,1840,3,382,191,0,1840,1841,5,208,0,0,1841,1844,5,206,
		0,0,1842,1843,5,65,0,0,1843,1845,5,52,0,0,1844,1842,1,0,0,0,1844,1845,
		1,0,0,0,1845,1846,1,0,0,0,1846,1847,3,350,175,0,1847,1848,5,103,0,0,1848,
		1849,5,141,0,0,1849,1850,5,14,0,0,1850,1851,3,292,146,0,1851,1852,5,15,
		0,0,1852,139,1,0,0,0,1853,1854,5,208,0,0,1854,1857,5,157,0,0,1855,1856,
		5,65,0,0,1856,1858,5,52,0,0,1857,1855,1,0,0,0,1857,1858,1,0,0,0,1858,1859,
		1,0,0,0,1859,1860,3,382,191,0,1860,1861,5,208,0,0,1861,1864,5,206,0,0,
		1862,1863,5,65,0,0,1863,1865,5,52,0,0,1864,1862,1,0,0,0,1864,1865,1,0,
		0,0,1865,1866,1,0,0,0,1866,1867,3,350,175,0,1867,1868,5,171,0,0,1868,1869,
		5,83,0,0,1869,1870,5,84,0,0,1870,141,1,0,0,0,1871,1872,5,208,0,0,1872,
		1875,5,157,0,0,1873,1874,5,65,0,0,1874,1876,5,52,0,0,1875,1873,1,0,0,0,
		1875,1876,1,0,0,0,1876,1877,1,0,0,0,1877,1878,3,382,191,0,1878,1879,5,
		208,0,0,1879,1882,5,206,0,0,1880,1881,5,65,0,0,1881,1883,5,52,0,0,1882,
		1880,1,0,0,0,1882,1883,1,0,0,0,1883,1884,1,0,0,0,1884,1885,3,350,175,0,
		1885,1886,5,103,0,0,1886,1887,5,211,0,0,1887,1888,5,195,0,0,1888,1889,
		3,332,166,0,1889,143,1,0,0,0,1890,1891,5,208,0,0,1891,1894,5,157,0,0,1892,
		1893,5,65,0,0,1893,1895,5,52,0,0,1894,1892,1,0,0,0,1894,1895,1,0,0,0,1895,
		1896,1,0,0,0,1896,1897,3,382,191,0,1897,1898,5,208,0,0,1898,1901,5,206,
		0,0,1899,1900,5,65,0,0,1900,1902,5,52,0,0,1901,1899,1,0,0,0,1901,1902,
		1,0,0,0,1902,1903,1,0,0,0,1903,1904,3,350,175,0,1904,1905,5,103,0,0,1905,
		1906,5,42,0,0,1906,1907,3,302,151,0,1907,145,1,0,0,0,1908,1909,5,208,0,
		0,1909,1912,5,157,0,0,1910,1911,5,65,0,0,1911,1913,5,52,0,0,1912,1910,
		1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1915,3,382,191,0,1915,
		1916,5,208,0,0,1916,1919,5,206,0,0,1917,1918,5,65,0,0,1918,1920,5,52,0,
		0,1919,1917,1,0,0,0,1919,1920,1,0,0,0,1920,1921,1,0,0,0,1921,1922,3,350,
		175,0,1922,1923,5,171,0,0,1923,1924,5,42,0,0,1924,147,1,0,0,0,1925,1926,
		5,208,0,0,1926,1929,5,170,0,0,1927,1928,5,65,0,0,1928,1930,5,52,0,0,1929,
		1927,1,0,0,0,1929,1930,1,0,0,0,1930,1931,1,0,0,0,1931,1932,3,382,191,0,
		1932,1933,5,103,0,0,1933,1934,5,141,0,0,1934,1935,5,14,0,0,1935,1936,3,
		292,146,0,1936,1937,5,15,0,0,1937,149,1,0,0,0,1938,1939,5,208,0,0,1939,
		1940,5,184,0,0,1940,1943,5,170,0,0,1941,1942,5,65,0,0,1942,1944,5,52,0,
		0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,1946,3,382,
		191,0,1946,1947,5,103,0,0,1947,1948,5,141,0,0,1948,1949,5,14,0,0,1949,
		1950,3,292,146,0,1950,1951,5,15,0,0,1951,151,1,0,0,0,1952,1953,5,208,0,
		0,1953,1954,5,212,0,0,1954,1955,5,103,0,0,1955,1956,5,141,0,0,1956,1957,
		5,14,0,0,1957,1958,3,292,146,0,1958,1959,5,15,0,0,1959,153,1,0,0,0,1960,
		1961,5,208,0,0,1961,1962,5,213,0,0,1962,1963,3,382,191,0,1963,1964,5,103,
		0,0,1964,1965,5,141,0,0,1965,1966,5,14,0,0,1966,1967,3,292,146,0,1967,
		1968,5,15,0,0,1968,155,1,0,0,0,1969,1970,5,208,0,0,1970,1971,5,214,0,0,
		1971,1972,3,382,191,0,1972,1973,5,103,0,0,1973,1974,5,141,0,0,1974,1975,
		5,14,0,0,1975,1976,3,292,146,0,1976,1977,5,15,0,0,1977,157,1,0,0,0,1978,
		1979,5,208,0,0,1979,1980,5,177,0,0,1980,1981,3,382,191,0,1981,1982,5,103,
		0,0,1982,1983,5,141,0,0,1983,1984,5,14,0,0,1984,1985,3,292,146,0,1985,
		1986,5,15,0,0,1986,159,1,0,0,0,1987,1988,5,208,0,0,1988,1989,5,176,0,0,
		1989,1990,3,382,191,0,1990,1991,5,103,0,0,1991,1992,5,141,0,0,1992,1993,
		5,14,0,0,1993,1994,3,292,146,0,1994,1995,5,15,0,0,1995,161,1,0,0,0,1996,
		1997,5,187,0,0,1997,2001,5,154,0,0,1998,1999,5,65,0,0,1999,2000,5,83,0,
		0,2000,2002,5,52,0,0,2001,1998,1,0,0,0,2001,2002,1,0,0,0,2002,2006,1,0,
		0,0,2003,2004,3,350,175,0,2004,2005,5,12,0,0,2005,2007,1,0,0,0,2006,2003,
		1,0,0,0,2006,2007,1,0,0,0,2007,2008,1,0,0,0,2008,2009,3,350,175,0,2009,
		163,1,0,0,0,2010,2012,5,171,0,0,2011,2013,5,183,0,0,2012,2011,1,0,0,0,
		2012,2013,1,0,0,0,2013,2014,1,0,0,0,2014,2017,5,154,0,0,2015,2016,5,65,
		0,0,2016,2018,5,52,0,0,2017,2015,1,0,0,0,2017,2018,1,0,0,0,2018,2022,1,
		0,0,0,2019,2020,3,350,175,0,2020,2021,5,12,0,0,2021,2023,1,0,0,0,2022,
		2019,1,0,0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,2024,2026,3,350,175,0,
		2025,2027,7,3,0,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,165,1,0,0,0,
		2028,2029,5,171,0,0,2029,2032,5,157,0,0,2030,2031,5,65,0,0,2031,2033,5,
		52,0,0,2032,2030,1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2035,
		3,382,191,0,2035,167,1,0,0,0,2036,2037,5,171,0,0,2037,2038,5,168,0,0,2038,
		2041,5,157,0,0,2039,2040,5,65,0,0,2040,2042,5,52,0,0,2041,2039,1,0,0,0,
		2041,2042,1,0,0,0,2042,2043,1,0,0,0,2043,2044,3,382,191,0,2044,169,1,0,
		0,0,2045,2046,5,171,0,0,2046,2047,5,183,0,0,2047,2050,5,157,0,0,2048,2049,
		5,65,0,0,2049,2051,5,52,0,0,2050,2048,1,0,0,0,2050,2051,1,0,0,0,2051,2052,
		1,0,0,0,2052,2053,3,382,191,0,2053,171,1,0,0,0,2054,2055,5,171,0,0,2055,
		2058,5,170,0,0,2056,2057,5,65,0,0,2057,2059,5,52,0,0,2058,2056,1,0,0,0,
		2058,2059,1,0,0,0,2059,2060,1,0,0,0,2060,2061,3,382,191,0,2061,173,1,0,
		0,0,2062,2063,5,171,0,0,2063,2064,5,184,0,0,2064,2067,5,170,0,0,2065,2066,
		5,65,0,0,2066,2068,5,52,0,0,2067,2065,1,0,0,0,2067,2068,1,0,0,0,2068,2069,
		1,0,0,0,2069,2070,3,382,191,0,2070,175,1,0,0,0,2071,2072,5,171,0,0,2072,
		2075,5,182,0,0,2073,2074,5,65,0,0,2074,2076,5,52,0,0,2075,2073,1,0,0,0,
		2075,2076,1,0,0,0,2076,2085,1,0,0,0,2077,2078,3,350,175,0,2078,2079,5,
		12,0,0,2079,2081,1,0,0,0,2080,2077,1,0,0,0,2080,2081,1,0,0,0,2081,2082,
		1,0,0,0,2082,2083,3,350,175,0,2083,2084,5,12,0,0,2084,2086,1,0,0,0,2085,
		2080,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2088,3,350,175,0,
		2088,177,1,0,0,0,2089,2090,5,171,0,0,2090,2091,5,157,0,0,2091,2094,5,182,
		0,0,2092,2093,5,65,0,0,2093,2095,5,52,0,0,2094,2092,1,0,0,0,2094,2095,
		1,0,0,0,2095,2104,1,0,0,0,2096,2097,3,350,175,0,2097,2098,5,12,0,0,2098,
		2100,1,0,0,0,2099,2096,1,0,0,0,2099,2100,1,0,0,0,2100,2101,1,0,0,0,2101,
		2102,3,350,175,0,2102,2103,5,12,0,0,2103,2105,1,0,0,0,2104,2099,1,0,0,
		0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,2107,3,350,175,0,2107,179,1,
		0,0,0,2108,2109,5,171,0,0,2109,2112,5,181,0,0,2110,2111,5,65,0,0,2111,
		2113,5,52,0,0,2112,2110,1,0,0,0,2112,2113,1,0,0,0,2113,2122,1,0,0,0,2114,
		2115,3,350,175,0,2115,2116,5,12,0,0,2116,2118,1,0,0,0,2117,2114,1,0,0,
		0,2117,2118,1,0,0,0,2118,2119,1,0,0,0,2119,2120,3,350,175,0,2120,2121,
		5,12,0,0,2121,2123,1,0,0,0,2122,2117,1,0,0,0,2122,2123,1,0,0,0,2123,2124,
		1,0,0,0,2124,2125,3,350,175,0,2125,181,1,0,0,0,2126,2127,5,171,0,0,2127,
		2128,5,149,0,0,2128,2129,5,178,0,0,2129,2132,5,179,0,0,2130,2131,5,65,
		0,0,2131,2133,5,52,0,0,2132,2130,1,0,0,0,2132,2133,1,0,0,0,2133,2134,1,
		0,0,0,2134,2135,3,382,191,0,2135,2136,5,87,0,0,2136,2137,3,382,191,0,2137,
		2146,1,0,0,0,2138,2139,5,171,0,0,2139,2140,5,24,0,0,2140,2141,5,149,0,
		0,2141,2142,5,178,0,0,2142,2143,5,180,0,0,2143,2144,5,87,0,0,2144,2146,
		3,382,191,0,2145,2126,1,0,0,0,2145,2138,1,0,0,0,2146,183,1,0,0,0,2147,
		2148,5,171,0,0,2148,2151,5,177,0,0,2149,2150,5,65,0,0,2150,2152,5,52,0,
		0,2151,2149,1,0,0,0,2151,2152,1,0,0,0,2152,2153,1,0,0,0,2153,2154,3,382,
		191,0,2154,185,1,0,0,0,2155,2156,5,171,0,0,2156,2159,5,176,0,0,2157,2158,
		5,65,0,0,2158,2160,5,52,0,0,2159,2157,1,0,0,0,2159,2160,1,0,0,0,2160,2161,
		1,0,0,0,2161,2162,3,382,191,0,2162,187,1,0,0,0,2163,2164,5,171,0,0,2164,
		2167,5,175,0,0,2165,2166,5,65,0,0,2166,2168,5,52,0,0,2167,2165,1,0,0,0,
		2167,2168,1,0,0,0,2168,2169,1,0,0,0,2169,2170,3,382,191,0,2170,189,1,0,
		0,0,2171,2172,5,171,0,0,2172,2173,5,172,0,0,2173,2176,5,173,0,0,2174,2175,
		5,65,0,0,2175,2177,5,52,0,0,2176,2174,1,0,0,0,2176,2177,1,0,0,0,2177,2178,
		1,0,0,0,2178,2179,3,382,191,0,2179,2180,5,87,0,0,2180,2181,3,382,191,0,
		2181,191,1,0,0,0,2182,2183,5,171,0,0,2183,2184,5,172,0,0,2184,2187,5,173,
		0,0,2185,2186,5,65,0,0,2186,2188,5,52,0,0,2187,2185,1,0,0,0,2187,2188,
		1,0,0,0,2188,2189,1,0,0,0,2189,2190,3,382,191,0,2190,2191,5,87,0,0,2191,
		2192,3,382,191,0,2192,193,1,0,0,0,2193,2198,3,196,98,0,2194,2195,5,13,
		0,0,2195,2197,3,196,98,0,2196,2194,1,0,0,0,2197,2200,1,0,0,0,2198,2196,
		1,0,0,0,2198,2199,1,0,0,0,2199,195,1,0,0,0,2200,2198,1,0,0,0,2201,2207,
		3,382,191,0,2202,2203,5,141,0,0,2203,2204,5,14,0,0,2204,2205,3,292,146,
		0,2205,2206,5,15,0,0,2206,2208,1,0,0,0,2207,2202,1,0,0,0,2207,2208,1,0,
		0,0,2208,197,1,0,0,0,2209,2214,3,200,100,0,2210,2211,5,13,0,0,2211,2213,
		3,200,100,0,2212,2210,1,0,0,0,2213,2216,1,0,0,0,2214,2212,1,0,0,0,2214,
		2215,1,0,0,0,2215,199,1,0,0,0,2216,2214,1,0,0,0,2217,2236,3,202,101,0,
		2218,2236,3,204,102,0,2219,2220,5,158,0,0,2220,2222,3,350,175,0,2221,2219,
		1,0,0,0,2221,2222,1,0,0,0,2222,2223,1,0,0,0,2223,2232,3,206,103,0,2224,
		2227,5,13,0,0,2225,2226,5,158,0,0,2226,2228,3,350,175,0,2227,2225,1,0,
		0,0,2227,2228,1,0,0,0,2228,2229,1,0,0,0,2229,2231,3,206,103,0,2230,2224,
		1,0,0,0,2231,2234,1,0,0,0,2232,2230,1,0,0,0,2232,2233,1,0,0,0,2233,2236,
		1,0,0,0,2234,2232,1,0,0,0,2235,2217,1,0,0,0,2235,2218,1,0,0,0,2235,2221,
		1,0,0,0,2236,201,1,0,0,0,2237,2238,3,382,191,0,2238,2239,3,332,166,0,2239,
		203,1,0,0,0,2240,2241,5,160,0,0,2241,2242,5,161,0,0,2242,2243,5,14,0,0,
		2243,2244,3,380,190,0,2244,2245,5,15,0,0,2245,2246,5,83,0,0,2246,2247,
		5,159,0,0,2247,205,1,0,0,0,2248,2249,5,162,0,0,2249,2250,5,161,0,0,2250,
		2251,5,14,0,0,2251,2252,3,380,190,0,2252,2253,5,15,0,0,2253,2254,3,208,
		104,0,2254,207,1,0,0,0,2255,2256,5,163,0,0,2256,2257,3,350,175,0,2257,
		2258,5,14,0,0,2258,2259,3,380,190,0,2259,2260,5,15,0,0,2260,2261,5,83,
		0,0,2261,2262,5,159,0,0,2262,209,1,0,0,0,2263,2264,5,38,0,0,2264,2268,
		5,154,0,0,2265,2266,5,65,0,0,2266,2267,5,83,0,0,2267,2269,5,52,0,0,2268,
		2265,1,0,0,0,2268,2269,1,0,0,0,2269,2273,1,0,0,0,2270,2271,3,350,175,0,
		2271,2272,5,12,0,0,2272,2274,1,0,0,0,2273,2270,1,0,0,0,2273,2274,1,0,0,
		0,2274,2275,1,0,0,0,2275,2279,3,350,175,0,2276,2277,5,42,0,0,2277,2278,
		5,36,0,0,2278,2280,3,334,167,0,2279,2276,1,0,0,0,2279,2280,1,0,0,0,2280,
		2286,1,0,0,0,2281,2282,5,141,0,0,2282,2283,5,14,0,0,2283,2284,3,292,146,
		0,2284,2285,5,15,0,0,2285,2287,1,0,0,0,2286,2281,1,0,0,0,2286,2287,1,0,
		0,0,2287,211,1,0,0,0,2288,2289,6,106,-1,0,2289,2291,5,118,0,0,2290,2292,
		5,97,0,0,2291,2290,1,0,0,0,2291,2292,1,0,0,0,2292,2295,1,0,0,0,2293,2296,
		3,218,109,0,2294,2296,3,220,110,0,2295,2293,1,0,0,0,2295,2294,1,0,0,0,
		2296,2304,1,0,0,0,2297,2300,5,13,0,0,2298,2301,3,218,109,0,2299,2301,3,
		220,110,0,2300,2298,1,0,0,0,2300,2299,1,0,0,0,2301,2303,1,0,0,0,2302,2297,
		1,0,0,0,2303,2306,1,0,0,0,2304,2302,1,0,0,0,2304,2305,1,0,0,0,2305,2315,
		1,0,0,0,2306,2304,1,0,0,0,2307,2316,3,224,112,0,2308,2309,5,14,0,0,2309,
		2310,3,212,106,0,2310,2311,5,15,0,0,2311,2316,1,0,0,0,2312,2313,3,212,
		106,0,2313,2314,3,216,108,0,2314,2316,1,0,0,0,2315,2307,1,0,0,0,2315,2308,
		1,0,0,0,2315,2312,1,0,0,0,2316,2317,1,0,0,0,2317,2318,3,214,107,0,2318,
		2328,1,0,0,0,2319,2320,3,224,112,0,2320,2321,3,214,107,0,2321,2328,1,0,
		0,0,2322,2323,5,14,0,0,2323,2324,3,212,106,0,2324,2325,5,15,0,0,2325,2326,
		3,214,107,0,2326,2328,1,0,0,0,2327,2288,1,0,0,0,2327,2319,1,0,0,0,2327,
		2322,1,0,0,0,2328,2335,1,0,0,0,2329,2330,10,1,0,0,2330,2331,3,216,108,
		0,2331,2332,3,214,107,0,2332,2334,1,0,0,0,2333,2329,1,0,0,0,2334,2337,
		1,0,0,0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,213,1,0,0,0,2337,2335,
		1,0,0,0,2338,2339,5,89,0,0,2339,2340,5,33,0,0,2340,2342,3,302,151,0,2341,
		2343,7,4,0,0,2342,2341,1,0,0,0,2342,2343,1,0,0,0,2343,2351,1,0,0,0,2344,
		2345,5,13,0,0,2345,2347,3,302,151,0,2346,2348,7,4,0,0,2347,2346,1,0,0,
		0,2347,2348,1,0,0,0,2348,2350,1,0,0,0,2349,2344,1,0,0,0,2350,2353,1,0,
		0,0,2351,2349,1,0,0,0,2351,2352,1,0,0,0,2352,2355,1,0,0,0,2353,2351,1,
		0,0,0,2354,2338,1,0,0,0,2354,2355,1,0,0,0,2355,2362,1,0,0,0,2356,2357,
		5,77,0,0,2357,2360,3,302,151,0,2358,2359,5,136,0,0,2359,2361,3,302,151,
		0,2360,2358,1,0,0,0,2360,2361,1,0,0,0,2361,2363,1,0,0,0,2362,2356,1,0,
		0,0,2362,2363,1,0,0,0,2363,215,1,0,0,0,2364,2370,5,68,0,0,2365,2367,7,
		5,0,0,2366,2368,5,90,0,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2370,
		1,0,0,0,2369,2364,1,0,0,0,2369,2365,1,0,0,0,2369,2370,1,0,0,0,2370,2377,
		1,0,0,0,2371,2372,5,112,0,0,2372,2378,7,6,0,0,2373,2374,5,69,0,0,2374,
		2378,5,45,0,0,2375,2376,5,50,0,0,2376,2378,5,45,0,0,2377,2371,1,0,0,0,
		2377,2373,1,0,0,0,2377,2375,1,0,0,0,2378,2401,1,0,0,0,2379,2380,5,33,0,
		0,2380,2386,5,137,0,0,2381,2382,5,87,0,0,2382,2383,5,14,0,0,2383,2384,
		3,380,190,0,2384,2385,5,15,0,0,2385,2387,1,0,0,0,2386,2381,1,0,0,0,2386,
		2387,1,0,0,0,2387,2400,1,0,0,0,2388,2390,5,138,0,0,2389,2388,1,0,0,0,2389,
		2390,1,0,0,0,2390,2391,1,0,0,0,2391,2397,5,139,0,0,2392,2393,5,33,0,0,
		2393,2394,5,14,0,0,2394,2395,3,380,190,0,2395,2396,5,15,0,0,2396,2398,
		1,0,0,0,2397,2392,1,0,0,0,2397,2398,1,0,0,0,2398,2400,1,0,0,0,2399,2379,
		1,0,0,0,2399,2389,1,0,0,0,2400,2402,1,0,0,0,2401,2399,1,0,0,0,2401,2402,
		1,0,0,0,2402,2403,1,0,0,0,2403,2404,3,212,106,0,2404,217,1,0,0,0,2405,
		2406,3,350,175,0,2406,2407,5,28,0,0,2407,2408,5,14,0,0,2408,2409,3,212,
		106,0,2409,2410,5,15,0,0,2410,219,1,0,0,0,2411,2412,3,350,175,0,2412,2413,
		5,28,0,0,2413,2414,3,222,111,0,2414,221,1,0,0,0,2415,2416,3,212,106,0,
		2416,2417,5,112,0,0,2417,2418,5,24,0,0,2418,2419,3,212,106,0,2419,223,
		1,0,0,0,2420,2423,5,102,0,0,2421,2422,5,118,0,0,2422,2424,3,258,129,0,
		2423,2421,1,0,0,0,2423,2424,1,0,0,0,2424,2426,1,0,0,0,2425,2427,7,6,0,
		0,2426,2425,1,0,0,0,2426,2427,1,0,0,0,2427,2430,1,0,0,0,2428,2429,5,28,
		0,0,2429,2431,7,7,0,0,2430,2428,1,0,0,0,2430,2431,1,0,0,0,2431,2432,1,
		0,0,0,2432,2435,3,296,148,0,2433,2434,5,58,0,0,2434,2436,3,260,130,0,2435,
		2433,1,0,0,0,2435,2436,1,0,0,0,2436,2439,1,0,0,0,2437,2438,5,116,0,0,2438,
		2440,3,302,151,0,2439,2437,1,0,0,0,2439,2440,1,0,0,0,2440,2444,1,0,0,0,
		2441,2442,5,60,0,0,2442,2443,5,33,0,0,2443,2445,3,226,113,0,2444,2441,
		1,0,0,0,2444,2445,1,0,0,0,2445,2448,1,0,0,0,2446,2447,5,64,0,0,2447,2449,
		3,302,151,0,2448,2446,1,0,0,0,2448,2449,1,0,0,0,2449,2452,1,0,0,0,2450,
		2451,5,95,0,0,2451,2453,3,302,151,0,2452,2450,1,0,0,0,2452,2453,1,0,0,
		0,2453,2456,1,0,0,0,2454,2455,5,117,0,0,2455,2457,3,240,120,0,2456,2454,
		1,0,0,0,2456,2457,1,0,0,0,2457,225,1,0,0,0,2458,2466,3,304,152,0,2459,
		2466,5,24,0,0,2460,2466,3,228,114,0,2461,2466,3,238,119,0,2462,2466,3,
		234,117,0,2463,2464,5,14,0,0,2464,2466,5,15,0,0,2465,2458,1,0,0,0,2465,
		2459,1,0,0,0,2465,2460,1,0,0,0,2465,2461,1,0,0,0,2465,2462,1,0,0,0,2465,
		2463,1,0,0,0,2466,227,1,0,0,0,2467,2468,5,60,0,0,2468,2469,5,33,0,0,2469,
		2470,5,61,0,0,2470,2471,5,152,0,0,2471,2472,5,14,0,0,2472,2473,3,230,115,
		0,2473,2474,5,15,0,0,2474,229,1,0,0,0,2475,2480,3,232,116,0,2476,2477,
		5,13,0,0,2477,2479,3,232,116,0,2478,2476,1,0,0,0,2479,2482,1,0,0,0,2480,
		2478,1,0,0,0,2480,2481,1,0,0,0,2481,231,1,0,0,0,2482,2480,1,0,0,0,2483,
		2488,3,238,119,0,2484,2488,3,234,117,0,2485,2488,3,302,151,0,2486,2488,
		3,236,118,0,2487,2483,1,0,0,0,2487,2484,1,0,0,0,2487,2485,1,0,0,0,2487,
		2486,1,0,0,0,2488,233,1,0,0,0,2489,2490,5,60,0,0,2490,2491,5,33,0,0,2491,
		2492,5,40,0,0,2492,2493,5,14,0,0,2493,2494,3,230,115,0,2494,2495,5,15,
		0,0,2495,235,1,0,0,0,2496,2497,5,14,0,0,2497,2498,3,304,152,0,2498,2499,
		5,15,0,0,2499,237,1,0,0,0,2500,2501,5,60,0,0,2501,2502,5,33,0,0,2502,2503,
		5,100,0,0,2503,2504,5,14,0,0,2504,2505,3,230,115,0,2505,2506,5,15,0,0,
		2506,239,1,0,0,0,2507,2512,3,242,121,0,2508,2509,5,13,0,0,2509,2511,3,
		242,121,0,2510,2508,1,0,0,0,2511,2514,1,0,0,0,2512,2510,1,0,0,0,2512,2513,
		1,0,0,0,2513,241,1,0,0,0,2514,2512,1,0,0,0,2515,2516,3,382,191,0,2516,
		2522,5,28,0,0,2517,2523,3,382,191,0,2518,2519,5,14,0,0,2519,2520,3,244,
		122,0,2520,2521,5,15,0,0,2521,2523,1,0,0,0,2522,2517,1,0,0,0,2522,2518,
		1,0,0,0,2523,243,1,0,0,0,2524,2526,3,382,191,0,2525,2524,1,0,0,0,2525,
		2526,1,0,0,0,2526,2530,1,0,0,0,2527,2528,5,92,0,0,2528,2529,5,33,0,0,2529,
		2531,3,304,152,0,2530,2527,1,0,0,0,2530,2531,1,0,0,0,2531,2535,1,0,0,0,
		2532,2533,5,89,0,0,2533,2534,5,33,0,0,2534,2536,3,320,160,0,2535,2532,
		1,0,0,0,2535,2536,1,0,0,0,2536,2538,1,0,0,0,2537,2539,3,246,123,0,2538,
		2537,1,0,0,0,2538,2539,1,0,0,0,2539,245,1,0,0,0,2540,2543,7,8,0,0,2541,
		2544,3,248,124,0,2542,2544,3,250,125,0,2543,2541,1,0,0,0,2543,2542,1,0,
		0,0,2544,247,1,0,0,0,2545,2546,5,111,0,0,2546,2555,5,93,0,0,2547,2548,
		3,302,151,0,2548,2549,5,93,0,0,2549,2555,1,0,0,0,2550,2551,5,41,0,0,2551,
		2553,5,149,0,0,2552,2550,1,0,0,0,2552,2553,1,0,0,0,2553,2555,1,0,0,0,2554,
		2545,1,0,0,0,2554,2547,1,0,0,0,2554,2552,1,0,0,0,2555,249,1,0,0,0,2556,
		2557,5,32,0,0,2557,2558,5,111,0,0,2558,2559,5,93,0,0,2559,2560,5,25,0,
		0,2560,2579,3,252,126,0,2561,2562,5,32,0,0,2562,2563,3,302,151,0,2563,
		2564,5,93,0,0,2564,2565,5,25,0,0,2565,2566,3,252,126,0,2566,2579,1,0,0,
		0,2567,2568,5,32,0,0,2568,2569,5,41,0,0,2569,2570,5,149,0,0,2570,2571,
		5,25,0,0,2571,2579,3,254,127,0,2572,2573,5,32,0,0,2573,2574,3,302,151,
		0,2574,2575,5,56,0,0,2575,2576,5,25,0,0,2576,2577,3,256,128,0,2577,2579,
		1,0,0,0,2578,2556,1,0,0,0,2578,2561,1,0,0,0,2578,2567,1,0,0,0,2578,2572,
		1,0,0,0,2579,251,1,0,0,0,2580,2581,3,302,151,0,2581,2582,5,93,0,0,2582,
		2591,1,0,0,0,2583,2584,5,41,0,0,2584,2591,5,149,0,0,2585,2586,3,302,151,
		0,2586,2587,5,56,0,0,2587,2591,1,0,0,0,2588,2589,5,111,0,0,2589,2591,5,
		56,0,0,2590,2580,1,0,0,0,2590,2583,1,0,0,0,2590,2585,1,0,0,0,2590,2588,
		1,0,0,0,2591,253,1,0,0,0,2592,2593,5,41,0,0,2593,2600,5,149,0,0,2594,2595,
		3,302,151,0,2595,2596,5,56,0,0,2596,2600,1,0,0,0,2597,2598,5,111,0,0,2598,
		2600,5,56,0,0,2599,2592,1,0,0,0,2599,2594,1,0,0,0,2599,2597,1,0,0,0,2600,
		255,1,0,0,0,2601,2602,3,302,151,0,2602,2603,5,56,0,0,2603,2607,1,0,0,0,
		2604,2605,5,111,0,0,2605,2607,5,56,0,0,2606,2601,1,0,0,0,2606,2604,1,0,
		0,0,2607,257,1,0,0,0,2608,2609,5,140,0,0,2609,2610,5,141,0,0,2610,2611,
		5,14,0,0,2611,2612,3,292,146,0,2612,2613,5,15,0,0,2613,259,1,0,0,0,2614,
		2619,3,262,131,0,2615,2616,5,13,0,0,2616,2618,3,262,131,0,2617,2615,1,
		0,0,0,2618,2621,1,0,0,0,2619,2617,1,0,0,0,2619,2620,1,0,0,0,2620,261,1,
		0,0,0,2621,2619,1,0,0,0,2622,2625,3,264,132,0,2623,2626,3,278,139,0,2624,
		2626,3,280,140,0,2625,2623,1,0,0,0,2625,2624,1,0,0,0,2625,2626,1,0,0,0,
		2626,2628,1,0,0,0,2627,2629,3,290,145,0,2628,2627,1,0,0,0,2628,2629,1,
		0,0,0,2629,263,1,0,0,0,2630,2631,6,132,-1,0,2631,2633,3,350,175,0,2632,
		2634,3,352,176,0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,2634,2640,1,0,0,0,
		2635,2636,5,57,0,0,2636,2637,5,148,0,0,2637,2638,5,28,0,0,2638,2639,5,
		86,0,0,2639,2641,3,302,151,0,2640,2635,1,0,0,0,2640,2641,1,0,0,0,2641,
		2669,1,0,0,0,2642,2652,5,14,0,0,2643,2644,3,264,132,0,2644,2645,3,268,
		134,0,2645,2646,3,264,132,0,2646,2653,1,0,0,0,2647,2648,3,264,132,0,2648,
		2649,3,270,135,0,2649,2650,3,264,132,0,2650,2651,3,272,136,0,2651,2653,
		1,0,0,0,2652,2643,1,0,0,0,2652,2647,1,0,0,0,2653,2654,1,0,0,0,2654,2655,
		5,15,0,0,2655,2669,1,0,0,0,2656,2657,5,14,0,0,2657,2658,3,212,106,0,2658,
		2660,5,15,0,0,2659,2661,3,352,176,0,2660,2659,1,0,0,0,2660,2661,1,0,0,
		0,2661,2669,1,0,0,0,2662,2669,3,382,191,0,2663,2669,3,266,133,0,2664,2666,
		3,382,191,0,2665,2667,3,352,176,0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,
		2667,2669,1,0,0,0,2668,2630,1,0,0,0,2668,2642,1,0,0,0,2668,2656,1,0,0,
		0,2668,2662,1,0,0,0,2668,2663,1,0,0,0,2668,2664,1,0,0,0,2669,2681,1,0,
		0,0,2670,2671,10,7,0,0,2671,2672,3,268,134,0,2672,2673,3,264,132,8,2673,
		2680,1,0,0,0,2674,2675,10,6,0,0,2675,2676,3,270,135,0,2676,2677,3,264,
		132,0,2677,2678,3,272,136,0,2678,2680,1,0,0,0,2679,2670,1,0,0,0,2679,2674,
		1,0,0,0,2680,2683,1,0,0,0,2681,2679,1,0,0,0,2681,2682,1,0,0,0,2682,265,
		1,0,0,0,2683,2681,1,0,0,0,2684,2685,5,113,0,0,2685,2686,5,14,0,0,2686,
		2687,3,302,151,0,2687,2689,5,15,0,0,2688,2690,3,352,176,0,2689,2688,1,
		0,0,0,2689,2690,1,0,0,0,2690,2696,1,0,0,0,2691,2693,3,382,191,0,2692,2694,
		3,352,176,0,2693,2692,1,0,0,0,2693,2694,1,0,0,0,2694,2696,1,0,0,0,2695,
		2684,1,0,0,0,2695,2691,1,0,0,0,2696,2702,1,0,0,0,2697,2698,5,118,0,0,2698,
		2700,5,136,0,0,2699,2701,3,352,176,0,2700,2699,1,0,0,0,2700,2701,1,0,0,
		0,2701,2703,1,0,0,0,2702,2697,1,0,0,0,2702,2703,1,0,0,0,2703,267,1,0,0,
		0,2704,2705,5,39,0,0,2705,2708,5,73,0,0,2706,2708,5,13,0,0,2707,2704,1,
		0,0,0,2707,2706,1,0,0,0,2708,269,1,0,0,0,2709,2711,5,68,0,0,2710,2709,
		1,0,0,0,2710,2711,1,0,0,0,2711,2712,1,0,0,0,2712,2729,5,73,0,0,2713,2715,
		5,59,0,0,2714,2716,5,90,0,0,2715,2714,1,0,0,0,2715,2716,1,0,0,0,2716,2717,
		1,0,0,0,2717,2729,5,73,0,0,2718,2720,5,75,0,0,2719,2721,5,90,0,0,2720,
		2719,1,0,0,0,2720,2721,1,0,0,0,2721,2722,1,0,0,0,2722,2729,5,73,0,0,2723,
		2725,5,99,0,0,2724,2726,5,90,0,0,2725,2724,1,0,0,0,2725,2726,1,0,0,0,2726,
		2727,1,0,0,0,2727,2729,5,73,0,0,2728,2710,1,0,0,0,2728,2713,1,0,0,0,2728,
		2718,1,0,0,0,2728,2723,1,0,0,0,2729,271,1,0,0,0,2730,2733,3,274,137,0,
		2731,2733,3,276,138,0,2732,2730,1,0,0,0,2732,2731,1,0,0,0,2733,273,1,0,
		0,0,2734,2735,5,87,0,0,2735,2736,3,302,151,0,2736,275,1,0,0,0,2737,2738,
		5,114,0,0,2738,2739,5,14,0,0,2739,2740,3,380,190,0,2740,2741,5,15,0,0,
		2741,277,1,0,0,0,2742,2743,5,146,0,0,2743,2744,5,14,0,0,2744,2746,3,354,
		177,0,2745,2747,3,352,176,0,2746,2745,1,0,0,0,2746,2747,1,0,0,0,2747,2755,
		1,0,0,0,2748,2749,5,13,0,0,2749,2751,3,354,177,0,2750,2752,3,352,176,0,
		2751,2750,1,0,0,0,2751,2752,1,0,0,0,2752,2754,1,0,0,0,2753,2748,1,0,0,
		0,2754,2757,1,0,0,0,2755,2753,1,0,0,0,2755,2756,1,0,0,0,2756,2758,1,0,
		0,0,2757,2755,1,0,0,0,2758,2759,5,57,0,0,2759,2760,3,350,175,0,2760,2761,
		5,67,0,0,2761,2762,5,14,0,0,2762,2763,3,318,159,0,2763,2764,5,15,0,0,2764,
		2767,5,15,0,0,2765,2766,5,28,0,0,2766,2768,3,350,175,0,2767,2765,1,0,0,
		0,2767,2768,1,0,0,0,2768,279,1,0,0,0,2769,2774,5,147,0,0,2770,2771,5,150,
		0,0,2771,2775,5,85,0,0,2772,2773,5,51,0,0,2773,2775,5,85,0,0,2774,2770,
		1,0,0,0,2774,2772,1,0,0,0,2774,2775,1,0,0,0,2775,2776,1,0,0,0,2776,2779,
		5,14,0,0,2777,2780,3,282,141,0,2778,2780,3,284,142,0,2779,2777,1,0,0,0,
		2779,2778,1,0,0,0,2780,2781,1,0,0,0,2781,2782,5,15,0,0,2782,2783,3,352,
		176,0,2783,281,1,0,0,0,2784,2785,3,304,152,0,2785,2786,5,57,0,0,2786,2787,
		3,382,191,0,2787,2788,5,67,0,0,2788,2789,5,14,0,0,2789,2790,3,286,143,
		0,2790,2791,5,15,0,0,2791,283,1,0,0,0,2792,2793,5,14,0,0,2793,2794,3,304,
		152,0,2794,2795,5,15,0,0,2795,2796,5,57,0,0,2796,2797,3,382,191,0,2797,
		2798,5,67,0,0,2798,2799,5,14,0,0,2799,2800,3,288,144,0,2800,2801,5,15,
		0,0,2801,285,1,0,0,0,2802,2804,3,302,151,0,2803,2805,3,352,176,0,2804,
		2803,1,0,0,0,2804,2805,1,0,0,0,2805,2813,1,0,0,0,2806,2807,5,13,0,0,2807,
		2809,3,302,151,0,2808,2810,3,350,175,0,2809,2808,1,0,0,0,2809,2810,1,0,
		0,0,2810,2812,1,0,0,0,2811,2806,1,0,0,0,2812,2815,1,0,0,0,2813,2811,1,
		0,0,0,2813,2814,1,0,0,0,2814,287,1,0,0,0,2815,2813,1,0,0,0,2816,2817,5,
		14,0,0,2817,2819,3,302,151,0,2818,2820,3,352,176,0,2819,2818,1,0,0,0,2819,
		2820,1,0,0,0,2820,2828,1,0,0,0,2821,2822,5,13,0,0,2822,2824,3,302,151,
		0,2823,2825,3,350,175,0,2824,2823,1,0,0,0,2824,2825,1,0,0,0,2825,2827,
		1,0,0,0,2826,2821,1,0,0,0,2827,2830,1,0,0,0,2828,2826,1,0,0,0,2828,2829,
		1,0,0,0,2829,2831,1,0,0,0,2830,2828,1,0,0,0,2831,2832,5,15,0,0,2832,289,
		1,0,0,0,2833,2834,5,106,0,0,2834,2835,5,144,0,0,2835,2836,5,14,0,0,2836,
		2837,3,302,151,0,2837,2838,5,145,0,0,2838,2839,5,15,0,0,2839,291,1,0,0,
		0,2840,2845,3,294,147,0,2841,2842,5,13,0,0,2842,2844,3,294,147,0,2843,
		2841,1,0,0,0,2844,2847,1,0,0,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,
		293,1,0,0,0,2847,2845,1,0,0,0,2848,2849,3,350,175,0,2849,2850,5,22,0,0,
		2850,2851,3,302,151,0,2851,295,1,0,0,0,2852,2857,3,298,149,0,2853,2854,
		5,13,0,0,2854,2856,3,298,149,0,2855,2853,1,0,0,0,2856,2859,1,0,0,0,2857,
		2855,1,0,0,0,2857,2858,1,0,0,0,2858,297,1,0,0,0,2859,2857,1,0,0,0,2860,
		2866,3,300,150,0,2861,2863,3,302,151,0,2862,2864,3,352,176,0,2863,2862,
		1,0,0,0,2863,2864,1,0,0,0,2864,2866,1,0,0,0,2865,2860,1,0,0,0,2865,2861,
		1,0,0,0,2866,299,1,0,0,0,2867,2868,3,302,151,0,2868,2869,5,12,0,0,2869,
		2871,1,0,0,0,2870,2867,1,0,0,0,2870,2871,1,0,0,0,2871,2872,1,0,0,0,2872,
		2878,5,8,0,0,2873,2874,5,50,0,0,2874,2875,5,14,0,0,2875,2876,3,380,190,
		0,2876,2877,5,15,0,0,2877,2879,1,0,0,0,2878,2873,1,0,0,0,2878,2879,1,0,
		0,0,2879,2885,1,0,0,0,2880,2881,5,143,0,0,2881,2882,5,14,0,0,2882,2883,
		3,384,192,0,2883,2884,5,15,0,0,2884,2886,1,0,0,0,2885,2880,1,0,0,0,2885,
		2886,1,0,0,0,2886,301,1,0,0,0,2887,2888,6,151,-1,0,2888,2889,5,14,0,0,
		2889,2890,3,302,151,0,2890,2891,5,15,0,0,2891,2918,1,0,0,0,2892,2918,3,
		224,112,0,2893,2918,3,382,191,0,2894,2895,7,9,0,0,2895,2918,3,302,151,
		26,2896,2897,5,83,0,0,2897,2918,3,302,151,16,2898,2899,5,52,0,0,2899,2900,
		5,14,0,0,2900,2901,3,302,151,0,2901,2902,5,15,0,0,2902,2918,1,0,0,0,2903,
		2904,5,113,0,0,2904,2905,5,14,0,0,2905,2906,3,302,151,0,2906,2907,5,15,
		0,0,2907,2918,1,0,0,0,2908,2918,3,354,177,0,2909,2918,3,372,186,0,2910,
		2918,3,322,161,0,2911,2918,3,306,153,0,2912,2918,3,308,154,0,2913,2918,
		3,310,155,0,2914,2918,3,312,156,0,2915,2918,3,314,157,0,2916,2918,3,316,
		158,0,2917,2887,1,0,0,0,2917,2892,1,0,0,0,2917,2893,1,0,0,0,2917,2894,
		1,0,0,0,2917,2896,1,0,0,0,2917,2898,1,0,0,0,2917,2903,1,0,0,0,2917,2908,
		1,0,0,0,2917,2909,1,0,0,0,2917,2910,1,0,0,0,2917,2911,1,0,0,0,2917,2912,
		1,0,0,0,2917,2913,1,0,0,0,2917,2914,1,0,0,0,2917,2915,1,0,0,0,2917,2916,
		1,0,0,0,2918,2998,1,0,0,0,2919,2920,10,25,0,0,2920,2921,7,10,0,0,2921,
		2997,3,302,151,26,2922,2923,10,24,0,0,2923,2924,7,11,0,0,2924,2997,3,302,
		151,25,2925,2930,10,23,0,0,2926,2927,5,18,0,0,2927,2931,5,18,0,0,2928,
		2929,5,19,0,0,2929,2931,5,19,0,0,2930,2926,1,0,0,0,2930,2928,1,0,0,0,2931,
		2932,1,0,0,0,2932,2997,3,302,151,24,2933,2934,10,22,0,0,2934,2935,5,5,
		0,0,2935,2997,3,302,151,23,2936,2937,10,21,0,0,2937,2938,5,6,0,0,2938,
		2997,3,302,151,22,2939,2940,10,20,0,0,2940,2941,5,7,0,0,2941,2997,3,302,
		151,21,2942,2953,10,19,0,0,2943,2954,5,22,0,0,2944,2954,5,23,0,0,2945,
		2954,5,18,0,0,2946,2954,5,19,0,0,2947,2954,5,20,0,0,2948,2954,5,21,0,0,
		2949,2951,5,83,0,0,2950,2949,1,0,0,0,2950,2951,1,0,0,0,2951,2952,1,0,0,
		0,2952,2954,7,12,0,0,2953,2943,1,0,0,0,2953,2944,1,0,0,0,2953,2945,1,0,
		0,0,2953,2946,1,0,0,0,2953,2947,1,0,0,0,2953,2948,1,0,0,0,2953,2950,1,
		0,0,0,2954,2955,1,0,0,0,2955,2997,3,302,151,20,2956,2957,10,17,0,0,2957,
		2959,5,72,0,0,2958,2960,5,83,0,0,2959,2958,1,0,0,0,2959,2960,1,0,0,0,2960,
		2961,1,0,0,0,2961,2962,5,45,0,0,2962,2963,5,58,0,0,2963,2997,3,302,151,
		18,2964,2965,10,15,0,0,2965,2966,5,25,0,0,2966,2997,3,302,151,16,2967,
		2968,10,14,0,0,2968,2969,5,88,0,0,2969,2997,3,302,151,15,2970,2972,10,
		10,0,0,2971,2973,5,83,0,0,2972,2971,1,0,0,0,2972,2973,1,0,0,0,2973,2974,
		1,0,0,0,2974,2975,5,76,0,0,2975,2976,7,13,0,0,2976,2997,3,302,151,11,2977,
		2978,10,28,0,0,2978,2979,5,12,0,0,2979,2997,3,382,191,0,2980,2981,10,27,
		0,0,2981,2982,5,16,0,0,2982,2983,3,302,151,0,2983,2984,5,17,0,0,2984,2997,
		1,0,0,0,2985,2986,10,18,0,0,2986,2988,5,72,0,0,2987,2989,5,83,0,0,2988,
		2987,1,0,0,0,2988,2989,1,0,0,0,2989,2990,1,0,0,0,2990,2997,7,14,0,0,2991,
		2993,10,13,0,0,2992,2994,5,28,0,0,2993,2992,1,0,0,0,2993,2994,1,0,0,0,
		2994,2995,1,0,0,0,2995,2997,3,350,175,0,2996,2919,1,0,0,0,2996,2922,1,
		0,0,0,2996,2925,1,0,0,0,2996,2933,1,0,0,0,2996,2936,1,0,0,0,2996,2939,
		1,0,0,0,2996,2942,1,0,0,0,2996,2956,1,0,0,0,2996,2964,1,0,0,0,2996,2967,
		1,0,0,0,2996,2970,1,0,0,0,2996,2977,1,0,0,0,2996,2980,1,0,0,0,2996,2985,
		1,0,0,0,2996,2991,1,0,0,0,2997,3000,1,0,0,0,2998,2996,1,0,0,0,2998,2999,
		1,0,0,0,2999,303,1,0,0,0,3000,2998,1,0,0,0,3001,3006,3,302,151,0,3002,
		3003,5,13,0,0,3003,3005,3,302,151,0,3004,3002,1,0,0,0,3005,3008,1,0,0,
		0,3006,3004,1,0,0,0,3006,3007,1,0,0,0,3007,305,1,0,0,0,3008,3006,1,0,0,
		0,3009,3010,5,34,0,0,3010,3016,3,302,151,0,3011,3012,5,115,0,0,3012,3013,
		3,302,151,0,3013,3014,5,107,0,0,3014,3015,3,302,151,0,3015,3017,1,0,0,
		0,3016,3011,1,0,0,0,3017,3018,1,0,0,0,3018,3016,1,0,0,0,3018,3019,1,0,
		0,0,3019,3022,1,0,0,0,3020,3021,5,46,0,0,3021,3023,3,302,151,0,3022,3020,
		1,0,0,0,3022,3023,1,0,0,0,3023,3024,1,0,0,0,3024,3025,5,47,0,0,3025,307,
		1,0,0,0,3026,3032,5,34,0,0,3027,3028,5,115,0,0,3028,3029,3,302,151,0,3029,
		3030,5,107,0,0,3030,3031,3,302,151,0,3031,3033,1,0,0,0,3032,3027,1,0,0,
		0,3033,3034,1,0,0,0,3034,3032,1,0,0,0,3034,3035,1,0,0,0,3035,3038,1,0,
		0,0,3036,3037,5,46,0,0,3037,3039,3,302,151,0,3038,3036,1,0,0,0,3038,3039,
		1,0,0,0,3039,3040,1,0,0,0,3040,3041,5,47,0,0,3041,309,1,0,0,0,3042,3043,
		5,201,0,0,3043,3044,5,14,0,0,3044,3045,3,304,152,0,3045,3046,5,15,0,0,
		3046,311,1,0,0,0,3047,3048,5,65,0,0,3048,3049,5,14,0,0,3049,3050,3,302,
		151,0,3050,3051,5,13,0,0,3051,3052,3,302,151,0,3052,3053,5,13,0,0,3053,
		3054,3,302,151,0,3054,3055,5,15,0,0,3055,313,1,0,0,0,3056,3057,5,203,0,
		0,3057,3058,5,14,0,0,3058,3059,3,302,151,0,3059,3060,5,13,0,0,3060,3061,
		3,302,151,0,3061,3062,5,15,0,0,3062,315,1,0,0,0,3063,3064,5,202,0,0,3064,
		3065,5,14,0,0,3065,3066,3,302,151,0,3066,3067,5,13,0,0,3067,3068,3,302,
		151,0,3068,3069,5,15,0,0,3069,317,1,0,0,0,3070,3072,3,304,152,0,3071,3073,
		3,352,176,0,3072,3071,1,0,0,0,3072,3073,1,0,0,0,3073,3081,1,0,0,0,3074,
		3075,5,13,0,0,3075,3077,3,304,152,0,3076,3078,3,352,176,0,3077,3076,1,
		0,0,0,3077,3078,1,0,0,0,3078,3080,1,0,0,0,3079,3074,1,0,0,0,3080,3083,
		1,0,0,0,3081,3079,1,0,0,0,3081,3082,1,0,0,0,3082,319,1,0,0,0,3083,3081,
		1,0,0,0,3084,3086,3,302,151,0,3085,3087,7,4,0,0,3086,3085,1,0,0,0,3086,
		3087,1,0,0,0,3087,3095,1,0,0,0,3088,3089,5,13,0,0,3089,3091,3,302,151,
		0,3090,3092,7,4,0,0,3091,3090,1,0,0,0,3091,3092,1,0,0,0,3092,3094,1,0,
		0,0,3093,3088,1,0,0,0,3094,3097,1,0,0,0,3095,3093,1,0,0,0,3095,3096,1,
		0,0,0,3096,321,1,0,0,0,3097,3095,1,0,0,0,3098,3116,3,334,167,0,3099,3116,
		3,348,174,0,3100,3116,3,324,162,0,3101,3116,3,326,163,0,3102,3116,3,328,
		164,0,3103,3116,3,330,165,0,3104,3116,3,336,168,0,3105,3116,3,338,169,
		0,3106,3116,3,340,170,0,3107,3116,3,342,171,0,3108,3116,3,344,172,0,3109,
		3116,3,346,173,0,3110,3116,5,239,0,0,3111,3116,5,240,0,0,3112,3116,5,84,
		0,0,3113,3116,5,110,0,0,3114,3116,5,54,0,0,3115,3098,1,0,0,0,3115,3099,
		1,0,0,0,3115,3100,1,0,0,0,3115,3101,1,0,0,0,3115,3102,1,0,0,0,3115,3103,
		1,0,0,0,3115,3104,1,0,0,0,3115,3105,1,0,0,0,3115,3106,1,0,0,0,3115,3107,
		1,0,0,0,3115,3108,1,0,0,0,3115,3109,1,0,0,0,3115,3110,1,0,0,0,3115,3111,
		1,0,0,0,3115,3112,1,0,0,0,3115,3113,1,0,0,0,3115,3114,1,0,0,0,3116,323,
		1,0,0,0,3117,3118,5,123,0,0,3118,3119,3,334,167,0,3119,325,1,0,0,0,3120,
		3121,5,120,0,0,3121,3122,3,334,167,0,3122,327,1,0,0,0,3123,3128,5,27,0,
		0,3124,3125,5,18,0,0,3125,3126,3,332,166,0,3126,3127,5,19,0,0,3127,3129,
		1,0,0,0,3128,3124,1,0,0,0,3128,3129,1,0,0,0,3129,3131,1,0,0,0,3130,3123,
		1,0,0,0,3130,3131,1,0,0,0,3131,3132,1,0,0,0,3132,3134,5,16,0,0,3133,3135,
		3,304,152,0,3134,3133,1,0,0,0,3134,3135,1,0,0,0,3135,3136,1,0,0,0,3136,
		3137,5,17,0,0,3137,329,1,0,0,0,3138,3150,5,105,0,0,3139,3140,5,18,0,0,
		3140,3145,3,332,166,0,3141,3142,5,13,0,0,3142,3144,3,332,166,0,3143,3141,
		1,0,0,0,3144,3147,1,0,0,0,3145,3143,1,0,0,0,3145,3146,1,0,0,0,3146,3148,
		1,0,0,0,3147,3145,1,0,0,0,3148,3149,5,19,0,0,3149,3151,1,0,0,0,3150,3139,
		1,0,0,0,3150,3151,1,0,0,0,3151,3153,1,0,0,0,3152,3138,1,0,0,0,3152,3153,
		1,0,0,0,3153,3154,1,0,0,0,3154,3155,5,14,0,0,3155,3156,3,304,152,0,3156,
		3157,5,15,0,0,3157,331,1,0,0,0,3158,3163,5,27,0,0,3159,3160,5,18,0,0,3160,
		3161,3,332,166,0,3161,3162,5,19,0,0,3162,3164,1,0,0,0,3163,3159,1,0,0,
		0,3163,3164,1,0,0,0,3164,3184,1,0,0,0,3165,3177,5,105,0,0,3166,3167,5,
		18,0,0,3167,3172,3,332,166,0,3168,3169,5,13,0,0,3169,3171,3,332,166,0,
		3170,3168,1,0,0,0,3171,3174,1,0,0,0,3172,3170,1,0,0,0,3172,3173,1,0,0,
		0,3173,3175,1,0,0,0,3174,3172,1,0,0,0,3175,3176,5,19,0,0,3176,3178,1,0,
		0,0,3177,3166,1,0,0,0,3177,3178,1,0,0,0,3178,3184,1,0,0,0,3179,3180,3,
		350,175,0,3180,3181,3,332,166,0,3181,3184,1,0,0,0,3182,3184,3,350,175,
		0,3183,3158,1,0,0,0,3183,3165,1,0,0,0,3183,3179,1,0,0,0,3183,3182,1,0,
		0,0,3184,3189,1,0,0,0,3185,3186,5,14,0,0,3186,3187,3,304,152,0,3187,3188,
		5,15,0,0,3188,3190,1,0,0,0,3189,3185,1,0,0,0,3189,3190,1,0,0,0,3190,3193,
		1,0,0,0,3191,3192,5,36,0,0,3192,3194,3,334,167,0,3193,3191,1,0,0,0,3193,
		3194,1,0,0,0,3194,3197,1,0,0,0,3195,3196,5,83,0,0,3196,3198,5,84,0,0,3197,
		3195,1,0,0,0,3197,3198,1,0,0,0,3198,3204,1,0,0,0,3199,3200,5,141,0,0,3200,
		3201,5,14,0,0,3201,3202,3,292,146,0,3202,3203,5,15,0,0,3203,3205,1,0,0,
		0,3204,3199,1,0,0,0,3204,3205,1,0,0,0,3205,333,1,0,0,0,3206,3207,7,15,
		0,0,3207,335,1,0,0,0,3208,3209,5,121,0,0,3209,3210,3,334,167,0,3210,337,
		1,0,0,0,3211,3212,5,122,0,0,3212,3213,3,334,167,0,3213,339,1,0,0,0,3214,
		3215,5,124,0,0,3215,3216,3,334,167,0,3216,341,1,0,0,0,3217,3218,5,96,0,
		0,3218,3219,5,18,0,0,3219,3220,7,16,0,0,3220,3221,5,19,0,0,3221,3222,3,
		334,167,0,3222,343,1,0,0,0,3223,3232,5,70,0,0,3224,3225,3,302,151,0,3225,
		3226,3,390,195,0,3226,3233,1,0,0,0,3227,3228,3,334,167,0,3228,3229,3,390,
		195,0,3229,3230,5,108,0,0,3230,3231,3,390,195,0,3231,3233,1,0,0,0,3232,
		3224,1,0,0,0,3232,3227,1,0,0,0,3233,345,1,0,0,0,3234,3235,5,135,0,0,3235,
		3236,3,334,167,0,3236,347,1,0,0,0,3237,3238,7,17,0,0,3238,349,1,0,0,0,
		3239,3240,7,18,0,0,3240,351,1,0,0,0,3241,3243,5,28,0,0,3242,3241,1,0,0,
		0,3242,3243,1,0,0,0,3243,3244,1,0,0,0,3244,3245,3,350,175,0,3245,353,1,
		0,0,0,3246,3247,3,356,178,0,3247,3249,5,14,0,0,3248,3250,3,358,179,0,3249,
		3248,1,0,0,0,3249,3250,1,0,0,0,3250,3251,1,0,0,0,3251,3254,5,15,0,0,3252,
		3253,5,91,0,0,3253,3255,3,374,187,0,3254,3252,1,0,0,0,3254,3255,1,0,0,
		0,3255,355,1,0,0,0,3256,3259,3,388,194,0,3257,3259,3,382,191,0,3258,3256,
		1,0,0,0,3258,3257,1,0,0,0,3259,357,1,0,0,0,3260,3262,5,45,0,0,3261,3260,
		1,0,0,0,3261,3262,1,0,0,0,3262,3265,1,0,0,0,3263,3266,5,8,0,0,3264,3266,
		3,360,180,0,3265,3263,1,0,0,0,3265,3264,1,0,0,0,3266,3267,1,0,0,0,3267,
		3268,3,364,182,0,3268,359,1,0,0,0,3269,3274,3,362,181,0,3270,3271,5,13,
		0,0,3271,3273,3,362,181,0,3272,3270,1,0,0,0,3273,3276,1,0,0,0,3274,3272,
		1,0,0,0,3274,3275,1,0,0,0,3275,361,1,0,0,0,3276,3274,1,0,0,0,3277,3287,
		3,302,151,0,3278,3279,5,58,0,0,3279,3288,3,302,151,0,3280,3281,5,4,0,0,
		3281,3288,3,302,151,0,3282,3283,5,64,0,0,3283,3284,7,19,0,0,3284,3288,
		3,302,151,0,3285,3286,7,20,0,0,3286,3288,5,85,0,0,3287,3278,1,0,0,0,3287,
		3280,1,0,0,0,3287,3282,1,0,0,0,3287,3285,1,0,0,0,3287,3288,1,0,0,0,3288,
		363,1,0,0,0,3289,3291,3,368,184,0,3290,3289,1,0,0,0,3290,3291,1,0,0,0,
		3291,3293,1,0,0,0,3292,3294,3,366,183,0,3293,3292,1,0,0,0,3293,3294,1,
		0,0,0,3294,365,1,0,0,0,3295,3296,5,77,0,0,3296,3297,3,302,151,0,3297,367,
		1,0,0,0,3298,3303,3,370,185,0,3299,3300,5,13,0,0,3300,3302,3,370,185,0,
		3301,3299,1,0,0,0,3302,3305,1,0,0,0,3303,3301,1,0,0,0,3303,3304,1,0,0,
		0,3304,369,1,0,0,0,3305,3303,1,0,0,0,3306,3307,5,89,0,0,3307,3308,5,33,
		0,0,3308,3310,3,302,151,0,3309,3311,7,4,0,0,3310,3309,1,0,0,0,3310,3311,
		1,0,0,0,3311,371,1,0,0,0,3312,3313,3,350,175,0,3313,3316,5,14,0,0,3314,
		3317,3,304,152,0,3315,3317,5,8,0,0,3316,3314,1,0,0,0,3316,3315,1,0,0,0,
		3316,3317,1,0,0,0,3317,3318,1,0,0,0,3318,3319,5,15,0,0,3319,3320,5,91,
		0,0,3320,3321,3,374,187,0,3321,373,1,0,0,0,3322,3328,3,350,175,0,3323,
		3324,5,14,0,0,3324,3325,3,244,122,0,3325,3326,5,15,0,0,3326,3328,1,0,0,
		0,3327,3322,1,0,0,0,3327,3323,1,0,0,0,3328,375,1,0,0,0,3329,3330,5,151,
		0,0,3330,3331,3,302,151,0,3331,377,1,0,0,0,3332,3333,5,103,0,0,3333,3334,
		3,382,191,0,3334,3335,5,22,0,0,3335,3336,3,302,151,0,3336,3347,1,0,0,0,
		3337,3338,5,103,0,0,3338,3339,5,14,0,0,3339,3340,3,380,190,0,3340,3341,
		5,15,0,0,3341,3342,5,22,0,0,3342,3343,5,14,0,0,3343,3344,3,304,152,0,3344,
		3345,5,15,0,0,3345,3347,1,0,0,0,3346,3332,1,0,0,0,3346,3337,1,0,0,0,3347,
		379,1,0,0,0,3348,3353,3,382,191,0,3349,3350,5,13,0,0,3350,3352,3,382,191,
		0,3351,3349,1,0,0,0,3352,3355,1,0,0,0,3353,3351,1,0,0,0,3353,3354,1,0,
		0,0,3354,381,1,0,0,0,3355,3353,1,0,0,0,3356,3364,3,350,175,0,3357,3360,
		5,12,0,0,3358,3361,3,350,175,0,3359,3361,3,388,194,0,3360,3358,1,0,0,0,
		3360,3359,1,0,0,0,3361,3363,1,0,0,0,3362,3357,1,0,0,0,3363,3366,1,0,0,
		0,3364,3362,1,0,0,0,3364,3365,1,0,0,0,3365,383,1,0,0,0,3366,3364,1,0,0,
		0,3367,3372,3,386,193,0,3368,3369,5,13,0,0,3369,3371,3,386,193,0,3370,
		3368,1,0,0,0,3371,3374,1,0,0,0,3372,3370,1,0,0,0,3372,3373,1,0,0,0,3373,
		385,1,0,0,0,3374,3372,1,0,0,0,3375,3376,3,302,151,0,3376,3377,5,28,0,0,
		3377,3378,3,350,175,0,3378,387,1,0,0,0,3379,3380,7,21,0,0,3380,389,1,0,
		0,0,3381,3382,7,22,0,0,3382,391,1,0,0,0,387,395,402,407,413,421,428,441,
		511,519,534,537,543,550,555,560,565,570,577,581,586,592,599,604,610,615,
		620,625,632,636,641,647,655,660,665,670,677,681,689,699,706,713,723,728,
		733,738,743,750,754,759,765,772,779,787,794,800,805,812,826,839,845,852,
		857,864,871,877,879,888,890,902,911,914,920,925,930,935,940,951,958,967,
		970,976,981,986,991,999,1008,1016,1019,1025,1030,1035,1040,1050,1062,1065,
		1071,1076,1081,1086,1100,1105,1108,1115,1120,1125,1130,1135,1146,1153,
		1160,1165,1168,1175,1180,1185,1190,1202,1210,1217,1222,1227,1232,1241,
		1248,1258,1265,1272,1281,1287,1292,1297,1302,1310,1316,1323,1328,1334,
		1344,1348,1356,1362,1367,1372,1377,1383,1393,1399,1404,1412,1423,1461,
		1476,1479,1487,1494,1499,1506,1511,1518,1531,1542,1547,1559,1564,1577,
		1582,1593,1599,1610,1627,1636,1641,1649,1654,1662,1670,1673,1697,1704,
		1709,1725,1736,1744,1751,1758,1773,1780,1789,1794,1801,1810,1815,1823,
		1837,1844,1857,1864,1875,1882,1894,1901,1912,1919,1929,1943,2001,2006,
		2012,2017,2022,2026,2032,2041,2050,2058,2067,2075,2080,2085,2094,2099,
		2104,2112,2117,2122,2132,2145,2151,2159,2167,2176,2187,2198,2207,2214,
		2221,2227,2232,2235,2268,2273,2279,2286,2291,2295,2300,2304,2315,2327,
		2335,2342,2347,2351,2354,2360,2362,2367,2369,2377,2386,2389,2397,2399,
		2401,2423,2426,2430,2435,2439,2444,2448,2452,2456,2465,2480,2487,2512,
		2522,2525,2530,2535,2538,2543,2552,2554,2578,2590,2599,2606,2619,2625,
		2628,2633,2640,2652,2660,2666,2668,2679,2681,2689,2693,2695,2700,2702,
		2707,2710,2715,2720,2725,2728,2732,2746,2751,2755,2767,2774,2779,2804,
		2809,2813,2819,2824,2828,2845,2857,2863,2865,2870,2878,2885,2917,2930,
		2950,2953,2959,2972,2988,2993,2996,2998,3006,3018,3022,3034,3038,3072,
		3077,3081,3086,3091,3095,3115,3128,3130,3134,3145,3150,3152,3163,3172,
		3177,3183,3189,3193,3197,3204,3232,3242,3249,3254,3258,3261,3265,3274,
		3287,3290,3293,3303,3310,3316,3327,3346,3353,3360,3364,3372
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BigO.BigQuery.Parser
