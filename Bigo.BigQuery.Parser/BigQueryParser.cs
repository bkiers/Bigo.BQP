//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./BigQueryParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BigO.BigQuery.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BigQueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BNOT=1, CONCAT=2, SCOL=3, ARROW=4, BAND=5, BXOR=6, BOR=7, STAR=8, DIV=9, 
		PLUS=10, SUB=11, DOT=12, COMMA=13, OPAR=14, CPAR=15, OBR=16, CBR=17, LT=18, 
		GT=19, LTE=20, GTE=21, EQ=22, NEQ=23, ALL=24, AND=25, ANY=26, ARRAY=27, 
		AS=28, ASC=29, ASSERT_ROWS_MODIFIED=30, AT=31, BETWEEN=32, BY=33, CASE=34, 
		CAST=35, COLLATE=36, CONTAINS=37, CREATE=38, CROSS=39, CUBE=40, CURRENT=41, 
		DEFAULT=42, DEFINE=43, DESC=44, DISTINCT=45, ELSE=46, END=47, ENUM=48, 
		ESCAPE=49, EXCEPT=50, EXCLUDE=51, EXISTS=52, EXTRACT=53, FALSE=54, FETCH=55, 
		FOLLOWING=56, FOR=57, FROM=58, FULL=59, GROUP=60, GROUPING=61, GROUPS=62, 
		HASH=63, HAVING=64, IF=65, IGNORE=66, IN=67, INNER=68, INTERSECT=69, INTERVAL=70, 
		INTO=71, IS=72, JOIN=73, LATERAL=74, LEFT=75, LIKE=76, LIMIT=77, LOOKUP=78, 
		MERGE=79, NATURAL=80, NEW=81, NO=82, NOT=83, NULL=84, NULLS=85, OF=86, 
		ON=87, OR=88, ORDER=89, OUTER=90, OVER=91, PARTITION=92, PRECEDING=93, 
		PROTO=94, QUALIFY=95, RANGE=96, RECURSIVE=97, RESPECT=98, RIGHT=99, ROLLUP=100, 
		ROWS=101, SELECT=102, SET=103, SOME=104, STRUCT=105, TABLESAMPLE=106, 
		THEN=107, TO=108, TREAT=109, TRUE=110, UNBOUNDED=111, UNION=112, UNNEST=113, 
		USING=114, WHEN=115, WHERE=116, WINDOW=117, WITH=118, WITHIN=119, BIGNUMERIC=120, 
		DATE=121, DATETIME=122, NUMERIC=123, TIMESTAMP=124, YEAR=125, QUARTER=126, 
		MONTH=127, WEEK=128, DAY=129, HOUR=130, MINUTE=131, SECOND=132, MILLISECOND=133, 
		MICROSECOND=134, JSON=135, OFFSET=136, NAME=137, STRICT=138, CORRESPONDING=139, 
		DIFFERENTIAL_PRIVACY=140, OPTIONS=141, VALUE=142, REPLACE=143, SYSTEM=144, 
		PERCENT=145, PIVOT=146, UNPIVOT=147, SYSTEM_TIME=148, ROW=149, INCLUDE=150, 
		FORMAT=151, SETS=152, AVG=153, SCHEMA=154, TEMP=155, TEMPORARY=156, TABLE=157, 
		CONSTRAINT=158, ENFORCED=159, PRIMARY=160, KEY=161, FOREIGN=162, REFERENCES=163, 
		CLUSTER=164, CONNECTION=165, ARRAY_AGG=166, COPY=167, SNAPSHOT=168, CLONE=169, 
		VIEW=170, DROP=171, SEARCH=172, INDEX=173, VECTOR=174, ASSIGNMENT=175, 
		RESERVATION=176, CAPACITY=177, ACCESS=178, POLICY=179, POLICIES=180, PROCEDURE=181, 
		FUNCTION=182, EXTERNAL=183, MATERIALIZED=184, CASCADE=185, RESTRICT=186, 
		UNDROP=187, REPLICA=188, COLUMNS=189, RETURNS=190, DETERMINISTIC=191, 
		LANGUAGE=192, REMOTE=193, AGGREGATE=194, TYPE=195, OUT=196, INOUT=197, 
		BEGIN=198, SECURITY=199, INVOKER=200, COALESCE=201, NULLIF=202, IFNULL=203, 
		GRANT=204, FILTER=205, COLUMN=206, STORING=207, ALTER=208, ADD=209, RENAME=210, 
		NAN=211, INF=212, UNQUOTED_IDENTIFIER=213, QUOTED_IDENTIFIER=214, STRING_LITERAL=215, 
		RAW_STRING_LITERAL=216, BYTES_LITERAL=217, RAW_BYTES_LITERAL=218, INTEGER_LITERAL=219, 
		FLOATING_POINT_LITERAL=220, SPACES=221, COMMENT=222, UNEXPECTED=223;
	public const int
		RULE_statements = 0, RULE_single_statement = 1, RULE_statement = 2, RULE_query_statement = 3, 
		RULE_create_table = 4, RULE_create_table_like = 5, RULE_create_table_copy = 6, 
		RULE_create_snapshot_table = 7, RULE_create_table_clone = 8, RULE_create_view = 9, 
		RULE_create_materialized_view = 10, RULE_create_materialized_view_as_replica = 11, 
		RULE_create_external_schema = 12, RULE_create_external_table = 13, RULE_column_name_schemas = 14, 
		RULE_column_name_schema = 15, RULE_create_function = 16, RULE_named_parameters = 17, 
		RULE_named_parameter = 18, RULE_create_js_function = 19, RULE_create_py_function = 20, 
		RULE_create_remote_function = 21, RULE_create_aggregate_function = 22, 
		RULE_function_parameters = 23, RULE_function_parameter = 24, RULE_create_aggregate_js_function = 25, 
		RULE_create_table_function = 26, RULE_table_function_parameters = 27, 
		RULE_table_function_parameter = 28, RULE_column_declarations = 29, RULE_column_declaration = 30, 
		RULE_create_procedure = 31, RULE_procedure_arguments = 32, RULE_procedure_argument = 33, 
		RULE_create_stored_procedure = 34, RULE_create_row_access_policy = 35, 
		RULE_create_capacity = 36, RULE_create_reservation = 37, RULE_create_assignment = 38, 
		RULE_create_search_index = 39, RULE_columns = 40, RULE_column = 41, RULE_create_vector_index = 42, 
		RULE_alter_schema_set_default_collate = 43, RULE_alter_schema_set_options = 44, 
		RULE_alter_schema_add_replica = 45, RULE_alter_schema_drop_replica = 46, 
		RULE_alter_table_set_options = 47, RULE_alter_table_add_column = 48, RULE_alter_table_add_foreign_key = 49, 
		RULE_add_foreign_key = 50, RULE_alter_table_add_primary_key = 51, RULE_alter_table_rename = 52, 
		RULE_alter_table_rename_column = 53, RULE_rename_column = 54, RULE_column_to_column = 55, 
		RULE_alter_table_drop_column = 56, RULE_drop_column = 57, RULE_alter_table_drop_constraint = 58, 
		RULE_alter_table_drop_primary_key = 59, RULE_alter_table_set_default_collate = 60, 
		RULE_alter_table_column_set_options = 61, RULE_alter_table_column_drop_not_null = 62, 
		RULE_alter_table_column_set_data_type = 63, RULE_alter_table_column_set_default = 64, 
		RULE_alter_table_column_drop_default = 65, RULE_alter_view = 66, RULE_alter_materialized_view = 67, 
		RULE_alter_organication = 68, RULE_alter_project = 69, RULE_alter_bi_capacity = 70, 
		RULE_alter_capacity = 71, RULE_alter_reservation = 72, RULE_undrop_schema = 73, 
		RULE_drop_schema = 74, RULE_drop_table = 75, RULE_drop_snapshot_table = 76, 
		RULE_drop_external_table = 77, RULE_drop_view = 78, RULE_drop_materialized_view = 79, 
		RULE_drop_function = 80, RULE_drop_table_function = 81, RULE_drop_procedure = 82, 
		RULE_drop_row_access_policy = 83, RULE_drop_capacity = 84, RULE_drop_reservation = 85, 
		RULE_drop_assignment = 86, RULE_drop_search_index = 87, RULE_drop_vector_index = 88, 
		RULE_view_column_name_list = 89, RULE_view_column = 90, RULE_column_constraint_definitions = 91, 
		RULE_column_constraint_definition = 92, RULE_column_definition = 93, RULE_primary_key = 94, 
		RULE_foreign_key = 95, RULE_foreign_reference = 96, RULE_create_schema = 97, 
		RULE_query_expression = 98, RULE_query_expr_tail = 99, RULE_set_operation_tail = 100, 
		RULE_non_recursive_cte = 101, RULE_recursive_cte = 102, RULE_recursive_union_operation = 103, 
		RULE_select = 104, RULE_group_by_specification = 105, RULE_grouping_sets_specification = 106, 
		RULE_grouping_list = 107, RULE_grouping_list_item = 108, RULE_cube_specification = 109, 
		RULE_groupable_item_set = 110, RULE_rollup_specification = 111, RULE_window_clause = 112, 
		RULE_named_window_expression = 113, RULE_window_specification = 114, RULE_window_frame_clause = 115, 
		RULE_frame_start = 116, RULE_frame_between = 117, RULE_frame_end_a = 118, 
		RULE_frame_end_b = 119, RULE_frame_end_c = 120, RULE_differential_privacy_clause = 121, 
		RULE_from_clauses = 122, RULE_from_clause = 123, RULE_from_item = 124, 
		RULE_unnest_operator = 125, RULE_cross_join_operator = 126, RULE_condition_join_operator = 127, 
		RULE_join_condition = 128, RULE_on_clause = 129, RULE_using_clause = 130, 
		RULE_pivot_operator = 131, RULE_unpivot_operator = 132, RULE_single_column_unpivot = 133, 
		RULE_multi_column_unpivot = 134, RULE_columns_to_unpivot = 135, RULE_column_sets_to_unpivot = 136, 
		RULE_tablesample_operator = 137, RULE_option_parameters = 138, RULE_option_parameter = 139, 
		RULE_select_list = 140, RULE_select_list_item = 141, RULE_select_all = 142, 
		RULE_expression = 143, RULE_expressions = 144, RULE_case_expression = 145, 
		RULE_case_ = 146, RULE_coalesce = 147, RULE_if_ = 148, RULE_ifnull = 149, 
		RULE_nullif = 150, RULE_expressions_as_alias = 151, RULE_expressions_asc_desc = 152, 
		RULE_literal = 153, RULE_numeric_literal = 154, RULE_big_numeric_literal = 155, 
		RULE_array_literal = 156, RULE_struct_literal = 157, RULE_data_type = 158, 
		RULE_string_literal = 159, RULE_date_literal = 160, RULE_datetime_literal = 161, 
		RULE_timestamp_literal = 162, RULE_range_literal = 163, RULE_interval_literal = 164, 
		RULE_json_literal = 165, RULE_byte_literal = 166, RULE_identifier = 167, 
		RULE_as_alias = 168, RULE_function_call = 169, RULE_array_agg = 170, RULE_order_by_keys = 171, 
		RULE_order_by_key = 172, RULE_window_function = 173, RULE_over_clause = 174, 
		RULE_format_clause = 175, RULE_set = 176, RULE_path_expressions = 177, 
		RULE_path_expression = 178, RULE_as_column_names = 179, RULE_as_column_name = 180, 
		RULE_reserved = 181, RULE_datetime_part = 182;
	public static readonly string[] ruleNames = {
		"statements", "single_statement", "statement", "query_statement", "create_table", 
		"create_table_like", "create_table_copy", "create_snapshot_table", "create_table_clone", 
		"create_view", "create_materialized_view", "create_materialized_view_as_replica", 
		"create_external_schema", "create_external_table", "column_name_schemas", 
		"column_name_schema", "create_function", "named_parameters", "named_parameter", 
		"create_js_function", "create_py_function", "create_remote_function", 
		"create_aggregate_function", "function_parameters", "function_parameter", 
		"create_aggregate_js_function", "create_table_function", "table_function_parameters", 
		"table_function_parameter", "column_declarations", "column_declaration", 
		"create_procedure", "procedure_arguments", "procedure_argument", "create_stored_procedure", 
		"create_row_access_policy", "create_capacity", "create_reservation", "create_assignment", 
		"create_search_index", "columns", "column", "create_vector_index", "alter_schema_set_default_collate", 
		"alter_schema_set_options", "alter_schema_add_replica", "alter_schema_drop_replica", 
		"alter_table_set_options", "alter_table_add_column", "alter_table_add_foreign_key", 
		"add_foreign_key", "alter_table_add_primary_key", "alter_table_rename", 
		"alter_table_rename_column", "rename_column", "column_to_column", "alter_table_drop_column", 
		"drop_column", "alter_table_drop_constraint", "alter_table_drop_primary_key", 
		"alter_table_set_default_collate", "alter_table_column_set_options", "alter_table_column_drop_not_null", 
		"alter_table_column_set_data_type", "alter_table_column_set_default", 
		"alter_table_column_drop_default", "alter_view", "alter_materialized_view", 
		"alter_organication", "alter_project", "alter_bi_capacity", "alter_capacity", 
		"alter_reservation", "undrop_schema", "drop_schema", "drop_table", "drop_snapshot_table", 
		"drop_external_table", "drop_view", "drop_materialized_view", "drop_function", 
		"drop_table_function", "drop_procedure", "drop_row_access_policy", "drop_capacity", 
		"drop_reservation", "drop_assignment", "drop_search_index", "drop_vector_index", 
		"view_column_name_list", "view_column", "column_constraint_definitions", 
		"column_constraint_definition", "column_definition", "primary_key", "foreign_key", 
		"foreign_reference", "create_schema", "query_expression", "query_expr_tail", 
		"set_operation_tail", "non_recursive_cte", "recursive_cte", "recursive_union_operation", 
		"select", "group_by_specification", "grouping_sets_specification", "grouping_list", 
		"grouping_list_item", "cube_specification", "groupable_item_set", "rollup_specification", 
		"window_clause", "named_window_expression", "window_specification", "window_frame_clause", 
		"frame_start", "frame_between", "frame_end_a", "frame_end_b", "frame_end_c", 
		"differential_privacy_clause", "from_clauses", "from_clause", "from_item", 
		"unnest_operator", "cross_join_operator", "condition_join_operator", "join_condition", 
		"on_clause", "using_clause", "pivot_operator", "unpivot_operator", "single_column_unpivot", 
		"multi_column_unpivot", "columns_to_unpivot", "column_sets_to_unpivot", 
		"tablesample_operator", "option_parameters", "option_parameter", "select_list", 
		"select_list_item", "select_all", "expression", "expressions", "case_expression", 
		"case_", "coalesce", "if_", "ifnull", "nullif", "expressions_as_alias", 
		"expressions_asc_desc", "literal", "numeric_literal", "big_numeric_literal", 
		"array_literal", "struct_literal", "data_type", "string_literal", "date_literal", 
		"datetime_literal", "timestamp_literal", "range_literal", "interval_literal", 
		"json_literal", "byte_literal", "identifier", "as_alias", "function_call", 
		"array_agg", "order_by_keys", "order_by_key", "window_function", "over_clause", 
		"format_clause", "set", "path_expressions", "path_expression", "as_column_names", 
		"as_column_name", "reserved", "datetime_part"
	};

	private static readonly string[] _LiteralNames = {
		null, "'~'", "'||'", "';'", "'=>'", "'&'", "'^'", "'|'", "'*'", "'/'", 
		"'+'", "'-'", "'.'", "','", "'('", "')'", "'['", "']'", "'<'", "'>'", 
		"'<='", "'>='", "'='", null, "'ALL'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", 
		"'ASC'", "'ASSERT_ROWS_MODIFIED'", "'AT'", "'BETWEEN'", "'BY'", "'CASE'", 
		"'CAST'", "'COLLATE'", "'CONTAINS'", "'CREATE'", "'CROSS'", "'CUBE'", 
		"'CURRENT'", "'DEFAULT'", "'DEFINE'", "'DESC'", "'DISTINCT'", "'ELSE'", 
		"'END'", "'ENUM'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDE'", "'EXISTS'", "'EXTRACT'", 
		"'FALSE'", "'FETCH'", "'FOLLOWING'", "'FOR'", "'FROM'", "'FULL'", "'GROUP'", 
		"'GROUPING'", "'GROUPS'", "'HASH'", "'HAVING'", "'IF'", "'IGNORE'", "'IN'", 
		"'INNER'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'JOIN'", "'LATERAL'", 
		"'LEFT'", "'LIKE'", "'LIMIT'", "'LOOKUP'", "'MERGE'", "'NATURAL'", "'NEW'", 
		"'NO'", "'NOT'", "'NULL'", "'NULLS'", "'OF'", "'ON'", "'OR'", "'ORDER'", 
		"'OUTER'", "'OVER'", "'PARTITION'", "'PRECEDING'", "'PROTO'", "'QUALIFY'", 
		"'RANGE'", "'RECURSIVE'", "'RESPECT'", "'RIGHT'", "'ROLLUP'", "'ROWS'", 
		"'SELECT'", "'SET'", "'SOME'", "'STRUCT'", "'TABLESAMPLE'", "'THEN'", 
		"'TO'", "'TREAT'", "'TRUE'", "'UNBOUNDED'", "'UNION'", "'UNNEST'", "'USING'", 
		"'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'BIGNUMERIC'", 
		"'DATE'", "'DATETIME'", "'NUMERIC'", "'TIMESTAMP'", "'YEAR'", "'QUARTER'", 
		"'MONTH'", "'WEEK'", "'DAY'", "'HOUR'", "'MINUTE'", "'SECOND'", "'MILLISECOND'", 
		"'MICROSECOND'", "'JSON'", "'OFFSET'", "'NAME'", "'STRICT'", "'CORRESPONDING'", 
		"'DIFFERENTIAL_PRIVACY'", "'OPTIONS'", "'VALUE'", "'REPLACE'", "'SYSTEM'", 
		"'PERCENT'", "'PIVOT'", "'UNPIVOT'", "'SYSTEM_TIME'", "'ROW'", "'INCLUDE'", 
		"'FORMAT'", "'SETS'", "'AVG'", "'SCHEMA'", "'TEMP'", "'TEMPORARY'", "'TABLE'", 
		"'CONSTRAINT'", "'ENFORCED'", "'PRIMARY'", "'KEY'", "'FOREIGN'", "'REFERENCES'", 
		"'CLUSTER'", "'CONNECTION'", "'ARRAY_AGG'", "'COPY'", "'SNAPSHOT'", "'CLONE'", 
		"'VIEW'", "'DROP'", "'SEARCH'", "'INDEX'", "'VECTOR'", "'ASSIGNMENT'", 
		"'RESERVATION'", "'CAPACITY'", "'ACCESS'", "'POLICY'", "'POLICIES'", "'PROCEDURE'", 
		"'FUNCTION'", "'EXTERNAL'", "'MATERIALIZED'", "'CASCADE'", "'RESTRICT'", 
		"'UNDROP'", "'REPLICA'", "'COLUMNS'", "'RETURNS'", "'DETERMINISTIC'", 
		"'LANGUAGE'", "'REMOTE'", "'AGGREGATE'", "'TYPE'", "'OUT'", "'INOUT'", 
		"'BEGIN'", "'SECURITY'", "'INVOKER'", "'COALESCE'", "'NULLIF'", "'IFNULL'", 
		"'GRANT'", "'FILTER'", "'COLUMN'", "'STORING'", "'ALTER'", "'ADD'", "'RENAME'", 
		"'NAN'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BNOT", "CONCAT", "SCOL", "ARROW", "BAND", "BXOR", "BOR", "STAR", 
		"DIV", "PLUS", "SUB", "DOT", "COMMA", "OPAR", "CPAR", "OBR", "CBR", "LT", 
		"GT", "LTE", "GTE", "EQ", "NEQ", "ALL", "AND", "ANY", "ARRAY", "AS", "ASC", 
		"ASSERT_ROWS_MODIFIED", "AT", "BETWEEN", "BY", "CASE", "CAST", "COLLATE", 
		"CONTAINS", "CREATE", "CROSS", "CUBE", "CURRENT", "DEFAULT", "DEFINE", 
		"DESC", "DISTINCT", "ELSE", "END", "ENUM", "ESCAPE", "EXCEPT", "EXCLUDE", 
		"EXISTS", "EXTRACT", "FALSE", "FETCH", "FOLLOWING", "FOR", "FROM", "FULL", 
		"GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "IF", "IGNORE", "IN", 
		"INNER", "INTERSECT", "INTERVAL", "INTO", "IS", "JOIN", "LATERAL", "LEFT", 
		"LIKE", "LIMIT", "LOOKUP", "MERGE", "NATURAL", "NEW", "NO", "NOT", "NULL", 
		"NULLS", "OF", "ON", "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", 
		"PROTO", "QUALIFY", "RANGE", "RECURSIVE", "RESPECT", "RIGHT", "ROLLUP", 
		"ROWS", "SELECT", "SET", "SOME", "STRUCT", "TABLESAMPLE", "THEN", "TO", 
		"TREAT", "TRUE", "UNBOUNDED", "UNION", "UNNEST", "USING", "WHEN", "WHERE", 
		"WINDOW", "WITH", "WITHIN", "BIGNUMERIC", "DATE", "DATETIME", "NUMERIC", 
		"TIMESTAMP", "YEAR", "QUARTER", "MONTH", "WEEK", "DAY", "HOUR", "MINUTE", 
		"SECOND", "MILLISECOND", "MICROSECOND", "JSON", "OFFSET", "NAME", "STRICT", 
		"CORRESPONDING", "DIFFERENTIAL_PRIVACY", "OPTIONS", "VALUE", "REPLACE", 
		"SYSTEM", "PERCENT", "PIVOT", "UNPIVOT", "SYSTEM_TIME", "ROW", "INCLUDE", 
		"FORMAT", "SETS", "AVG", "SCHEMA", "TEMP", "TEMPORARY", "TABLE", "CONSTRAINT", 
		"ENFORCED", "PRIMARY", "KEY", "FOREIGN", "REFERENCES", "CLUSTER", "CONNECTION", 
		"ARRAY_AGG", "COPY", "SNAPSHOT", "CLONE", "VIEW", "DROP", "SEARCH", "INDEX", 
		"VECTOR", "ASSIGNMENT", "RESERVATION", "CAPACITY", "ACCESS", "POLICY", 
		"POLICIES", "PROCEDURE", "FUNCTION", "EXTERNAL", "MATERIALIZED", "CASCADE", 
		"RESTRICT", "UNDROP", "REPLICA", "COLUMNS", "RETURNS", "DETERMINISTIC", 
		"LANGUAGE", "REMOTE", "AGGREGATE", "TYPE", "OUT", "INOUT", "BEGIN", "SECURITY", 
		"INVOKER", "COALESCE", "NULLIF", "IFNULL", "GRANT", "FILTER", "COLUMN", 
		"STORING", "ALTER", "ADD", "RENAME", "NAN", "INF", "UNQUOTED_IDENTIFIER", 
		"QUOTED_IDENTIFIER", "STRING_LITERAL", "RAW_STRING_LITERAL", "BYTES_LITERAL", 
		"RAW_BYTES_LITERAL", "INTEGER_LITERAL", "FLOATING_POINT_LITERAL", "SPACES", 
		"COMMENT", "UNEXPECTED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BigQueryParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BigQueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BigQueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BigQueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigQueryParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 0, RULE_statements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 366;
				Match(SCOL);
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 372;
			statement();
			State = 381;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 374;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 373;
						Match(SCOL);
						}
						}
						State = 376;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 378;
					statement();
					}
					} 
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 384;
				Match(SCOL);
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 390;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigQueryParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_statementContext single_statement() {
		Single_statementContext _localctx = new Single_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_single_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 392;
				Match(SCOL);
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 398;
			statement();
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 399;
				Match(SCOL);
				}
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 405;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_likeContext create_table_like() {
			return GetRuleContext<Create_table_likeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_copyContext create_table_copy() {
			return GetRuleContext<Create_table_copyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_snapshot_tableContext create_snapshot_table() {
			return GetRuleContext<Create_snapshot_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_cloneContext create_table_clone() {
			return GetRuleContext<Create_table_cloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_materialized_viewContext create_materialized_view() {
			return GetRuleContext<Create_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_materialized_view_as_replicaContext create_materialized_view_as_replica() {
			return GetRuleContext<Create_materialized_view_as_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_schemaContext create_external_schema() {
			return GetRuleContext<Create_external_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_tableContext create_external_table() {
			return GetRuleContext<Create_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_functionContext create_function() {
			return GetRuleContext<Create_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_js_functionContext create_js_function() {
			return GetRuleContext<Create_js_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_py_functionContext create_py_function() {
			return GetRuleContext<Create_py_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_remote_functionContext create_remote_function() {
			return GetRuleContext<Create_remote_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_aggregate_functionContext create_aggregate_function() {
			return GetRuleContext<Create_aggregate_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_aggregate_js_functionContext create_aggregate_js_function() {
			return GetRuleContext<Create_aggregate_js_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_functionContext create_table_function() {
			return GetRuleContext<Create_table_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_procedureContext create_procedure() {
			return GetRuleContext<Create_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_stored_procedureContext create_stored_procedure() {
			return GetRuleContext<Create_stored_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_row_access_policyContext create_row_access_policy() {
			return GetRuleContext<Create_row_access_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_capacityContext create_capacity() {
			return GetRuleContext<Create_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_reservationContext create_reservation() {
			return GetRuleContext<Create_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_assignmentContext create_assignment() {
			return GetRuleContext<Create_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_search_indexContext create_search_index() {
			return GetRuleContext<Create_search_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_vector_indexContext create_vector_index() {
			return GetRuleContext<Create_vector_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_set_default_collateContext alter_schema_set_default_collate() {
			return GetRuleContext<Alter_schema_set_default_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_set_optionsContext alter_schema_set_options() {
			return GetRuleContext<Alter_schema_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_add_replicaContext alter_schema_add_replica() {
			return GetRuleContext<Alter_schema_add_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_drop_replicaContext alter_schema_drop_replica() {
			return GetRuleContext<Alter_schema_drop_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_optionsContext alter_table_set_options() {
			return GetRuleContext<Alter_table_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_foreign_keyContext alter_table_add_foreign_key() {
			return GetRuleContext<Alter_table_add_foreign_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_primary_keyContext alter_table_add_primary_key() {
			return GetRuleContext<Alter_table_add_primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_renameContext alter_table_rename() {
			return GetRuleContext<Alter_table_renameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_rename_columnContext alter_table_rename_column() {
			return GetRuleContext<Alter_table_rename_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_constraintContext alter_table_drop_constraint() {
			return GetRuleContext<Alter_table_drop_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_primary_keyContext alter_table_drop_primary_key() {
			return GetRuleContext<Alter_table_drop_primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_default_collateContext alter_table_set_default_collate() {
			return GetRuleContext<Alter_table_set_default_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_optionsContext alter_table_column_set_options() {
			return GetRuleContext<Alter_table_column_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_drop_not_nullContext alter_table_column_drop_not_null() {
			return GetRuleContext<Alter_table_column_drop_not_nullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_data_typeContext alter_table_column_set_data_type() {
			return GetRuleContext<Alter_table_column_set_data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_defaultContext alter_table_column_set_default() {
			return GetRuleContext<Alter_table_column_set_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_drop_defaultContext alter_table_column_drop_default() {
			return GetRuleContext<Alter_table_column_drop_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_viewContext alter_view() {
			return GetRuleContext<Alter_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_materialized_viewContext alter_materialized_view() {
			return GetRuleContext<Alter_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_organicationContext alter_organication() {
			return GetRuleContext<Alter_organicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_projectContext alter_project() {
			return GetRuleContext<Alter_projectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_bi_capacityContext alter_bi_capacity() {
			return GetRuleContext<Alter_bi_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_capacityContext alter_capacity() {
			return GetRuleContext<Alter_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_reservationContext alter_reservation() {
			return GetRuleContext<Alter_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Undrop_schemaContext undrop_schema() {
			return GetRuleContext<Undrop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_snapshot_tableContext drop_snapshot_table() {
			return GetRuleContext<Drop_snapshot_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_materialized_viewContext drop_materialized_view() {
			return GetRuleContext<Drop_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_functionContext drop_table_function() {
			return GetRuleContext<Drop_table_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_row_access_policyContext drop_row_access_policy() {
			return GetRuleContext<Drop_row_access_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_capacityContext drop_capacity() {
			return GetRuleContext<Drop_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_reservationContext drop_reservation() {
			return GetRuleContext<Drop_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_assignmentContext drop_assignment() {
			return GetRuleContext<Drop_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_search_indexContext drop_search_index() {
			return GetRuleContext<Drop_search_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_vector_indexContext drop_vector_index() {
			return GetRuleContext<Drop_vector_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407;
				query_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				create_table();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 409;
				create_table_like();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 410;
				create_table_copy();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 411;
				create_snapshot_table();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 412;
				create_table_clone();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 413;
				create_view();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 414;
				create_schema();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 415;
				create_materialized_view();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 416;
				create_materialized_view_as_replica();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 417;
				create_external_schema();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 418;
				create_external_table();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 419;
				create_function();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 420;
				create_js_function();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 421;
				create_py_function();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 422;
				create_remote_function();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 423;
				create_aggregate_function();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 424;
				create_aggregate_js_function();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 425;
				create_table_function();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 426;
				create_procedure();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 427;
				create_stored_procedure();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 428;
				create_row_access_policy();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 429;
				create_capacity();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 430;
				create_reservation();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 431;
				create_assignment();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 432;
				create_search_index();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 433;
				create_vector_index();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 434;
				alter_schema_set_default_collate();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 435;
				alter_schema_set_options();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 436;
				alter_schema_add_replica();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 437;
				alter_schema_drop_replica();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 438;
				alter_table_set_options();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 439;
				alter_table_add_column();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 440;
				alter_table_add_foreign_key();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 441;
				alter_table_add_primary_key();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 442;
				alter_table_rename();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 443;
				alter_table_rename_column();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 444;
				alter_table_drop_column();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 445;
				alter_table_drop_constraint();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 446;
				alter_table_drop_primary_key();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 447;
				alter_table_set_default_collate();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 448;
				alter_table_column_set_options();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 449;
				alter_table_column_drop_not_null();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 450;
				alter_table_column_set_data_type();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 451;
				alter_table_column_set_default();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 452;
				alter_table_column_drop_default();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 453;
				alter_view();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 454;
				alter_materialized_view();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 455;
				alter_organication();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 456;
				alter_project();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 457;
				alter_bi_capacity();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 458;
				alter_capacity();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 459;
				alter_reservation();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 460;
				undrop_schema();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 461;
				drop_schema();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 462;
				drop_table();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 463;
				drop_snapshot_table();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 464;
				drop_external_table();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 465;
				drop_view();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 466;
				drop_materialized_view();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 467;
				drop_function();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 468;
				drop_table_function();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 469;
				drop_procedure();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 470;
				drop_row_access_policy();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 471;
				drop_capacity();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 472;
				drop_reservation();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 473;
				drop_assignment();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 474;
				drop_search_index();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 475;
				drop_vector_index();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 476;
				set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Query_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_statementContext query_statement() {
		Query_statementContext _localctx = new Query_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_query_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionsContext column_constraint_definitions() {
			return GetRuleContext<Column_constraint_definitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 8, RULE_create_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(CREATE);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 482;
				Match(OR);
				State = 483;
				Match(REPLACE);
				}
			}

			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 486;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 489;
			Match(TABLE);
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 490;
				Match(IF);
				State = 491;
				Match(NOT);
				State = 492;
				Match(EXISTS);
				}
			}

			State = 495;
			_localctx.table_name = path_expression();
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 496;
				Match(OPAR);
				State = 497;
				column_constraint_definitions();
				State = 498;
				Match(CPAR);
				}
			}

			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 502;
				Match(DEFAULT);
				State = 503;
				Match(COLLATE);
				State = 504;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 507;
				Match(PARTITION);
				State = 508;
				Match(BY);
				State = 509;
				expression(0);
				}
			}

			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 512;
				Match(CLUSTER);
				State = 513;
				Match(BY);
				State = 514;
				path_expressions();
				}
			}

			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 517;
				Match(WITH);
				State = 518;
				Match(CONNECTION);
				State = 519;
				_localctx.connection_name = identifier();
				}
			}

			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 522;
				Match(OPTIONS);
				State = 523;
				Match(OPAR);
				State = 524;
				option_parameters();
				State = 525;
				Match(CPAR);
				}
			}

			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 529;
				Match(AS);
				State = 530;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_likeContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_table_likeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_like(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_likeContext create_table_like() {
		Create_table_likeContext _localctx = new Create_table_likeContext(Context, State);
		EnterRule(_localctx, 10, RULE_create_table_like);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(CREATE);
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 534;
				Match(OR);
				State = 535;
				Match(REPLACE);
				}
			}

			State = 538;
			Match(TABLE);
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 539;
				Match(IF);
				State = 540;
				Match(NOT);
				State = 541;
				Match(EXISTS);
				}
			}

			State = 544;
			_localctx.table_name = path_expression();
			State = 545;
			Match(LIKE);
			State = 554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 549;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 546;
					_localctx.project_name = identifier();
					State = 547;
					Match(DOT);
					}
					break;
				}
				State = 551;
				_localctx.dataset_name = identifier();
				State = 552;
				Match(DOT);
				}
				break;
			}
			State = 556;
			_localctx.source_table_name = identifier();
			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 557;
				Match(DEFAULT);
				State = 558;
				Match(COLLATE);
				State = 559;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 562;
				Match(PARTITION);
				State = 563;
				Match(BY);
				State = 564;
				expression(0);
				}
			}

			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 567;
				Match(CLUSTER);
				State = 568;
				Match(BY);
				State = 569;
				path_expressions();
				}
			}

			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 572;
				Match(WITH);
				State = 573;
				Match(CONNECTION);
				State = 574;
				_localctx.connection_name = identifier();
				}
			}

			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 577;
				Match(OPTIONS);
				State = 578;
				Match(OPAR);
				State = 579;
				option_parameters();
				State = 580;
				Match(CPAR);
				}
			}

			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 584;
				Match(AS);
				State = 585;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_copyContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Path_expressionContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(BigQueryParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_table_copyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_copy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_copy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_copy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_copy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_copyContext create_table_copy() {
		Create_table_copyContext _localctx = new Create_table_copyContext(Context, State);
		EnterRule(_localctx, 12, RULE_create_table_copy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			Match(CREATE);
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 589;
				Match(OR);
				State = 590;
				Match(REPLACE);
				}
			}

			State = 593;
			Match(TABLE);
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 594;
				Match(IF);
				State = 595;
				Match(NOT);
				State = 596;
				Match(EXISTS);
				}
			}

			State = 599;
			_localctx.table_name = path_expression();
			State = 600;
			Match(COPY);
			State = 601;
			_localctx.source_table_name = path_expression();
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 602;
				Match(DEFAULT);
				State = 603;
				Match(COLLATE);
				State = 604;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 607;
				Match(PARTITION);
				State = 608;
				Match(BY);
				State = 609;
				expression(0);
				}
			}

			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 612;
				Match(CLUSTER);
				State = 613;
				Match(BY);
				State = 614;
				path_expressions();
				}
			}

			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 617;
				Match(WITH);
				State = 618;
				Match(CONNECTION);
				State = 619;
				_localctx.connection_name = identifier();
				}
			}

			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 622;
				Match(OPTIONS);
				State = 623;
				Match(OPAR);
				State = 624;
				option_parameters();
				State = 625;
				Match(CPAR);
				}
			}

			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 629;
				Match(AS);
				State = 630;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_snapshot_tableContext : ParserRuleContext {
		public Path_expressionContext table_snapshot_name;
		public Path_expressionContext source_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_snapshot_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_snapshot_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_snapshot_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_snapshot_tableContext create_snapshot_table() {
		Create_snapshot_tableContext _localctx = new Create_snapshot_tableContext(Context, State);
		EnterRule(_localctx, 14, RULE_create_snapshot_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			Match(CREATE);
			State = 634;
			Match(SNAPSHOT);
			State = 635;
			Match(TABLE);
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 636;
				Match(IF);
				State = 637;
				Match(NOT);
				State = 638;
				Match(EXISTS);
				}
			}

			State = 641;
			_localctx.table_snapshot_name = path_expression();
			State = 642;
			Match(CLONE);
			State = 643;
			_localctx.source_table_name = path_expression();
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 644;
				Match(FOR);
				State = 645;
				Match(SYSTEM_TIME);
				State = 646;
				Match(AS);
				State = 647;
				Match(OF);
				State = 648;
				expression(0);
				}
			}

			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 651;
				Match(OPTIONS);
				State = 652;
				Match(OPAR);
				State = 653;
				option_parameters();
				State = 654;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_cloneContext : ParserRuleContext {
		public Path_expressionContext destination_table_name;
		public Path_expressionContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(BigQueryParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(BigQueryParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_table_cloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_clone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_clone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_clone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_clone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_cloneContext create_table_clone() {
		Create_table_cloneContext _localctx = new Create_table_cloneContext(Context, State);
		EnterRule(_localctx, 16, RULE_create_table_clone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(CREATE);
			State = 659;
			Match(TABLE);
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 660;
				Match(IF);
				State = 661;
				Match(NOT);
				State = 662;
				Match(EXISTS);
				}
			}

			State = 665;
			_localctx.destination_table_name = path_expression();
			State = 666;
			Match(CLONE);
			State = 667;
			_localctx.source_table_name = path_expression();
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 668;
				Match(FOR);
				State = 669;
				Match(SYSTEM_TIME);
				State = 670;
				Match(AS);
				State = 671;
				Match(OF);
				State = 672;
				expression(0);
				}
			}

			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 675;
				Match(DEFAULT);
				State = 676;
				Match(COLLATE);
				State = 677;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 680;
				Match(PARTITION);
				State = 681;
				Match(BY);
				State = 682;
				expression(0);
				}
			}

			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 685;
				Match(CLUSTER);
				State = 686;
				Match(BY);
				State = 687;
				path_expressions();
				}
			}

			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 690;
				Match(WITH);
				State = 691;
				Match(CONNECTION);
				State = 692;
				_localctx.connection_name = identifier();
				}
			}

			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 695;
				Match(OPTIONS);
				State = 696;
				Match(OPAR);
				State = 697;
				option_parameters();
				State = 698;
				Match(CPAR);
				}
			}

			State = 704;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 702;
				Match(AS);
				State = 703;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public Path_expressionContext view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_column_name_listContext view_column_name_list() {
			return GetRuleContext<View_column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 18, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(CREATE);
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 707;
				Match(OR);
				State = 708;
				Match(REPLACE);
				}
			}

			State = 711;
			Match(VIEW);
			State = 715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 712;
				Match(IF);
				State = 713;
				Match(NOT);
				State = 714;
				Match(EXISTS);
				}
			}

			State = 717;
			_localctx.view_name = path_expression();
			State = 722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 718;
				Match(OPAR);
				State = 719;
				view_column_name_list();
				State = 720;
				Match(CPAR);
				}
			}

			State = 729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 724;
				Match(OPTIONS);
				State = 725;
				Match(OPAR);
				State = 726;
				option_parameters();
				State = 727;
				Match(CPAR);
				}
			}

			State = 731;
			Match(AS);
			State = 732;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_materialized_viewContext : ParserRuleContext {
		public Path_expressionContext materialized_view_name;
		public Path_expressionsContext clustering_column_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Create_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_materialized_viewContext create_materialized_view() {
		Create_materialized_viewContext _localctx = new Create_materialized_viewContext(Context, State);
		EnterRule(_localctx, 20, RULE_create_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			Match(CREATE);
			State = 737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 735;
				Match(OR);
				State = 736;
				Match(REPLACE);
				}
			}

			State = 739;
			Match(MATERIALIZED);
			State = 740;
			Match(VIEW);
			State = 744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 741;
				Match(IF);
				State = 742;
				Match(NOT);
				State = 743;
				Match(EXISTS);
				}
			}

			State = 746;
			_localctx.materialized_view_name = path_expression();
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 747;
				Match(PARTITION);
				State = 748;
				Match(BY);
				State = 749;
				expression(0);
				}
			}

			State = 755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 752;
				Match(CLUSTER);
				State = 753;
				Match(BY);
				State = 754;
				_localctx.clustering_column_list = path_expressions();
				}
			}

			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 757;
				Match(OPTIONS);
				State = 758;
				Match(OPAR);
				State = 759;
				option_parameters();
				State = 760;
				Match(CPAR);
				}
			}

			State = 764;
			Match(AS);
			State = 765;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_materialized_view_as_replicaContext : ParserRuleContext {
		public Path_expressionContext replica_name;
		public Path_expressionContext source_materialized_view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_materialized_view_as_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_materialized_view_as_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_materialized_view_as_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_materialized_view_as_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_materialized_view_as_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_materialized_view_as_replicaContext create_materialized_view_as_replica() {
		Create_materialized_view_as_replicaContext _localctx = new Create_materialized_view_as_replicaContext(Context, State);
		EnterRule(_localctx, 22, RULE_create_materialized_view_as_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			Match(CREATE);
			State = 768;
			Match(MATERIALIZED);
			State = 769;
			Match(VIEW);
			State = 770;
			_localctx.replica_name = path_expression();
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 771;
				Match(OPTIONS);
				State = 772;
				Match(OPAR);
				State = 773;
				option_parameters();
				State = 774;
				Match(CPAR);
				}
			}

			State = 778;
			Match(AS);
			State = 779;
			Match(REPLICA);
			State = 780;
			Match(OF);
			State = 781;
			_localctx.source_materialized_view_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_schemaContext : ParserRuleContext {
		public Path_expressionContext dataset_name;
		public Path_expressionContext connection_namepath_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_external_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_schemaContext create_external_schema() {
		Create_external_schemaContext _localctx = new Create_external_schemaContext(Context, State);
		EnterRule(_localctx, 24, RULE_create_external_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			Match(CREATE);
			State = 784;
			Match(EXTERNAL);
			State = 785;
			Match(SCHEMA);
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 786;
				Match(IF);
				State = 787;
				Match(NOT);
				State = 788;
				Match(EXISTS);
				}
			}

			State = 791;
			_localctx.dataset_name = path_expression();
			State = 795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 792;
				Match(WITH);
				State = 793;
				Match(CONNECTION);
				State = 794;
				_localctx.connection_namepath_expression = path_expression();
				}
			}

			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 797;
				Match(OPTIONS);
				State = 798;
				Match(OPAR);
				State = 799;
				option_parameters();
				State = 800;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_tableContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Column_name_schemasContext column_names;
		public IdentifierContext connection_name;
		public Column_name_schemasContext partition_columns;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(BigQueryParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(BigQueryParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext[] column_name_schemas() {
			return GetRuleContexts<Column_name_schemasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext column_name_schemas(int i) {
			return GetRuleContext<Column_name_schemasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_tableContext create_external_table() {
		Create_external_tableContext _localctx = new Create_external_tableContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_external_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			Match(CREATE);
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 805;
				Match(OR);
				State = 806;
				Match(REPLACE);
				}
			}

			State = 809;
			Match(EXTERNAL);
			State = 810;
			Match(TABLE);
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 811;
				Match(IF);
				State = 812;
				Match(NOT);
				State = 813;
				Match(EXISTS);
				}
			}

			State = 816;
			_localctx.table_name = path_expression();
			State = 821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 817;
				Match(OPAR);
				State = 818;
				_localctx.column_names = column_name_schemas();
				State = 819;
				Match(CPAR);
				}
			}

			State = 829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 823;
				Match(WITH);
				State = 824;
				Match(CONNECTION);
				State = 827;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BIGNUMERIC:
				case DATE:
				case DATETIME:
				case NUMERIC:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MILLISECOND:
				case MICROSECOND:
				case JSON:
				case OFFSET:
				case NAME:
				case STRICT:
				case CORRESPONDING:
				case DIFFERENTIAL_PRIVACY:
				case OPTIONS:
				case VALUE:
				case REPLACE:
				case SYSTEM:
				case PERCENT:
				case PIVOT:
				case UNPIVOT:
				case SYSTEM_TIME:
				case ROW:
				case INCLUDE:
				case FORMAT:
				case SETS:
				case AVG:
				case SCHEMA:
				case TEMP:
				case TEMPORARY:
				case TABLE:
				case CONSTRAINT:
				case ENFORCED:
				case PRIMARY:
				case KEY:
				case FOREIGN:
				case REFERENCES:
				case CLUSTER:
				case CONNECTION:
				case ARRAY_AGG:
				case COPY:
				case SNAPSHOT:
				case CLONE:
				case VIEW:
				case DROP:
				case SEARCH:
				case INDEX:
				case VECTOR:
				case ASSIGNMENT:
				case RESERVATION:
				case ACCESS:
				case POLICY:
				case POLICIES:
				case PROCEDURE:
				case FUNCTION:
				case REPLICA:
				case COLUMNS:
				case RETURNS:
				case DETERMINISTIC:
				case LANGUAGE:
				case REMOTE:
				case AGGREGATE:
				case TYPE:
				case OUT:
				case INOUT:
				case BEGIN:
				case SECURITY:
				case INVOKER:
				case COALESCE:
				case NULLIF:
				case IFNULL:
				case GRANT:
				case FILTER:
				case COLUMN:
				case STORING:
				case ALTER:
				case ADD:
				case RENAME:
				case UNQUOTED_IDENTIFIER:
				case QUOTED_IDENTIFIER:
					{
					State = 825;
					_localctx.connection_name = identifier();
					}
					break;
				case DEFAULT:
					{
					State = 826;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 831;
				Match(WITH);
				State = 832;
				Match(PARTITION);
				State = 833;
				Match(COLUMNS);
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPAR) {
					{
					State = 834;
					Match(OPAR);
					State = 835;
					_localctx.partition_columns = column_name_schemas();
					State = 836;
					Match(CPAR);
					}
				}

				}
			}

			State = 842;
			Match(OPTIONS);
			State = 843;
			Match(OPAR);
			State = 844;
			option_parameters();
			State = 845;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_schemasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemaContext[] column_name_schema() {
			return GetRuleContexts<Column_name_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemaContext column_name_schema(int i) {
			return GetRuleContext<Column_name_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_name_schemasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_schemas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_schemas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_schemas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_schemas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_schemasContext column_name_schemas() {
		Column_name_schemasContext _localctx = new Column_name_schemasContext(Context, State);
		EnterRule(_localctx, 28, RULE_column_name_schemas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			column_name_schema();
			State = 852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 848;
				Match(COMMA);
				State = 849;
				column_name_schema();
				}
				}
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_schemaContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Column_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_schemaContext column_name_schema() {
		Column_name_schemaContext _localctx = new Column_name_schemaContext(Context, State);
		EnterRule(_localctx, 30, RULE_column_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			_localctx.column_name = identifier();
			State = 856;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_functionContext create_function() {
		Create_functionContext _localctx = new Create_functionContext(Context, State);
		EnterRule(_localctx, 32, RULE_create_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			Match(CREATE);
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 859;
				Match(OR);
				State = 860;
				Match(REPLACE);
				}
			}

			State = 864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 863;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 866;
			Match(FUNCTION);
			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 867;
				Match(IF);
				State = 868;
				Match(NOT);
				State = 869;
				Match(EXISTS);
				}
			}

			State = 880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 875;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 872;
					_localctx.project_name = identifier();
					State = 873;
					Match(DOT);
					}
					break;
				}
				State = 877;
				_localctx.dataset_name = identifier();
				State = 878;
				Match(DOT);
				}
				break;
			}
			State = 882;
			_localctx.function_name = identifier();
			State = 883;
			Match(OPAR);
			State = 885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 884;
				named_parameters();
				}
			}

			State = 887;
			Match(CPAR);
			State = 890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 888;
				Match(RETURNS);
				State = 889;
				data_type();
				}
			}

			State = 892;
			Match(AS);
			State = 893;
			Match(OPAR);
			State = 894;
			expression(0);
			State = 895;
			Match(CPAR);
			State = 901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 896;
				Match(OPTIONS);
				State = 897;
				Match(OPAR);
				State = 898;
				option_parameters();
				State = 899;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_parameterContext[] named_parameter() {
			return GetRuleContexts<Named_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parameterContext named_parameter(int i) {
			return GetRuleContext<Named_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Named_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_parametersContext named_parameters() {
		Named_parametersContext _localctx = new Named_parametersContext(Context, State);
		EnterRule(_localctx, 34, RULE_named_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			named_parameter();
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 904;
				Match(COMMA);
				State = 905;
				named_parameter();
				}
				}
				State = 910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_parameterContext : ParserRuleContext {
		public IdentifierContext param_name;
		public Data_typeContext param_type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Named_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_parameterContext named_parameter() {
		Named_parameterContext _localctx = new Named_parameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_named_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			_localctx.param_name = identifier();
			State = 912;
			_localctx.param_type = data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_js_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		public String_literalContext javascript_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(BigQueryParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_js_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_js_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_js_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_js_functionContext create_js_function() {
		Create_js_functionContext _localctx = new Create_js_functionContext(Context, State);
		EnterRule(_localctx, 38, RULE_create_js_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			Match(CREATE);
			State = 917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 915;
				Match(OR);
				State = 916;
				Match(REPLACE);
				}
			}

			State = 920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 919;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 922;
			Match(FUNCTION);
			State = 926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 923;
				Match(IF);
				State = 924;
				Match(NOT);
				State = 925;
				Match(EXISTS);
				}
			}

			State = 936;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 931;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 928;
					_localctx.project_name = identifier();
					State = 929;
					Match(DOT);
					}
					break;
				}
				State = 933;
				_localctx.dataset_name = identifier();
				State = 934;
				Match(DOT);
				}
				break;
			}
			State = 938;
			_localctx.function_name = identifier();
			State = 939;
			Match(OPAR);
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 940;
				named_parameters();
				}
			}

			State = 943;
			Match(CPAR);
			State = 944;
			Match(RETURNS);
			State = 945;
			data_type();
			State = 949;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DETERMINISTIC:
				{
				State = 946;
				Match(DETERMINISTIC);
				}
				break;
			case NOT:
				{
				State = 947;
				Match(NOT);
				State = 948;
				Match(DETERMINISTIC);
				}
				break;
			case LANGUAGE:
				break;
			default:
				break;
			}
			State = 951;
			Match(LANGUAGE);
			State = 952;
			identifier();
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 953;
				Match(OPTIONS);
				State = 954;
				Match(OPAR);
				State = 955;
				option_parameters();
				State = 956;
				Match(CPAR);
				}
			}

			State = 960;
			Match(AS);
			State = 961;
			_localctx.javascript_code = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_py_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		public Path_expressionContext connection_path;
		public String_literalContext python_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Create_py_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_py_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_py_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_py_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_py_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_py_functionContext create_py_function() {
		Create_py_functionContext _localctx = new Create_py_functionContext(Context, State);
		EnterRule(_localctx, 40, RULE_create_py_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			Match(CREATE);
			State = 966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 964;
				Match(OR);
				State = 965;
				Match(REPLACE);
				}
			}

			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 968;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 971;
			Match(FUNCTION);
			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 972;
				Match(IF);
				State = 973;
				Match(NOT);
				State = 974;
				Match(EXISTS);
				}
			}

			State = 985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 980;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 977;
					_localctx.project_name = identifier();
					State = 978;
					Match(DOT);
					}
					break;
				}
				State = 982;
				_localctx.dataset_name = identifier();
				State = 983;
				Match(DOT);
				}
				break;
			}
			State = 987;
			_localctx.function_name = identifier();
			State = 988;
			Match(OPAR);
			State = 990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 989;
				named_parameters();
				}
			}

			State = 992;
			Match(CPAR);
			State = 993;
			Match(RETURNS);
			State = 994;
			data_type();
			State = 995;
			Match(LANGUAGE);
			State = 996;
			identifier();
			State = 1000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 997;
				Match(WITH);
				State = 998;
				Match(CONNECTION);
				State = 999;
				_localctx.connection_path = path_expression();
				}
			}

			State = 1002;
			Match(OPTIONS);
			State = 1003;
			Match(OPAR);
			State = 1004;
			option_parameters();
			State = 1005;
			Match(CPAR);
			State = 1006;
			Match(AS);
			State = 1007;
			_localctx.python_code = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		public Path_expressionContext connection_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_remote_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_remote_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_functionContext create_remote_function() {
		Create_remote_functionContext _localctx = new Create_remote_functionContext(Context, State);
		EnterRule(_localctx, 42, RULE_create_remote_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009;
			Match(CREATE);
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1010;
				Match(OR);
				State = 1011;
				Match(REPLACE);
				}
			}

			State = 1015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1014;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1017;
			Match(FUNCTION);
			State = 1021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1018;
				Match(IF);
				State = 1019;
				Match(NOT);
				State = 1020;
				Match(EXISTS);
				}
			}

			State = 1031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 1023;
					_localctx.project_name = identifier();
					State = 1024;
					Match(DOT);
					}
					break;
				}
				State = 1028;
				_localctx.dataset_name = identifier();
				State = 1029;
				Match(DOT);
				}
				break;
			}
			State = 1033;
			_localctx.function_name = identifier();
			State = 1034;
			Match(OPAR);
			State = 1036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 1035;
				named_parameters();
				}
			}

			State = 1038;
			Match(CPAR);
			State = 1039;
			Match(RETURNS);
			State = 1040;
			data_type();
			State = 1041;
			Match(REMOTE);
			State = 1042;
			Match(WITH);
			State = 1043;
			Match(CONNECTION);
			State = 1044;
			_localctx.connection_path = path_expression();
			State = 1050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1045;
				Match(OPTIONS);
				State = 1046;
				Match(OPAR);
				State = 1047;
				option_parameters();
				State = 1048;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_aggregate_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_aggregate_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_aggregate_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_aggregate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_aggregate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_aggregate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_aggregate_functionContext create_aggregate_function() {
		Create_aggregate_functionContext _localctx = new Create_aggregate_functionContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_aggregate_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			Match(CREATE);
			State = 1055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1053;
				Match(OR);
				State = 1054;
				Match(REPLACE);
				}
			}

			State = 1058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1057;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1060;
			Match(AGGREGATE);
			State = 1061;
			Match(FUNCTION);
			State = 1065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1062;
				Match(IF);
				State = 1063;
				Match(NOT);
				State = 1064;
				Match(EXISTS);
				}
			}

			State = 1075;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 1070;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 1067;
					_localctx.project_name = identifier();
					State = 1068;
					Match(DOT);
					}
					break;
				}
				State = 1072;
				_localctx.dataset_name = identifier();
				State = 1073;
				Match(DOT);
				}
				break;
			}
			State = 1077;
			_localctx.function_name = identifier();
			State = 1078;
			Match(OPAR);
			State = 1080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 1079;
				function_parameters();
				}
			}

			State = 1082;
			Match(CPAR);
			State = 1085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1083;
				Match(RETURNS);
				State = 1084;
				data_type();
				}
			}

			State = 1087;
			Match(AS);
			State = 1088;
			Match(OPAR);
			State = 1089;
			expression(0);
			State = 1090;
			Match(CPAR);
			State = 1096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1091;
				Match(OPTIONS);
				State = 1092;
				Match(OPAR);
				State = 1093;
				option_parameters();
				State = 1094;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parametersContext function_parameters() {
		Function_parametersContext _localctx = new Function_parametersContext(Context, State);
		EnterRule(_localctx, 46, RULE_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			function_parameter();
			State = 1103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1099;
				Match(COMMA);
				State = 1100;
				function_parameter();
				}
				}
				State = 1105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		public Path_expressionContext parameter_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 48, RULE_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106;
			_localctx.parameter_name = path_expression();
			State = 1107;
			data_type();
			State = 1110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1108;
				Match(NOT);
				State = 1109;
				Match(AGGREGATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_aggregate_js_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		public String_literalContext function_body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_aggregate_js_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_aggregate_js_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_aggregate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_aggregate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_aggregate_js_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_aggregate_js_functionContext create_aggregate_js_function() {
		Create_aggregate_js_functionContext _localctx = new Create_aggregate_js_functionContext(Context, State);
		EnterRule(_localctx, 50, RULE_create_aggregate_js_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			Match(CREATE);
			State = 1115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1113;
				Match(OR);
				State = 1114;
				Match(REPLACE);
				}
			}

			State = 1118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1117;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1120;
			Match(AGGREGATE);
			State = 1121;
			Match(FUNCTION);
			State = 1125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1122;
				Match(IF);
				State = 1123;
				Match(NOT);
				State = 1124;
				Match(EXISTS);
				}
			}

			State = 1135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 1130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
				case 1:
					{
					State = 1127;
					_localctx.project_name = identifier();
					State = 1128;
					Match(DOT);
					}
					break;
				}
				State = 1132;
				_localctx.dataset_name = identifier();
				State = 1133;
				Match(DOT);
				}
				break;
			}
			State = 1137;
			_localctx.function_name = identifier();
			State = 1138;
			Match(OPAR);
			State = 1140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 1139;
				function_parameters();
				}
			}

			State = 1142;
			Match(CPAR);
			State = 1143;
			Match(RETURNS);
			State = 1144;
			data_type();
			State = 1145;
			Match(LANGUAGE);
			State = 1146;
			identifier();
			State = 1152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1147;
				Match(OPTIONS);
				State = 1148;
				Match(OPAR);
				State = 1149;
				option_parameters();
				State = 1150;
				Match(CPAR);
				}
			}

			State = 1154;
			Match(AS);
			State = 1155;
			_localctx.function_body = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLE() { return GetTokens(BigQueryParser.TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE(int i) {
			return GetToken(BigQueryParser.TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parametersContext table_function_parameters() {
			return GetRuleContext<Table_function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationsContext column_declarations() {
			return GetRuleContext<Column_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_table_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_functionContext create_table_function() {
		Create_table_functionContext _localctx = new Create_table_functionContext(Context, State);
		EnterRule(_localctx, 52, RULE_create_table_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1157;
			Match(CREATE);
			State = 1160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1158;
				Match(OR);
				State = 1159;
				Match(REPLACE);
				}
			}

			State = 1162;
			Match(TABLE);
			State = 1163;
			Match(FUNCTION);
			State = 1167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1164;
				Match(IF);
				State = 1165;
				Match(NOT);
				State = 1166;
				Match(EXISTS);
				}
			}

			State = 1177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1172;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 1169;
					_localctx.project_name = identifier();
					State = 1170;
					Match(DOT);
					}
					break;
				}
				State = 1174;
				_localctx.dataset_name = identifier();
				State = 1175;
				Match(DOT);
				}
				break;
			}
			State = 1179;
			_localctx.function_name = identifier();
			State = 1180;
			Match(OPAR);
			State = 1182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 1181;
				table_function_parameters();
				}
			}

			State = 1184;
			Match(CPAR);
			State = 1191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1185;
				Match(RETURNS);
				State = 1186;
				Match(TABLE);
				State = 1187;
				Match(LT);
				State = 1188;
				column_declarations();
				State = 1189;
				Match(GT);
				}
			}

			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1193;
				Match(OPTIONS);
				State = 1194;
				Match(OPAR);
				State = 1195;
				option_parameters();
				State = 1196;
				Match(CPAR);
				}
			}

			State = 1200;
			Match(AS);
			State = 1201;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parameterContext[] table_function_parameter() {
			return GetRuleContexts<Table_function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parameterContext table_function_parameter(int i) {
			return GetRuleContext<Table_function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Table_function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTable_function_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTable_function_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_parametersContext table_function_parameters() {
		Table_function_parametersContext _localctx = new Table_function_parametersContext(Context, State);
		EnterRule(_localctx, 54, RULE_table_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203;
			table_function_parameter();
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1204;
				Match(COMMA);
				State = 1205;
				table_function_parameter();
				}
				}
				State = 1210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_parameterContext : ParserRuleContext {
		public Path_expressionContext parameter_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		public Table_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTable_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTable_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_parameterContext table_function_parameter() {
		Table_function_parameterContext _localctx = new Table_function_parameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_table_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211;
			_localctx.parameter_name = path_expression();
			State = 1215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
			case STRUCT:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 1212;
				data_type();
				}
				break;
			case ANY:
				{
				State = 1213;
				Match(ANY);
				State = 1214;
				Match(TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationsContext column_declarations() {
		Column_declarationsContext _localctx = new Column_declarationsContext(Context, State);
		EnterRule(_localctx, 58, RULE_column_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217;
			column_declaration();
			State = 1222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1218;
				Match(COMMA);
				State = 1219;
				column_declaration();
				}
				}
				State = 1224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(Context, State);
		EnterRule(_localctx, 60, RULE_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1225;
			_localctx.column_name = path_expression();
			State = 1226;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentsContext procedure_arguments() {
			return GetRuleContext<Procedure_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public Create_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedureContext create_procedure() {
		Create_procedureContext _localctx = new Create_procedureContext(Context, State);
		EnterRule(_localctx, 62, RULE_create_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228;
			Match(CREATE);
			State = 1231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1229;
				Match(OR);
				State = 1230;
				Match(REPLACE);
				}
			}

			State = 1233;
			Match(PROCEDURE);
			State = 1237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1234;
				Match(IF);
				State = 1235;
				Match(NOT);
				State = 1236;
				Match(EXISTS);
				}
			}

			State = 1247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 1242;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 1239;
					_localctx.project_name = identifier();
					State = 1240;
					Match(DOT);
					}
					break;
				}
				State = 1244;
				_localctx.dataset_name = identifier();
				State = 1245;
				Match(DOT);
				}
				break;
			}
			State = 1249;
			_localctx.function_name = identifier();
			State = 1250;
			Match(OPAR);
			State = 1252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -9007199254740991L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & -139681957192663041L) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & 851967L) != 0)) {
				{
				State = 1251;
				procedure_arguments();
				}
			}

			State = 1254;
			Match(CPAR);
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1255;
				Match(OPTIONS);
				State = 1256;
				Match(OPAR);
				State = 1257;
				option_parameters();
				State = 1258;
				Match(CPAR);
				}
			}

			State = 1262;
			Match(BEGIN);
			State = 1266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 1263;
				Match(SCOL);
				}
				}
				State = 1268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1269;
			statement();
			State = 1278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1271;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 1270;
						Match(SCOL);
						}
						}
						State = 1273;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 1275;
					statement();
					}
					} 
				}
				State = 1280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			}
			State = 1284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 1281;
				Match(SCOL);
				}
				}
				State = 1286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1287;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentContext[] procedure_argument() {
			return GetRuleContexts<Procedure_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentContext procedure_argument(int i) {
			return GetRuleContext<Procedure_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Procedure_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedure_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedure_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_argumentsContext procedure_arguments() {
		Procedure_argumentsContext _localctx = new Procedure_argumentsContext(Context, State);
		EnterRule(_localctx, 64, RULE_procedure_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			procedure_argument();
			State = 1294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1290;
				Match(COMMA);
				State = 1291;
				procedure_argument();
				}
				}
				State = 1296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_argumentContext : ParserRuleContext {
		public Path_expressionContext argument_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(BigQueryParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(BigQueryParser.INOUT, 0); }
		public Procedure_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedure_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedure_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_argumentContext procedure_argument() {
		Procedure_argumentContext _localctx = new Procedure_argumentContext(Context, State);
		EnterRule(_localctx, 66, RULE_procedure_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				{
				State = 1297;
				_la = TokenStream.LA(1);
				if ( !(_la==IN || _la==OUT || _la==INOUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1300;
			_localctx.argument_name = path_expression();
			State = 1301;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_stored_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		public IdentifierContext language;
		public String_literalContext pyspark_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentsContext procedure_arguments() {
			return GetRuleContext<Procedure_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(BigQueryParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(BigQueryParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_stored_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_stored_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_stored_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_stored_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_stored_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_stored_procedureContext create_stored_procedure() {
		Create_stored_procedureContext _localctx = new Create_stored_procedureContext(Context, State);
		EnterRule(_localctx, 68, RULE_create_stored_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			Match(CREATE);
			State = 1306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1304;
				Match(OR);
				State = 1305;
				Match(REPLACE);
				}
			}

			State = 1308;
			Match(PROCEDURE);
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1309;
				Match(IF);
				State = 1310;
				Match(NOT);
				State = 1311;
				Match(EXISTS);
				}
			}

			State = 1322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
				case 1:
					{
					State = 1314;
					_localctx.project_name = identifier();
					State = 1315;
					Match(DOT);
					}
					break;
				}
				State = 1319;
				_localctx.dataset_name = identifier();
				State = 1320;
				Match(DOT);
				}
				break;
			}
			State = 1324;
			_localctx.function_name = identifier();
			State = 1325;
			Match(OPAR);
			State = 1327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -9007199254740991L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & -139681957192663041L) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & 851967L) != 0)) {
				{
				State = 1326;
				procedure_arguments();
				}
			}

			State = 1329;
			Match(CPAR);
			State = 1333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 1330;
				Match(EXTERNAL);
				State = 1331;
				Match(SECURITY);
				State = 1332;
				Match(INVOKER);
				}
			}

			State = 1335;
			Match(WITH);
			State = 1336;
			Match(CONNECTION);
			State = 1337;
			path_expression();
			State = 1343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1338;
				Match(OPTIONS);
				State = 1339;
				Match(OPAR);
				State = 1340;
				option_parameters();
				State = 1341;
				Match(CPAR);
				}
			}

			State = 1345;
			Match(LANGUAGE);
			State = 1346;
			_localctx.language = identifier();
			State = 1349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1347;
				Match(AS);
				State = 1348;
				_localctx.pyspark_code = string_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_row_access_policyContext : ParserRuleContext {
		public Path_expressionContext row_access_policy_name;
		public Path_expressionContext table_name;
		public ExpressionsContext grantee_list;
		public ExpressionContext filter_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(BigQueryParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Create_row_access_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_row_access_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_row_access_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_row_access_policyContext create_row_access_policy() {
		Create_row_access_policyContext _localctx = new Create_row_access_policyContext(Context, State);
		EnterRule(_localctx, 70, RULE_create_row_access_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1351;
			Match(CREATE);
			State = 1354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1352;
				Match(OR);
				State = 1353;
				Match(REPLACE);
				}
			}

			State = 1356;
			Match(ROW);
			State = 1357;
			Match(ACCESS);
			State = 1358;
			Match(POLICY);
			State = 1362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1359;
				Match(IF);
				State = 1360;
				Match(NOT);
				State = 1361;
				Match(EXISTS);
				}
			}

			State = 1364;
			_localctx.row_access_policy_name = path_expression();
			State = 1365;
			Match(ON);
			State = 1366;
			_localctx.table_name = path_expression();
			State = 1373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GRANT) {
				{
				State = 1367;
				Match(GRANT);
				State = 1368;
				Match(TO);
				State = 1369;
				Match(OPAR);
				State = 1370;
				_localctx.grantee_list = expressions();
				State = 1371;
				Match(CPAR);
				}
			}

			State = 1375;
			Match(FILTER);
			State = 1376;
			Match(USING);
			State = 1377;
			Match(OPAR);
			State = 1378;
			_localctx.filter_expression = expression(0);
			State = 1379;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_capacityContext create_capacity() {
		Create_capacityContext _localctx = new Create_capacityContext(Context, State);
		EnterRule(_localctx, 72, RULE_create_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			Match(CREATE);
			State = 1382;
			Match(CAPACITY);
			State = 1383;
			expression(0);
			State = 1384;
			Match(OPTIONS);
			State = 1385;
			Match(OPAR);
			State = 1386;
			option_parameters();
			State = 1387;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_reservationContext create_reservation() {
		Create_reservationContext _localctx = new Create_reservationContext(Context, State);
		EnterRule(_localctx, 74, RULE_create_reservation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1389;
			Match(CREATE);
			State = 1390;
			Match(RESERVATION);
			State = 1391;
			expression(0);
			State = 1392;
			Match(OPTIONS);
			State = 1393;
			Match(OPAR);
			State = 1394;
			option_parameters();
			State = 1395;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_assignmentContext create_assignment() {
		Create_assignmentContext _localctx = new Create_assignmentContext(Context, State);
		EnterRule(_localctx, 76, RULE_create_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397;
			Match(CREATE);
			State = 1398;
			Match(ASSIGNMENT);
			State = 1399;
			expression(0);
			State = 1400;
			Match(OPTIONS);
			State = 1401;
			Match(OPAR);
			State = 1402;
			option_parameters();
			State = 1403;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTIONS() { return GetTokens(BigQueryParser.OPTIONS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS(int i) {
			return GetToken(BigQueryParser.OPTIONS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		public Create_search_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_search_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_indexContext create_search_index() {
		Create_search_indexContext _localctx = new Create_search_indexContext(Context, State);
		EnterRule(_localctx, 78, RULE_create_search_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405;
			Match(CREATE);
			State = 1406;
			Match(SEARCH);
			State = 1407;
			Match(INDEX);
			State = 1411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1408;
				Match(IF);
				State = 1409;
				Match(NOT);
				State = 1410;
				Match(EXISTS);
				}
			}

			State = 1413;
			_localctx.index_name = path_expression();
			State = 1414;
			Match(ON);
			State = 1415;
			_localctx.table_name = path_expression();
			State = 1416;
			Match(OPAR);
			State = 1429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 1417;
				Match(ALL);
				State = 1418;
				Match(COLUMNS);
				State = 1426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1419;
					Match(WITH);
					State = 1420;
					Match(COLUMN);
					State = 1421;
					Match(OPTIONS);
					State = 1422;
					Match(OPAR);
					State = 1423;
					columns();
					State = 1424;
					Match(CPAR);
					}
				}

				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 1428;
				columns();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1431;
			Match(CPAR);
			State = 1437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1432;
				Match(OPTIONS);
				State = 1433;
				Match(OPAR);
				State = 1434;
				option_parameters();
				State = 1435;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsContext columns() {
		ColumnsContext _localctx = new ColumnsContext(Context, State);
		EnterRule(_localctx, 80, RULE_columns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439;
			column();
			State = 1444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1440;
				Match(COMMA);
				State = 1441;
				column();
				}
				}
				State = 1446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 82, RULE_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447;
			_localctx.column_name = path_expression();
			State = 1449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 1448;
				data_type();
				}
				break;
			}
			State = 1456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1451;
				Match(OPTIONS);
				State = 1452;
				Match(OPAR);
				State = 1453;
				option_parameters();
				State = 1454;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_vector_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORING() { return GetToken(BigQueryParser.STORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Create_vector_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_vector_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_vector_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_vector_indexContext create_vector_index() {
		Create_vector_indexContext _localctx = new Create_vector_indexContext(Context, State);
		EnterRule(_localctx, 84, RULE_create_vector_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458;
			Match(CREATE);
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1459;
				Match(OR);
				State = 1460;
				Match(REPLACE);
				}
			}

			State = 1463;
			Match(VECTOR);
			State = 1464;
			Match(INDEX);
			State = 1468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1465;
				Match(IF);
				State = 1466;
				Match(NOT);
				State = 1467;
				Match(EXISTS);
				}
			}

			State = 1470;
			_localctx.index_name = path_expression();
			State = 1471;
			Match(ON);
			State = 1472;
			_localctx.table_name = path_expression();
			State = 1473;
			Match(OPAR);
			State = 1474;
			_localctx.column_name = path_expression();
			State = 1475;
			Match(CPAR);
			State = 1481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORING) {
				{
				State = 1476;
				Match(STORING);
				State = 1477;
				Match(OPAR);
				State = 1478;
				path_expressions();
				State = 1479;
				Match(CPAR);
				}
			}

			State = 1483;
			Match(OPTIONS);
			State = 1484;
			Match(OPAR);
			State = 1485;
			option_parameters();
			State = 1486;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_set_default_collateContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Alter_schema_set_default_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_set_default_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_set_default_collate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_set_default_collateContext alter_schema_set_default_collate() {
		Alter_schema_set_default_collateContext _localctx = new Alter_schema_set_default_collateContext(Context, State);
		EnterRule(_localctx, 86, RULE_alter_schema_set_default_collate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488;
			Match(ALTER);
			State = 1489;
			Match(SCHEMA);
			State = 1492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1490;
				Match(IF);
				State = 1491;
				Match(EXISTS);
				}
			}

			State = 1497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1494;
				_localctx.project_name = identifier();
				State = 1495;
				Match(DOT);
				}
				break;
			}
			State = 1499;
			_localctx.dataset_name = identifier();
			State = 1500;
			Match(SET);
			State = 1501;
			Match(DEFAULT);
			State = 1502;
			Match(COLLATE);
			State = 1503;
			_localctx.collate_specification = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_set_optionsContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Alter_schema_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_set_optionsContext alter_schema_set_options() {
		Alter_schema_set_optionsContext _localctx = new Alter_schema_set_optionsContext(Context, State);
		EnterRule(_localctx, 88, RULE_alter_schema_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1505;
			Match(ALTER);
			State = 1506;
			Match(SCHEMA);
			State = 1509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1507;
				Match(IF);
				State = 1508;
				Match(EXISTS);
				}
			}

			State = 1514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 1511;
				_localctx.project_name = identifier();
				State = 1512;
				Match(DOT);
				}
				break;
			}
			State = 1516;
			_localctx.dataset_name = identifier();
			State = 1517;
			Match(SET);
			State = 1518;
			Match(OPTIONS);
			State = 1519;
			Match(OPAR);
			State = 1520;
			option_parameters();
			State = 1521;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_add_replicaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext replica_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_schema_add_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_add_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_add_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_add_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_add_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_add_replicaContext alter_schema_add_replica() {
		Alter_schema_add_replicaContext _localctx = new Alter_schema_add_replicaContext(Context, State);
		EnterRule(_localctx, 90, RULE_alter_schema_add_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1523;
			Match(ALTER);
			State = 1524;
			Match(SCHEMA);
			State = 1527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1525;
				Match(IF);
				State = 1526;
				Match(EXISTS);
				}
			}

			State = 1532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 1529;
				_localctx.project_name = identifier();
				State = 1530;
				Match(DOT);
				}
				break;
			}
			State = 1534;
			_localctx.dataset_name = identifier();
			State = 1535;
			Match(ADD);
			State = 1536;
			Match(REPLICA);
			State = 1537;
			_localctx.replica_name = path_expression();
			State = 1543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1538;
				Match(OPTIONS);
				State = 1539;
				Match(OPAR);
				State = 1540;
				option_parameters();
				State = 1541;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_drop_replicaContext : ParserRuleContext {
		public Path_expressionContext dataset_name;
		public ExpressionContext replica_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_schema_drop_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_drop_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_drop_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_drop_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_drop_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_drop_replicaContext alter_schema_drop_replica() {
		Alter_schema_drop_replicaContext _localctx = new Alter_schema_drop_replicaContext(Context, State);
		EnterRule(_localctx, 92, RULE_alter_schema_drop_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545;
			Match(ALTER);
			State = 1546;
			Match(SCHEMA);
			State = 1549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1547;
				Match(IF);
				State = 1548;
				Match(EXISTS);
				}
			}

			State = 1551;
			_localctx.dataset_name = path_expression();
			State = 1552;
			Match(DROP);
			State = 1553;
			Match(REPLICA);
			State = 1554;
			_localctx.replica_name = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_optionsContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_optionsContext alter_table_set_options() {
		Alter_table_set_optionsContext _localctx = new Alter_table_set_optionsContext(Context, State);
		EnterRule(_localctx, 94, RULE_alter_table_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1556;
			Match(ALTER);
			State = 1557;
			Match(TABLE);
			State = 1560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1558;
				Match(IF);
				State = 1559;
				Match(EXISTS);
				}
			}

			State = 1562;
			_localctx.table_name = path_expression();
			State = 1563;
			Match(SET);
			State = 1564;
			Match(OPTIONS);
			State = 1565;
			Match(OPAR);
			State = 1566;
			option_parameters();
			State = 1567;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(BigQueryParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(BigQueryParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLUMN() { return GetTokens(BigQueryParser.COLUMN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN(int i) {
			return GetToken(BigQueryParser.COLUMN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_add_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_columnContext alter_table_add_column() {
		Alter_table_add_columnContext _localctx = new Alter_table_add_columnContext(Context, State);
		EnterRule(_localctx, 96, RULE_alter_table_add_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569;
			Match(ALTER);
			State = 1570;
			Match(TABLE);
			State = 1571;
			_localctx.table_name = path_expression();
			State = 1572;
			Match(ADD);
			State = 1573;
			Match(COLUMN);
			State = 1577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1574;
				Match(IF);
				State = 1575;
				Match(NOT);
				State = 1576;
				Match(EXISTS);
				}
			}

			State = 1579;
			column();
			State = 1591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1580;
				Match(COMMA);
				State = 1581;
				Match(ADD);
				State = 1582;
				Match(COLUMN);
				State = 1586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1583;
					Match(IF);
					State = 1584;
					Match(NOT);
					State = 1585;
					Match(EXISTS);
					}
				}

				State = 1588;
				column();
				}
				}
				State = 1593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_foreign_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Add_foreign_keyContext[] add_foreign_key() {
			return GetRuleContexts<Add_foreign_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_foreign_keyContext add_foreign_key(int i) {
			return GetRuleContext<Add_foreign_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_add_foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_foreign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_foreign_keyContext alter_table_add_foreign_key() {
		Alter_table_add_foreign_keyContext _localctx = new Alter_table_add_foreign_keyContext(Context, State);
		EnterRule(_localctx, 98, RULE_alter_table_add_foreign_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594;
			Match(ALTER);
			State = 1595;
			Match(TABLE);
			State = 1604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 1599;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
				case 1:
					{
					State = 1596;
					_localctx.project_name = identifier();
					State = 1597;
					Match(DOT);
					}
					break;
				}
				State = 1601;
				_localctx.dataset_name = identifier();
				State = 1602;
				Match(DOT);
				}
				break;
			}
			State = 1606;
			_localctx.fk_table_name = identifier();
			State = 1607;
			add_foreign_key();
			State = 1612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1608;
				Match(COMMA);
				State = 1609;
				add_foreign_key();
				}
				}
				State = 1614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_foreign_keyContext : ParserRuleContext {
		public IdentifierContext constraint_name;
		public IdentifierContext pk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext[] columns() {
			return GetRuleContexts<ColumnsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns(int i) {
			return GetRuleContext<ColumnsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		public Add_foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAdd_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAdd_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_foreign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_foreign_keyContext add_foreign_key() {
		Add_foreign_keyContext _localctx = new Add_foreign_keyContext(Context, State);
		EnterRule(_localctx, 100, RULE_add_foreign_key);
		int _la;
		try {
			State = 1647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1615;
				Match(ADD);
				State = 1623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1616;
					Match(CONSTRAINT);
					State = 1620;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IF) {
						{
						State = 1617;
						Match(IF);
						State = 1618;
						Match(NOT);
						State = 1619;
						Match(EXISTS);
						}
					}

					State = 1622;
					_localctx.constraint_name = identifier();
					}
				}

				State = 1625;
				Match(FOREIGN);
				State = 1626;
				Match(KEY);
				State = 1627;
				Match(OPAR);
				State = 1628;
				columns();
				State = 1629;
				Match(CPAR);
				State = 1630;
				Match(REFERENCES);
				State = 1631;
				_localctx.pk_table_name = identifier();
				State = 1632;
				Match(OPAR);
				State = 1633;
				columns();
				State = 1634;
				Match(CPAR);
				State = 1635;
				Match(NOT);
				State = 1636;
				Match(ENFORCED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1638;
				Match(ADD);
				State = 1639;
				Match(PRIMARY);
				State = 1640;
				Match(KEY);
				State = 1641;
				Match(OPAR);
				State = 1642;
				columns();
				State = 1643;
				Match(CPAR);
				State = 1644;
				Match(NOT);
				State = 1645;
				Match(ENFORCED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_primary_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Alter_table_add_primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_primary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_primary_keyContext alter_table_add_primary_key() {
		Alter_table_add_primary_keyContext _localctx = new Alter_table_add_primary_keyContext(Context, State);
		EnterRule(_localctx, 102, RULE_alter_table_add_primary_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1649;
			Match(ALTER);
			State = 1650;
			Match(TABLE);
			State = 1659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
			case 1:
				{
				State = 1654;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
				case 1:
					{
					State = 1651;
					_localctx.project_name = identifier();
					State = 1652;
					Match(DOT);
					}
					break;
				}
				State = 1656;
				_localctx.dataset_name = identifier();
				State = 1657;
				Match(DOT);
				}
				break;
			}
			State = 1661;
			_localctx.fk_table_name = identifier();
			State = 1662;
			Match(ADD);
			State = 1663;
			Match(PRIMARY);
			State = 1664;
			Match(KEY);
			State = 1665;
			Match(OPAR);
			State = 1666;
			columns();
			State = 1667;
			Match(CPAR);
			State = 1668;
			Match(NOT);
			State = 1669;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_renameContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Path_expressionContext new_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_renameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_rename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_renameContext alter_table_rename() {
		Alter_table_renameContext _localctx = new Alter_table_renameContext(Context, State);
		EnterRule(_localctx, 104, RULE_alter_table_rename);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1671;
			Match(ALTER);
			State = 1672;
			Match(TABLE);
			State = 1675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1673;
				Match(IF);
				State = 1674;
				Match(EXISTS);
				}
			}

			State = 1677;
			_localctx.table_name = path_expression();
			State = 1678;
			Match(RENAME);
			State = 1679;
			Match(TO);
			State = 1680;
			_localctx.new_table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_rename_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rename_columnContext[] rename_column() {
			return GetRuleContexts<Rename_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rename_columnContext rename_column(int i) {
			return GetRuleContext<Rename_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_rename_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_rename_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_rename_columnContext alter_table_rename_column() {
		Alter_table_rename_columnContext _localctx = new Alter_table_rename_columnContext(Context, State);
		EnterRule(_localctx, 106, RULE_alter_table_rename_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682;
			Match(ALTER);
			State = 1683;
			Match(TABLE);
			State = 1686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1684;
				Match(IF);
				State = 1685;
				Match(EXISTS);
				}
			}

			State = 1688;
			_localctx.table_name = path_expression();
			State = 1689;
			rename_column();
			State = 1694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1690;
				Match(COMMA);
				State = 1691;
				rename_column();
				}
				}
				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rename_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_to_columnContext[] column_to_column() {
			return GetRuleContexts<Column_to_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_to_columnContext column_to_column(int i) {
			return GetRuleContext<Column_to_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Rename_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rename_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRename_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rename_columnContext rename_column() {
		Rename_columnContext _localctx = new Rename_columnContext(Context, State);
		EnterRule(_localctx, 108, RULE_rename_column);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1697;
			Match(RENAME);
			State = 1698;
			Match(COLUMN);
			State = 1701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1699;
				Match(IF);
				State = 1700;
				Match(EXISTS);
				}
			}

			State = 1703;
			column_to_column();
			State = 1708;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1704;
					Match(COMMA);
					State = 1705;
					column_to_column();
					}
					} 
				}
				State = 1710;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_to_columnContext : ParserRuleContext {
		public IdentifierContext column_name;
		public IdentifierContext new_column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_to_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_to_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_to_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_to_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_to_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_to_columnContext column_to_column() {
		Column_to_columnContext _localctx = new Column_to_columnContext(Context, State);
		EnterRule(_localctx, 110, RULE_column_to_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711;
			_localctx.column_name = identifier();
			State = 1712;
			Match(TO);
			State = 1713;
			_localctx.new_column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_columnContext[] drop_column() {
			return GetRuleContexts<Drop_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_columnContext drop_column(int i) {
			return GetRuleContext<Drop_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_columnContext alter_table_drop_column() {
		Alter_table_drop_columnContext _localctx = new Alter_table_drop_columnContext(Context, State);
		EnterRule(_localctx, 112, RULE_alter_table_drop_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715;
			Match(ALTER);
			State = 1716;
			Match(TABLE);
			State = 1717;
			_localctx.table_name = path_expression();
			State = 1718;
			drop_column();
			State = 1723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1719;
				Match(COMMA);
				State = 1720;
				drop_column();
				}
				}
				State = 1725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_columnContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_columnContext drop_column() {
		Drop_columnContext _localctx = new Drop_columnContext(Context, State);
		EnterRule(_localctx, 114, RULE_drop_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726;
			Match(DROP);
			State = 1727;
			Match(COLUMN);
			State = 1730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1728;
				Match(IF);
				State = 1729;
				Match(EXISTS);
				}
			}

			State = 1732;
			_localctx.column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_constraintContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		public ExpressionContext constraint_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_drop_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_constraintContext alter_table_drop_constraint() {
		Alter_table_drop_constraintContext _localctx = new Alter_table_drop_constraintContext(Context, State);
		EnterRule(_localctx, 116, RULE_alter_table_drop_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1734;
			Match(ALTER);
			State = 1735;
			Match(TABLE);
			State = 1744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				{
				State = 1739;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1736;
					_localctx.project_name = identifier();
					State = 1737;
					Match(DOT);
					}
					break;
				}
				State = 1741;
				_localctx.dataset_name = identifier();
				State = 1742;
				Match(DOT);
				}
				break;
			}
			State = 1746;
			_localctx.fk_table_name = identifier();
			State = 1747;
			Match(DROP);
			State = 1748;
			Match(CONSTRAINT);
			State = 1751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 1749;
				Match(IF);
				State = 1750;
				Match(EXISTS);
				}
				break;
			}
			State = 1753;
			_localctx.constraint_name = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_primary_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_drop_primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_primary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_primary_keyContext alter_table_drop_primary_key() {
		Alter_table_drop_primary_keyContext _localctx = new Alter_table_drop_primary_keyContext(Context, State);
		EnterRule(_localctx, 118, RULE_alter_table_drop_primary_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			Match(ALTER);
			State = 1756;
			Match(TABLE);
			State = 1765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				{
				State = 1760;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1757;
					_localctx.project_name = identifier();
					State = 1758;
					Match(DOT);
					}
					break;
				}
				State = 1762;
				_localctx.dataset_name = identifier();
				State = 1763;
				Match(DOT);
				}
				break;
			}
			State = 1767;
			_localctx.fk_table_name = identifier();
			State = 1768;
			Match(DROP);
			State = 1769;
			Match(PRIMARY);
			State = 1770;
			Match(KEY);
			State = 1773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1771;
				Match(IF);
				State = 1772;
				Match(EXISTS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_default_collateContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Alter_table_set_default_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_default_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_set_default_collate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_default_collateContext alter_table_set_default_collate() {
		Alter_table_set_default_collateContext _localctx = new Alter_table_set_default_collateContext(Context, State);
		EnterRule(_localctx, 120, RULE_alter_table_set_default_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775;
			Match(ALTER);
			State = 1776;
			Match(TABLE);
			State = 1777;
			_localctx.table_name = path_expression();
			State = 1778;
			Match(SET);
			State = 1779;
			Match(DEFAULT);
			State = 1780;
			Match(COLLATE);
			State = 1781;
			_localctx.collate_specification = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_table_column_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_optionsContext alter_table_column_set_options() {
		Alter_table_column_set_optionsContext _localctx = new Alter_table_column_set_optionsContext(Context, State);
		EnterRule(_localctx, 122, RULE_alter_table_column_set_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1783;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_drop_not_nullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_table_column_drop_not_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_drop_not_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_drop_not_null(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_drop_not_nullContext alter_table_column_drop_not_null() {
		Alter_table_column_drop_not_nullContext _localctx = new Alter_table_column_drop_not_nullContext(Context, State);
		EnterRule(_localctx, 124, RULE_alter_table_column_drop_not_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1785;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_table_column_set_data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_data_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_data_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_data_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_data_typeContext alter_table_column_set_data_type() {
		Alter_table_column_set_data_typeContext _localctx = new Alter_table_column_set_data_typeContext(Context, State);
		EnterRule(_localctx, 126, RULE_alter_table_column_set_data_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_table_column_set_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_defaultContext alter_table_column_set_default() {
		Alter_table_column_set_defaultContext _localctx = new Alter_table_column_set_defaultContext(Context, State);
		EnterRule(_localctx, 128, RULE_alter_table_column_set_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_drop_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_table_column_drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_drop_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_drop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_drop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_drop_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_drop_defaultContext alter_table_column_drop_default() {
		Alter_table_column_drop_defaultContext _localctx = new Alter_table_column_drop_defaultContext(Context, State);
		EnterRule(_localctx, 130, RULE_alter_table_column_drop_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1791;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_viewContext alter_view() {
		Alter_viewContext _localctx = new Alter_viewContext(Context, State);
		EnterRule(_localctx, 132, RULE_alter_view);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_materialized_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_materialized_viewContext alter_materialized_view() {
		Alter_materialized_viewContext _localctx = new Alter_materialized_viewContext(Context, State);
		EnterRule(_localctx, 134, RULE_alter_materialized_view);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1795;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_organicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_organicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_organication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_organication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_organication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_organication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_organicationContext alter_organication() {
		Alter_organicationContext _localctx = new Alter_organicationContext(Context, State);
		EnterRule(_localctx, 136, RULE_alter_organication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1797;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_projectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_projectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_project; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_project(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_project(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_project(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_projectContext alter_project() {
		Alter_projectContext _localctx = new Alter_projectContext(Context, State);
		EnterRule(_localctx, 138, RULE_alter_project);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1799;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_bi_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_bi_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_bi_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_bi_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_bi_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_bi_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_bi_capacityContext alter_bi_capacity() {
		Alter_bi_capacityContext _localctx = new Alter_bi_capacityContext(Context, State);
		EnterRule(_localctx, 140, RULE_alter_bi_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_capacityContext alter_capacity() {
		Alter_capacityContext _localctx = new Alter_capacityContext(Context, State);
		EnterRule(_localctx, 142, RULE_alter_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Alter_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_reservationContext alter_reservation() {
		Alter_reservationContext _localctx = new Alter_reservationContext(Context, State);
		EnterRule(_localctx, 144, RULE_alter_reservation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1805;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Undrop_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDROP() { return GetToken(BigQueryParser.UNDROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Undrop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undrop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUndrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUndrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Undrop_schemaContext undrop_schema() {
		Undrop_schemaContext _localctx = new Undrop_schemaContext(Context, State);
		EnterRule(_localctx, 146, RULE_undrop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807;
			Match(UNDROP);
			State = 1808;
			Match(SCHEMA);
			State = 1812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1809;
				Match(IF);
				State = 1810;
				Match(NOT);
				State = 1811;
				Match(EXISTS);
				}
			}

			State = 1817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 1814;
				_localctx.project_name = identifier();
				State = 1815;
				Match(DOT);
				}
				break;
			}
			State = 1819;
			_localctx.dataset_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(BigQueryParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(BigQueryParser.RESTRICT, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(Context, State);
		EnterRule(_localctx, 148, RULE_drop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821;
			Match(DROP);
			State = 1823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 1822;
				Match(EXTERNAL);
				}
			}

			State = 1825;
			Match(SCHEMA);
			State = 1828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1826;
				Match(IF);
				State = 1827;
				Match(EXISTS);
				}
			}

			State = 1833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 1830;
				_localctx.project_name = identifier();
				State = 1831;
				Match(DOT);
				}
				break;
			}
			State = 1835;
			_localctx.dataset_name = identifier();
			State = 1837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 1836;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 150, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1839;
			Match(DROP);
			State = 1840;
			Match(TABLE);
			State = 1843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1841;
				Match(IF);
				State = 1842;
				Match(EXISTS);
				}
			}

			State = 1845;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_snapshot_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_snapshot_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_snapshot_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_snapshot_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_snapshot_tableContext drop_snapshot_table() {
		Drop_snapshot_tableContext _localctx = new Drop_snapshot_tableContext(Context, State);
		EnterRule(_localctx, 152, RULE_drop_snapshot_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1847;
			Match(DROP);
			State = 1848;
			Match(SNAPSHOT);
			State = 1849;
			Match(TABLE);
			State = 1852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1850;
				Match(IF);
				State = 1851;
				Match(EXISTS);
				}
			}

			State = 1854;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(Context, State);
		EnterRule(_localctx, 154, RULE_drop_external_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856;
			Match(DROP);
			State = 1857;
			Match(EXTERNAL);
			State = 1858;
			Match(TABLE);
			State = 1861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1859;
				Match(IF);
				State = 1860;
				Match(EXISTS);
				}
			}

			State = 1863;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 156, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1865;
			Match(DROP);
			State = 1866;
			Match(VIEW);
			State = 1869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1867;
				Match(IF);
				State = 1868;
				Match(EXISTS);
				}
			}

			State = 1871;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_materialized_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_materialized_viewContext drop_materialized_view() {
		Drop_materialized_viewContext _localctx = new Drop_materialized_viewContext(Context, State);
		EnterRule(_localctx, 158, RULE_drop_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1873;
			Match(DROP);
			State = 1874;
			Match(MATERIALIZED);
			State = 1875;
			Match(VIEW);
			State = 1878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1876;
				Match(IF);
				State = 1877;
				Match(EXISTS);
				}
			}

			State = 1880;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 160, RULE_drop_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882;
			Match(DROP);
			State = 1883;
			Match(FUNCTION);
			State = 1886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1884;
				Match(IF);
				State = 1885;
				Match(EXISTS);
				}
			}

			State = 1896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				{
				State = 1891;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
				case 1:
					{
					State = 1888;
					_localctx.project_name = identifier();
					State = 1889;
					Match(DOT);
					}
					break;
				}
				State = 1893;
				_localctx.dataset_name = identifier();
				State = 1894;
				Match(DOT);
				}
				break;
			}
			State = 1898;
			_localctx.function_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext function_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_table_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_functionContext drop_table_function() {
		Drop_table_functionContext _localctx = new Drop_table_functionContext(Context, State);
		EnterRule(_localctx, 162, RULE_drop_table_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1900;
			Match(DROP);
			State = 1901;
			Match(TABLE);
			State = 1902;
			Match(FUNCTION);
			State = 1905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1903;
				Match(IF);
				State = 1904;
				Match(EXISTS);
				}
			}

			State = 1915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 1910;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
				case 1:
					{
					State = 1907;
					_localctx.project_name = identifier();
					State = 1908;
					Match(DOT);
					}
					break;
				}
				State = 1912;
				_localctx.dataset_name = identifier();
				State = 1913;
				Match(DOT);
				}
				break;
			}
			State = 1917;
			_localctx.function_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext procedure_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 164, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1919;
			Match(DROP);
			State = 1920;
			Match(PROCEDURE);
			State = 1923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1921;
				Match(IF);
				State = 1922;
				Match(EXISTS);
				}
			}

			State = 1933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				{
				State = 1928;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
				case 1:
					{
					State = 1925;
					_localctx.project_name = identifier();
					State = 1926;
					Match(DOT);
					}
					break;
				}
				State = 1930;
				_localctx.dataset_name = identifier();
				State = 1931;
				Match(DOT);
				}
				break;
			}
			State = 1935;
			_localctx.procedure_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_row_access_policyContext : ParserRuleContext {
		public Path_expressionContext row_access_policy_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICIES() { return GetToken(BigQueryParser.POLICIES, 0); }
		public Drop_row_access_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_row_access_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_row_access_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_row_access_policyContext drop_row_access_policy() {
		Drop_row_access_policyContext _localctx = new Drop_row_access_policyContext(Context, State);
		EnterRule(_localctx, 166, RULE_drop_row_access_policy);
		int _la;
		try {
			State = 1956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1937;
				Match(DROP);
				State = 1938;
				Match(ROW);
				State = 1939;
				Match(ACCESS);
				State = 1940;
				Match(POLICY);
				State = 1943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1941;
					Match(IF);
					State = 1942;
					Match(EXISTS);
					}
				}

				State = 1945;
				_localctx.row_access_policy_name = path_expression();
				State = 1946;
				Match(ON);
				State = 1947;
				_localctx.table_name = path_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1949;
				Match(DROP);
				State = 1950;
				Match(ALL);
				State = 1951;
				Match(ROW);
				State = 1952;
				Match(ACCESS);
				State = 1953;
				Match(POLICIES);
				State = 1954;
				Match(ON);
				State = 1955;
				_localctx.table_name = path_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_capacityContext drop_capacity() {
		Drop_capacityContext _localctx = new Drop_capacityContext(Context, State);
		EnterRule(_localctx, 168, RULE_drop_capacity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958;
			Match(DROP);
			State = 1959;
			Match(CAPACITY);
			State = 1962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1960;
				Match(IF);
				State = 1961;
				Match(EXISTS);
				}
			}

			State = 1964;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_reservationContext drop_reservation() {
		Drop_reservationContext _localctx = new Drop_reservationContext(Context, State);
		EnterRule(_localctx, 170, RULE_drop_reservation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966;
			Match(DROP);
			State = 1967;
			Match(RESERVATION);
			State = 1970;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1968;
				Match(IF);
				State = 1969;
				Match(EXISTS);
				}
			}

			State = 1972;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assignmentContext drop_assignment() {
		Drop_assignmentContext _localctx = new Drop_assignmentContext(Context, State);
		EnterRule(_localctx, 172, RULE_drop_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			Match(DROP);
			State = 1975;
			Match(ASSIGNMENT);
			State = 1978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1976;
				Match(IF);
				State = 1977;
				Match(EXISTS);
				}
			}

			State = 1980;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_search_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_search_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_indexContext drop_search_index() {
		Drop_search_indexContext _localctx = new Drop_search_indexContext(Context, State);
		EnterRule(_localctx, 174, RULE_drop_search_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982;
			Match(DROP);
			State = 1983;
			Match(SEARCH);
			State = 1984;
			Match(INDEX);
			State = 1987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1985;
				Match(IF);
				State = 1986;
				Match(EXISTS);
				}
			}

			State = 1989;
			_localctx.index_name = path_expression();
			State = 1990;
			Match(ON);
			State = 1991;
			_localctx.table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_vector_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_vector_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_vector_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_vector_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_vector_indexContext drop_vector_index() {
		Drop_vector_indexContext _localctx = new Drop_vector_indexContext(Context, State);
		EnterRule(_localctx, 176, RULE_drop_vector_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1993;
			Match(DROP);
			State = 1994;
			Match(SEARCH);
			State = 1995;
			Match(INDEX);
			State = 1998;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1996;
				Match(IF);
				State = 1997;
				Match(EXISTS);
				}
			}

			State = 2000;
			_localctx.index_name = path_expression();
			State = 2001;
			Match(ON);
			State = 2002;
			_localctx.table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_column_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public View_columnContext[] view_column() {
			return GetRuleContexts<View_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_columnContext view_column(int i) {
			return GetRuleContext<View_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public View_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterView_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitView_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_column_name_listContext view_column_name_list() {
		View_column_name_listContext _localctx = new View_column_name_listContext(Context, State);
		EnterRule(_localctx, 178, RULE_view_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2004;
			view_column();
			State = 2009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2005;
				Match(COMMA);
				State = 2006;
				view_column();
				}
				}
				State = 2011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_columnContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public View_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterView_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitView_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_columnContext view_column() {
		View_columnContext _localctx = new View_columnContext(Context, State);
		EnterRule(_localctx, 180, RULE_view_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2012;
			_localctx.column_name = path_expression();
			State = 2018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2013;
				Match(OPTIONS);
				State = 2014;
				Match(OPAR);
				State = 2015;
				option_parameters();
				State = 2016;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraint_definitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionContext[] column_constraint_definition() {
			return GetRuleContexts<Column_constraint_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionContext column_constraint_definition(int i) {
			return GetRuleContext<Column_constraint_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_constraint_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint_definitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraint_definitionsContext column_constraint_definitions() {
		Column_constraint_definitionsContext _localctx = new Column_constraint_definitionsContext(Context, State);
		EnterRule(_localctx, 182, RULE_column_constraint_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			column_constraint_definition();
			State = 2025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2021;
				Match(COMMA);
				State = 2022;
				column_constraint_definition();
				}
				}
				State = 2027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraint_definitionContext : ParserRuleContext {
		public IdentifierContext constraint_name;
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_keyContext primary_key() {
			return GetRuleContext<Primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_keyContext[] foreign_key() {
			return GetRuleContexts<Foreign_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_keyContext foreign_key(int i) {
			return GetRuleContext<Foreign_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRAINT() { return GetTokens(BigQueryParser.CONSTRAINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT(int i) {
			return GetToken(BigQueryParser.CONSTRAINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_constraint_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraint_definitionContext column_constraint_definition() {
		Column_constraint_definitionContext _localctx = new Column_constraint_definitionContext(Context, State);
		EnterRule(_localctx, 184, RULE_column_constraint_definition);
		int _la;
		try {
			int _alt;
			State = 2046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2028;
				column_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2029;
				primary_key();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2030;
					Match(CONSTRAINT);
					State = 2031;
					_localctx.constraint_name = identifier();
					}
				}

				State = 2034;
				foreign_key();
				State = 2043;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2035;
						Match(COMMA);
						State = 2038;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==CONSTRAINT) {
							{
							State = 2036;
							Match(CONSTRAINT);
							State = 2037;
							_localctx.constraint_name = identifier();
							}
						}

						State = 2040;
						foreign_key();
						}
						} 
					}
					State = 2045;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 186, RULE_column_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2048;
			_localctx.column_name = path_expression();
			State = 2049;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_keyContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPrimary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPrimary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_keyContext primary_key() {
		Primary_keyContext _localctx = new Primary_keyContext(Context, State);
		EnterRule(_localctx, 188, RULE_primary_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2051;
			Match(PRIMARY);
			State = 2052;
			Match(KEY);
			State = 2053;
			Match(OPAR);
			State = 2054;
			_localctx.column_names = path_expressions();
			State = 2055;
			Match(CPAR);
			State = 2056;
			Match(NOT);
			State = 2057;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_keyContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_referenceContext foreign_reference() {
			return GetRuleContext<Foreign_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterForeign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitForeign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_keyContext foreign_key() {
		Foreign_keyContext _localctx = new Foreign_keyContext(Context, State);
		EnterRule(_localctx, 190, RULE_foreign_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2059;
			Match(FOREIGN);
			State = 2060;
			Match(KEY);
			State = 2061;
			Match(OPAR);
			State = 2062;
			_localctx.column_names = path_expressions();
			State = 2063;
			Match(CPAR);
			State = 2064;
			foreign_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_referenceContext : ParserRuleContext {
		public IdentifierContext primary_key_table;
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Foreign_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterForeign_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitForeign_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_referenceContext foreign_reference() {
		Foreign_referenceContext _localctx = new Foreign_referenceContext(Context, State);
		EnterRule(_localctx, 192, RULE_foreign_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066;
			Match(REFERENCES);
			State = 2067;
			_localctx.primary_key_table = identifier();
			State = 2068;
			Match(OPAR);
			State = 2069;
			_localctx.column_names = path_expressions();
			State = 2070;
			Match(CPAR);
			State = 2071;
			Match(NOT);
			State = 2072;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(Context, State);
		EnterRule(_localctx, 194, RULE_create_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074;
			Match(CREATE);
			State = 2075;
			Match(SCHEMA);
			State = 2079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2076;
				Match(IF);
				State = 2077;
				Match(NOT);
				State = 2078;
				Match(EXISTS);
				}
			}

			State = 2084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				{
				State = 2081;
				_localctx.project_name = identifier();
				State = 2082;
				Match(DOT);
				}
				break;
			}
			State = 2086;
			_localctx.dataset_name = identifier();
			State = 2090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 2087;
				Match(DEFAULT);
				State = 2088;
				Match(COLLATE);
				State = 2089;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 2097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2092;
				Match(OPTIONS);
				State = 2093;
				Match(OPAR);
				State = 2094;
				option_parameters();
				State = 2095;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expr_tailContext query_expr_tail() {
			return GetRuleContext<Query_expr_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_recursive_cteContext[] non_recursive_cte() {
			return GetRuleContexts<Non_recursive_cteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_recursive_cteContext non_recursive_cte(int i) {
			return GetRuleContext<Non_recursive_cteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_cteContext[] recursive_cte() {
			return GetRuleContexts<Recursive_cteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_cteContext recursive_cte(int i) {
			return GetRuleContext<Recursive_cteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_operation_tailContext set_operation_tail() {
			return GetRuleContext<Set_operation_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(BigQueryParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		return query_expression(0);
	}

	private Query_expressionContext query_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Query_expressionContext _localctx = new Query_expressionContext(Context, _parentState);
		Query_expressionContext _prevctx = _localctx;
		int _startState = 196;
		EnterRecursionRule(_localctx, 196, RULE_query_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 2100;
				Match(WITH);
				State = 2102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RECURSIVE) {
					{
					State = 2101;
					Match(RECURSIVE);
					}
				}

				State = 2106;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
				case 1:
					{
					State = 2104;
					non_recursive_cte();
					}
					break;
				case 2:
					{
					State = 2105;
					recursive_cte();
					}
					break;
				}
				State = 2115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2108;
					Match(COMMA);
					State = 2111;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
					case 1:
						{
						State = 2109;
						non_recursive_cte();
						}
						break;
					case 2:
						{
						State = 2110;
						recursive_cte();
						}
						break;
					}
					}
					}
					State = 2117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
				case 1:
					{
					State = 2118;
					select();
					}
					break;
				case 2:
					{
					State = 2119;
					Match(OPAR);
					State = 2120;
					query_expression(0);
					State = 2121;
					Match(CPAR);
					}
					break;
				case 3:
					{
					State = 2123;
					query_expression(0);
					State = 2124;
					set_operation_tail();
					}
					break;
				}
				State = 2128;
				query_expr_tail();
				}
				break;
			case SELECT:
				{
				State = 2130;
				select();
				State = 2131;
				query_expr_tail();
				}
				break;
			case OPAR:
				{
				State = 2133;
				Match(OPAR);
				State = 2134;
				query_expression(0);
				State = 2135;
				Match(CPAR);
				State = 2136;
				query_expr_tail();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,235,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Query_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_query_expression);
					State = 2140;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2141;
					set_operation_tail();
					State = 2142;
					query_expr_tail();
					}
					} 
				}
				State = 2148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,235,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Query_expr_tailContext : ParserRuleContext {
		public ExpressionContext order_by;
		public ExpressionContext count;
		public ExpressionContext skip_rows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(BigQueryParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(BigQueryParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(BigQueryParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(BigQueryParser.DESC, i);
		}
		public Query_expr_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expr_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expr_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expr_tailContext query_expr_tail() {
		Query_expr_tailContext _localctx = new Query_expr_tailContext(Context, State);
		EnterRule(_localctx, 198, RULE_query_expr_tail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				{
				State = 2149;
				Match(ORDER);
				State = 2150;
				Match(BY);
				State = 2151;
				_localctx.order_by = expression(0);
				State = 2153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
				case 1:
					{
					State = 2152;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 2162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2155;
						Match(COMMA);
						State = 2156;
						expression(0);
						State = 2158;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
						case 1:
							{
							State = 2157;
							_la = TokenStream.LA(1);
							if ( !(_la==ASC || _la==DESC) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						}
						} 
					}
					State = 2164;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
				}
				}
				break;
			}
			State = 2173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 2167;
				Match(LIMIT);
				State = 2168;
				_localctx.count = expression(0);
				State = 2171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
				case 1:
					{
					State = 2169;
					Match(OFFSET);
					State = 2170;
					_localctx.skip_rows = expression(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_operation_tailContext : ParserRuleContext {
		public Path_expressionsContext column_list_3;
		public Path_expressionsContext column_list_4;
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(BigQueryParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BigQueryParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORRESPONDING() { return GetToken(BigQueryParser.CORRESPONDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(BigQueryParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Set_operation_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operation_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSet_operation_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSet_operation_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_operation_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_operation_tailContext set_operation_tail() {
		Set_operation_tailContext _localctx = new Set_operation_tailContext(Context, State);
		EnterRule(_localctx, 200, RULE_set_operation_tail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				{
				State = 2175;
				Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
				{
				State = 2176;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==LEFT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2177;
					Match(OUTER);
					}
				}

				}
				break;
			case EXCEPT:
			case INTERSECT:
			case UNION:
				break;
			default:
				break;
			}
			State = 2188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 2182;
				Match(UNION);
				State = 2183;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case INTERSECT:
				{
				State = 2184;
				Match(INTERSECT);
				State = 2185;
				Match(DISTINCT);
				}
				break;
			case EXCEPT:
				{
				State = 2186;
				Match(EXCEPT);
				State = 2187;
				Match(DISTINCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY || _la==STRICT || _la==CORRESPONDING) {
				{
				State = 2210;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BY:
					{
					State = 2190;
					Match(BY);
					State = 2191;
					Match(NAME);
					State = 2197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ON) {
						{
						State = 2192;
						Match(ON);
						State = 2193;
						Match(OPAR);
						State = 2194;
						_localctx.column_list_3 = path_expressions();
						State = 2195;
						Match(CPAR);
						}
					}

					}
					break;
				case STRICT:
				case CORRESPONDING:
					{
					State = 2200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRICT) {
						{
						State = 2199;
						Match(STRICT);
						}
					}

					State = 2202;
					Match(CORRESPONDING);
					State = 2208;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BY) {
						{
						State = 2203;
						Match(BY);
						State = 2204;
						Match(OPAR);
						State = 2205;
						_localctx.column_list_4 = path_expressions();
						State = 2206;
						Match(CPAR);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 2214;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_recursive_cteContext : ParserRuleContext {
		public IdentifierContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Non_recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNon_recursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNon_recursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_recursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_recursive_cteContext non_recursive_cte() {
		Non_recursive_cteContext _localctx = new Non_recursive_cteContext(Context, State);
		EnterRule(_localctx, 202, RULE_non_recursive_cte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2216;
			_localctx.cte_name = identifier();
			State = 2217;
			Match(AS);
			State = 2218;
			Match(OPAR);
			State = 2219;
			query_expression(0);
			State = 2220;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_cteContext : ParserRuleContext {
		public IdentifierContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_union_operationContext recursive_union_operation() {
			return GetRuleContext<Recursive_union_operationContext>(0);
		}
		public Recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_cteContext recursive_cte() {
		Recursive_cteContext _localctx = new Recursive_cteContext(Context, State);
		EnterRule(_localctx, 204, RULE_recursive_cte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2222;
			_localctx.cte_name = identifier();
			State = 2223;
			Match(AS);
			{
			State = 2224;
			recursive_union_operation();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_union_operationContext : ParserRuleContext {
		public Query_expressionContext base_term;
		public Query_expressionContext recursive_term;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public Recursive_union_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_union_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRecursive_union_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRecursive_union_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_union_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_union_operationContext recursive_union_operation() {
		Recursive_union_operationContext _localctx = new Recursive_union_operationContext(Context, State);
		EnterRule(_localctx, 206, RULE_recursive_union_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2226;
			_localctx.base_term = query_expression(0);
			State = 2227;
			Match(UNION);
			State = 2228;
			Match(ALL);
			State = 2229;
			_localctx.recursive_term = query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(BigQueryParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Differential_privacy_clauseContext differential_privacy_clause() {
			return GetRuleContext<Differential_privacy_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_clausesContext from_clauses() {
			return GetRuleContext<From_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_specificationContext group_by_specification() {
			return GetRuleContext<Group_by_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY() { return GetToken(BigQueryParser.QUALIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(BigQueryParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(BigQueryParser.VALUE, 0); }
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 208, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231;
			Match(SELECT);
			State = 2234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2232;
				Match(WITH);
				State = 2233;
				differential_privacy_clause();
				}
			}

			State = 2237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 2236;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2239;
				Match(AS);
				State = 2240;
				_la = TokenStream.LA(1);
				if ( !(_la==STRUCT || _la==VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2243;
			select_list();
			State = 2246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				{
				State = 2244;
				Match(FROM);
				State = 2245;
				from_clauses();
				}
				break;
			}
			State = 2250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 2248;
				Match(WHERE);
				State = 2249;
				expression(0);
				}
				break;
			}
			State = 2255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				{
				State = 2252;
				Match(GROUP);
				State = 2253;
				Match(BY);
				State = 2254;
				group_by_specification();
				}
				break;
			}
			State = 2259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				{
				State = 2257;
				Match(HAVING);
				State = 2258;
				expression(0);
				}
				break;
			}
			State = 2263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 2261;
				Match(QUALIFY);
				State = 2262;
				expression(0);
				}
				break;
			}
			State = 2267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
			case 1:
				{
				State = 2265;
				Match(WINDOW);
				State = 2266;
				window_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_specificationContext : ParserRuleContext {
		public ExpressionsContext groupable_items;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_specificationContext grouping_sets_specification() {
			return GetRuleContext<Grouping_sets_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_specificationContext rollup_specification() {
			return GetRuleContext<Rollup_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Group_by_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_specificationContext group_by_specification() {
		Group_by_specificationContext _localctx = new Group_by_specificationContext(Context, State);
		EnterRule(_localctx, 210, RULE_group_by_specification);
		try {
			State = 2276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2269;
				_localctx.groupable_items = expressions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2270;
				Match(ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2271;
				grouping_sets_specification();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2272;
				rollup_specification();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2273;
				cube_specification();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2274;
				Match(OPAR);
				State = 2275;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(BigQueryParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(BigQueryParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Grouping_sets_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_specificationContext grouping_sets_specification() {
		Grouping_sets_specificationContext _localctx = new Grouping_sets_specificationContext(Context, State);
		EnterRule(_localctx, 212, RULE_grouping_sets_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2278;
			Match(GROUP);
			State = 2279;
			Match(BY);
			State = 2280;
			Match(GROUPING);
			State = 2281;
			Match(SETS);
			State = 2282;
			Match(OPAR);
			State = 2283;
			grouping_list();
			State = 2284;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_list_itemContext[] grouping_list_item() {
			return GetRuleContexts<Grouping_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_list_itemContext grouping_list_item(int i) {
			return GetRuleContext<Grouping_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Grouping_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_listContext grouping_list() {
		Grouping_listContext _localctx = new Grouping_listContext(Context, State);
		EnterRule(_localctx, 214, RULE_grouping_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2286;
			grouping_list_item();
			State = 2291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2287;
				Match(COMMA);
				State = 2288;
				grouping_list_item();
				}
				}
				State = 2293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_list_itemContext : ParserRuleContext {
		public ExpressionContext groupable_item;
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_specificationContext rollup_specification() {
			return GetRuleContext<Rollup_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Groupable_item_setContext groupable_item_set() {
			return GetRuleContext<Groupable_item_setContext>(0);
		}
		public Grouping_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_list_itemContext grouping_list_item() {
		Grouping_list_itemContext _localctx = new Grouping_list_itemContext(Context, State);
		EnterRule(_localctx, 216, RULE_grouping_list_item);
		try {
			State = 2298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2294;
				rollup_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2295;
				cube_specification();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2296;
				_localctx.groupable_item = expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2297;
				groupable_item_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(BigQueryParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Cube_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCube_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCube_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cube_specificationContext cube_specification() {
		Cube_specificationContext _localctx = new Cube_specificationContext(Context, State);
		EnterRule(_localctx, 218, RULE_cube_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2300;
			Match(GROUP);
			State = 2301;
			Match(BY);
			State = 2302;
			Match(CUBE);
			State = 2303;
			Match(OPAR);
			State = 2304;
			grouping_list();
			State = 2305;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupable_item_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Groupable_item_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupable_item_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGroupable_item_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGroupable_item_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupable_item_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupable_item_setContext groupable_item_set() {
		Groupable_item_setContext _localctx = new Groupable_item_setContext(Context, State);
		EnterRule(_localctx, 220, RULE_groupable_item_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2307;
			Match(OPAR);
			State = 2308;
			expressions();
			State = 2309;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(BigQueryParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Rollup_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRollup_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRollup_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_specificationContext rollup_specification() {
		Rollup_specificationContext _localctx = new Rollup_specificationContext(Context, State);
		EnterRule(_localctx, 222, RULE_rollup_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2311;
			Match(GROUP);
			State = 2312;
			Match(BY);
			State = 2313;
			Match(ROLLUP);
			State = 2314;
			Match(OPAR);
			State = 2315;
			grouping_list();
			State = 2316;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_window_expressionContext[] named_window_expression() {
			return GetRuleContexts<Named_window_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_window_expressionContext named_window_expression(int i) {
			return GetRuleContext<Named_window_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 224, RULE_window_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2318;
			named_window_expression();
			State = 2323;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2319;
					Match(COMMA);
					State = 2320;
					named_window_expression();
					}
					} 
				}
				State = 2325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_window_expressionContext : ParserRuleContext {
		public Path_expressionContext named_window_1;
		public Path_expressionContext named_window_2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Named_window_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_window_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_window_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_window_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_window_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_window_expressionContext named_window_expression() {
		Named_window_expressionContext _localctx = new Named_window_expressionContext(Context, State);
		EnterRule(_localctx, 226, RULE_named_window_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2326;
			_localctx.named_window_1 = path_expression();
			State = 2327;
			Match(AS);
			State = 2333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 2328;
				_localctx.named_window_2 = path_expression();
				}
				break;
			case OPAR:
				{
				State = 2329;
				Match(OPAR);
				State = 2330;
				window_specification();
				State = 2331;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		public Path_expressionContext named_window;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expressions_asc_descContext expressions_asc_desc() {
			return GetRuleContext<Expressions_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_clauseContext window_frame_clause() {
			return GetRuleContext<Window_frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 228, RULE_window_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 2335;
				_localctx.named_window = path_expression();
				}
			}

			State = 2341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2338;
				Match(PARTITION);
				State = 2339;
				Match(BY);
				State = 2340;
				expressions();
				}
			}

			State = 2346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 2343;
				Match(ORDER);
				State = 2344;
				Match(BY);
				State = 2345;
				expressions_asc_desc();
				}
			}

			State = 2349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 2348;
				window_frame_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(BigQueryParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_startContext frame_start() {
			return GetRuleContext<Frame_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_betweenContext frame_between() {
			return GetRuleContext<Frame_betweenContext>(0);
		}
		public Window_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_clauseContext window_frame_clause() {
		Window_frame_clauseContext _localctx = new Window_frame_clauseContext(Context, State);
		EnterRule(_localctx, 230, RULE_window_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2351;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case CPAR:
			case OBR:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case CURRENT:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case IF:
			case INTERVAL:
			case NOT:
			case NULL:
			case RANGE:
			case SELECT:
			case STRUCT:
			case TRUE:
			case UNBOUNDED:
			case UNNEST:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				{
				State = 2352;
				frame_start();
				}
				break;
			case BETWEEN:
				{
				State = 2353;
				frame_between();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		public Frame_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_startContext frame_start() {
		Frame_startContext _localctx = new Frame_startContext(Context, State);
		EnterRule(_localctx, 232, RULE_frame_start);
		int _la;
		try {
			State = 2365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2356;
				Match(UNBOUNDED);
				State = 2357;
				Match(PRECEDING);
				}
				break;
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case IF:
			case INTERVAL:
			case NOT:
			case NULL:
			case RANGE:
			case SELECT:
			case STRUCT:
			case TRUE:
			case UNNEST:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2358;
				expression(0);
				State = 2359;
				Match(PRECEDING);
				}
				break;
			case CPAR:
			case CURRENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CURRENT) {
					{
					State = 2361;
					Match(CURRENT);
					State = 2362;
					Match(ROW);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_betweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_aContext frame_end_a() {
			return GetRuleContext<Frame_end_aContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_bContext frame_end_b() {
			return GetRuleContext<Frame_end_bContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_cContext frame_end_c() {
			return GetRuleContext<Frame_end_cContext>(0);
		}
		public Frame_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_between(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_betweenContext frame_between() {
		Frame_betweenContext _localctx = new Frame_betweenContext(Context, State);
		EnterRule(_localctx, 234, RULE_frame_between);
		try {
			State = 2389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2367;
				Match(BETWEEN);
				State = 2368;
				Match(UNBOUNDED);
				State = 2369;
				Match(PRECEDING);
				State = 2370;
				Match(AND);
				State = 2371;
				frame_end_a();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2372;
				Match(BETWEEN);
				State = 2373;
				expression(0);
				State = 2374;
				Match(PRECEDING);
				State = 2375;
				Match(AND);
				State = 2376;
				frame_end_a();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2378;
				Match(BETWEEN);
				State = 2379;
				Match(CURRENT);
				State = 2380;
				Match(ROW);
				State = 2381;
				Match(AND);
				State = 2382;
				frame_end_b();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2383;
				Match(BETWEEN);
				State = 2384;
				expression(0);
				State = 2385;
				Match(FOLLOWING);
				State = 2386;
				Match(AND);
				State = 2387;
				frame_end_c();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_aContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_a(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_aContext frame_end_a() {
		Frame_end_aContext _localctx = new Frame_end_aContext(Context, State);
		EnterRule(_localctx, 236, RULE_frame_end_a);
		try {
			State = 2401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2391;
				expression(0);
				State = 2392;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2394;
				Match(CURRENT);
				State = 2395;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2396;
				expression(0);
				State = 2397;
				Match(FOLLOWING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2399;
				Match(UNBOUNDED);
				State = 2400;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_bContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_bContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_b; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_b(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_b(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_b(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_bContext frame_end_b() {
		Frame_end_bContext _localctx = new Frame_end_bContext(Context, State);
		EnterRule(_localctx, 238, RULE_frame_end_b);
		try {
			State = 2410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2403;
				Match(CURRENT);
				State = 2404;
				Match(ROW);
				}
				break;
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case IF:
			case INTERVAL:
			case NOT:
			case NULL:
			case RANGE:
			case SELECT:
			case STRUCT:
			case TRUE:
			case UNNEST:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2405;
				expression(0);
				State = 2406;
				Match(FOLLOWING);
				}
				break;
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2408;
				Match(UNBOUNDED);
				State = 2409;
				Match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_cContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_cContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_c(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_cContext frame_end_c() {
		Frame_end_cContext _localctx = new Frame_end_cContext(Context, State);
		EnterRule(_localctx, 240, RULE_frame_end_c);
		try {
			State = 2417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case IF:
			case INTERVAL:
			case NOT:
			case NULL:
			case RANGE:
			case SELECT:
			case STRUCT:
			case TRUE:
			case UNNEST:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2412;
				expression(0);
				State = 2413;
				Match(FOLLOWING);
				}
				break;
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2415;
				Match(UNBOUNDED);
				State = 2416;
				Match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Differential_privacy_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL_PRIVACY() { return GetToken(BigQueryParser.DIFFERENTIAL_PRIVACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Differential_privacy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_differential_privacy_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDifferential_privacy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDifferential_privacy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferential_privacy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Differential_privacy_clauseContext differential_privacy_clause() {
		Differential_privacy_clauseContext _localctx = new Differential_privacy_clauseContext(Context, State);
		EnterRule(_localctx, 242, RULE_differential_privacy_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2419;
			Match(DIFFERENTIAL_PRIVACY);
			State = 2420;
			Match(OPTIONS);
			State = 2421;
			Match(OPAR);
			State = 2422;
			option_parameters();
			State = 2423;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext[] from_clause() {
			return GetRuleContexts<From_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause(int i) {
			return GetRuleContext<From_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public From_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clausesContext from_clauses() {
		From_clausesContext _localctx = new From_clausesContext(Context, State);
		EnterRule(_localctx, 244, RULE_from_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			from_clause();
			State = 2430;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,275,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2426;
					Match(COMMA);
					State = 2427;
					from_clause();
					}
					} 
				}
				State = 2432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,275,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext from_item() {
			return GetRuleContext<From_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pivot_operatorContext pivot_operator() {
			return GetRuleContext<Pivot_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unpivot_operatorContext unpivot_operator() {
			return GetRuleContext<Unpivot_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_operatorContext tablesample_operator() {
			return GetRuleContext<Tablesample_operatorContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 246, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2433;
			from_item(0);
			State = 2436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 2434;
				pivot_operator();
				}
				break;
			case 2:
				{
				State = 2435;
				unpivot_operator();
				}
				break;
			}
			State = 2439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 2438;
				tablesample_operator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_itemContext : ParserRuleContext {
		public IdentifierContext table_name;
		public ExpressionContext timestamp_expression;
		public Path_expressionContext field_path;
		public Path_expressionContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext[] from_item() {
			return GetRuleContexts<From_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext from_item(int i) {
			return GetRuleContext<From_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cross_join_operatorContext cross_join_operator() {
			return GetRuleContext<Cross_join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Condition_join_operatorContext condition_join_operator() {
			return GetRuleContext<Condition_join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_conditionContext join_condition() {
			return GetRuleContext<Join_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unnest_operatorContext unnest_operator() {
			return GetRuleContext<Unnest_operatorContext>(0);
		}
		public From_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_itemContext from_item() {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		From_itemContext _localctx = new From_itemContext(Context, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 248;
		EnterRecursionRule(_localctx, 248, RULE_from_item, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				{
				State = 2442;
				_localctx.table_name = identifier();
				State = 2444;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
				case 1:
					{
					State = 2443;
					as_alias();
					}
					break;
				}
				State = 2451;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
				case 1:
					{
					State = 2446;
					Match(FOR);
					State = 2447;
					Match(SYSTEM_TIME);
					State = 2448;
					Match(AS);
					State = 2449;
					Match(OF);
					State = 2450;
					_localctx.timestamp_expression = expression(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2453;
				Match(OPAR);
				State = 2463;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 2454;
					from_item(0);
					State = 2455;
					cross_join_operator();
					State = 2456;
					from_item(0);
					}
					break;
				case 2:
					{
					State = 2458;
					from_item(0);
					State = 2459;
					condition_join_operator();
					State = 2460;
					from_item(0);
					State = 2461;
					join_condition();
					}
					break;
				}
				State = 2465;
				Match(CPAR);
				}
				break;
			case 3:
				{
				State = 2467;
				Match(OPAR);
				State = 2468;
				query_expression(0);
				State = 2469;
				Match(CPAR);
				State = 2471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
				case 1:
					{
					State = 2470;
					as_alias();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 2473;
				_localctx.field_path = path_expression();
				}
				break;
			case 5:
				{
				State = 2474;
				unnest_operator();
				}
				break;
			case 6:
				{
				State = 2475;
				_localctx.cte_name = path_expression();
				State = 2477;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
				case 1:
					{
					State = 2476;
					as_alias();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2492;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2490;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
					case 1:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_from_item);
						State = 2481;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 2482;
						cross_join_operator();
						State = 2483;
						from_item(8);
						}
						break;
					case 2:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_from_item);
						State = 2485;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 2486;
						condition_join_operator();
						State = 2487;
						from_item(0);
						State = 2488;
						join_condition();
						}
						break;
					}
					} 
				}
				State = 2494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unnest_operatorContext : ParserRuleContext {
		public ExpressionContext array;
		public Path_expressionContext array_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		public Unnest_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnest_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUnnest_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUnnest_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnest_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unnest_operatorContext unnest_operator() {
		Unnest_operatorContext _localctx = new Unnest_operatorContext(Context, State);
		EnterRule(_localctx, 250, RULE_unnest_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNNEST:
				{
				State = 2495;
				Match(UNNEST);
				State = 2496;
				Match(OPAR);
				State = 2497;
				_localctx.array = expression(0);
				State = 2498;
				Match(CPAR);
				State = 2500;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
				case 1:
					{
					State = 2499;
					as_alias();
					}
					break;
				}
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 2502;
				_localctx.array_path = path_expression();
				State = 2504;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
				case 1:
					{
					State = 2503;
					as_alias();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				{
				State = 2508;
				Match(WITH);
				State = 2509;
				Match(OFFSET);
				State = 2511;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 2510;
					as_alias();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(BigQueryParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		public Cross_join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCross_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCross_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCross_join_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cross_join_operatorContext cross_join_operator() {
		Cross_join_operatorContext _localctx = new Cross_join_operatorContext(Context, State);
		EnterRule(_localctx, 252, RULE_cross_join_operator);
		try {
			State = 2518;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2515;
				Match(CROSS);
				State = 2516;
				Match(JOIN);
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2517;
				Match(COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BigQueryParser.RIGHT, 0); }
		public Condition_join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCondition_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCondition_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_join_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_join_operatorContext condition_join_operator() {
		Condition_join_operatorContext _localctx = new Condition_join_operatorContext(Context, State);
		EnterRule(_localctx, 254, RULE_condition_join_operator);
		int _la;
		try {
			State = 2539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER) {
					{
					State = 2520;
					Match(INNER);
					}
				}

				State = 2523;
				Match(JOIN);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2524;
				Match(FULL);
				State = 2526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2525;
					Match(OUTER);
					}
				}

				State = 2528;
				Match(JOIN);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2529;
				Match(LEFT);
				State = 2531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2530;
					Match(OUTER);
					}
				}

				State = 2533;
				Match(JOIN);
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2534;
				Match(RIGHT);
				State = 2536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2535;
					Match(OUTER);
					}
				}

				State = 2538;
				Match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public On_clauseContext on_clause() {
			return GetRuleContext<On_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterJoin_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitJoin_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_conditionContext join_condition() {
		Join_conditionContext _localctx = new Join_conditionContext(Context, State);
		EnterRule(_localctx, 256, RULE_join_condition);
		try {
			State = 2543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2541;
				on_clause();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2542;
				using_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public On_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOn_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOn_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_clauseContext on_clause() {
		On_clauseContext _localctx = new On_clauseContext(Context, State);
		EnterRule(_localctx, 258, RULE_on_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2545;
			Match(ON);
			State = 2546;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		public Path_expressionsContext column_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 260, RULE_using_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2548;
			Match(USING);
			State = 2549;
			Match(OPAR);
			State = 2550;
			_localctx.column_list = path_expressions();
			State = 2551;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_operatorContext : ParserRuleContext {
		public IdentifierContext input_column;
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(BigQueryParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expressions_as_aliasContext expressions_as_alias() {
			return GetRuleContext<Expressions_as_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public Pivot_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_operatorContext pivot_operator() {
		Pivot_operatorContext _localctx = new Pivot_operatorContext(Context, State);
		EnterRule(_localctx, 262, RULE_pivot_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2553;
			Match(PIVOT);
			State = 2554;
			Match(OPAR);
			State = 2555;
			function_call();
			State = 2557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 2556;
				as_alias();
				}
			}

			State = 2566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2559;
				Match(COMMA);
				State = 2560;
				function_call();
				State = 2562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
					{
					State = 2561;
					as_alias();
					}
				}

				}
				}
				State = 2568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2569;
			Match(FOR);
			State = 2570;
			_localctx.input_column = identifier();
			State = 2571;
			Match(IN);
			State = 2572;
			Match(OPAR);
			State = 2573;
			expressions_as_alias();
			State = 2574;
			Match(CPAR);
			State = 2575;
			Match(CPAR);
			State = 2578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 2576;
				Match(AS);
				State = 2577;
				_localctx.alias = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_operatorContext : ParserRuleContext {
		public As_aliasContext unpivot_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(BigQueryParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_column_unpivotContext single_column_unpivot() {
			return GetRuleContext<Single_column_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multi_column_unpivotContext multi_column_unpivot() {
			return GetRuleContext<Multi_column_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BigQueryParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(BigQueryParser.EXCLUDE, 0); }
		public Unpivot_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_operatorContext unpivot_operator() {
		Unpivot_operatorContext _localctx = new Unpivot_operatorContext(Context, State);
		EnterRule(_localctx, 264, RULE_unpivot_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2580;
			Match(UNPIVOT);
			State = 2585;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				{
				State = 2581;
				Match(INCLUDE);
				State = 2582;
				Match(NULLS);
				}
				break;
			case EXCLUDE:
				{
				State = 2583;
				Match(EXCLUDE);
				State = 2584;
				Match(NULLS);
				}
				break;
			case OPAR:
				break;
			default:
				break;
			}
			State = 2587;
			Match(OPAR);
			State = 2590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 2588;
				single_column_unpivot();
				}
				break;
			case 2:
				{
				State = 2589;
				multi_column_unpivot();
				}
				break;
			}
			State = 2592;
			Match(CPAR);
			State = 2593;
			_localctx.unpivot_alias = as_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_column_unpivotContext : ParserRuleContext {
		public ExpressionsContext values_column;
		public Path_expressionContext name_column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Columns_to_unpivotContext columns_to_unpivot() {
			return GetRuleContext<Columns_to_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Single_column_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_column_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSingle_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSingle_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_column_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_column_unpivotContext single_column_unpivot() {
		Single_column_unpivotContext _localctx = new Single_column_unpivotContext(Context, State);
		EnterRule(_localctx, 266, RULE_single_column_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2595;
			_localctx.values_column = expressions();
			State = 2596;
			Match(FOR);
			State = 2597;
			_localctx.name_column = path_expression();
			State = 2598;
			Match(IN);
			State = 2599;
			Match(OPAR);
			State = 2600;
			columns_to_unpivot();
			State = 2601;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_column_unpivotContext : ParserRuleContext {
		public Path_expressionContext name_column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_sets_to_unpivotContext column_sets_to_unpivot() {
			return GetRuleContext<Column_sets_to_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Multi_column_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_column_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMulti_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMulti_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_column_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_column_unpivotContext multi_column_unpivot() {
		Multi_column_unpivotContext _localctx = new Multi_column_unpivotContext(Context, State);
		EnterRule(_localctx, 268, RULE_multi_column_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2603;
			Match(OPAR);
			State = 2604;
			expressions();
			State = 2605;
			Match(CPAR);
			State = 2606;
			Match(FOR);
			State = 2607;
			_localctx.name_column = path_expression();
			State = 2608;
			Match(IN);
			State = 2609;
			Match(OPAR);
			State = 2610;
			column_sets_to_unpivot();
			State = 2611;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Columns_to_unpivotContext : ParserRuleContext {
		public IdentifierContext row_value_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Columns_to_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns_to_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumns_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumns_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns_to_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Columns_to_unpivotContext columns_to_unpivot() {
		Columns_to_unpivotContext _localctx = new Columns_to_unpivotContext(Context, State);
		EnterRule(_localctx, 270, RULE_columns_to_unpivot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2613;
			expression(0);
			State = 2615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 2614;
				as_alias();
				}
			}

			State = 2624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2617;
				Match(COMMA);
				State = 2618;
				expression(0);
				State = 2620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
					{
					State = 2619;
					_localctx.row_value_alias = identifier();
					}
				}

				}
				}
				State = 2626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_sets_to_unpivotContext : ParserRuleContext {
		public IdentifierContext row_value_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_sets_to_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_sets_to_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_sets_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_sets_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_sets_to_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_sets_to_unpivotContext column_sets_to_unpivot() {
		Column_sets_to_unpivotContext _localctx = new Column_sets_to_unpivotContext(Context, State);
		EnterRule(_localctx, 272, RULE_column_sets_to_unpivot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2627;
			Match(OPAR);
			State = 2628;
			expression(0);
			State = 2630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 2629;
				as_alias();
				}
			}

			State = 2639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2632;
				Match(COMMA);
				State = 2633;
				expression(0);
				State = 2635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
					{
					State = 2634;
					_localctx.row_value_alias = identifier();
					}
				}

				}
				}
				State = 2641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2642;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_operatorContext : ParserRuleContext {
		public ExpressionContext percent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(BigQueryParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(BigQueryParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BigQueryParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Tablesample_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTablesample_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTablesample_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablesample_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_operatorContext tablesample_operator() {
		Tablesample_operatorContext _localctx = new Tablesample_operatorContext(Context, State);
		EnterRule(_localctx, 274, RULE_tablesample_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2644;
			Match(TABLESAMPLE);
			State = 2645;
			Match(SYSTEM);
			State = 2646;
			Match(OPAR);
			State = 2647;
			_localctx.percent = expression(0);
			State = 2648;
			Match(PERCENT);
			State = 2649;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Option_parameterContext[] option_parameter() {
			return GetRuleContexts<Option_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parameterContext option_parameter(int i) {
			return GetRuleContext<Option_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Option_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOption_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOption_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_parametersContext option_parameters() {
		Option_parametersContext _localctx = new Option_parametersContext(Context, State);
		EnterRule(_localctx, 276, RULE_option_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2651;
			option_parameter();
			State = 2656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2652;
				Match(COMMA);
				State = 2653;
				option_parameter();
				}
				}
				State = 2658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Option_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOption_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOption_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_parameterContext option_parameter() {
		Option_parameterContext _localctx = new Option_parameterContext(Context, State);
		EnterRule(_localctx, 278, RULE_option_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2659;
			identifier();
			State = 2660;
			Match(EQ);
			State = 2661;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_itemContext[] select_list_item() {
			return GetRuleContexts<Select_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_itemContext select_list_item(int i) {
			return GetRuleContext<Select_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 280, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2663;
			select_list_item();
			State = 2668;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2664;
					Match(COMMA);
					State = 2665;
					select_list_item();
					}
					} 
				}
				State = 2670;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_allContext select_all() {
			return GetRuleContext<Select_allContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		public Select_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_itemContext select_list_item() {
		Select_list_itemContext _localctx = new Select_list_itemContext(Context, State);
		EnterRule(_localctx, 282, RULE_select_list_item);
		try {
			State = 2676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2671;
				select_all();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2672;
				expression(0);
				State = 2674;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
				case 1:
					{
					State = 2673;
					as_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_allContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_column_namesContext as_column_names() {
			return GetRuleContext<As_column_namesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Select_allContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_all(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_allContext select_all() {
		Select_allContext _localctx = new Select_allContext(Context, State);
		EnterRule(_localctx, 284, RULE_select_all);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31525317784980482L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -35710898571313119L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -558727828770652161L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 267649023L) != 0)) {
				{
				State = 2678;
				expression(0);
				State = 2679;
				Match(DOT);
				}
			}

			State = 2683;
			Match(STAR);
			State = 2689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				{
				State = 2684;
				Match(EXCEPT);
				State = 2685;
				Match(OPAR);
				State = 2686;
				_localctx.column_names = path_expressions();
				State = 2687;
				Match(CPAR);
				}
				break;
			}
			State = 2696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				{
				State = 2691;
				Match(REPLACE);
				State = 2692;
				Match(OPAR);
				State = 2693;
				as_column_names();
				State = 2694;
				Match(CPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BigQueryParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(BigQueryParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNOT() { return GetToken(BigQueryParser.BNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_Context case_() {
			return GetRuleContext<Case_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoalesceContext coalesce() {
			return GetRuleContext<CoalesceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_Context if_() {
			return GetRuleContext<If_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfnullContext ifnull() {
			return GetRuleContext<IfnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullifContext nullif() {
			return GetRuleContext<NullifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BigQueryParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(BigQueryParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(BigQueryParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(BigQueryParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(BigQueryParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(BigQueryParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND() { return GetToken(BigQueryParser.BAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BXOR() { return GetToken(BigQueryParser.BXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR() { return GetToken(BigQueryParser.BOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(BigQueryParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(BigQueryParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(BigQueryParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BigQueryParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(BigQueryParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBR() { return GetToken(BigQueryParser.OBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBR() { return GetToken(BigQueryParser.CBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 286;
		EnterRecursionRule(_localctx, 286, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2728;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				{
				State = 2699;
				Match(OPAR);
				State = 2700;
				expression(0);
				State = 2701;
				Match(CPAR);
				}
				break;
			case 2:
				{
				State = 2703;
				select();
				}
				break;
			case 3:
				{
				State = 2704;
				path_expression();
				}
				break;
			case 4:
				{
				State = 2705;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3074L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2706;
				expression(26);
				}
				break;
			case 5:
				{
				State = 2707;
				Match(NOT);
				State = 2708;
				expression(16);
				}
				break;
			case 6:
				{
				State = 2709;
				Match(EXISTS);
				State = 2710;
				Match(OPAR);
				State = 2711;
				expression(0);
				State = 2712;
				Match(CPAR);
				}
				break;
			case 7:
				{
				State = 2714;
				Match(UNNEST);
				State = 2715;
				Match(OPAR);
				State = 2716;
				expression(0);
				State = 2717;
				Match(CPAR);
				}
				break;
			case 8:
				{
				State = 2719;
				function_call();
				}
				break;
			case 9:
				{
				State = 2720;
				window_function();
				}
				break;
			case 10:
				{
				State = 2721;
				literal();
				}
				break;
			case 11:
				{
				State = 2722;
				case_expression();
				}
				break;
			case 12:
				{
				State = 2723;
				case_();
				}
				break;
			case 13:
				{
				State = 2724;
				coalesce();
				}
				break;
			case 14:
				{
				State = 2725;
				if_();
				}
				break;
			case 15:
				{
				State = 2726;
				ifnull();
				}
				break;
			case 16:
				{
				State = 2727;
				nullif();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2809;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2807;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2730;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 2731;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 772L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2732;
						expression(26);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2733;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 2734;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2735;
						expression(25);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2736;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 2741;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case LT:
							{
							State = 2737;
							Match(LT);
							State = 2738;
							Match(LT);
							}
							break;
						case GT:
							{
							State = 2739;
							Match(GT);
							State = 2740;
							Match(GT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2743;
						expression(24);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2744;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 2745;
						Match(BAND);
						State = 2746;
						expression(23);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2747;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 2748;
						Match(BXOR);
						State = 2749;
						expression(22);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2750;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 2751;
						Match(BOR);
						State = 2752;
						expression(21);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2753;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 2764;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case EQ:
							{
							State = 2754;
							Match(EQ);
							}
							break;
						case NEQ:
							{
							State = 2755;
							Match(NEQ);
							}
							break;
						case LT:
							{
							State = 2756;
							Match(LT);
							}
							break;
						case GT:
							{
							State = 2757;
							Match(GT);
							}
							break;
						case LTE:
							{
							State = 2758;
							Match(LTE);
							}
							break;
						case GTE:
							{
							State = 2759;
							Match(GTE);
							}
							break;
						case BETWEEN:
						case IN:
						case LIKE:
						case NOT:
							{
							State = 2761;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==NOT) {
								{
								State = 2760;
								Match(NOT);
								}
							}

							State = 2763;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & 17626545782785L) != 0)) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2766;
						expression(20);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2767;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 2768;
						Match(IS);
						State = 2770;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2769;
							Match(NOT);
							}
						}

						State = 2772;
						Match(DISTINCT);
						State = 2773;
						Match(FROM);
						State = 2774;
						expression(18);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2775;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 2776;
						Match(AND);
						State = 2777;
						expression(16);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2778;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 2779;
						Match(OR);
						State = 2780;
						expression(15);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2781;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 2783;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2782;
							Match(NOT);
							}
						}

						State = 2785;
						Match(LIKE);
						State = 2786;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2787;
						expression(11);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2788;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 2789;
						Match(DOT);
						State = 2790;
						path_expression();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2791;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 2792;
						Match(OBR);
						State = 2793;
						expression(0);
						State = 2794;
						Match(CBR);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2796;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 2797;
						Match(IS);
						State = 2799;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2798;
							Match(NOT);
							}
						}

						State = 2801;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 72057595111669761L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2802;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 2804;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AS) {
							{
							State = 2803;
							Match(AS);
							}
						}

						State = 2806;
						_localctx.alias = identifier();
						}
						break;
					}
					} 
				}
				State = 2811;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 288, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812;
			expression(0);
			State = 2817;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2813;
					Match(COMMA);
					State = 2814;
					expression(0);
					}
					} 
				}
				State = 2819;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,327,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext expr_to_match;
		public ExpressionContext result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(Context, State);
		EnterRule(_localctx, 290, RULE_case_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2820;
			Match(CASE);
			State = 2821;
			expression(0);
			State = 2827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2822;
				Match(WHEN);
				State = 2823;
				_localctx.expr_to_match = expression(0);
				State = 2824;
				Match(THEN);
				State = 2825;
				_localctx.result = expression(0);
				}
				}
				State = 2829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 2833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 2831;
				Match(ELSE);
				State = 2832;
				_localctx.else_result = expression(0);
				}
			}

			State = 2835;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_Context : ParserRuleContext {
		public ExpressionContext expr_to_match;
		public ExpressionContext result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Case_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_Context case_() {
		Case_Context _localctx = new Case_Context(Context, State);
		EnterRule(_localctx, 292, RULE_case_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2837;
			Match(CASE);
			State = 2843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2838;
				Match(WHEN);
				State = 2839;
				_localctx.expr_to_match = expression(0);
				State = 2840;
				Match(THEN);
				State = 2841;
				_localctx.result = expression(0);
				}
				}
				State = 2845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 2849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 2847;
				Match(ELSE);
				State = 2848;
				_localctx.else_result = expression(0);
				}
			}

			State = 2851;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoalesceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(BigQueryParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public CoalesceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coalesce; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCoalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCoalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoalesceContext coalesce() {
		CoalesceContext _localctx = new CoalesceContext(Context, State);
		EnterRule(_localctx, 294, RULE_coalesce);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2853;
			Match(COALESCE);
			State = 2854;
			Match(OPAR);
			State = 2855;
			expressions();
			State = 2856;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_Context : ParserRuleContext {
		public ExpressionContext expr;
		public ExpressionContext true_result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public If_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIf_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIf_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_Context if_() {
		If_Context _localctx = new If_Context(Context, State);
		EnterRule(_localctx, 296, RULE_if_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2858;
			Match(IF);
			State = 2859;
			Match(OPAR);
			State = 2860;
			_localctx.expr = expression(0);
			State = 2861;
			Match(COMMA);
			State = 2862;
			_localctx.true_result = expression(0);
			State = 2863;
			Match(COMMA);
			State = 2864;
			_localctx.else_result = expression(0);
			State = 2865;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfnullContext : ParserRuleContext {
		public ExpressionContext null_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(BigQueryParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public IfnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIfnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIfnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfnullContext ifnull() {
		IfnullContext _localctx = new IfnullContext(Context, State);
		EnterRule(_localctx, 298, RULE_ifnull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2867;
			Match(IFNULL);
			State = 2868;
			Match(OPAR);
			State = 2869;
			expression(0);
			State = 2870;
			Match(COMMA);
			State = 2871;
			_localctx.null_result = expression(0);
			State = 2872;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullifContext : ParserRuleContext {
		public ExpressionContext expr_to_match;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(BigQueryParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public NullifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNullif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNullif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullifContext nullif() {
		NullifContext _localctx = new NullifContext(Context, State);
		EnterRule(_localctx, 300, RULE_nullif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2874;
			Match(NULLIF);
			State = 2875;
			Match(OPAR);
			State = 2876;
			expression(0);
			State = 2877;
			Match(COMMA);
			State = 2878;
			_localctx.expr_to_match = expression(0);
			State = 2879;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expressions_as_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Expressions_as_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions_as_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions_as_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions_as_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions_as_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expressions_as_aliasContext expressions_as_alias() {
		Expressions_as_aliasContext _localctx = new Expressions_as_aliasContext(Context, State);
		EnterRule(_localctx, 302, RULE_expressions_as_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2881;
			expressions();
			State = 2883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
				{
				State = 2882;
				as_alias();
				}
			}

			State = 2892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2885;
				Match(COMMA);
				State = 2886;
				expressions();
				State = 2888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) {
					{
					State = 2887;
					as_alias();
					}
				}

				}
				}
				State = 2894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expressions_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(BigQueryParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(BigQueryParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(BigQueryParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(BigQueryParser.DESC, i);
		}
		public Expressions_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expressions_asc_descContext expressions_asc_desc() {
		Expressions_asc_descContext _localctx = new Expressions_asc_descContext(Context, State);
		EnterRule(_localctx, 304, RULE_expressions_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2895;
			expression(0);
			State = 2897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 2896;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2899;
				Match(COMMA);
				State = 2900;
				expression(0);
				State = 2902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 2901;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 2908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Byte_literalContext byte_literal() {
			return GetRuleContext<Byte_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Big_numeric_literalContext big_numeric_literal() {
			return GetRuleContext<Big_numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_literalContext array_literal() {
			return GetRuleContext<Array_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_literalContext struct_literal() {
			return GetRuleContext<Struct_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_literalContext date_literal() {
			return GetRuleContext<Date_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_literalContext datetime_literal() {
			return GetRuleContext<Datetime_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Timestamp_literalContext timestamp_literal() {
			return GetRuleContext<Timestamp_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interval_literalContext interval_literal() {
			return GetRuleContext<Interval_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_literalContext json_literal() {
			return GetRuleContext<Json_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BigQueryParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(BigQueryParser.FLOATING_POINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 306, RULE_literal);
		try {
			State = 2926;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2909;
				string_literal();
				}
				break;
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2910;
				byte_literal();
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2911;
				numeric_literal();
				}
				break;
			case BIGNUMERIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2912;
				big_numeric_literal();
				}
				break;
			case OBR:
			case ARRAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2913;
				array_literal();
				}
				break;
			case OPAR:
			case STRUCT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2914;
				struct_literal();
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2915;
				date_literal();
				}
				break;
			case DATETIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2916;
				datetime_literal();
				}
				break;
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2917;
				timestamp_literal();
				}
				break;
			case RANGE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2918;
				range_literal();
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2919;
				interval_literal();
				}
				break;
			case JSON:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2920;
				json_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2921;
				Match(INTEGER_LITERAL);
				}
				break;
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2922;
				Match(FLOATING_POINT_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2923;
				Match(NULL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2924;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2925;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(BigQueryParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 308, RULE_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2928;
			Match(NUMERIC);
			State = 2929;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Big_numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGNUMERIC() { return GetToken(BigQueryParser.BIGNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Big_numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_big_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterBig_numeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitBig_numeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBig_numeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Big_numeric_literalContext big_numeric_literal() {
		Big_numeric_literalContext _localctx = new Big_numeric_literalContext(Context, State);
		EnterRule(_localctx, 310, RULE_big_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2931;
			Match(BIGNUMERIC);
			State = 2932;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBR() { return GetToken(BigQueryParser.OBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBR() { return GetToken(BigQueryParser.CBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		public Array_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterArray_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitArray_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_literalContext array_literal() {
		Array_literalContext _localctx = new Array_literalContext(Context, State);
		EnterRule(_localctx, 312, RULE_array_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARRAY) {
				{
				State = 2934;
				Match(ARRAY);
				State = 2939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2935;
					Match(LT);
					State = 2936;
					data_type();
					State = 2937;
					Match(GT);
					}
				}

				}
			}

			State = 2943;
			Match(OBR);
			State = 2945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31525317784980482L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -35710898571313119L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -558727828770652161L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 267649023L) != 0)) {
				{
				State = 2944;
				expressions();
				}
			}

			State = 2947;
			Match(CBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Struct_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_literalContext struct_literal() {
		Struct_literalContext _localctx = new Struct_literalContext(Context, State);
		EnterRule(_localctx, 314, RULE_struct_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRUCT) {
				{
				State = 2949;
				Match(STRUCT);
				State = 2961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2950;
					Match(LT);
					State = 2951;
					data_type();
					State = 2956;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2952;
						Match(COMMA);
						State = 2953;
						data_type();
						}
						}
						State = 2958;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2959;
					Match(GT);
					}
				}

				}
			}

			State = 2965;
			Match(OPAR);
			State = 2966;
			expressions();
			State = 2967;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 316, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
			case 1:
				{
				State = 2969;
				Match(ARRAY);
				State = 2974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2970;
					Match(LT);
					State = 2971;
					data_type();
					State = 2972;
					Match(GT);
					}
				}

				}
				break;
			case 2:
				{
				State = 2976;
				Match(STRUCT);
				State = 2988;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2977;
					Match(LT);
					State = 2978;
					data_type();
					State = 2983;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2979;
						Match(COMMA);
						State = 2980;
						data_type();
						}
						}
						State = 2985;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2986;
					Match(GT);
					}
				}

				}
				break;
			case 3:
				{
				State = 2990;
				identifier();
				State = 2991;
				data_type();
				}
				break;
			case 4:
				{
				State = 2993;
				identifier();
				}
				break;
			}
			State = 3000;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				{
				State = 2996;
				Match(OPAR);
				State = 2997;
				expressions();
				State = 2998;
				Match(CPAR);
				}
				break;
			}
			State = 3004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				{
				State = 3002;
				Match(COLLATE);
				State = 3003;
				string_literal();
				}
				break;
			}
			State = 3008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				{
				State = 3006;
				Match(NOT);
				State = 3007;
				Match(NULL);
				}
				break;
			}
			State = 3015;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				{
				State = 3010;
				Match(OPTIONS);
				State = 3011;
				Match(OPAR);
				State = 3012;
				option_parameters();
				State = 3013;
				Match(CPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BigQueryParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LITERAL() { return GetToken(BigQueryParser.RAW_STRING_LITERAL, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 318, RULE_string_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3017;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==RAW_STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Date_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_literalContext date_literal() {
		Date_literalContext _localctx = new Date_literalContext(Context, State);
		EnterRule(_localctx, 320, RULE_date_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3019;
			Match(DATE);
			State = 3020;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDatetime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDatetime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_literalContext datetime_literal() {
		Datetime_literalContext _localctx = new Datetime_literalContext(Context, State);
		EnterRule(_localctx, 322, RULE_datetime_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3022;
			Match(DATETIME);
			State = 3023;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timestamp_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestamp_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTimestamp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTimestamp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestamp_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timestamp_literalContext timestamp_literal() {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(Context, State);
		EnterRule(_localctx, 324, RULE_timestamp_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3025;
			Match(TIMESTAMP);
			State = 3026;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 326, RULE_range_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3028;
			Match(RANGE);
			State = 3029;
			Match(LT);
			State = 3030;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3031;
			Match(GT);
			State = 3032;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(BigQueryParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_partContext[] datetime_part() {
			return GetRuleContexts<Datetime_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_partContext datetime_part(int i) {
			return GetRuleContext<Datetime_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		public Interval_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterInterval_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitInterval_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interval_literalContext interval_literal() {
		Interval_literalContext _localctx = new Interval_literalContext(Context, State);
		EnterRule(_localctx, 328, RULE_interval_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3034;
			Match(INTERVAL);
			State = 3043;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,353,Context) ) {
			case 1:
				{
				State = 3035;
				expression(0);
				State = 3036;
				datetime_part();
				}
				break;
			case 2:
				{
				State = 3038;
				string_literal();
				State = 3039;
				datetime_part();
				State = 3040;
				Match(TO);
				State = 3041;
				datetime_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(BigQueryParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Json_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterJson_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitJson_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Json_literalContext json_literal() {
		Json_literalContext _localctx = new Json_literalContext(Context, State);
		EnterRule(_localctx, 330, RULE_json_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3045;
			Match(JSON);
			State = 3046;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Byte_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES_LITERAL() { return GetToken(BigQueryParser.BYTES_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_BYTES_LITERAL() { return GetToken(BigQueryParser.RAW_BYTES_LITERAL, 0); }
		public Byte_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byte_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterByte_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitByte_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByte_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Byte_literalContext byte_literal() {
		Byte_literalContext _localctx = new Byte_literalContext(Context, State);
		EnterRule(_localctx, 332, RULE_byte_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3048;
			_la = TokenStream.LA(1);
			if ( !(_la==BYTES_LITERAL || _la==RAW_BYTES_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_IDENTIFIER() { return GetToken(BigQueryParser.UNQUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(BigQueryParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGNUMERIC() { return GetToken(BigQueryParser.BIGNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(BigQueryParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(BigQueryParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(BigQueryParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(BigQueryParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(BigQueryParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(BigQueryParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(BigQueryParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(BigQueryParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(BigQueryParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(BigQueryParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(BigQueryParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(BigQueryParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BigQueryParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(BigQueryParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORRESPONDING() { return GetToken(BigQueryParser.CORRESPONDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL_PRIVACY() { return GetToken(BigQueryParser.DIFFERENTIAL_PRIVACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(BigQueryParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(BigQueryParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BigQueryParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(BigQueryParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(BigQueryParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BigQueryParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(BigQueryParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(BigQueryParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(BigQueryParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_AGG() { return GetToken(BigQueryParser.ARRAY_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(BigQueryParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICIES() { return GetToken(BigQueryParser.POLICIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(BigQueryParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(BigQueryParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(BigQueryParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(BigQueryParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(BigQueryParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(BigQueryParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(BigQueryParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(BigQueryParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(BigQueryParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORING() { return GetToken(BigQueryParser.STORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 334, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3050;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 109051903L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_aliasContext : ParserRuleContext {
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public As_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_aliasContext as_alias() {
		As_aliasContext _localctx = new As_aliasContext(Context, State);
		EnterRule(_localctx, 336, RULE_as_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3052;
				Match(AS);
				}
			}

			State = 3055;
			_localctx.alias = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public IdentifierContext typename;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(BigQueryParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(BigQueryParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(BigQueryParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Format_clauseContext format_clause() {
			return GetRuleContext<Format_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(BigQueryParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_aggContext array_agg() {
			return GetRuleContext<Array_aggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 338, RULE_function_call);
		int _la;
		try {
			State = 3117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3057;
				Match(ARRAY);
				State = 3058;
				Match(OPAR);
				State = 3059;
				expression(0);
				State = 3060;
				Match(CPAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3062;
				Match(AVG);
				State = 3063;
				Match(OPAR);
				State = 3065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTINCT) {
					{
					State = 3064;
					Match(DISTINCT);
					}
				}

				State = 3067;
				expression(0);
				State = 3068;
				Match(CPAR);
				State = 3071;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
				case 1:
					{
					State = 3069;
					Match(OVER);
					State = 3070;
					over_clause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3073;
				Match(AVG);
				State = 3074;
				Match(OPAR);
				State = 3075;
				expression(0);
				State = 3081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3076;
					Match(COMMA);
					State = 3077;
					identifier();
					State = 3078;
					Match(ARROW);
					State = 3079;
					expression(0);
					}
				}

				State = 3083;
				Match(CPAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3085;
				Match(CAST);
				State = 3086;
				Match(OPAR);
				State = 3087;
				expression(0);
				State = 3088;
				Match(AS);
				State = 3089;
				_localctx.typename = identifier();
				State = 3091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 3090;
					format_clause();
					}
				}

				State = 3093;
				Match(CPAR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3095;
				Match(COLLATE);
				State = 3096;
				Match(OPAR);
				State = 3097;
				expression(0);
				State = 3098;
				Match(COMMA);
				State = 3099;
				expression(0);
				State = 3100;
				Match(CPAR);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3102;
				Match(EXTRACT);
				State = 3103;
				Match(OPAR);
				State = 3104;
				identifier();
				State = 3105;
				Match(FROM);
				State = 3106;
				expression(0);
				State = 3107;
				Match(CPAR);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3109;
				array_agg();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3110;
				identifier();
				State = 3111;
				Match(OPAR);
				State = 3113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31525317784980482L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & -35710898571313119L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -558727828770652161L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 267649023L) != 0)) {
					{
					State = 3112;
					expressions();
					}
				}

				State = 3115;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_aggContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_AGG() { return GetToken(BigQueryParser.ARRAY_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keysContext order_by_keys() {
			return GetRuleContext<Order_by_keysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(BigQueryParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(BigQueryParser.RESPECT, 0); }
		public Array_aggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_agg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterArray_agg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitArray_agg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_agg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_aggContext array_agg() {
		Array_aggContext _localctx = new Array_aggContext(Context, State);
		EnterRule(_localctx, 340, RULE_array_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3119;
			Match(ARRAY_AGG);
			State = 3120;
			Match(OPAR);
			State = 3122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISTINCT) {
				{
				State = 3121;
				Match(DISTINCT);
				}
			}

			State = 3124;
			expression(0);
			State = 3127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==RESPECT) {
				{
				State = 3125;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==RESPECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3126;
				Match(NULLS);
				}
			}

			State = 3130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3129;
				order_by_keys();
				}
			}

			State = 3134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3132;
				Match(LIMIT);
				State = 3133;
				expression(0);
				}
			}

			State = 3136;
			Match(CPAR);
			State = 3139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				{
				State = 3137;
				Match(OVER);
				State = 3138;
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_keysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keyContext[] order_by_key() {
			return GetRuleContexts<Order_by_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keyContext order_by_key(int i) {
			return GetRuleContext<Order_by_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Order_by_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_keys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_keysContext order_by_keys() {
		Order_by_keysContext _localctx = new Order_by_keysContext(Context, State);
		EnterRule(_localctx, 342, RULE_order_by_keys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3141;
			order_by_key();
			State = 3146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3142;
				Match(COMMA);
				State = 3143;
				order_by_key();
				}
				}
				State = 3148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_keyContext : ParserRuleContext {
		public Path_expressionContext key;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BigQueryParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(BigQueryParser.DESC, 0); }
		public Order_by_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_keyContext order_by_key() {
		Order_by_keyContext _localctx = new Order_by_keyContext(Context, State);
		EnterRule(_localctx, 344, RULE_order_by_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3149;
			Match(ORDER);
			State = 3150;
			Match(BY);
			State = 3151;
			_localctx.key = path_expression();
			State = 3153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3152;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 346, RULE_window_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3155;
			identifier();
			State = 3156;
			Match(OPAR);
			State = 3159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case IF:
			case INTERVAL:
			case NOT:
			case NULL:
			case RANGE:
			case SELECT:
			case STRUCT:
			case TRUE:
			case UNNEST:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				{
				State = 3157;
				expressions();
				}
				break;
			case STAR:
				{
				State = 3158;
				Match(STAR);
				}
				break;
			case CPAR:
				break;
			default:
				break;
			}
			State = 3161;
			Match(CPAR);
			State = 3162;
			Match(OVER);
			State = 3163;
			over_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public IdentifierContext named_window;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 348, RULE_over_clause);
		try {
			State = 3170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3165;
				_localctx.named_window = identifier();
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3166;
				Match(OPAR);
				State = 3167;
				window_specification();
				State = 3168;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_clauseContext : ParserRuleContext {
		public ExpressionContext format_string_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(BigQueryParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Format_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFormat_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFormat_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormat_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Format_clauseContext format_clause() {
		Format_clauseContext _localctx = new Format_clauseContext(Context, State);
		EnterRule(_localctx, 350, RULE_format_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3172;
			Match(FORMAT);
			State = 3173;
			_localctx.format_string_expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public Path_expressionContext variable_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 352, RULE_set);
		try {
			State = 3189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3175;
				Match(SET);
				State = 3176;
				_localctx.variable_name = path_expression();
				State = 3177;
				Match(EQ);
				State = 3178;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3180;
				Match(SET);
				State = 3181;
				Match(OPAR);
				State = 3182;
				path_expressions();
				State = 3183;
				Match(CPAR);
				State = 3184;
				Match(EQ);
				State = 3185;
				Match(OPAR);
				State = 3186;
				expressions();
				State = 3187;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Path_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPath_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPath_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionsContext path_expressions() {
		Path_expressionsContext _localctx = new Path_expressionsContext(Context, State);
		EnterRule(_localctx, 354, RULE_path_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3191;
			path_expression();
			State = 3196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3192;
				Match(COMMA);
				State = 3193;
				path_expression();
				}
				}
				State = 3198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext[] reserved() {
			return GetRuleContexts<ReservedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved(int i) {
			return GetRuleContext<ReservedContext>(i);
		}
		public Path_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionContext path_expression() {
		Path_expressionContext _localctx = new Path_expressionContext(Context, State);
		EnterRule(_localctx, 356, RULE_path_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3199;
			identifier();
			State = 3207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,373,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3200;
					Match(DOT);
					State = 3203;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case BIGNUMERIC:
					case DATE:
					case DATETIME:
					case NUMERIC:
					case TIMESTAMP:
					case YEAR:
					case QUARTER:
					case MONTH:
					case WEEK:
					case DAY:
					case HOUR:
					case MINUTE:
					case SECOND:
					case MILLISECOND:
					case MICROSECOND:
					case JSON:
					case OFFSET:
					case NAME:
					case STRICT:
					case CORRESPONDING:
					case DIFFERENTIAL_PRIVACY:
					case OPTIONS:
					case VALUE:
					case REPLACE:
					case SYSTEM:
					case PERCENT:
					case PIVOT:
					case UNPIVOT:
					case SYSTEM_TIME:
					case ROW:
					case INCLUDE:
					case FORMAT:
					case SETS:
					case AVG:
					case SCHEMA:
					case TEMP:
					case TEMPORARY:
					case TABLE:
					case CONSTRAINT:
					case ENFORCED:
					case PRIMARY:
					case KEY:
					case FOREIGN:
					case REFERENCES:
					case CLUSTER:
					case CONNECTION:
					case ARRAY_AGG:
					case COPY:
					case SNAPSHOT:
					case CLONE:
					case VIEW:
					case DROP:
					case SEARCH:
					case INDEX:
					case VECTOR:
					case ASSIGNMENT:
					case RESERVATION:
					case ACCESS:
					case POLICY:
					case POLICIES:
					case PROCEDURE:
					case FUNCTION:
					case REPLICA:
					case COLUMNS:
					case RETURNS:
					case DETERMINISTIC:
					case LANGUAGE:
					case REMOTE:
					case AGGREGATE:
					case TYPE:
					case OUT:
					case INOUT:
					case BEGIN:
					case SECURITY:
					case INVOKER:
					case COALESCE:
					case NULLIF:
					case IFNULL:
					case GRANT:
					case FILTER:
					case COLUMN:
					case STORING:
					case ALTER:
					case ADD:
					case RENAME:
					case UNQUOTED_IDENTIFIER:
					case QUOTED_IDENTIFIER:
						{
						State = 3201;
						identifier();
						}
						break;
					case ALL:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSERT_ROWS_MODIFIED:
					case AT:
					case BETWEEN:
					case BY:
					case CASE:
					case CAST:
					case COLLATE:
					case CONTAINS:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case DEFAULT:
					case DEFINE:
					case DESC:
					case DISTINCT:
					case ELSE:
					case END:
					case ENUM:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDE:
					case EXISTS:
					case EXTRACT:
					case FALSE:
					case FETCH:
					case FOLLOWING:
					case FOR:
					case FROM:
					case FULL:
					case GROUP:
					case GROUPING:
					case GROUPS:
					case HASH:
					case HAVING:
					case IF:
					case IGNORE:
					case IN:
					case INNER:
					case INTERSECT:
					case INTERVAL:
					case INTO:
					case IS:
					case JOIN:
					case LATERAL:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOOKUP:
					case MERGE:
					case NATURAL:
					case NEW:
					case NO:
					case NOT:
					case NULL:
					case NULLS:
					case OF:
					case ON:
					case OR:
					case ORDER:
					case OUTER:
					case OVER:
					case PARTITION:
					case PRECEDING:
					case PROTO:
					case QUALIFY:
					case RANGE:
					case RECURSIVE:
					case RESPECT:
					case RIGHT:
					case ROLLUP:
					case ROWS:
					case SELECT:
					case SET:
					case SOME:
					case STRUCT:
					case TABLESAMPLE:
					case THEN:
					case TO:
					case TREAT:
					case TRUE:
					case UNBOUNDED:
					case UNION:
					case UNNEST:
					case USING:
					case WHEN:
					case WHERE:
					case WINDOW:
					case WITH:
					case WITHIN:
						{
						State = 3202;
						reserved();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 3209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,373,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public As_column_nameContext[] as_column_name() {
			return GetRuleContexts<As_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_column_nameContext as_column_name(int i) {
			return GetRuleContext<As_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public As_column_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_namesContext as_column_names() {
		As_column_namesContext _localctx = new As_column_namesContext(Context, State);
		EnterRule(_localctx, 358, RULE_as_column_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3210;
			as_column_name();
			State = 3215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3211;
				Match(COMMA);
				State = 3212;
				as_column_name();
				}
				}
				State = 3217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_nameContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public As_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_nameContext as_column_name() {
		As_column_nameContext _localctx = new As_column_nameContext(Context, State);
		EnterRule(_localctx, 360, RULE_as_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3218;
			expression(0);
			State = 3219;
			Match(AS);
			State = 3220;
			_localctx.column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BigQueryParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT_ROWS_MODIFIED() { return GetToken(BigQueryParser.ASSERT_ROWS_MODIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BigQueryParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(BigQueryParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(BigQueryParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(BigQueryParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(BigQueryParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BigQueryParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(BigQueryParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(BigQueryParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(BigQueryParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(BigQueryParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(BigQueryParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(BigQueryParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(BigQueryParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(BigQueryParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(BigQueryParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(BigQueryParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(BigQueryParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(BigQueryParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(BigQueryParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BigQueryParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(BigQueryParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOKUP() { return GetToken(BigQueryParser.LOOKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(BigQueryParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(BigQueryParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(BigQueryParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(BigQueryParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(BigQueryParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY() { return GetToken(BigQueryParser.QUALIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(BigQueryParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(BigQueryParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BigQueryParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(BigQueryParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(BigQueryParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(BigQueryParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(BigQueryParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(BigQueryParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BigQueryParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(BigQueryParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(BigQueryParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(BigQueryParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(BigQueryParser.WITHIN, 0); }
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 362, RULE_reserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3222;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -16777216L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 72057594037927935L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(BigQueryParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(BigQueryParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(BigQueryParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(BigQueryParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(BigQueryParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(BigQueryParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(BigQueryParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(BigQueryParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(BigQueryParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(BigQueryParser.MICROSECOND, 0); }
		public Datetime_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDatetime_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDatetime_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_partContext datetime_part() {
		Datetime_partContext _localctx = new Datetime_partContext(Context, State);
		EnterRule(_localctx, 364, RULE_datetime_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3224;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & 1023L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 98: return query_expression_sempred((Query_expressionContext)_localctx, predIndex);
		case 124: return from_item_sempred((From_itemContext)_localctx, predIndex);
		case 143: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool query_expression_sempred(Query_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 25);
		case 4: return Precpred(Context, 24);
		case 5: return Precpred(Context, 23);
		case 6: return Precpred(Context, 22);
		case 7: return Precpred(Context, 21);
		case 8: return Precpred(Context, 20);
		case 9: return Precpred(Context, 19);
		case 10: return Precpred(Context, 17);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 14);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 28);
		case 15: return Precpred(Context, 27);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,223,3227,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		1,0,5,0,368,8,0,10,0,12,0,371,9,0,1,0,1,0,4,0,375,8,0,11,0,12,0,376,1,
		0,5,0,380,8,0,10,0,12,0,383,9,0,1,0,5,0,386,8,0,10,0,12,0,389,9,0,1,0,
		1,0,1,1,5,1,394,8,1,10,1,12,1,397,9,1,1,1,1,1,5,1,401,8,1,10,1,12,1,404,
		9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,478,8,2,1,3,1,3,1,4,1,4,1,4,3,4,485,8,4,1,4,3,4,488,8,
		4,1,4,1,4,1,4,1,4,3,4,494,8,4,1,4,1,4,1,4,1,4,1,4,3,4,501,8,4,1,4,1,4,
		1,4,3,4,506,8,4,1,4,1,4,1,4,3,4,511,8,4,1,4,1,4,1,4,3,4,516,8,4,1,4,1,
		4,1,4,3,4,521,8,4,1,4,1,4,1,4,1,4,1,4,3,4,528,8,4,1,4,1,4,3,4,532,8,4,
		1,5,1,5,1,5,3,5,537,8,5,1,5,1,5,1,5,1,5,3,5,543,8,5,1,5,1,5,1,5,1,5,1,
		5,3,5,550,8,5,1,5,1,5,1,5,3,5,555,8,5,1,5,1,5,1,5,1,5,3,5,561,8,5,1,5,
		1,5,1,5,3,5,566,8,5,1,5,1,5,1,5,3,5,571,8,5,1,5,1,5,1,5,3,5,576,8,5,1,
		5,1,5,1,5,1,5,1,5,3,5,583,8,5,1,5,1,5,3,5,587,8,5,1,6,1,6,1,6,3,6,592,
		8,6,1,6,1,6,1,6,1,6,3,6,598,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,606,8,6,1,
		6,1,6,1,6,3,6,611,8,6,1,6,1,6,1,6,3,6,616,8,6,1,6,1,6,1,6,3,6,621,8,6,
		1,6,1,6,1,6,1,6,1,6,3,6,628,8,6,1,6,1,6,3,6,632,8,6,1,7,1,7,1,7,1,7,1,
		7,1,7,3,7,640,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,650,8,7,1,7,1,7,
		1,7,1,7,1,7,3,7,657,8,7,1,8,1,8,1,8,1,8,1,8,3,8,664,8,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,3,8,674,8,8,1,8,1,8,1,8,3,8,679,8,8,1,8,1,8,1,8,3,8,
		684,8,8,1,8,1,8,1,8,3,8,689,8,8,1,8,1,8,1,8,3,8,694,8,8,1,8,1,8,1,8,1,
		8,1,8,3,8,701,8,8,1,8,1,8,3,8,705,8,8,1,9,1,9,1,9,3,9,710,8,9,1,9,1,9,
		1,9,1,9,3,9,716,8,9,1,9,1,9,1,9,1,9,1,9,3,9,723,8,9,1,9,1,9,1,9,1,9,1,
		9,3,9,730,8,9,1,9,1,9,1,9,1,10,1,10,1,10,3,10,738,8,10,1,10,1,10,1,10,
		1,10,1,10,3,10,745,8,10,1,10,1,10,1,10,1,10,3,10,751,8,10,1,10,1,10,1,
		10,3,10,756,8,10,1,10,1,10,1,10,1,10,1,10,3,10,763,8,10,1,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,777,8,11,1,11,1,11,1,
		11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,790,8,12,1,12,1,12,1,12,
		1,12,3,12,796,8,12,1,12,1,12,1,12,1,12,1,12,3,12,803,8,12,1,13,1,13,1,
		13,3,13,808,8,13,1,13,1,13,1,13,1,13,1,13,3,13,815,8,13,1,13,1,13,1,13,
		1,13,1,13,3,13,822,8,13,1,13,1,13,1,13,1,13,3,13,828,8,13,3,13,830,8,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,839,8,13,3,13,841,8,13,1,13,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,5,14,851,8,14,10,14,12,14,854,9,14,1,
		15,1,15,1,15,1,16,1,16,1,16,3,16,862,8,16,1,16,3,16,865,8,16,1,16,1,16,
		1,16,1,16,3,16,871,8,16,1,16,1,16,1,16,3,16,876,8,16,1,16,1,16,1,16,3,
		16,881,8,16,1,16,1,16,1,16,3,16,886,8,16,1,16,1,16,1,16,3,16,891,8,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,902,8,16,1,17,1,17,1,
		17,5,17,907,8,17,10,17,12,17,910,9,17,1,18,1,18,1,18,1,19,1,19,1,19,3,
		19,918,8,19,1,19,3,19,921,8,19,1,19,1,19,1,19,1,19,3,19,927,8,19,1,19,
		1,19,1,19,3,19,932,8,19,1,19,1,19,1,19,3,19,937,8,19,1,19,1,19,1,19,3,
		19,942,8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,950,8,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,3,19,959,8,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,967,
		8,20,1,20,3,20,970,8,20,1,20,1,20,1,20,1,20,3,20,976,8,20,1,20,1,20,1,
		20,3,20,981,8,20,1,20,1,20,1,20,3,20,986,8,20,1,20,1,20,1,20,3,20,991,
		8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1001,8,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,1013,8,21,1,21,3,21,1016,
		8,21,1,21,1,21,1,21,1,21,3,21,1022,8,21,1,21,1,21,1,21,3,21,1027,8,21,
		1,21,1,21,1,21,3,21,1032,8,21,1,21,1,21,1,21,3,21,1037,8,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1051,8,21,1,22,
		1,22,1,22,3,22,1056,8,22,1,22,3,22,1059,8,22,1,22,1,22,1,22,1,22,1,22,
		3,22,1066,8,22,1,22,1,22,1,22,3,22,1071,8,22,1,22,1,22,1,22,3,22,1076,
		8,22,1,22,1,22,1,22,3,22,1081,8,22,1,22,1,22,1,22,3,22,1086,8,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,1097,8,22,1,23,1,23,1,23,
		5,23,1102,8,23,10,23,12,23,1105,9,23,1,24,1,24,1,24,1,24,3,24,1111,8,24,
		1,25,1,25,1,25,3,25,1116,8,25,1,25,3,25,1119,8,25,1,25,1,25,1,25,1,25,
		1,25,3,25,1126,8,25,1,25,1,25,1,25,3,25,1131,8,25,1,25,1,25,1,25,3,25,
		1136,8,25,1,25,1,25,1,25,3,25,1141,8,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,3,25,1153,8,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,
		1161,8,26,1,26,1,26,1,26,1,26,1,26,3,26,1168,8,26,1,26,1,26,1,26,3,26,
		1173,8,26,1,26,1,26,1,26,3,26,1178,8,26,1,26,1,26,1,26,3,26,1183,8,26,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1192,8,26,1,26,1,26,1,26,1,26,
		1,26,3,26,1199,8,26,1,26,1,26,1,26,1,27,1,27,1,27,5,27,1207,8,27,10,27,
		12,27,1210,9,27,1,28,1,28,1,28,1,28,3,28,1216,8,28,1,29,1,29,1,29,5,29,
		1221,8,29,10,29,12,29,1224,9,29,1,30,1,30,1,30,1,31,1,31,1,31,3,31,1232,
		8,31,1,31,1,31,1,31,1,31,3,31,1238,8,31,1,31,1,31,1,31,3,31,1243,8,31,
		1,31,1,31,1,31,3,31,1248,8,31,1,31,1,31,1,31,3,31,1253,8,31,1,31,1,31,
		1,31,1,31,1,31,1,31,3,31,1261,8,31,1,31,1,31,5,31,1265,8,31,10,31,12,31,
		1268,9,31,1,31,1,31,4,31,1272,8,31,11,31,12,31,1273,1,31,5,31,1277,8,31,
		10,31,12,31,1280,9,31,1,31,5,31,1283,8,31,10,31,12,31,1286,9,31,1,31,1,
		31,1,32,1,32,1,32,5,32,1293,8,32,10,32,12,32,1296,9,32,1,33,3,33,1299,
		8,33,1,33,1,33,1,33,1,34,1,34,1,34,3,34,1307,8,34,1,34,1,34,1,34,1,34,
		3,34,1313,8,34,1,34,1,34,1,34,3,34,1318,8,34,1,34,1,34,1,34,3,34,1323,
		8,34,1,34,1,34,1,34,3,34,1328,8,34,1,34,1,34,1,34,1,34,3,34,1334,8,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1344,8,34,1,34,1,34,1,34,
		1,34,3,34,1350,8,34,1,35,1,35,1,35,3,35,1355,8,35,1,35,1,35,1,35,1,35,
		1,35,1,35,3,35,1363,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		3,35,1374,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,
		1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1412,8,39,
		1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
		1427,8,39,1,39,3,39,1430,8,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1438,
		8,39,1,40,1,40,1,40,5,40,1443,8,40,10,40,12,40,1446,9,40,1,41,1,41,3,41,
		1450,8,41,1,41,1,41,1,41,1,41,1,41,3,41,1457,8,41,1,42,1,42,1,42,3,42,
		1462,8,42,1,42,1,42,1,42,1,42,1,42,3,42,1469,8,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1482,8,42,1,42,1,42,1,42,1,42,
		1,42,1,43,1,43,1,43,1,43,3,43,1493,8,43,1,43,1,43,1,43,3,43,1498,8,43,
		1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,1510,8,44,1,44,
		1,44,1,44,3,44,1515,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,
		1,45,1,45,3,45,1528,8,45,1,45,1,45,1,45,3,45,1533,8,45,1,45,1,45,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,3,45,1544,8,45,1,46,1,46,1,46,1,46,3,46,
		1550,8,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,1561,8,47,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,1578,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1587,8,48,
		1,48,5,48,1590,8,48,10,48,12,48,1593,9,48,1,49,1,49,1,49,1,49,1,49,3,49,
		1600,8,49,1,49,1,49,1,49,3,49,1605,8,49,1,49,1,49,1,49,1,49,5,49,1611,
		8,49,10,49,12,49,1614,9,49,1,50,1,50,1,50,1,50,1,50,3,50,1621,8,50,1,50,
		3,50,1624,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1648,8,50,
		1,51,1,51,1,51,1,51,1,51,3,51,1655,8,51,1,51,1,51,1,51,3,51,1660,8,51,
		1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,
		3,52,1676,8,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,1687,
		8,53,1,53,1,53,1,53,1,53,5,53,1693,8,53,10,53,12,53,1696,9,53,1,54,1,54,
		1,54,1,54,3,54,1702,8,54,1,54,1,54,1,54,5,54,1707,8,54,10,54,12,54,1710,
		9,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,5,56,1722,8,56,
		10,56,12,56,1725,9,56,1,57,1,57,1,57,1,57,3,57,1731,8,57,1,57,1,57,1,58,
		1,58,1,58,1,58,1,58,3,58,1740,8,58,1,58,1,58,1,58,3,58,1745,8,58,1,58,
		1,58,1,58,1,58,1,58,3,58,1752,8,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,
		3,59,1761,8,59,1,59,1,59,1,59,3,59,1766,8,59,1,59,1,59,1,59,1,59,1,59,
		1,59,3,59,1774,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,
		1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,
		1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,3,73,
		1813,8,73,1,73,1,73,1,73,3,73,1818,8,73,1,73,1,73,1,74,1,74,3,74,1824,
		8,74,1,74,1,74,1,74,3,74,1829,8,74,1,74,1,74,1,74,3,74,1834,8,74,1,74,
		1,74,3,74,1838,8,74,1,75,1,75,1,75,1,75,3,75,1844,8,75,1,75,1,75,1,76,
		1,76,1,76,1,76,1,76,3,76,1853,8,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,
		3,77,1862,8,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,1870,8,78,1,78,1,78,
		1,79,1,79,1,79,1,79,1,79,3,79,1879,8,79,1,79,1,79,1,80,1,80,1,80,1,80,
		3,80,1887,8,80,1,80,1,80,1,80,3,80,1892,8,80,1,80,1,80,1,80,3,80,1897,
		8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,3,81,1906,8,81,1,81,1,81,1,81,
		3,81,1911,8,81,1,81,1,81,1,81,3,81,1916,8,81,1,81,1,81,1,82,1,82,1,82,
		1,82,3,82,1924,8,82,1,82,1,82,1,82,3,82,1929,8,82,1,82,1,82,1,82,3,82,
		1934,8,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1944,8,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1957,8,83,1,84,
		1,84,1,84,1,84,3,84,1963,8,84,1,84,1,84,1,85,1,85,1,85,1,85,3,85,1971,
		8,85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,1979,8,86,1,86,1,86,1,87,1,87,
		1,87,1,87,1,87,3,87,1988,8,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,
		1,88,3,88,1999,8,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,5,89,2008,8,89,
		10,89,12,89,2011,9,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2019,8,90,1,91,
		1,91,1,91,5,91,2024,8,91,10,91,12,91,2027,9,91,1,92,1,92,1,92,1,92,3,92,
		2033,8,92,1,92,1,92,1,92,1,92,3,92,2039,8,92,1,92,5,92,2042,8,92,10,92,
		12,92,2045,9,92,3,92,2047,8,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,
		1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,
		1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,3,97,2080,8,97,1,97,1,97,
		1,97,3,97,2085,8,97,1,97,1,97,1,97,1,97,3,97,2091,8,97,1,97,1,97,1,97,
		1,97,1,97,3,97,2098,8,97,1,98,1,98,1,98,3,98,2103,8,98,1,98,1,98,3,98,
		2107,8,98,1,98,1,98,1,98,3,98,2112,8,98,5,98,2114,8,98,10,98,12,98,2117,
		9,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2127,8,98,1,98,1,98,
		1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2139,8,98,1,98,1,98,1,98,
		1,98,5,98,2145,8,98,10,98,12,98,2148,9,98,1,99,1,99,1,99,1,99,3,99,2154,
		8,99,1,99,1,99,1,99,3,99,2159,8,99,5,99,2161,8,99,10,99,12,99,2164,9,99,
		3,99,2166,8,99,1,99,1,99,1,99,1,99,3,99,2172,8,99,3,99,2174,8,99,1,100,
		1,100,1,100,3,100,2179,8,100,3,100,2181,8,100,1,100,1,100,1,100,1,100,
		1,100,1,100,3,100,2189,8,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
		3,100,2198,8,100,1,100,3,100,2201,8,100,1,100,1,100,1,100,1,100,1,100,
		1,100,3,100,2209,8,100,3,100,2211,8,100,3,100,2213,8,100,1,100,1,100,1,
		101,1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,1,103,
		1,103,1,103,1,103,1,104,1,104,1,104,3,104,2235,8,104,1,104,3,104,2238,
		8,104,1,104,1,104,3,104,2242,8,104,1,104,1,104,1,104,3,104,2247,8,104,
		1,104,1,104,3,104,2251,8,104,1,104,1,104,1,104,3,104,2256,8,104,1,104,
		1,104,3,104,2260,8,104,1,104,1,104,3,104,2264,8,104,1,104,1,104,3,104,
		2268,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,2277,8,105,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,5,107,
		2290,8,107,10,107,12,107,2293,9,107,1,108,1,108,1,108,1,108,3,108,2299,
		8,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,
		1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,5,112,2322,
		8,112,10,112,12,112,2325,9,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
		3,113,2334,8,113,1,114,3,114,2337,8,114,1,114,1,114,1,114,3,114,2342,8,
		114,1,114,1,114,1,114,3,114,2347,8,114,1,114,3,114,2350,8,114,1,115,1,
		115,1,115,3,115,2355,8,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,
		116,2364,8,116,3,116,2366,8,116,1,117,1,117,1,117,1,117,1,117,1,117,1,
		117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
		1,117,1,117,1,117,1,117,3,117,2390,8,117,1,118,1,118,1,118,1,118,1,118,
		1,118,1,118,1,118,1,118,1,118,3,118,2402,8,118,1,119,1,119,1,119,1,119,
		1,119,1,119,1,119,3,119,2411,8,119,1,120,1,120,1,120,1,120,1,120,3,120,
		2418,8,120,1,121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,5,122,
		2429,8,122,10,122,12,122,2432,9,122,1,123,1,123,1,123,3,123,2437,8,123,
		1,123,3,123,2440,8,123,1,124,1,124,1,124,3,124,2445,8,124,1,124,1,124,
		1,124,1,124,1,124,3,124,2452,8,124,1,124,1,124,1,124,1,124,1,124,1,124,
		1,124,1,124,1,124,1,124,3,124,2464,8,124,1,124,1,124,1,124,1,124,1,124,
		1,124,3,124,2472,8,124,1,124,1,124,1,124,1,124,3,124,2478,8,124,3,124,
		2480,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,5,124,
		2491,8,124,10,124,12,124,2494,9,124,1,125,1,125,1,125,1,125,1,125,3,125,
		2501,8,125,1,125,1,125,3,125,2505,8,125,3,125,2507,8,125,1,125,1,125,1,
		125,3,125,2512,8,125,3,125,2514,8,125,1,126,1,126,1,126,3,126,2519,8,126,
		1,127,3,127,2522,8,127,1,127,1,127,1,127,3,127,2527,8,127,1,127,1,127,
		1,127,3,127,2532,8,127,1,127,1,127,1,127,3,127,2537,8,127,1,127,3,127,
		2540,8,127,1,128,1,128,3,128,2544,8,128,1,129,1,129,1,129,1,130,1,130,
		1,130,1,130,1,130,1,131,1,131,1,131,1,131,3,131,2558,8,131,1,131,1,131,
		1,131,3,131,2563,8,131,5,131,2565,8,131,10,131,12,131,2568,9,131,1,131,
		1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2579,8,131,1,132,
		1,132,1,132,1,132,1,132,3,132,2586,8,132,1,132,1,132,1,132,3,132,2591,
		8,132,1,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
		1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,135,1,135,
		3,135,2616,8,135,1,135,1,135,1,135,3,135,2621,8,135,5,135,2623,8,135,10,
		135,12,135,2626,9,135,1,136,1,136,1,136,3,136,2631,8,136,1,136,1,136,1,
		136,3,136,2636,8,136,5,136,2638,8,136,10,136,12,136,2641,9,136,1,136,1,
		136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,138,1,138,1,138,5,138,
		2655,8,138,10,138,12,138,2658,9,138,1,139,1,139,1,139,1,139,1,140,1,140,
		1,140,5,140,2667,8,140,10,140,12,140,2670,9,140,1,141,1,141,1,141,3,141,
		2675,8,141,3,141,2677,8,141,1,142,1,142,1,142,3,142,2682,8,142,1,142,1,
		142,1,142,1,142,1,142,1,142,3,142,2690,8,142,1,142,1,142,1,142,1,142,1,
		142,3,142,2697,8,142,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,
		143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
		1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2729,
		8,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
		3,143,2742,8,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
		1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2762,8,143,
		1,143,3,143,2765,8,143,1,143,1,143,1,143,1,143,3,143,2771,8,143,1,143,
		1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2784,
		8,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
		1,143,1,143,1,143,3,143,2800,8,143,1,143,1,143,1,143,3,143,2805,8,143,
		1,143,5,143,2808,8,143,10,143,12,143,2811,9,143,1,144,1,144,1,144,5,144,
		2816,8,144,10,144,12,144,2819,9,144,1,145,1,145,1,145,1,145,1,145,1,145,
		1,145,4,145,2828,8,145,11,145,12,145,2829,1,145,1,145,3,145,2834,8,145,
		1,145,1,145,1,146,1,146,1,146,1,146,1,146,1,146,4,146,2844,8,146,11,146,
		12,146,2845,1,146,1,146,3,146,2850,8,146,1,146,1,146,1,147,1,147,1,147,
		1,147,1,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,149,
		1,149,1,149,1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,1,150,1,150,
		1,150,1,151,1,151,3,151,2884,8,151,1,151,1,151,1,151,3,151,2889,8,151,
		5,151,2891,8,151,10,151,12,151,2894,9,151,1,152,1,152,3,152,2898,8,152,
		1,152,1,152,1,152,3,152,2903,8,152,5,152,2905,8,152,10,152,12,152,2908,
		9,152,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
		1,153,1,153,1,153,1,153,1,153,1,153,3,153,2927,8,153,1,154,1,154,1,154,
		1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,3,156,2940,8,156,3,156,
		2942,8,156,1,156,1,156,3,156,2946,8,156,1,156,1,156,1,157,1,157,1,157,
		1,157,1,157,5,157,2955,8,157,10,157,12,157,2958,9,157,1,157,1,157,3,157,
		2962,8,157,3,157,2964,8,157,1,157,1,157,1,157,1,157,1,158,1,158,1,158,
		1,158,1,158,3,158,2975,8,158,1,158,1,158,1,158,1,158,1,158,5,158,2982,
		8,158,10,158,12,158,2985,9,158,1,158,1,158,3,158,2989,8,158,1,158,1,158,
		1,158,1,158,3,158,2995,8,158,1,158,1,158,1,158,1,158,3,158,3001,8,158,
		1,158,1,158,3,158,3005,8,158,1,158,1,158,3,158,3009,8,158,1,158,1,158,
		1,158,1,158,1,158,3,158,3016,8,158,1,159,1,159,1,160,1,160,1,160,1,161,
		1,161,1,161,1,162,1,162,1,162,1,163,1,163,1,163,1,163,1,163,1,163,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,3044,8,164,1,165,
		1,165,1,165,1,166,1,166,1,167,1,167,1,168,3,168,3054,8,168,1,168,1,168,
		1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,3066,8,169,1,169,
		1,169,1,169,1,169,3,169,3072,8,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,1,169,3,169,3082,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,3,169,3092,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
		3,169,3114,8,169,1,169,1,169,3,169,3118,8,169,1,170,1,170,1,170,3,170,
		3123,8,170,1,170,1,170,1,170,3,170,3128,8,170,1,170,3,170,3131,8,170,1,
		170,1,170,3,170,3135,8,170,1,170,1,170,1,170,3,170,3140,8,170,1,171,1,
		171,1,171,5,171,3145,8,171,10,171,12,171,3148,9,171,1,172,1,172,1,172,
		1,172,3,172,3154,8,172,1,173,1,173,1,173,1,173,3,173,3160,8,173,1,173,
		1,173,1,173,1,173,1,174,1,174,1,174,1,174,1,174,3,174,3171,8,174,1,175,
		1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
		1,176,1,176,1,176,1,176,3,176,3190,8,176,1,177,1,177,1,177,5,177,3195,
		8,177,10,177,12,177,3198,9,177,1,178,1,178,1,178,1,178,3,178,3204,8,178,
		5,178,3206,8,178,10,178,12,178,3209,9,178,1,179,1,179,1,179,5,179,3214,
		8,179,10,179,12,179,3217,9,179,1,180,1,180,1,180,1,180,1,181,1,181,1,182,
		1,182,1,182,0,3,196,248,286,183,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
		228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
		264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
		300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
		336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,0,21,1,0,155,
		156,2,0,67,67,196,197,1,0,185,186,2,0,29,29,44,44,2,0,59,59,75,75,2,0,
		24,24,45,45,2,0,105,105,142,142,2,0,96,96,101,101,2,0,1,1,10,11,2,0,2,
		2,8,9,1,0,10,11,3,0,32,32,67,67,76,76,3,0,24,24,26,26,104,104,3,0,54,54,
		84,84,110,110,1,0,215,216,2,0,121,122,124,124,1,0,217,218,4,0,120,176,
		178,182,188,210,213,214,2,0,66,66,98,98,1,0,24,119,1,0,125,134,3568,0,
		369,1,0,0,0,2,395,1,0,0,0,4,477,1,0,0,0,6,479,1,0,0,0,8,481,1,0,0,0,10,
		533,1,0,0,0,12,588,1,0,0,0,14,633,1,0,0,0,16,658,1,0,0,0,18,706,1,0,0,
		0,20,734,1,0,0,0,22,767,1,0,0,0,24,783,1,0,0,0,26,804,1,0,0,0,28,847,1,
		0,0,0,30,855,1,0,0,0,32,858,1,0,0,0,34,903,1,0,0,0,36,911,1,0,0,0,38,914,
		1,0,0,0,40,963,1,0,0,0,42,1009,1,0,0,0,44,1052,1,0,0,0,46,1098,1,0,0,0,
		48,1106,1,0,0,0,50,1112,1,0,0,0,52,1157,1,0,0,0,54,1203,1,0,0,0,56,1211,
		1,0,0,0,58,1217,1,0,0,0,60,1225,1,0,0,0,62,1228,1,0,0,0,64,1289,1,0,0,
		0,66,1298,1,0,0,0,68,1303,1,0,0,0,70,1351,1,0,0,0,72,1381,1,0,0,0,74,1389,
		1,0,0,0,76,1397,1,0,0,0,78,1405,1,0,0,0,80,1439,1,0,0,0,82,1447,1,0,0,
		0,84,1458,1,0,0,0,86,1488,1,0,0,0,88,1505,1,0,0,0,90,1523,1,0,0,0,92,1545,
		1,0,0,0,94,1556,1,0,0,0,96,1569,1,0,0,0,98,1594,1,0,0,0,100,1647,1,0,0,
		0,102,1649,1,0,0,0,104,1671,1,0,0,0,106,1682,1,0,0,0,108,1697,1,0,0,0,
		110,1711,1,0,0,0,112,1715,1,0,0,0,114,1726,1,0,0,0,116,1734,1,0,0,0,118,
		1755,1,0,0,0,120,1775,1,0,0,0,122,1783,1,0,0,0,124,1785,1,0,0,0,126,1787,
		1,0,0,0,128,1789,1,0,0,0,130,1791,1,0,0,0,132,1793,1,0,0,0,134,1795,1,
		0,0,0,136,1797,1,0,0,0,138,1799,1,0,0,0,140,1801,1,0,0,0,142,1803,1,0,
		0,0,144,1805,1,0,0,0,146,1807,1,0,0,0,148,1821,1,0,0,0,150,1839,1,0,0,
		0,152,1847,1,0,0,0,154,1856,1,0,0,0,156,1865,1,0,0,0,158,1873,1,0,0,0,
		160,1882,1,0,0,0,162,1900,1,0,0,0,164,1919,1,0,0,0,166,1956,1,0,0,0,168,
		1958,1,0,0,0,170,1966,1,0,0,0,172,1974,1,0,0,0,174,1982,1,0,0,0,176,1993,
		1,0,0,0,178,2004,1,0,0,0,180,2012,1,0,0,0,182,2020,1,0,0,0,184,2046,1,
		0,0,0,186,2048,1,0,0,0,188,2051,1,0,0,0,190,2059,1,0,0,0,192,2066,1,0,
		0,0,194,2074,1,0,0,0,196,2138,1,0,0,0,198,2165,1,0,0,0,200,2180,1,0,0,
		0,202,2216,1,0,0,0,204,2222,1,0,0,0,206,2226,1,0,0,0,208,2231,1,0,0,0,
		210,2276,1,0,0,0,212,2278,1,0,0,0,214,2286,1,0,0,0,216,2298,1,0,0,0,218,
		2300,1,0,0,0,220,2307,1,0,0,0,222,2311,1,0,0,0,224,2318,1,0,0,0,226,2326,
		1,0,0,0,228,2336,1,0,0,0,230,2351,1,0,0,0,232,2365,1,0,0,0,234,2389,1,
		0,0,0,236,2401,1,0,0,0,238,2410,1,0,0,0,240,2417,1,0,0,0,242,2419,1,0,
		0,0,244,2425,1,0,0,0,246,2433,1,0,0,0,248,2479,1,0,0,0,250,2506,1,0,0,
		0,252,2518,1,0,0,0,254,2539,1,0,0,0,256,2543,1,0,0,0,258,2545,1,0,0,0,
		260,2548,1,0,0,0,262,2553,1,0,0,0,264,2580,1,0,0,0,266,2595,1,0,0,0,268,
		2603,1,0,0,0,270,2613,1,0,0,0,272,2627,1,0,0,0,274,2644,1,0,0,0,276,2651,
		1,0,0,0,278,2659,1,0,0,0,280,2663,1,0,0,0,282,2676,1,0,0,0,284,2681,1,
		0,0,0,286,2728,1,0,0,0,288,2812,1,0,0,0,290,2820,1,0,0,0,292,2837,1,0,
		0,0,294,2853,1,0,0,0,296,2858,1,0,0,0,298,2867,1,0,0,0,300,2874,1,0,0,
		0,302,2881,1,0,0,0,304,2895,1,0,0,0,306,2926,1,0,0,0,308,2928,1,0,0,0,
		310,2931,1,0,0,0,312,2941,1,0,0,0,314,2963,1,0,0,0,316,2994,1,0,0,0,318,
		3017,1,0,0,0,320,3019,1,0,0,0,322,3022,1,0,0,0,324,3025,1,0,0,0,326,3028,
		1,0,0,0,328,3034,1,0,0,0,330,3045,1,0,0,0,332,3048,1,0,0,0,334,3050,1,
		0,0,0,336,3053,1,0,0,0,338,3117,1,0,0,0,340,3119,1,0,0,0,342,3141,1,0,
		0,0,344,3149,1,0,0,0,346,3155,1,0,0,0,348,3170,1,0,0,0,350,3172,1,0,0,
		0,352,3189,1,0,0,0,354,3191,1,0,0,0,356,3199,1,0,0,0,358,3210,1,0,0,0,
		360,3218,1,0,0,0,362,3222,1,0,0,0,364,3224,1,0,0,0,366,368,5,3,0,0,367,
		366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,
		0,0,0,371,369,1,0,0,0,372,381,3,4,2,0,373,375,5,3,0,0,374,373,1,0,0,0,
		375,376,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,380,
		3,4,2,0,379,374,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,
		0,382,387,1,0,0,0,383,381,1,0,0,0,384,386,5,3,0,0,385,384,1,0,0,0,386,
		389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,387,1,
		0,0,0,390,391,5,0,0,1,391,1,1,0,0,0,392,394,5,3,0,0,393,392,1,0,0,0,394,
		397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,
		0,0,0,398,402,3,4,2,0,399,401,5,3,0,0,400,399,1,0,0,0,401,404,1,0,0,0,
		402,400,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,402,1,0,0,0,405,406,
		5,0,0,1,406,3,1,0,0,0,407,478,3,6,3,0,408,478,3,8,4,0,409,478,3,10,5,0,
		410,478,3,12,6,0,411,478,3,14,7,0,412,478,3,16,8,0,413,478,3,18,9,0,414,
		478,3,194,97,0,415,478,3,20,10,0,416,478,3,22,11,0,417,478,3,24,12,0,418,
		478,3,26,13,0,419,478,3,32,16,0,420,478,3,38,19,0,421,478,3,40,20,0,422,
		478,3,42,21,0,423,478,3,44,22,0,424,478,3,50,25,0,425,478,3,52,26,0,426,
		478,3,62,31,0,427,478,3,68,34,0,428,478,3,70,35,0,429,478,3,72,36,0,430,
		478,3,74,37,0,431,478,3,76,38,0,432,478,3,78,39,0,433,478,3,84,42,0,434,
		478,3,86,43,0,435,478,3,88,44,0,436,478,3,90,45,0,437,478,3,92,46,0,438,
		478,3,94,47,0,439,478,3,96,48,0,440,478,3,98,49,0,441,478,3,102,51,0,442,
		478,3,104,52,0,443,478,3,106,53,0,444,478,3,112,56,0,445,478,3,116,58,
		0,446,478,3,118,59,0,447,478,3,120,60,0,448,478,3,122,61,0,449,478,3,124,
		62,0,450,478,3,126,63,0,451,478,3,128,64,0,452,478,3,130,65,0,453,478,
		3,132,66,0,454,478,3,134,67,0,455,478,3,136,68,0,456,478,3,138,69,0,457,
		478,3,140,70,0,458,478,3,142,71,0,459,478,3,144,72,0,460,478,3,146,73,
		0,461,478,3,148,74,0,462,478,3,150,75,0,463,478,3,152,76,0,464,478,3,154,
		77,0,465,478,3,156,78,0,466,478,3,158,79,0,467,478,3,160,80,0,468,478,
		3,162,81,0,469,478,3,164,82,0,470,478,3,166,83,0,471,478,3,168,84,0,472,
		478,3,170,85,0,473,478,3,172,86,0,474,478,3,174,87,0,475,478,3,176,88,
		0,476,478,3,352,176,0,477,407,1,0,0,0,477,408,1,0,0,0,477,409,1,0,0,0,
		477,410,1,0,0,0,477,411,1,0,0,0,477,412,1,0,0,0,477,413,1,0,0,0,477,414,
		1,0,0,0,477,415,1,0,0,0,477,416,1,0,0,0,477,417,1,0,0,0,477,418,1,0,0,
		0,477,419,1,0,0,0,477,420,1,0,0,0,477,421,1,0,0,0,477,422,1,0,0,0,477,
		423,1,0,0,0,477,424,1,0,0,0,477,425,1,0,0,0,477,426,1,0,0,0,477,427,1,
		0,0,0,477,428,1,0,0,0,477,429,1,0,0,0,477,430,1,0,0,0,477,431,1,0,0,0,
		477,432,1,0,0,0,477,433,1,0,0,0,477,434,1,0,0,0,477,435,1,0,0,0,477,436,
		1,0,0,0,477,437,1,0,0,0,477,438,1,0,0,0,477,439,1,0,0,0,477,440,1,0,0,
		0,477,441,1,0,0,0,477,442,1,0,0,0,477,443,1,0,0,0,477,444,1,0,0,0,477,
		445,1,0,0,0,477,446,1,0,0,0,477,447,1,0,0,0,477,448,1,0,0,0,477,449,1,
		0,0,0,477,450,1,0,0,0,477,451,1,0,0,0,477,452,1,0,0,0,477,453,1,0,0,0,
		477,454,1,0,0,0,477,455,1,0,0,0,477,456,1,0,0,0,477,457,1,0,0,0,477,458,
		1,0,0,0,477,459,1,0,0,0,477,460,1,0,0,0,477,461,1,0,0,0,477,462,1,0,0,
		0,477,463,1,0,0,0,477,464,1,0,0,0,477,465,1,0,0,0,477,466,1,0,0,0,477,
		467,1,0,0,0,477,468,1,0,0,0,477,469,1,0,0,0,477,470,1,0,0,0,477,471,1,
		0,0,0,477,472,1,0,0,0,477,473,1,0,0,0,477,474,1,0,0,0,477,475,1,0,0,0,
		477,476,1,0,0,0,478,5,1,0,0,0,479,480,3,196,98,0,480,7,1,0,0,0,481,484,
		5,38,0,0,482,483,5,88,0,0,483,485,5,143,0,0,484,482,1,0,0,0,484,485,1,
		0,0,0,485,487,1,0,0,0,486,488,7,0,0,0,487,486,1,0,0,0,487,488,1,0,0,0,
		488,489,1,0,0,0,489,493,5,157,0,0,490,491,5,65,0,0,491,492,5,83,0,0,492,
		494,5,52,0,0,493,490,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,500,3,
		356,178,0,496,497,5,14,0,0,497,498,3,182,91,0,498,499,5,15,0,0,499,501,
		1,0,0,0,500,496,1,0,0,0,500,501,1,0,0,0,501,505,1,0,0,0,502,503,5,42,0,
		0,503,504,5,36,0,0,504,506,3,318,159,0,505,502,1,0,0,0,505,506,1,0,0,0,
		506,510,1,0,0,0,507,508,5,92,0,0,508,509,5,33,0,0,509,511,3,286,143,0,
		510,507,1,0,0,0,510,511,1,0,0,0,511,515,1,0,0,0,512,513,5,164,0,0,513,
		514,5,33,0,0,514,516,3,354,177,0,515,512,1,0,0,0,515,516,1,0,0,0,516,520,
		1,0,0,0,517,518,5,118,0,0,518,519,5,165,0,0,519,521,3,334,167,0,520,517,
		1,0,0,0,520,521,1,0,0,0,521,527,1,0,0,0,522,523,5,141,0,0,523,524,5,14,
		0,0,524,525,3,276,138,0,525,526,5,15,0,0,526,528,1,0,0,0,527,522,1,0,0,
		0,527,528,1,0,0,0,528,531,1,0,0,0,529,530,5,28,0,0,530,532,3,6,3,0,531,
		529,1,0,0,0,531,532,1,0,0,0,532,9,1,0,0,0,533,536,5,38,0,0,534,535,5,88,
		0,0,535,537,5,143,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,
		538,542,5,157,0,0,539,540,5,65,0,0,540,541,5,83,0,0,541,543,5,52,0,0,542,
		539,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,3,356,178,0,545,554,
		5,76,0,0,546,547,3,334,167,0,547,548,5,12,0,0,548,550,1,0,0,0,549,546,
		1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,3,334,167,0,552,553,5,
		12,0,0,553,555,1,0,0,0,554,549,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,
		556,560,3,334,167,0,557,558,5,42,0,0,558,559,5,36,0,0,559,561,3,318,159,
		0,560,557,1,0,0,0,560,561,1,0,0,0,561,565,1,0,0,0,562,563,5,92,0,0,563,
		564,5,33,0,0,564,566,3,286,143,0,565,562,1,0,0,0,565,566,1,0,0,0,566,570,
		1,0,0,0,567,568,5,164,0,0,568,569,5,33,0,0,569,571,3,354,177,0,570,567,
		1,0,0,0,570,571,1,0,0,0,571,575,1,0,0,0,572,573,5,118,0,0,573,574,5,165,
		0,0,574,576,3,334,167,0,575,572,1,0,0,0,575,576,1,0,0,0,576,582,1,0,0,
		0,577,578,5,141,0,0,578,579,5,14,0,0,579,580,3,276,138,0,580,581,5,15,
		0,0,581,583,1,0,0,0,582,577,1,0,0,0,582,583,1,0,0,0,583,586,1,0,0,0,584,
		585,5,28,0,0,585,587,3,6,3,0,586,584,1,0,0,0,586,587,1,0,0,0,587,11,1,
		0,0,0,588,591,5,38,0,0,589,590,5,88,0,0,590,592,5,143,0,0,591,589,1,0,
		0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,597,5,157,0,0,594,595,5,65,0,0,
		595,596,5,83,0,0,596,598,5,52,0,0,597,594,1,0,0,0,597,598,1,0,0,0,598,
		599,1,0,0,0,599,600,3,356,178,0,600,601,5,167,0,0,601,605,3,356,178,0,
		602,603,5,42,0,0,603,604,5,36,0,0,604,606,3,318,159,0,605,602,1,0,0,0,
		605,606,1,0,0,0,606,610,1,0,0,0,607,608,5,92,0,0,608,609,5,33,0,0,609,
		611,3,286,143,0,610,607,1,0,0,0,610,611,1,0,0,0,611,615,1,0,0,0,612,613,
		5,164,0,0,613,614,5,33,0,0,614,616,3,354,177,0,615,612,1,0,0,0,615,616,
		1,0,0,0,616,620,1,0,0,0,617,618,5,118,0,0,618,619,5,165,0,0,619,621,3,
		334,167,0,620,617,1,0,0,0,620,621,1,0,0,0,621,627,1,0,0,0,622,623,5,141,
		0,0,623,624,5,14,0,0,624,625,3,276,138,0,625,626,5,15,0,0,626,628,1,0,
		0,0,627,622,1,0,0,0,627,628,1,0,0,0,628,631,1,0,0,0,629,630,5,28,0,0,630,
		632,3,6,3,0,631,629,1,0,0,0,631,632,1,0,0,0,632,13,1,0,0,0,633,634,5,38,
		0,0,634,635,5,168,0,0,635,639,5,157,0,0,636,637,5,65,0,0,637,638,5,83,
		0,0,638,640,5,52,0,0,639,636,1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,
		642,3,356,178,0,642,643,5,169,0,0,643,649,3,356,178,0,644,645,5,57,0,0,
		645,646,5,148,0,0,646,647,5,28,0,0,647,648,5,86,0,0,648,650,3,286,143,
		0,649,644,1,0,0,0,649,650,1,0,0,0,650,656,1,0,0,0,651,652,5,141,0,0,652,
		653,5,14,0,0,653,654,3,276,138,0,654,655,5,15,0,0,655,657,1,0,0,0,656,
		651,1,0,0,0,656,657,1,0,0,0,657,15,1,0,0,0,658,659,5,38,0,0,659,663,5,
		157,0,0,660,661,5,65,0,0,661,662,5,83,0,0,662,664,5,52,0,0,663,660,1,0,
		0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,666,3,356,178,0,666,667,5,169,
		0,0,667,673,3,356,178,0,668,669,5,57,0,0,669,670,5,148,0,0,670,671,5,28,
		0,0,671,672,5,86,0,0,672,674,3,286,143,0,673,668,1,0,0,0,673,674,1,0,0,
		0,674,678,1,0,0,0,675,676,5,42,0,0,676,677,5,36,0,0,677,679,3,318,159,
		0,678,675,1,0,0,0,678,679,1,0,0,0,679,683,1,0,0,0,680,681,5,92,0,0,681,
		682,5,33,0,0,682,684,3,286,143,0,683,680,1,0,0,0,683,684,1,0,0,0,684,688,
		1,0,0,0,685,686,5,164,0,0,686,687,5,33,0,0,687,689,3,354,177,0,688,685,
		1,0,0,0,688,689,1,0,0,0,689,693,1,0,0,0,690,691,5,118,0,0,691,692,5,165,
		0,0,692,694,3,334,167,0,693,690,1,0,0,0,693,694,1,0,0,0,694,700,1,0,0,
		0,695,696,5,141,0,0,696,697,5,14,0,0,697,698,3,276,138,0,698,699,5,15,
		0,0,699,701,1,0,0,0,700,695,1,0,0,0,700,701,1,0,0,0,701,704,1,0,0,0,702,
		703,5,28,0,0,703,705,3,6,3,0,704,702,1,0,0,0,704,705,1,0,0,0,705,17,1,
		0,0,0,706,709,5,38,0,0,707,708,5,88,0,0,708,710,5,143,0,0,709,707,1,0,
		0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,715,5,170,0,0,712,713,5,65,0,0,
		713,714,5,83,0,0,714,716,5,52,0,0,715,712,1,0,0,0,715,716,1,0,0,0,716,
		717,1,0,0,0,717,722,3,356,178,0,718,719,5,14,0,0,719,720,3,178,89,0,720,
		721,5,15,0,0,721,723,1,0,0,0,722,718,1,0,0,0,722,723,1,0,0,0,723,729,1,
		0,0,0,724,725,5,141,0,0,725,726,5,14,0,0,726,727,3,276,138,0,727,728,5,
		15,0,0,728,730,1,0,0,0,729,724,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,
		731,732,5,28,0,0,732,733,3,196,98,0,733,19,1,0,0,0,734,737,5,38,0,0,735,
		736,5,88,0,0,736,738,5,143,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,739,
		1,0,0,0,739,740,5,184,0,0,740,744,5,170,0,0,741,742,5,65,0,0,742,743,5,
		83,0,0,743,745,5,52,0,0,744,741,1,0,0,0,744,745,1,0,0,0,745,746,1,0,0,
		0,746,750,3,356,178,0,747,748,5,92,0,0,748,749,5,33,0,0,749,751,3,286,
		143,0,750,747,1,0,0,0,750,751,1,0,0,0,751,755,1,0,0,0,752,753,5,164,0,
		0,753,754,5,33,0,0,754,756,3,354,177,0,755,752,1,0,0,0,755,756,1,0,0,0,
		756,762,1,0,0,0,757,758,5,141,0,0,758,759,5,14,0,0,759,760,3,276,138,0,
		760,761,5,15,0,0,761,763,1,0,0,0,762,757,1,0,0,0,762,763,1,0,0,0,763,764,
		1,0,0,0,764,765,5,28,0,0,765,766,3,196,98,0,766,21,1,0,0,0,767,768,5,38,
		0,0,768,769,5,184,0,0,769,770,5,170,0,0,770,776,3,356,178,0,771,772,5,
		141,0,0,772,773,5,14,0,0,773,774,3,276,138,0,774,775,5,15,0,0,775,777,
		1,0,0,0,776,771,1,0,0,0,776,777,1,0,0,0,777,778,1,0,0,0,778,779,5,28,0,
		0,779,780,5,188,0,0,780,781,5,86,0,0,781,782,3,356,178,0,782,23,1,0,0,
		0,783,784,5,38,0,0,784,785,5,183,0,0,785,789,5,154,0,0,786,787,5,65,0,
		0,787,788,5,83,0,0,788,790,5,52,0,0,789,786,1,0,0,0,789,790,1,0,0,0,790,
		791,1,0,0,0,791,795,3,356,178,0,792,793,5,118,0,0,793,794,5,165,0,0,794,
		796,3,356,178,0,795,792,1,0,0,0,795,796,1,0,0,0,796,802,1,0,0,0,797,798,
		5,141,0,0,798,799,5,14,0,0,799,800,3,276,138,0,800,801,5,15,0,0,801,803,
		1,0,0,0,802,797,1,0,0,0,802,803,1,0,0,0,803,25,1,0,0,0,804,807,5,38,0,
		0,805,806,5,88,0,0,806,808,5,143,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,
		809,1,0,0,0,809,810,5,183,0,0,810,814,5,157,0,0,811,812,5,65,0,0,812,813,
		5,83,0,0,813,815,5,52,0,0,814,811,1,0,0,0,814,815,1,0,0,0,815,816,1,0,
		0,0,816,821,3,356,178,0,817,818,5,14,0,0,818,819,3,28,14,0,819,820,5,15,
		0,0,820,822,1,0,0,0,821,817,1,0,0,0,821,822,1,0,0,0,822,829,1,0,0,0,823,
		824,5,118,0,0,824,827,5,165,0,0,825,828,3,334,167,0,826,828,5,42,0,0,827,
		825,1,0,0,0,827,826,1,0,0,0,828,830,1,0,0,0,829,823,1,0,0,0,829,830,1,
		0,0,0,830,840,1,0,0,0,831,832,5,118,0,0,832,833,5,92,0,0,833,838,5,189,
		0,0,834,835,5,14,0,0,835,836,3,28,14,0,836,837,5,15,0,0,837,839,1,0,0,
		0,838,834,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,831,1,0,0,0,840,
		841,1,0,0,0,841,842,1,0,0,0,842,843,5,141,0,0,843,844,5,14,0,0,844,845,
		3,276,138,0,845,846,5,15,0,0,846,27,1,0,0,0,847,852,3,30,15,0,848,849,
		5,13,0,0,849,851,3,30,15,0,850,848,1,0,0,0,851,854,1,0,0,0,852,850,1,0,
		0,0,852,853,1,0,0,0,853,29,1,0,0,0,854,852,1,0,0,0,855,856,3,334,167,0,
		856,857,3,316,158,0,857,31,1,0,0,0,858,861,5,38,0,0,859,860,5,88,0,0,860,
		862,5,143,0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,864,1,0,0,0,863,865,
		7,0,0,0,864,863,1,0,0,0,864,865,1,0,0,0,865,866,1,0,0,0,866,870,5,182,
		0,0,867,868,5,65,0,0,868,869,5,83,0,0,869,871,5,52,0,0,870,867,1,0,0,0,
		870,871,1,0,0,0,871,880,1,0,0,0,872,873,3,334,167,0,873,874,5,12,0,0,874,
		876,1,0,0,0,875,872,1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,878,3,
		334,167,0,878,879,5,12,0,0,879,881,1,0,0,0,880,875,1,0,0,0,880,881,1,0,
		0,0,881,882,1,0,0,0,882,883,3,334,167,0,883,885,5,14,0,0,884,886,3,34,
		17,0,885,884,1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,0,887,890,5,15,0,0,
		888,889,5,190,0,0,889,891,3,316,158,0,890,888,1,0,0,0,890,891,1,0,0,0,
		891,892,1,0,0,0,892,893,5,28,0,0,893,894,5,14,0,0,894,895,3,286,143,0,
		895,901,5,15,0,0,896,897,5,141,0,0,897,898,5,14,0,0,898,899,3,276,138,
		0,899,900,5,15,0,0,900,902,1,0,0,0,901,896,1,0,0,0,901,902,1,0,0,0,902,
		33,1,0,0,0,903,908,3,36,18,0,904,905,5,13,0,0,905,907,3,36,18,0,906,904,
		1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,35,1,0,0,0,
		910,908,1,0,0,0,911,912,3,334,167,0,912,913,3,316,158,0,913,37,1,0,0,0,
		914,917,5,38,0,0,915,916,5,88,0,0,916,918,5,143,0,0,917,915,1,0,0,0,917,
		918,1,0,0,0,918,920,1,0,0,0,919,921,7,0,0,0,920,919,1,0,0,0,920,921,1,
		0,0,0,921,922,1,0,0,0,922,926,5,182,0,0,923,924,5,65,0,0,924,925,5,83,
		0,0,925,927,5,52,0,0,926,923,1,0,0,0,926,927,1,0,0,0,927,936,1,0,0,0,928,
		929,3,334,167,0,929,930,5,12,0,0,930,932,1,0,0,0,931,928,1,0,0,0,931,932,
		1,0,0,0,932,933,1,0,0,0,933,934,3,334,167,0,934,935,5,12,0,0,935,937,1,
		0,0,0,936,931,1,0,0,0,936,937,1,0,0,0,937,938,1,0,0,0,938,939,3,334,167,
		0,939,941,5,14,0,0,940,942,3,34,17,0,941,940,1,0,0,0,941,942,1,0,0,0,942,
		943,1,0,0,0,943,944,5,15,0,0,944,945,5,190,0,0,945,949,3,316,158,0,946,
		950,5,191,0,0,947,948,5,83,0,0,948,950,5,191,0,0,949,946,1,0,0,0,949,947,
		1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,5,192,0,0,952,958,3,334,
		167,0,953,954,5,141,0,0,954,955,5,14,0,0,955,956,3,276,138,0,956,957,5,
		15,0,0,957,959,1,0,0,0,958,953,1,0,0,0,958,959,1,0,0,0,959,960,1,0,0,0,
		960,961,5,28,0,0,961,962,3,318,159,0,962,39,1,0,0,0,963,966,5,38,0,0,964,
		965,5,88,0,0,965,967,5,143,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,969,
		1,0,0,0,968,970,7,0,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,
		0,971,975,5,182,0,0,972,973,5,65,0,0,973,974,5,83,0,0,974,976,5,52,0,0,
		975,972,1,0,0,0,975,976,1,0,0,0,976,985,1,0,0,0,977,978,3,334,167,0,978,
		979,5,12,0,0,979,981,1,0,0,0,980,977,1,0,0,0,980,981,1,0,0,0,981,982,1,
		0,0,0,982,983,3,334,167,0,983,984,5,12,0,0,984,986,1,0,0,0,985,980,1,0,
		0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,988,3,334,167,0,988,990,5,14,0,
		0,989,991,3,34,17,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,
		993,5,15,0,0,993,994,5,190,0,0,994,995,3,316,158,0,995,996,5,192,0,0,996,
		1000,3,334,167,0,997,998,5,118,0,0,998,999,5,165,0,0,999,1001,3,356,178,
		0,1000,997,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1003,5,141,
		0,0,1003,1004,5,14,0,0,1004,1005,3,276,138,0,1005,1006,5,15,0,0,1006,1007,
		5,28,0,0,1007,1008,3,318,159,0,1008,41,1,0,0,0,1009,1012,5,38,0,0,1010,
		1011,5,88,0,0,1011,1013,5,143,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,
		1013,1015,1,0,0,0,1014,1016,7,0,0,0,1015,1014,1,0,0,0,1015,1016,1,0,0,
		0,1016,1017,1,0,0,0,1017,1021,5,182,0,0,1018,1019,5,65,0,0,1019,1020,5,
		83,0,0,1020,1022,5,52,0,0,1021,1018,1,0,0,0,1021,1022,1,0,0,0,1022,1031,
		1,0,0,0,1023,1024,3,334,167,0,1024,1025,5,12,0,0,1025,1027,1,0,0,0,1026,
		1023,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1029,3,334,167,0,
		1029,1030,5,12,0,0,1030,1032,1,0,0,0,1031,1026,1,0,0,0,1031,1032,1,0,0,
		0,1032,1033,1,0,0,0,1033,1034,3,334,167,0,1034,1036,5,14,0,0,1035,1037,
		3,34,17,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1038,1,0,0,0,1038,1039,
		5,15,0,0,1039,1040,5,190,0,0,1040,1041,3,316,158,0,1041,1042,5,193,0,0,
		1042,1043,5,118,0,0,1043,1044,5,165,0,0,1044,1050,3,356,178,0,1045,1046,
		5,141,0,0,1046,1047,5,14,0,0,1047,1048,3,276,138,0,1048,1049,5,15,0,0,
		1049,1051,1,0,0,0,1050,1045,1,0,0,0,1050,1051,1,0,0,0,1051,43,1,0,0,0,
		1052,1055,5,38,0,0,1053,1054,5,88,0,0,1054,1056,5,143,0,0,1055,1053,1,
		0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,0,0,1057,1059,7,0,0,0,1058,1057,
		1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1061,5,194,0,0,1061,1065,
		5,182,0,0,1062,1063,5,65,0,0,1063,1064,5,83,0,0,1064,1066,5,52,0,0,1065,
		1062,1,0,0,0,1065,1066,1,0,0,0,1066,1075,1,0,0,0,1067,1068,3,334,167,0,
		1068,1069,5,12,0,0,1069,1071,1,0,0,0,1070,1067,1,0,0,0,1070,1071,1,0,0,
		0,1071,1072,1,0,0,0,1072,1073,3,334,167,0,1073,1074,5,12,0,0,1074,1076,
		1,0,0,0,1075,1070,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,
		3,334,167,0,1078,1080,5,14,0,0,1079,1081,3,46,23,0,1080,1079,1,0,0,0,1080,
		1081,1,0,0,0,1081,1082,1,0,0,0,1082,1085,5,15,0,0,1083,1084,5,190,0,0,
		1084,1086,3,316,158,0,1085,1083,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,
		0,0,0,1087,1088,5,28,0,0,1088,1089,5,14,0,0,1089,1090,3,286,143,0,1090,
		1096,5,15,0,0,1091,1092,5,141,0,0,1092,1093,5,14,0,0,1093,1094,3,276,138,
		0,1094,1095,5,15,0,0,1095,1097,1,0,0,0,1096,1091,1,0,0,0,1096,1097,1,0,
		0,0,1097,45,1,0,0,0,1098,1103,3,48,24,0,1099,1100,5,13,0,0,1100,1102,3,
		48,24,0,1101,1099,1,0,0,0,1102,1105,1,0,0,0,1103,1101,1,0,0,0,1103,1104,
		1,0,0,0,1104,47,1,0,0,0,1105,1103,1,0,0,0,1106,1107,3,356,178,0,1107,1110,
		3,316,158,0,1108,1109,5,83,0,0,1109,1111,5,194,0,0,1110,1108,1,0,0,0,1110,
		1111,1,0,0,0,1111,49,1,0,0,0,1112,1115,5,38,0,0,1113,1114,5,88,0,0,1114,
		1116,5,143,0,0,1115,1113,1,0,0,0,1115,1116,1,0,0,0,1116,1118,1,0,0,0,1117,
		1119,7,0,0,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,
		1121,5,194,0,0,1121,1125,5,182,0,0,1122,1123,5,65,0,0,1123,1124,5,83,0,
		0,1124,1126,5,52,0,0,1125,1122,1,0,0,0,1125,1126,1,0,0,0,1126,1135,1,0,
		0,0,1127,1128,3,334,167,0,1128,1129,5,12,0,0,1129,1131,1,0,0,0,1130,1127,
		1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,1133,3,334,167,0,1133,
		1134,5,12,0,0,1134,1136,1,0,0,0,1135,1130,1,0,0,0,1135,1136,1,0,0,0,1136,
		1137,1,0,0,0,1137,1138,3,334,167,0,1138,1140,5,14,0,0,1139,1141,3,46,23,
		0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,1143,5,15,
		0,0,1143,1144,5,190,0,0,1144,1145,3,316,158,0,1145,1146,5,192,0,0,1146,
		1152,3,334,167,0,1147,1148,5,141,0,0,1148,1149,5,14,0,0,1149,1150,3,276,
		138,0,1150,1151,5,15,0,0,1151,1153,1,0,0,0,1152,1147,1,0,0,0,1152,1153,
		1,0,0,0,1153,1154,1,0,0,0,1154,1155,5,28,0,0,1155,1156,3,318,159,0,1156,
		51,1,0,0,0,1157,1160,5,38,0,0,1158,1159,5,88,0,0,1159,1161,5,143,0,0,1160,
		1158,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,5,157,0,0,1163,
		1167,5,182,0,0,1164,1165,5,65,0,0,1165,1166,5,83,0,0,1166,1168,5,52,0,
		0,1167,1164,1,0,0,0,1167,1168,1,0,0,0,1168,1177,1,0,0,0,1169,1170,3,334,
		167,0,1170,1171,5,12,0,0,1171,1173,1,0,0,0,1172,1169,1,0,0,0,1172,1173,
		1,0,0,0,1173,1174,1,0,0,0,1174,1175,3,334,167,0,1175,1176,5,12,0,0,1176,
		1178,1,0,0,0,1177,1172,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,
		1180,3,334,167,0,1180,1182,5,14,0,0,1181,1183,3,54,27,0,1182,1181,1,0,
		0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,1184,1191,5,15,0,0,1185,1186,5,
		190,0,0,1186,1187,5,157,0,0,1187,1188,5,18,0,0,1188,1189,3,58,29,0,1189,
		1190,5,19,0,0,1190,1192,1,0,0,0,1191,1185,1,0,0,0,1191,1192,1,0,0,0,1192,
		1198,1,0,0,0,1193,1194,5,141,0,0,1194,1195,5,14,0,0,1195,1196,3,276,138,
		0,1196,1197,5,15,0,0,1197,1199,1,0,0,0,1198,1193,1,0,0,0,1198,1199,1,0,
		0,0,1199,1200,1,0,0,0,1200,1201,5,28,0,0,1201,1202,3,286,143,0,1202,53,
		1,0,0,0,1203,1208,3,56,28,0,1204,1205,5,13,0,0,1205,1207,3,56,28,0,1206,
		1204,1,0,0,0,1207,1210,1,0,0,0,1208,1206,1,0,0,0,1208,1209,1,0,0,0,1209,
		55,1,0,0,0,1210,1208,1,0,0,0,1211,1215,3,356,178,0,1212,1216,3,316,158,
		0,1213,1214,5,26,0,0,1214,1216,5,195,0,0,1215,1212,1,0,0,0,1215,1213,1,
		0,0,0,1216,57,1,0,0,0,1217,1222,3,60,30,0,1218,1219,5,13,0,0,1219,1221,
		3,60,30,0,1220,1218,1,0,0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,1223,
		1,0,0,0,1223,59,1,0,0,0,1224,1222,1,0,0,0,1225,1226,3,356,178,0,1226,1227,
		3,316,158,0,1227,61,1,0,0,0,1228,1231,5,38,0,0,1229,1230,5,88,0,0,1230,
		1232,5,143,0,0,1231,1229,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,
		1237,5,181,0,0,1234,1235,5,65,0,0,1235,1236,5,83,0,0,1236,1238,5,52,0,
		0,1237,1234,1,0,0,0,1237,1238,1,0,0,0,1238,1247,1,0,0,0,1239,1240,3,334,
		167,0,1240,1241,5,12,0,0,1241,1243,1,0,0,0,1242,1239,1,0,0,0,1242,1243,
		1,0,0,0,1243,1244,1,0,0,0,1244,1245,3,334,167,0,1245,1246,5,12,0,0,1246,
		1248,1,0,0,0,1247,1242,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,
		1250,3,334,167,0,1250,1252,5,14,0,0,1251,1253,3,64,32,0,1252,1251,1,0,
		0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1260,5,15,0,0,1255,1256,5,
		141,0,0,1256,1257,5,14,0,0,1257,1258,3,276,138,0,1258,1259,5,15,0,0,1259,
		1261,1,0,0,0,1260,1255,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,
		1266,5,198,0,0,1263,1265,5,3,0,0,1264,1263,1,0,0,0,1265,1268,1,0,0,0,1266,
		1264,1,0,0,0,1266,1267,1,0,0,0,1267,1269,1,0,0,0,1268,1266,1,0,0,0,1269,
		1278,3,4,2,0,1270,1272,5,3,0,0,1271,1270,1,0,0,0,1272,1273,1,0,0,0,1273,
		1271,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1277,3,4,2,0,1276,
		1271,1,0,0,0,1277,1280,1,0,0,0,1278,1276,1,0,0,0,1278,1279,1,0,0,0,1279,
		1284,1,0,0,0,1280,1278,1,0,0,0,1281,1283,5,3,0,0,1282,1281,1,0,0,0,1283,
		1286,1,0,0,0,1284,1282,1,0,0,0,1284,1285,1,0,0,0,1285,1287,1,0,0,0,1286,
		1284,1,0,0,0,1287,1288,5,47,0,0,1288,63,1,0,0,0,1289,1294,3,66,33,0,1290,
		1291,5,13,0,0,1291,1293,3,66,33,0,1292,1290,1,0,0,0,1293,1296,1,0,0,0,
		1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,65,1,0,0,0,1296,1294,1,0,0,0,
		1297,1299,7,1,0,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,1300,1,0,0,
		0,1300,1301,3,356,178,0,1301,1302,3,316,158,0,1302,67,1,0,0,0,1303,1306,
		5,38,0,0,1304,1305,5,88,0,0,1305,1307,5,143,0,0,1306,1304,1,0,0,0,1306,
		1307,1,0,0,0,1307,1308,1,0,0,0,1308,1312,5,181,0,0,1309,1310,5,65,0,0,
		1310,1311,5,83,0,0,1311,1313,5,52,0,0,1312,1309,1,0,0,0,1312,1313,1,0,
		0,0,1313,1322,1,0,0,0,1314,1315,3,334,167,0,1315,1316,5,12,0,0,1316,1318,
		1,0,0,0,1317,1314,1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,
		3,334,167,0,1320,1321,5,12,0,0,1321,1323,1,0,0,0,1322,1317,1,0,0,0,1322,
		1323,1,0,0,0,1323,1324,1,0,0,0,1324,1325,3,334,167,0,1325,1327,5,14,0,
		0,1326,1328,3,64,32,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,
		0,0,0,1329,1333,5,15,0,0,1330,1331,5,183,0,0,1331,1332,5,199,0,0,1332,
		1334,5,200,0,0,1333,1330,1,0,0,0,1333,1334,1,0,0,0,1334,1335,1,0,0,0,1335,
		1336,5,118,0,0,1336,1337,5,165,0,0,1337,1343,3,356,178,0,1338,1339,5,141,
		0,0,1339,1340,5,14,0,0,1340,1341,3,276,138,0,1341,1342,5,15,0,0,1342,1344,
		1,0,0,0,1343,1338,1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1346,
		5,192,0,0,1346,1349,3,334,167,0,1347,1348,5,28,0,0,1348,1350,3,318,159,
		0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,69,1,0,0,0,1351,1354,5,38,0,
		0,1352,1353,5,88,0,0,1353,1355,5,143,0,0,1354,1352,1,0,0,0,1354,1355,1,
		0,0,0,1355,1356,1,0,0,0,1356,1357,5,149,0,0,1357,1358,5,178,0,0,1358,1362,
		5,179,0,0,1359,1360,5,65,0,0,1360,1361,5,83,0,0,1361,1363,5,52,0,0,1362,
		1359,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,0,0,0,1364,1365,3,356,178,0,
		1365,1366,5,87,0,0,1366,1373,3,356,178,0,1367,1368,5,204,0,0,1368,1369,
		5,108,0,0,1369,1370,5,14,0,0,1370,1371,3,288,144,0,1371,1372,5,15,0,0,
		1372,1374,1,0,0,0,1373,1367,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,0,
		0,1375,1376,5,205,0,0,1376,1377,5,114,0,0,1377,1378,5,14,0,0,1378,1379,
		3,286,143,0,1379,1380,5,15,0,0,1380,71,1,0,0,0,1381,1382,5,38,0,0,1382,
		1383,5,177,0,0,1383,1384,3,286,143,0,1384,1385,5,141,0,0,1385,1386,5,14,
		0,0,1386,1387,3,276,138,0,1387,1388,5,15,0,0,1388,73,1,0,0,0,1389,1390,
		5,38,0,0,1390,1391,5,176,0,0,1391,1392,3,286,143,0,1392,1393,5,141,0,0,
		1393,1394,5,14,0,0,1394,1395,3,276,138,0,1395,1396,5,15,0,0,1396,75,1,
		0,0,0,1397,1398,5,38,0,0,1398,1399,5,175,0,0,1399,1400,3,286,143,0,1400,
		1401,5,141,0,0,1401,1402,5,14,0,0,1402,1403,3,276,138,0,1403,1404,5,15,
		0,0,1404,77,1,0,0,0,1405,1406,5,38,0,0,1406,1407,5,172,0,0,1407,1411,5,
		173,0,0,1408,1409,5,65,0,0,1409,1410,5,83,0,0,1410,1412,5,52,0,0,1411,
		1408,1,0,0,0,1411,1412,1,0,0,0,1412,1413,1,0,0,0,1413,1414,3,356,178,0,
		1414,1415,5,87,0,0,1415,1416,3,356,178,0,1416,1429,5,14,0,0,1417,1418,
		5,24,0,0,1418,1426,5,189,0,0,1419,1420,5,118,0,0,1420,1421,5,206,0,0,1421,
		1422,5,141,0,0,1422,1423,5,14,0,0,1423,1424,3,80,40,0,1424,1425,5,15,0,
		0,1425,1427,1,0,0,0,1426,1419,1,0,0,0,1426,1427,1,0,0,0,1427,1430,1,0,
		0,0,1428,1430,3,80,40,0,1429,1417,1,0,0,0,1429,1428,1,0,0,0,1430,1431,
		1,0,0,0,1431,1437,5,15,0,0,1432,1433,5,141,0,0,1433,1434,5,14,0,0,1434,
		1435,3,276,138,0,1435,1436,5,15,0,0,1436,1438,1,0,0,0,1437,1432,1,0,0,
		0,1437,1438,1,0,0,0,1438,79,1,0,0,0,1439,1444,3,82,41,0,1440,1441,5,13,
		0,0,1441,1443,3,82,41,0,1442,1440,1,0,0,0,1443,1446,1,0,0,0,1444,1442,
		1,0,0,0,1444,1445,1,0,0,0,1445,81,1,0,0,0,1446,1444,1,0,0,0,1447,1449,
		3,356,178,0,1448,1450,3,316,158,0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,
		1450,1456,1,0,0,0,1451,1452,5,141,0,0,1452,1453,5,14,0,0,1453,1454,3,276,
		138,0,1454,1455,5,15,0,0,1455,1457,1,0,0,0,1456,1451,1,0,0,0,1456,1457,
		1,0,0,0,1457,83,1,0,0,0,1458,1461,5,38,0,0,1459,1460,5,88,0,0,1460,1462,
		5,143,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1464,
		5,174,0,0,1464,1468,5,173,0,0,1465,1466,5,65,0,0,1466,1467,5,83,0,0,1467,
		1469,5,52,0,0,1468,1465,1,0,0,0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,
		1471,3,356,178,0,1471,1472,5,87,0,0,1472,1473,3,356,178,0,1473,1474,5,
		14,0,0,1474,1475,3,356,178,0,1475,1481,5,15,0,0,1476,1477,5,207,0,0,1477,
		1478,5,14,0,0,1478,1479,3,354,177,0,1479,1480,5,15,0,0,1480,1482,1,0,0,
		0,1481,1476,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,1484,5,141,
		0,0,1484,1485,5,14,0,0,1485,1486,3,276,138,0,1486,1487,5,15,0,0,1487,85,
		1,0,0,0,1488,1489,5,208,0,0,1489,1492,5,154,0,0,1490,1491,5,65,0,0,1491,
		1493,5,52,0,0,1492,1490,1,0,0,0,1492,1493,1,0,0,0,1493,1497,1,0,0,0,1494,
		1495,3,334,167,0,1495,1496,5,12,0,0,1496,1498,1,0,0,0,1497,1494,1,0,0,
		0,1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1500,3,334,167,0,1500,1501,
		5,103,0,0,1501,1502,5,42,0,0,1502,1503,5,36,0,0,1503,1504,3,318,159,0,
		1504,87,1,0,0,0,1505,1506,5,208,0,0,1506,1509,5,154,0,0,1507,1508,5,65,
		0,0,1508,1510,5,52,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1514,1,
		0,0,0,1511,1512,3,334,167,0,1512,1513,5,12,0,0,1513,1515,1,0,0,0,1514,
		1511,1,0,0,0,1514,1515,1,0,0,0,1515,1516,1,0,0,0,1516,1517,3,334,167,0,
		1517,1518,5,103,0,0,1518,1519,5,141,0,0,1519,1520,5,14,0,0,1520,1521,3,
		276,138,0,1521,1522,5,15,0,0,1522,89,1,0,0,0,1523,1524,5,208,0,0,1524,
		1527,5,154,0,0,1525,1526,5,65,0,0,1526,1528,5,52,0,0,1527,1525,1,0,0,0,
		1527,1528,1,0,0,0,1528,1532,1,0,0,0,1529,1530,3,334,167,0,1530,1531,5,
		12,0,0,1531,1533,1,0,0,0,1532,1529,1,0,0,0,1532,1533,1,0,0,0,1533,1534,
		1,0,0,0,1534,1535,3,334,167,0,1535,1536,5,209,0,0,1536,1537,5,188,0,0,
		1537,1543,3,356,178,0,1538,1539,5,141,0,0,1539,1540,5,14,0,0,1540,1541,
		3,276,138,0,1541,1542,5,15,0,0,1542,1544,1,0,0,0,1543,1538,1,0,0,0,1543,
		1544,1,0,0,0,1544,91,1,0,0,0,1545,1546,5,208,0,0,1546,1549,5,154,0,0,1547,
		1548,5,65,0,0,1548,1550,5,52,0,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,
		1551,1,0,0,0,1551,1552,3,356,178,0,1552,1553,5,171,0,0,1553,1554,5,188,
		0,0,1554,1555,3,286,143,0,1555,93,1,0,0,0,1556,1557,5,208,0,0,1557,1560,
		5,157,0,0,1558,1559,5,65,0,0,1559,1561,5,52,0,0,1560,1558,1,0,0,0,1560,
		1561,1,0,0,0,1561,1562,1,0,0,0,1562,1563,3,356,178,0,1563,1564,5,103,0,
		0,1564,1565,5,141,0,0,1565,1566,5,14,0,0,1566,1567,3,276,138,0,1567,1568,
		5,15,0,0,1568,95,1,0,0,0,1569,1570,5,208,0,0,1570,1571,5,157,0,0,1571,
		1572,3,356,178,0,1572,1573,5,209,0,0,1573,1577,5,206,0,0,1574,1575,5,65,
		0,0,1575,1576,5,83,0,0,1576,1578,5,52,0,0,1577,1574,1,0,0,0,1577,1578,
		1,0,0,0,1578,1579,1,0,0,0,1579,1591,3,82,41,0,1580,1581,5,13,0,0,1581,
		1582,5,209,0,0,1582,1586,5,206,0,0,1583,1584,5,65,0,0,1584,1585,5,83,0,
		0,1585,1587,5,52,0,0,1586,1583,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,
		0,0,1588,1590,3,82,41,0,1589,1580,1,0,0,0,1590,1593,1,0,0,0,1591,1589,
		1,0,0,0,1591,1592,1,0,0,0,1592,97,1,0,0,0,1593,1591,1,0,0,0,1594,1595,
		5,208,0,0,1595,1604,5,157,0,0,1596,1597,3,334,167,0,1597,1598,5,12,0,0,
		1598,1600,1,0,0,0,1599,1596,1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,
		0,1601,1602,3,334,167,0,1602,1603,5,12,0,0,1603,1605,1,0,0,0,1604,1599,
		1,0,0,0,1604,1605,1,0,0,0,1605,1606,1,0,0,0,1606,1607,3,334,167,0,1607,
		1612,3,100,50,0,1608,1609,5,13,0,0,1609,1611,3,100,50,0,1610,1608,1,0,
		0,0,1611,1614,1,0,0,0,1612,1610,1,0,0,0,1612,1613,1,0,0,0,1613,99,1,0,
		0,0,1614,1612,1,0,0,0,1615,1623,5,209,0,0,1616,1620,5,158,0,0,1617,1618,
		5,65,0,0,1618,1619,5,83,0,0,1619,1621,5,52,0,0,1620,1617,1,0,0,0,1620,
		1621,1,0,0,0,1621,1622,1,0,0,0,1622,1624,3,334,167,0,1623,1616,1,0,0,0,
		1623,1624,1,0,0,0,1624,1625,1,0,0,0,1625,1626,5,162,0,0,1626,1627,5,161,
		0,0,1627,1628,5,14,0,0,1628,1629,3,80,40,0,1629,1630,5,15,0,0,1630,1631,
		5,163,0,0,1631,1632,3,334,167,0,1632,1633,5,14,0,0,1633,1634,3,80,40,0,
		1634,1635,5,15,0,0,1635,1636,5,83,0,0,1636,1637,5,159,0,0,1637,1648,1,
		0,0,0,1638,1639,5,209,0,0,1639,1640,5,160,0,0,1640,1641,5,161,0,0,1641,
		1642,5,14,0,0,1642,1643,3,80,40,0,1643,1644,5,15,0,0,1644,1645,5,83,0,
		0,1645,1646,5,159,0,0,1646,1648,1,0,0,0,1647,1615,1,0,0,0,1647,1638,1,
		0,0,0,1648,101,1,0,0,0,1649,1650,5,208,0,0,1650,1659,5,157,0,0,1651,1652,
		3,334,167,0,1652,1653,5,12,0,0,1653,1655,1,0,0,0,1654,1651,1,0,0,0,1654,
		1655,1,0,0,0,1655,1656,1,0,0,0,1656,1657,3,334,167,0,1657,1658,5,12,0,
		0,1658,1660,1,0,0,0,1659,1654,1,0,0,0,1659,1660,1,0,0,0,1660,1661,1,0,
		0,0,1661,1662,3,334,167,0,1662,1663,5,209,0,0,1663,1664,5,160,0,0,1664,
		1665,5,161,0,0,1665,1666,5,14,0,0,1666,1667,3,80,40,0,1667,1668,5,15,0,
		0,1668,1669,5,83,0,0,1669,1670,5,159,0,0,1670,103,1,0,0,0,1671,1672,5,
		208,0,0,1672,1675,5,157,0,0,1673,1674,5,65,0,0,1674,1676,5,52,0,0,1675,
		1673,1,0,0,0,1675,1676,1,0,0,0,1676,1677,1,0,0,0,1677,1678,3,356,178,0,
		1678,1679,5,210,0,0,1679,1680,5,108,0,0,1680,1681,3,356,178,0,1681,105,
		1,0,0,0,1682,1683,5,208,0,0,1683,1686,5,157,0,0,1684,1685,5,65,0,0,1685,
		1687,5,52,0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,0,1687,1688,1,0,0,0,1688,
		1689,3,356,178,0,1689,1694,3,108,54,0,1690,1691,5,13,0,0,1691,1693,3,108,
		54,0,1692,1690,1,0,0,0,1693,1696,1,0,0,0,1694,1692,1,0,0,0,1694,1695,1,
		0,0,0,1695,107,1,0,0,0,1696,1694,1,0,0,0,1697,1698,5,210,0,0,1698,1701,
		5,206,0,0,1699,1700,5,65,0,0,1700,1702,5,52,0,0,1701,1699,1,0,0,0,1701,
		1702,1,0,0,0,1702,1703,1,0,0,0,1703,1708,3,110,55,0,1704,1705,5,13,0,0,
		1705,1707,3,110,55,0,1706,1704,1,0,0,0,1707,1710,1,0,0,0,1708,1706,1,0,
		0,0,1708,1709,1,0,0,0,1709,109,1,0,0,0,1710,1708,1,0,0,0,1711,1712,3,334,
		167,0,1712,1713,5,108,0,0,1713,1714,3,334,167,0,1714,111,1,0,0,0,1715,
		1716,5,208,0,0,1716,1717,5,157,0,0,1717,1718,3,356,178,0,1718,1723,3,114,
		57,0,1719,1720,5,13,0,0,1720,1722,3,114,57,0,1721,1719,1,0,0,0,1722,1725,
		1,0,0,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,113,1,0,0,0,1725,1723,
		1,0,0,0,1726,1727,5,171,0,0,1727,1730,5,206,0,0,1728,1729,5,65,0,0,1729,
		1731,5,52,0,0,1730,1728,1,0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,0,0,1732,
		1733,3,334,167,0,1733,115,1,0,0,0,1734,1735,5,208,0,0,1735,1744,5,157,
		0,0,1736,1737,3,334,167,0,1737,1738,5,12,0,0,1738,1740,1,0,0,0,1739,1736,
		1,0,0,0,1739,1740,1,0,0,0,1740,1741,1,0,0,0,1741,1742,3,334,167,0,1742,
		1743,5,12,0,0,1743,1745,1,0,0,0,1744,1739,1,0,0,0,1744,1745,1,0,0,0,1745,
		1746,1,0,0,0,1746,1747,3,334,167,0,1747,1748,5,171,0,0,1748,1751,5,158,
		0,0,1749,1750,5,65,0,0,1750,1752,5,52,0,0,1751,1749,1,0,0,0,1751,1752,
		1,0,0,0,1752,1753,1,0,0,0,1753,1754,3,286,143,0,1754,117,1,0,0,0,1755,
		1756,5,208,0,0,1756,1765,5,157,0,0,1757,1758,3,334,167,0,1758,1759,5,12,
		0,0,1759,1761,1,0,0,0,1760,1757,1,0,0,0,1760,1761,1,0,0,0,1761,1762,1,
		0,0,0,1762,1763,3,334,167,0,1763,1764,5,12,0,0,1764,1766,1,0,0,0,1765,
		1760,1,0,0,0,1765,1766,1,0,0,0,1766,1767,1,0,0,0,1767,1768,3,334,167,0,
		1768,1769,5,171,0,0,1769,1770,5,160,0,0,1770,1773,5,161,0,0,1771,1772,
		5,65,0,0,1772,1774,5,52,0,0,1773,1771,1,0,0,0,1773,1774,1,0,0,0,1774,119,
		1,0,0,0,1775,1776,5,208,0,0,1776,1777,5,157,0,0,1777,1778,3,356,178,0,
		1778,1779,5,103,0,0,1779,1780,5,42,0,0,1780,1781,5,36,0,0,1781,1782,3,
		318,159,0,1782,121,1,0,0,0,1783,1784,3,286,143,0,1784,123,1,0,0,0,1785,
		1786,3,286,143,0,1786,125,1,0,0,0,1787,1788,3,286,143,0,1788,127,1,0,0,
		0,1789,1790,3,286,143,0,1790,129,1,0,0,0,1791,1792,3,286,143,0,1792,131,
		1,0,0,0,1793,1794,3,286,143,0,1794,133,1,0,0,0,1795,1796,3,286,143,0,1796,
		135,1,0,0,0,1797,1798,3,286,143,0,1798,137,1,0,0,0,1799,1800,3,286,143,
		0,1800,139,1,0,0,0,1801,1802,3,286,143,0,1802,141,1,0,0,0,1803,1804,3,
		286,143,0,1804,143,1,0,0,0,1805,1806,3,286,143,0,1806,145,1,0,0,0,1807,
		1808,5,187,0,0,1808,1812,5,154,0,0,1809,1810,5,65,0,0,1810,1811,5,83,0,
		0,1811,1813,5,52,0,0,1812,1809,1,0,0,0,1812,1813,1,0,0,0,1813,1817,1,0,
		0,0,1814,1815,3,334,167,0,1815,1816,5,12,0,0,1816,1818,1,0,0,0,1817,1814,
		1,0,0,0,1817,1818,1,0,0,0,1818,1819,1,0,0,0,1819,1820,3,334,167,0,1820,
		147,1,0,0,0,1821,1823,5,171,0,0,1822,1824,5,183,0,0,1823,1822,1,0,0,0,
		1823,1824,1,0,0,0,1824,1825,1,0,0,0,1825,1828,5,154,0,0,1826,1827,5,65,
		0,0,1827,1829,5,52,0,0,1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,1833,1,
		0,0,0,1830,1831,3,334,167,0,1831,1832,5,12,0,0,1832,1834,1,0,0,0,1833,
		1830,1,0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1837,3,334,167,0,
		1836,1838,7,2,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,149,1,0,0,0,
		1839,1840,5,171,0,0,1840,1843,5,157,0,0,1841,1842,5,65,0,0,1842,1844,5,
		52,0,0,1843,1841,1,0,0,0,1843,1844,1,0,0,0,1844,1845,1,0,0,0,1845,1846,
		3,356,178,0,1846,151,1,0,0,0,1847,1848,5,171,0,0,1848,1849,5,168,0,0,1849,
		1852,5,157,0,0,1850,1851,5,65,0,0,1851,1853,5,52,0,0,1852,1850,1,0,0,0,
		1852,1853,1,0,0,0,1853,1854,1,0,0,0,1854,1855,3,356,178,0,1855,153,1,0,
		0,0,1856,1857,5,171,0,0,1857,1858,5,183,0,0,1858,1861,5,157,0,0,1859,1860,
		5,65,0,0,1860,1862,5,52,0,0,1861,1859,1,0,0,0,1861,1862,1,0,0,0,1862,1863,
		1,0,0,0,1863,1864,3,356,178,0,1864,155,1,0,0,0,1865,1866,5,171,0,0,1866,
		1869,5,170,0,0,1867,1868,5,65,0,0,1868,1870,5,52,0,0,1869,1867,1,0,0,0,
		1869,1870,1,0,0,0,1870,1871,1,0,0,0,1871,1872,3,356,178,0,1872,157,1,0,
		0,0,1873,1874,5,171,0,0,1874,1875,5,184,0,0,1875,1878,5,170,0,0,1876,1877,
		5,65,0,0,1877,1879,5,52,0,0,1878,1876,1,0,0,0,1878,1879,1,0,0,0,1879,1880,
		1,0,0,0,1880,1881,3,356,178,0,1881,159,1,0,0,0,1882,1883,5,171,0,0,1883,
		1886,5,182,0,0,1884,1885,5,65,0,0,1885,1887,5,52,0,0,1886,1884,1,0,0,0,
		1886,1887,1,0,0,0,1887,1896,1,0,0,0,1888,1889,3,334,167,0,1889,1890,5,
		12,0,0,1890,1892,1,0,0,0,1891,1888,1,0,0,0,1891,1892,1,0,0,0,1892,1893,
		1,0,0,0,1893,1894,3,334,167,0,1894,1895,5,12,0,0,1895,1897,1,0,0,0,1896,
		1891,1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,0,0,0,1898,1899,3,334,167,0,
		1899,161,1,0,0,0,1900,1901,5,171,0,0,1901,1902,5,157,0,0,1902,1905,5,182,
		0,0,1903,1904,5,65,0,0,1904,1906,5,52,0,0,1905,1903,1,0,0,0,1905,1906,
		1,0,0,0,1906,1915,1,0,0,0,1907,1908,3,334,167,0,1908,1909,5,12,0,0,1909,
		1911,1,0,0,0,1910,1907,1,0,0,0,1910,1911,1,0,0,0,1911,1912,1,0,0,0,1912,
		1913,3,334,167,0,1913,1914,5,12,0,0,1914,1916,1,0,0,0,1915,1910,1,0,0,
		0,1915,1916,1,0,0,0,1916,1917,1,0,0,0,1917,1918,3,334,167,0,1918,163,1,
		0,0,0,1919,1920,5,171,0,0,1920,1923,5,181,0,0,1921,1922,5,65,0,0,1922,
		1924,5,52,0,0,1923,1921,1,0,0,0,1923,1924,1,0,0,0,1924,1933,1,0,0,0,1925,
		1926,3,334,167,0,1926,1927,5,12,0,0,1927,1929,1,0,0,0,1928,1925,1,0,0,
		0,1928,1929,1,0,0,0,1929,1930,1,0,0,0,1930,1931,3,334,167,0,1931,1932,
		5,12,0,0,1932,1934,1,0,0,0,1933,1928,1,0,0,0,1933,1934,1,0,0,0,1934,1935,
		1,0,0,0,1935,1936,3,334,167,0,1936,165,1,0,0,0,1937,1938,5,171,0,0,1938,
		1939,5,149,0,0,1939,1940,5,178,0,0,1940,1943,5,179,0,0,1941,1942,5,65,
		0,0,1942,1944,5,52,0,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,1945,1,
		0,0,0,1945,1946,3,356,178,0,1946,1947,5,87,0,0,1947,1948,3,356,178,0,1948,
		1957,1,0,0,0,1949,1950,5,171,0,0,1950,1951,5,24,0,0,1951,1952,5,149,0,
		0,1952,1953,5,178,0,0,1953,1954,5,180,0,0,1954,1955,5,87,0,0,1955,1957,
		3,356,178,0,1956,1937,1,0,0,0,1956,1949,1,0,0,0,1957,167,1,0,0,0,1958,
		1959,5,171,0,0,1959,1962,5,177,0,0,1960,1961,5,65,0,0,1961,1963,5,52,0,
		0,1962,1960,1,0,0,0,1962,1963,1,0,0,0,1963,1964,1,0,0,0,1964,1965,3,356,
		178,0,1965,169,1,0,0,0,1966,1967,5,171,0,0,1967,1970,5,176,0,0,1968,1969,
		5,65,0,0,1969,1971,5,52,0,0,1970,1968,1,0,0,0,1970,1971,1,0,0,0,1971,1972,
		1,0,0,0,1972,1973,3,356,178,0,1973,171,1,0,0,0,1974,1975,5,171,0,0,1975,
		1978,5,175,0,0,1976,1977,5,65,0,0,1977,1979,5,52,0,0,1978,1976,1,0,0,0,
		1978,1979,1,0,0,0,1979,1980,1,0,0,0,1980,1981,3,356,178,0,1981,173,1,0,
		0,0,1982,1983,5,171,0,0,1983,1984,5,172,0,0,1984,1987,5,173,0,0,1985,1986,
		5,65,0,0,1986,1988,5,52,0,0,1987,1985,1,0,0,0,1987,1988,1,0,0,0,1988,1989,
		1,0,0,0,1989,1990,3,356,178,0,1990,1991,5,87,0,0,1991,1992,3,356,178,0,
		1992,175,1,0,0,0,1993,1994,5,171,0,0,1994,1995,5,172,0,0,1995,1998,5,173,
		0,0,1996,1997,5,65,0,0,1997,1999,5,52,0,0,1998,1996,1,0,0,0,1998,1999,
		1,0,0,0,1999,2000,1,0,0,0,2000,2001,3,356,178,0,2001,2002,5,87,0,0,2002,
		2003,3,356,178,0,2003,177,1,0,0,0,2004,2009,3,180,90,0,2005,2006,5,13,
		0,0,2006,2008,3,180,90,0,2007,2005,1,0,0,0,2008,2011,1,0,0,0,2009,2007,
		1,0,0,0,2009,2010,1,0,0,0,2010,179,1,0,0,0,2011,2009,1,0,0,0,2012,2018,
		3,356,178,0,2013,2014,5,141,0,0,2014,2015,5,14,0,0,2015,2016,3,276,138,
		0,2016,2017,5,15,0,0,2017,2019,1,0,0,0,2018,2013,1,0,0,0,2018,2019,1,0,
		0,0,2019,181,1,0,0,0,2020,2025,3,184,92,0,2021,2022,5,13,0,0,2022,2024,
		3,184,92,0,2023,2021,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,
		2026,1,0,0,0,2026,183,1,0,0,0,2027,2025,1,0,0,0,2028,2047,3,186,93,0,2029,
		2047,3,188,94,0,2030,2031,5,158,0,0,2031,2033,3,334,167,0,2032,2030,1,
		0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2043,3,190,95,0,2035,2038,
		5,13,0,0,2036,2037,5,158,0,0,2037,2039,3,334,167,0,2038,2036,1,0,0,0,2038,
		2039,1,0,0,0,2039,2040,1,0,0,0,2040,2042,3,190,95,0,2041,2035,1,0,0,0,
		2042,2045,1,0,0,0,2043,2041,1,0,0,0,2043,2044,1,0,0,0,2044,2047,1,0,0,
		0,2045,2043,1,0,0,0,2046,2028,1,0,0,0,2046,2029,1,0,0,0,2046,2032,1,0,
		0,0,2047,185,1,0,0,0,2048,2049,3,356,178,0,2049,2050,3,316,158,0,2050,
		187,1,0,0,0,2051,2052,5,160,0,0,2052,2053,5,161,0,0,2053,2054,5,14,0,0,
		2054,2055,3,354,177,0,2055,2056,5,15,0,0,2056,2057,5,83,0,0,2057,2058,
		5,159,0,0,2058,189,1,0,0,0,2059,2060,5,162,0,0,2060,2061,5,161,0,0,2061,
		2062,5,14,0,0,2062,2063,3,354,177,0,2063,2064,5,15,0,0,2064,2065,3,192,
		96,0,2065,191,1,0,0,0,2066,2067,5,163,0,0,2067,2068,3,334,167,0,2068,2069,
		5,14,0,0,2069,2070,3,354,177,0,2070,2071,5,15,0,0,2071,2072,5,83,0,0,2072,
		2073,5,159,0,0,2073,193,1,0,0,0,2074,2075,5,38,0,0,2075,2079,5,154,0,0,
		2076,2077,5,65,0,0,2077,2078,5,83,0,0,2078,2080,5,52,0,0,2079,2076,1,0,
		0,0,2079,2080,1,0,0,0,2080,2084,1,0,0,0,2081,2082,3,334,167,0,2082,2083,
		5,12,0,0,2083,2085,1,0,0,0,2084,2081,1,0,0,0,2084,2085,1,0,0,0,2085,2086,
		1,0,0,0,2086,2090,3,334,167,0,2087,2088,5,42,0,0,2088,2089,5,36,0,0,2089,
		2091,3,318,159,0,2090,2087,1,0,0,0,2090,2091,1,0,0,0,2091,2097,1,0,0,0,
		2092,2093,5,141,0,0,2093,2094,5,14,0,0,2094,2095,3,276,138,0,2095,2096,
		5,15,0,0,2096,2098,1,0,0,0,2097,2092,1,0,0,0,2097,2098,1,0,0,0,2098,195,
		1,0,0,0,2099,2100,6,98,-1,0,2100,2102,5,118,0,0,2101,2103,5,97,0,0,2102,
		2101,1,0,0,0,2102,2103,1,0,0,0,2103,2106,1,0,0,0,2104,2107,3,202,101,0,
		2105,2107,3,204,102,0,2106,2104,1,0,0,0,2106,2105,1,0,0,0,2107,2115,1,
		0,0,0,2108,2111,5,13,0,0,2109,2112,3,202,101,0,2110,2112,3,204,102,0,2111,
		2109,1,0,0,0,2111,2110,1,0,0,0,2112,2114,1,0,0,0,2113,2108,1,0,0,0,2114,
		2117,1,0,0,0,2115,2113,1,0,0,0,2115,2116,1,0,0,0,2116,2126,1,0,0,0,2117,
		2115,1,0,0,0,2118,2127,3,208,104,0,2119,2120,5,14,0,0,2120,2121,3,196,
		98,0,2121,2122,5,15,0,0,2122,2127,1,0,0,0,2123,2124,3,196,98,0,2124,2125,
		3,200,100,0,2125,2127,1,0,0,0,2126,2118,1,0,0,0,2126,2119,1,0,0,0,2126,
		2123,1,0,0,0,2127,2128,1,0,0,0,2128,2129,3,198,99,0,2129,2139,1,0,0,0,
		2130,2131,3,208,104,0,2131,2132,3,198,99,0,2132,2139,1,0,0,0,2133,2134,
		5,14,0,0,2134,2135,3,196,98,0,2135,2136,5,15,0,0,2136,2137,3,198,99,0,
		2137,2139,1,0,0,0,2138,2099,1,0,0,0,2138,2130,1,0,0,0,2138,2133,1,0,0,
		0,2139,2146,1,0,0,0,2140,2141,10,1,0,0,2141,2142,3,200,100,0,2142,2143,
		3,198,99,0,2143,2145,1,0,0,0,2144,2140,1,0,0,0,2145,2148,1,0,0,0,2146,
		2144,1,0,0,0,2146,2147,1,0,0,0,2147,197,1,0,0,0,2148,2146,1,0,0,0,2149,
		2150,5,89,0,0,2150,2151,5,33,0,0,2151,2153,3,286,143,0,2152,2154,7,3,0,
		0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,2154,2162,1,0,0,0,2155,2156,5,13,
		0,0,2156,2158,3,286,143,0,2157,2159,7,3,0,0,2158,2157,1,0,0,0,2158,2159,
		1,0,0,0,2159,2161,1,0,0,0,2160,2155,1,0,0,0,2161,2164,1,0,0,0,2162,2160,
		1,0,0,0,2162,2163,1,0,0,0,2163,2166,1,0,0,0,2164,2162,1,0,0,0,2165,2149,
		1,0,0,0,2165,2166,1,0,0,0,2166,2173,1,0,0,0,2167,2168,5,77,0,0,2168,2171,
		3,286,143,0,2169,2170,5,136,0,0,2170,2172,3,286,143,0,2171,2169,1,0,0,
		0,2171,2172,1,0,0,0,2172,2174,1,0,0,0,2173,2167,1,0,0,0,2173,2174,1,0,
		0,0,2174,199,1,0,0,0,2175,2181,5,68,0,0,2176,2178,7,4,0,0,2177,2179,5,
		90,0,0,2178,2177,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,2175,
		1,0,0,0,2180,2176,1,0,0,0,2180,2181,1,0,0,0,2181,2188,1,0,0,0,2182,2183,
		5,112,0,0,2183,2189,7,5,0,0,2184,2185,5,69,0,0,2185,2189,5,45,0,0,2186,
		2187,5,50,0,0,2187,2189,5,45,0,0,2188,2182,1,0,0,0,2188,2184,1,0,0,0,2188,
		2186,1,0,0,0,2189,2212,1,0,0,0,2190,2191,5,33,0,0,2191,2197,5,137,0,0,
		2192,2193,5,87,0,0,2193,2194,5,14,0,0,2194,2195,3,354,177,0,2195,2196,
		5,15,0,0,2196,2198,1,0,0,0,2197,2192,1,0,0,0,2197,2198,1,0,0,0,2198,2211,
		1,0,0,0,2199,2201,5,138,0,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2202,
		1,0,0,0,2202,2208,5,139,0,0,2203,2204,5,33,0,0,2204,2205,5,14,0,0,2205,
		2206,3,354,177,0,2206,2207,5,15,0,0,2207,2209,1,0,0,0,2208,2203,1,0,0,
		0,2208,2209,1,0,0,0,2209,2211,1,0,0,0,2210,2190,1,0,0,0,2210,2200,1,0,
		0,0,2211,2213,1,0,0,0,2212,2210,1,0,0,0,2212,2213,1,0,0,0,2213,2214,1,
		0,0,0,2214,2215,3,196,98,0,2215,201,1,0,0,0,2216,2217,3,334,167,0,2217,
		2218,5,28,0,0,2218,2219,5,14,0,0,2219,2220,3,196,98,0,2220,2221,5,15,0,
		0,2221,203,1,0,0,0,2222,2223,3,334,167,0,2223,2224,5,28,0,0,2224,2225,
		3,206,103,0,2225,205,1,0,0,0,2226,2227,3,196,98,0,2227,2228,5,112,0,0,
		2228,2229,5,24,0,0,2229,2230,3,196,98,0,2230,207,1,0,0,0,2231,2234,5,102,
		0,0,2232,2233,5,118,0,0,2233,2235,3,242,121,0,2234,2232,1,0,0,0,2234,2235,
		1,0,0,0,2235,2237,1,0,0,0,2236,2238,7,5,0,0,2237,2236,1,0,0,0,2237,2238,
		1,0,0,0,2238,2241,1,0,0,0,2239,2240,5,28,0,0,2240,2242,7,6,0,0,2241,2239,
		1,0,0,0,2241,2242,1,0,0,0,2242,2243,1,0,0,0,2243,2246,3,280,140,0,2244,
		2245,5,58,0,0,2245,2247,3,244,122,0,2246,2244,1,0,0,0,2246,2247,1,0,0,
		0,2247,2250,1,0,0,0,2248,2249,5,116,0,0,2249,2251,3,286,143,0,2250,2248,
		1,0,0,0,2250,2251,1,0,0,0,2251,2255,1,0,0,0,2252,2253,5,60,0,0,2253,2254,
		5,33,0,0,2254,2256,3,210,105,0,2255,2252,1,0,0,0,2255,2256,1,0,0,0,2256,
		2259,1,0,0,0,2257,2258,5,64,0,0,2258,2260,3,286,143,0,2259,2257,1,0,0,
		0,2259,2260,1,0,0,0,2260,2263,1,0,0,0,2261,2262,5,95,0,0,2262,2264,3,286,
		143,0,2263,2261,1,0,0,0,2263,2264,1,0,0,0,2264,2267,1,0,0,0,2265,2266,
		5,117,0,0,2266,2268,3,224,112,0,2267,2265,1,0,0,0,2267,2268,1,0,0,0,2268,
		209,1,0,0,0,2269,2277,3,288,144,0,2270,2277,5,24,0,0,2271,2277,3,212,106,
		0,2272,2277,3,222,111,0,2273,2277,3,218,109,0,2274,2275,5,14,0,0,2275,
		2277,5,15,0,0,2276,2269,1,0,0,0,2276,2270,1,0,0,0,2276,2271,1,0,0,0,2276,
		2272,1,0,0,0,2276,2273,1,0,0,0,2276,2274,1,0,0,0,2277,211,1,0,0,0,2278,
		2279,5,60,0,0,2279,2280,5,33,0,0,2280,2281,5,61,0,0,2281,2282,5,152,0,
		0,2282,2283,5,14,0,0,2283,2284,3,214,107,0,2284,2285,5,15,0,0,2285,213,
		1,0,0,0,2286,2291,3,216,108,0,2287,2288,5,13,0,0,2288,2290,3,216,108,0,
		2289,2287,1,0,0,0,2290,2293,1,0,0,0,2291,2289,1,0,0,0,2291,2292,1,0,0,
		0,2292,215,1,0,0,0,2293,2291,1,0,0,0,2294,2299,3,222,111,0,2295,2299,3,
		218,109,0,2296,2299,3,286,143,0,2297,2299,3,220,110,0,2298,2294,1,0,0,
		0,2298,2295,1,0,0,0,2298,2296,1,0,0,0,2298,2297,1,0,0,0,2299,217,1,0,0,
		0,2300,2301,5,60,0,0,2301,2302,5,33,0,0,2302,2303,5,40,0,0,2303,2304,5,
		14,0,0,2304,2305,3,214,107,0,2305,2306,5,15,0,0,2306,219,1,0,0,0,2307,
		2308,5,14,0,0,2308,2309,3,288,144,0,2309,2310,5,15,0,0,2310,221,1,0,0,
		0,2311,2312,5,60,0,0,2312,2313,5,33,0,0,2313,2314,5,100,0,0,2314,2315,
		5,14,0,0,2315,2316,3,214,107,0,2316,2317,5,15,0,0,2317,223,1,0,0,0,2318,
		2323,3,226,113,0,2319,2320,5,13,0,0,2320,2322,3,226,113,0,2321,2319,1,
		0,0,0,2322,2325,1,0,0,0,2323,2321,1,0,0,0,2323,2324,1,0,0,0,2324,225,1,
		0,0,0,2325,2323,1,0,0,0,2326,2327,3,356,178,0,2327,2333,5,28,0,0,2328,
		2334,3,356,178,0,2329,2330,5,14,0,0,2330,2331,3,228,114,0,2331,2332,5,
		15,0,0,2332,2334,1,0,0,0,2333,2328,1,0,0,0,2333,2329,1,0,0,0,2334,227,
		1,0,0,0,2335,2337,3,356,178,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,
		2341,1,0,0,0,2338,2339,5,92,0,0,2339,2340,5,33,0,0,2340,2342,3,288,144,
		0,2341,2338,1,0,0,0,2341,2342,1,0,0,0,2342,2346,1,0,0,0,2343,2344,5,89,
		0,0,2344,2345,5,33,0,0,2345,2347,3,304,152,0,2346,2343,1,0,0,0,2346,2347,
		1,0,0,0,2347,2349,1,0,0,0,2348,2350,3,230,115,0,2349,2348,1,0,0,0,2349,
		2350,1,0,0,0,2350,229,1,0,0,0,2351,2354,7,7,0,0,2352,2355,3,232,116,0,
		2353,2355,3,234,117,0,2354,2352,1,0,0,0,2354,2353,1,0,0,0,2355,231,1,0,
		0,0,2356,2357,5,111,0,0,2357,2366,5,93,0,0,2358,2359,3,286,143,0,2359,
		2360,5,93,0,0,2360,2366,1,0,0,0,2361,2362,5,41,0,0,2362,2364,5,149,0,0,
		2363,2361,1,0,0,0,2363,2364,1,0,0,0,2364,2366,1,0,0,0,2365,2356,1,0,0,
		0,2365,2358,1,0,0,0,2365,2363,1,0,0,0,2366,233,1,0,0,0,2367,2368,5,32,
		0,0,2368,2369,5,111,0,0,2369,2370,5,93,0,0,2370,2371,5,25,0,0,2371,2390,
		3,236,118,0,2372,2373,5,32,0,0,2373,2374,3,286,143,0,2374,2375,5,93,0,
		0,2375,2376,5,25,0,0,2376,2377,3,236,118,0,2377,2390,1,0,0,0,2378,2379,
		5,32,0,0,2379,2380,5,41,0,0,2380,2381,5,149,0,0,2381,2382,5,25,0,0,2382,
		2390,3,238,119,0,2383,2384,5,32,0,0,2384,2385,3,286,143,0,2385,2386,5,
		56,0,0,2386,2387,5,25,0,0,2387,2388,3,240,120,0,2388,2390,1,0,0,0,2389,
		2367,1,0,0,0,2389,2372,1,0,0,0,2389,2378,1,0,0,0,2389,2383,1,0,0,0,2390,
		235,1,0,0,0,2391,2392,3,286,143,0,2392,2393,5,93,0,0,2393,2402,1,0,0,0,
		2394,2395,5,41,0,0,2395,2402,5,149,0,0,2396,2397,3,286,143,0,2397,2398,
		5,56,0,0,2398,2402,1,0,0,0,2399,2400,5,111,0,0,2400,2402,5,56,0,0,2401,
		2391,1,0,0,0,2401,2394,1,0,0,0,2401,2396,1,0,0,0,2401,2399,1,0,0,0,2402,
		237,1,0,0,0,2403,2404,5,41,0,0,2404,2411,5,149,0,0,2405,2406,3,286,143,
		0,2406,2407,5,56,0,0,2407,2411,1,0,0,0,2408,2409,5,111,0,0,2409,2411,5,
		56,0,0,2410,2403,1,0,0,0,2410,2405,1,0,0,0,2410,2408,1,0,0,0,2411,239,
		1,0,0,0,2412,2413,3,286,143,0,2413,2414,5,56,0,0,2414,2418,1,0,0,0,2415,
		2416,5,111,0,0,2416,2418,5,56,0,0,2417,2412,1,0,0,0,2417,2415,1,0,0,0,
		2418,241,1,0,0,0,2419,2420,5,140,0,0,2420,2421,5,141,0,0,2421,2422,5,14,
		0,0,2422,2423,3,276,138,0,2423,2424,5,15,0,0,2424,243,1,0,0,0,2425,2430,
		3,246,123,0,2426,2427,5,13,0,0,2427,2429,3,246,123,0,2428,2426,1,0,0,0,
		2429,2432,1,0,0,0,2430,2428,1,0,0,0,2430,2431,1,0,0,0,2431,245,1,0,0,0,
		2432,2430,1,0,0,0,2433,2436,3,248,124,0,2434,2437,3,262,131,0,2435,2437,
		3,264,132,0,2436,2434,1,0,0,0,2436,2435,1,0,0,0,2436,2437,1,0,0,0,2437,
		2439,1,0,0,0,2438,2440,3,274,137,0,2439,2438,1,0,0,0,2439,2440,1,0,0,0,
		2440,247,1,0,0,0,2441,2442,6,124,-1,0,2442,2444,3,334,167,0,2443,2445,
		3,336,168,0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,2451,1,0,0,0,2446,
		2447,5,57,0,0,2447,2448,5,148,0,0,2448,2449,5,28,0,0,2449,2450,5,86,0,
		0,2450,2452,3,286,143,0,2451,2446,1,0,0,0,2451,2452,1,0,0,0,2452,2480,
		1,0,0,0,2453,2463,5,14,0,0,2454,2455,3,248,124,0,2455,2456,3,252,126,0,
		2456,2457,3,248,124,0,2457,2464,1,0,0,0,2458,2459,3,248,124,0,2459,2460,
		3,254,127,0,2460,2461,3,248,124,0,2461,2462,3,256,128,0,2462,2464,1,0,
		0,0,2463,2454,1,0,0,0,2463,2458,1,0,0,0,2464,2465,1,0,0,0,2465,2466,5,
		15,0,0,2466,2480,1,0,0,0,2467,2468,5,14,0,0,2468,2469,3,196,98,0,2469,
		2471,5,15,0,0,2470,2472,3,336,168,0,2471,2470,1,0,0,0,2471,2472,1,0,0,
		0,2472,2480,1,0,0,0,2473,2480,3,356,178,0,2474,2480,3,250,125,0,2475,2477,
		3,356,178,0,2476,2478,3,336,168,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,
		2478,2480,1,0,0,0,2479,2441,1,0,0,0,2479,2453,1,0,0,0,2479,2467,1,0,0,
		0,2479,2473,1,0,0,0,2479,2474,1,0,0,0,2479,2475,1,0,0,0,2480,2492,1,0,
		0,0,2481,2482,10,7,0,0,2482,2483,3,252,126,0,2483,2484,3,248,124,8,2484,
		2491,1,0,0,0,2485,2486,10,6,0,0,2486,2487,3,254,127,0,2487,2488,3,248,
		124,0,2488,2489,3,256,128,0,2489,2491,1,0,0,0,2490,2481,1,0,0,0,2490,2485,
		1,0,0,0,2491,2494,1,0,0,0,2492,2490,1,0,0,0,2492,2493,1,0,0,0,2493,249,
		1,0,0,0,2494,2492,1,0,0,0,2495,2496,5,113,0,0,2496,2497,5,14,0,0,2497,
		2498,3,286,143,0,2498,2500,5,15,0,0,2499,2501,3,336,168,0,2500,2499,1,
		0,0,0,2500,2501,1,0,0,0,2501,2507,1,0,0,0,2502,2504,3,356,178,0,2503,2505,
		3,336,168,0,2504,2503,1,0,0,0,2504,2505,1,0,0,0,2505,2507,1,0,0,0,2506,
		2495,1,0,0,0,2506,2502,1,0,0,0,2507,2513,1,0,0,0,2508,2509,5,118,0,0,2509,
		2511,5,136,0,0,2510,2512,3,336,168,0,2511,2510,1,0,0,0,2511,2512,1,0,0,
		0,2512,2514,1,0,0,0,2513,2508,1,0,0,0,2513,2514,1,0,0,0,2514,251,1,0,0,
		0,2515,2516,5,39,0,0,2516,2519,5,73,0,0,2517,2519,5,13,0,0,2518,2515,1,
		0,0,0,2518,2517,1,0,0,0,2519,253,1,0,0,0,2520,2522,5,68,0,0,2521,2520,
		1,0,0,0,2521,2522,1,0,0,0,2522,2523,1,0,0,0,2523,2540,5,73,0,0,2524,2526,
		5,59,0,0,2525,2527,5,90,0,0,2526,2525,1,0,0,0,2526,2527,1,0,0,0,2527,2528,
		1,0,0,0,2528,2540,5,73,0,0,2529,2531,5,75,0,0,2530,2532,5,90,0,0,2531,
		2530,1,0,0,0,2531,2532,1,0,0,0,2532,2533,1,0,0,0,2533,2540,5,73,0,0,2534,
		2536,5,99,0,0,2535,2537,5,90,0,0,2536,2535,1,0,0,0,2536,2537,1,0,0,0,2537,
		2538,1,0,0,0,2538,2540,5,73,0,0,2539,2521,1,0,0,0,2539,2524,1,0,0,0,2539,
		2529,1,0,0,0,2539,2534,1,0,0,0,2540,255,1,0,0,0,2541,2544,3,258,129,0,
		2542,2544,3,260,130,0,2543,2541,1,0,0,0,2543,2542,1,0,0,0,2544,257,1,0,
		0,0,2545,2546,5,87,0,0,2546,2547,3,286,143,0,2547,259,1,0,0,0,2548,2549,
		5,114,0,0,2549,2550,5,14,0,0,2550,2551,3,354,177,0,2551,2552,5,15,0,0,
		2552,261,1,0,0,0,2553,2554,5,146,0,0,2554,2555,5,14,0,0,2555,2557,3,338,
		169,0,2556,2558,3,336,168,0,2557,2556,1,0,0,0,2557,2558,1,0,0,0,2558,2566,
		1,0,0,0,2559,2560,5,13,0,0,2560,2562,3,338,169,0,2561,2563,3,336,168,0,
		2562,2561,1,0,0,0,2562,2563,1,0,0,0,2563,2565,1,0,0,0,2564,2559,1,0,0,
		0,2565,2568,1,0,0,0,2566,2564,1,0,0,0,2566,2567,1,0,0,0,2567,2569,1,0,
		0,0,2568,2566,1,0,0,0,2569,2570,5,57,0,0,2570,2571,3,334,167,0,2571,2572,
		5,67,0,0,2572,2573,5,14,0,0,2573,2574,3,302,151,0,2574,2575,5,15,0,0,2575,
		2578,5,15,0,0,2576,2577,5,28,0,0,2577,2579,3,334,167,0,2578,2576,1,0,0,
		0,2578,2579,1,0,0,0,2579,263,1,0,0,0,2580,2585,5,147,0,0,2581,2582,5,150,
		0,0,2582,2586,5,85,0,0,2583,2584,5,51,0,0,2584,2586,5,85,0,0,2585,2581,
		1,0,0,0,2585,2583,1,0,0,0,2585,2586,1,0,0,0,2586,2587,1,0,0,0,2587,2590,
		5,14,0,0,2588,2591,3,266,133,0,2589,2591,3,268,134,0,2590,2588,1,0,0,0,
		2590,2589,1,0,0,0,2591,2592,1,0,0,0,2592,2593,5,15,0,0,2593,2594,3,336,
		168,0,2594,265,1,0,0,0,2595,2596,3,288,144,0,2596,2597,5,57,0,0,2597,2598,
		3,356,178,0,2598,2599,5,67,0,0,2599,2600,5,14,0,0,2600,2601,3,270,135,
		0,2601,2602,5,15,0,0,2602,267,1,0,0,0,2603,2604,5,14,0,0,2604,2605,3,288,
		144,0,2605,2606,5,15,0,0,2606,2607,5,57,0,0,2607,2608,3,356,178,0,2608,
		2609,5,67,0,0,2609,2610,5,14,0,0,2610,2611,3,272,136,0,2611,2612,5,15,
		0,0,2612,269,1,0,0,0,2613,2615,3,286,143,0,2614,2616,3,336,168,0,2615,
		2614,1,0,0,0,2615,2616,1,0,0,0,2616,2624,1,0,0,0,2617,2618,5,13,0,0,2618,
		2620,3,286,143,0,2619,2621,3,334,167,0,2620,2619,1,0,0,0,2620,2621,1,0,
		0,0,2621,2623,1,0,0,0,2622,2617,1,0,0,0,2623,2626,1,0,0,0,2624,2622,1,
		0,0,0,2624,2625,1,0,0,0,2625,271,1,0,0,0,2626,2624,1,0,0,0,2627,2628,5,
		14,0,0,2628,2630,3,286,143,0,2629,2631,3,336,168,0,2630,2629,1,0,0,0,2630,
		2631,1,0,0,0,2631,2639,1,0,0,0,2632,2633,5,13,0,0,2633,2635,3,286,143,
		0,2634,2636,3,334,167,0,2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,2638,
		1,0,0,0,2637,2632,1,0,0,0,2638,2641,1,0,0,0,2639,2637,1,0,0,0,2639,2640,
		1,0,0,0,2640,2642,1,0,0,0,2641,2639,1,0,0,0,2642,2643,5,15,0,0,2643,273,
		1,0,0,0,2644,2645,5,106,0,0,2645,2646,5,144,0,0,2646,2647,5,14,0,0,2647,
		2648,3,286,143,0,2648,2649,5,145,0,0,2649,2650,5,15,0,0,2650,275,1,0,0,
		0,2651,2656,3,278,139,0,2652,2653,5,13,0,0,2653,2655,3,278,139,0,2654,
		2652,1,0,0,0,2655,2658,1,0,0,0,2656,2654,1,0,0,0,2656,2657,1,0,0,0,2657,
		277,1,0,0,0,2658,2656,1,0,0,0,2659,2660,3,334,167,0,2660,2661,5,22,0,0,
		2661,2662,3,286,143,0,2662,279,1,0,0,0,2663,2668,3,282,141,0,2664,2665,
		5,13,0,0,2665,2667,3,282,141,0,2666,2664,1,0,0,0,2667,2670,1,0,0,0,2668,
		2666,1,0,0,0,2668,2669,1,0,0,0,2669,281,1,0,0,0,2670,2668,1,0,0,0,2671,
		2677,3,284,142,0,2672,2674,3,286,143,0,2673,2675,3,336,168,0,2674,2673,
		1,0,0,0,2674,2675,1,0,0,0,2675,2677,1,0,0,0,2676,2671,1,0,0,0,2676,2672,
		1,0,0,0,2677,283,1,0,0,0,2678,2679,3,286,143,0,2679,2680,5,12,0,0,2680,
		2682,1,0,0,0,2681,2678,1,0,0,0,2681,2682,1,0,0,0,2682,2683,1,0,0,0,2683,
		2689,5,8,0,0,2684,2685,5,50,0,0,2685,2686,5,14,0,0,2686,2687,3,354,177,
		0,2687,2688,5,15,0,0,2688,2690,1,0,0,0,2689,2684,1,0,0,0,2689,2690,1,0,
		0,0,2690,2696,1,0,0,0,2691,2692,5,143,0,0,2692,2693,5,14,0,0,2693,2694,
		3,358,179,0,2694,2695,5,15,0,0,2695,2697,1,0,0,0,2696,2691,1,0,0,0,2696,
		2697,1,0,0,0,2697,285,1,0,0,0,2698,2699,6,143,-1,0,2699,2700,5,14,0,0,
		2700,2701,3,286,143,0,2701,2702,5,15,0,0,2702,2729,1,0,0,0,2703,2729,3,
		208,104,0,2704,2729,3,356,178,0,2705,2706,7,8,0,0,2706,2729,3,286,143,
		26,2707,2708,5,83,0,0,2708,2729,3,286,143,16,2709,2710,5,52,0,0,2710,2711,
		5,14,0,0,2711,2712,3,286,143,0,2712,2713,5,15,0,0,2713,2729,1,0,0,0,2714,
		2715,5,113,0,0,2715,2716,5,14,0,0,2716,2717,3,286,143,0,2717,2718,5,15,
		0,0,2718,2729,1,0,0,0,2719,2729,3,338,169,0,2720,2729,3,346,173,0,2721,
		2729,3,306,153,0,2722,2729,3,290,145,0,2723,2729,3,292,146,0,2724,2729,
		3,294,147,0,2725,2729,3,296,148,0,2726,2729,3,298,149,0,2727,2729,3,300,
		150,0,2728,2698,1,0,0,0,2728,2703,1,0,0,0,2728,2704,1,0,0,0,2728,2705,
		1,0,0,0,2728,2707,1,0,0,0,2728,2709,1,0,0,0,2728,2714,1,0,0,0,2728,2719,
		1,0,0,0,2728,2720,1,0,0,0,2728,2721,1,0,0,0,2728,2722,1,0,0,0,2728,2723,
		1,0,0,0,2728,2724,1,0,0,0,2728,2725,1,0,0,0,2728,2726,1,0,0,0,2728,2727,
		1,0,0,0,2729,2809,1,0,0,0,2730,2731,10,25,0,0,2731,2732,7,9,0,0,2732,2808,
		3,286,143,26,2733,2734,10,24,0,0,2734,2735,7,10,0,0,2735,2808,3,286,143,
		25,2736,2741,10,23,0,0,2737,2738,5,18,0,0,2738,2742,5,18,0,0,2739,2740,
		5,19,0,0,2740,2742,5,19,0,0,2741,2737,1,0,0,0,2741,2739,1,0,0,0,2742,2743,
		1,0,0,0,2743,2808,3,286,143,24,2744,2745,10,22,0,0,2745,2746,5,5,0,0,2746,
		2808,3,286,143,23,2747,2748,10,21,0,0,2748,2749,5,6,0,0,2749,2808,3,286,
		143,22,2750,2751,10,20,0,0,2751,2752,5,7,0,0,2752,2808,3,286,143,21,2753,
		2764,10,19,0,0,2754,2765,5,22,0,0,2755,2765,5,23,0,0,2756,2765,5,18,0,
		0,2757,2765,5,19,0,0,2758,2765,5,20,0,0,2759,2765,5,21,0,0,2760,2762,5,
		83,0,0,2761,2760,1,0,0,0,2761,2762,1,0,0,0,2762,2763,1,0,0,0,2763,2765,
		7,11,0,0,2764,2754,1,0,0,0,2764,2755,1,0,0,0,2764,2756,1,0,0,0,2764,2757,
		1,0,0,0,2764,2758,1,0,0,0,2764,2759,1,0,0,0,2764,2761,1,0,0,0,2765,2766,
		1,0,0,0,2766,2808,3,286,143,20,2767,2768,10,17,0,0,2768,2770,5,72,0,0,
		2769,2771,5,83,0,0,2770,2769,1,0,0,0,2770,2771,1,0,0,0,2771,2772,1,0,0,
		0,2772,2773,5,45,0,0,2773,2774,5,58,0,0,2774,2808,3,286,143,18,2775,2776,
		10,15,0,0,2776,2777,5,25,0,0,2777,2808,3,286,143,16,2778,2779,10,14,0,
		0,2779,2780,5,88,0,0,2780,2808,3,286,143,15,2781,2783,10,10,0,0,2782,2784,
		5,83,0,0,2783,2782,1,0,0,0,2783,2784,1,0,0,0,2784,2785,1,0,0,0,2785,2786,
		5,76,0,0,2786,2787,7,12,0,0,2787,2808,3,286,143,11,2788,2789,10,28,0,0,
		2789,2790,5,12,0,0,2790,2808,3,356,178,0,2791,2792,10,27,0,0,2792,2793,
		5,16,0,0,2793,2794,3,286,143,0,2794,2795,5,17,0,0,2795,2808,1,0,0,0,2796,
		2797,10,18,0,0,2797,2799,5,72,0,0,2798,2800,5,83,0,0,2799,2798,1,0,0,0,
		2799,2800,1,0,0,0,2800,2801,1,0,0,0,2801,2808,7,13,0,0,2802,2804,10,13,
		0,0,2803,2805,5,28,0,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,2806,1,
		0,0,0,2806,2808,3,334,167,0,2807,2730,1,0,0,0,2807,2733,1,0,0,0,2807,2736,
		1,0,0,0,2807,2744,1,0,0,0,2807,2747,1,0,0,0,2807,2750,1,0,0,0,2807,2753,
		1,0,0,0,2807,2767,1,0,0,0,2807,2775,1,0,0,0,2807,2778,1,0,0,0,2807,2781,
		1,0,0,0,2807,2788,1,0,0,0,2807,2791,1,0,0,0,2807,2796,1,0,0,0,2807,2802,
		1,0,0,0,2808,2811,1,0,0,0,2809,2807,1,0,0,0,2809,2810,1,0,0,0,2810,287,
		1,0,0,0,2811,2809,1,0,0,0,2812,2817,3,286,143,0,2813,2814,5,13,0,0,2814,
		2816,3,286,143,0,2815,2813,1,0,0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,0,
		2817,2818,1,0,0,0,2818,289,1,0,0,0,2819,2817,1,0,0,0,2820,2821,5,34,0,
		0,2821,2827,3,286,143,0,2822,2823,5,115,0,0,2823,2824,3,286,143,0,2824,
		2825,5,107,0,0,2825,2826,3,286,143,0,2826,2828,1,0,0,0,2827,2822,1,0,0,
		0,2828,2829,1,0,0,0,2829,2827,1,0,0,0,2829,2830,1,0,0,0,2830,2833,1,0,
		0,0,2831,2832,5,46,0,0,2832,2834,3,286,143,0,2833,2831,1,0,0,0,2833,2834,
		1,0,0,0,2834,2835,1,0,0,0,2835,2836,5,47,0,0,2836,291,1,0,0,0,2837,2843,
		5,34,0,0,2838,2839,5,115,0,0,2839,2840,3,286,143,0,2840,2841,5,107,0,0,
		2841,2842,3,286,143,0,2842,2844,1,0,0,0,2843,2838,1,0,0,0,2844,2845,1,
		0,0,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,2849,1,0,0,0,2847,2848,
		5,46,0,0,2848,2850,3,286,143,0,2849,2847,1,0,0,0,2849,2850,1,0,0,0,2850,
		2851,1,0,0,0,2851,2852,5,47,0,0,2852,293,1,0,0,0,2853,2854,5,201,0,0,2854,
		2855,5,14,0,0,2855,2856,3,288,144,0,2856,2857,5,15,0,0,2857,295,1,0,0,
		0,2858,2859,5,65,0,0,2859,2860,5,14,0,0,2860,2861,3,286,143,0,2861,2862,
		5,13,0,0,2862,2863,3,286,143,0,2863,2864,5,13,0,0,2864,2865,3,286,143,
		0,2865,2866,5,15,0,0,2866,297,1,0,0,0,2867,2868,5,203,0,0,2868,2869,5,
		14,0,0,2869,2870,3,286,143,0,2870,2871,5,13,0,0,2871,2872,3,286,143,0,
		2872,2873,5,15,0,0,2873,299,1,0,0,0,2874,2875,5,202,0,0,2875,2876,5,14,
		0,0,2876,2877,3,286,143,0,2877,2878,5,13,0,0,2878,2879,3,286,143,0,2879,
		2880,5,15,0,0,2880,301,1,0,0,0,2881,2883,3,288,144,0,2882,2884,3,336,168,
		0,2883,2882,1,0,0,0,2883,2884,1,0,0,0,2884,2892,1,0,0,0,2885,2886,5,13,
		0,0,2886,2888,3,288,144,0,2887,2889,3,336,168,0,2888,2887,1,0,0,0,2888,
		2889,1,0,0,0,2889,2891,1,0,0,0,2890,2885,1,0,0,0,2891,2894,1,0,0,0,2892,
		2890,1,0,0,0,2892,2893,1,0,0,0,2893,303,1,0,0,0,2894,2892,1,0,0,0,2895,
		2897,3,286,143,0,2896,2898,7,3,0,0,2897,2896,1,0,0,0,2897,2898,1,0,0,0,
		2898,2906,1,0,0,0,2899,2900,5,13,0,0,2900,2902,3,286,143,0,2901,2903,7,
		3,0,0,2902,2901,1,0,0,0,2902,2903,1,0,0,0,2903,2905,1,0,0,0,2904,2899,
		1,0,0,0,2905,2908,1,0,0,0,2906,2904,1,0,0,0,2906,2907,1,0,0,0,2907,305,
		1,0,0,0,2908,2906,1,0,0,0,2909,2927,3,318,159,0,2910,2927,3,332,166,0,
		2911,2927,3,308,154,0,2912,2927,3,310,155,0,2913,2927,3,312,156,0,2914,
		2927,3,314,157,0,2915,2927,3,320,160,0,2916,2927,3,322,161,0,2917,2927,
		3,324,162,0,2918,2927,3,326,163,0,2919,2927,3,328,164,0,2920,2927,3,330,
		165,0,2921,2927,5,219,0,0,2922,2927,5,220,0,0,2923,2927,5,84,0,0,2924,
		2927,5,110,0,0,2925,2927,5,54,0,0,2926,2909,1,0,0,0,2926,2910,1,0,0,0,
		2926,2911,1,0,0,0,2926,2912,1,0,0,0,2926,2913,1,0,0,0,2926,2914,1,0,0,
		0,2926,2915,1,0,0,0,2926,2916,1,0,0,0,2926,2917,1,0,0,0,2926,2918,1,0,
		0,0,2926,2919,1,0,0,0,2926,2920,1,0,0,0,2926,2921,1,0,0,0,2926,2922,1,
		0,0,0,2926,2923,1,0,0,0,2926,2924,1,0,0,0,2926,2925,1,0,0,0,2927,307,1,
		0,0,0,2928,2929,5,123,0,0,2929,2930,3,318,159,0,2930,309,1,0,0,0,2931,
		2932,5,120,0,0,2932,2933,3,318,159,0,2933,311,1,0,0,0,2934,2939,5,27,0,
		0,2935,2936,5,18,0,0,2936,2937,3,316,158,0,2937,2938,5,19,0,0,2938,2940,
		1,0,0,0,2939,2935,1,0,0,0,2939,2940,1,0,0,0,2940,2942,1,0,0,0,2941,2934,
		1,0,0,0,2941,2942,1,0,0,0,2942,2943,1,0,0,0,2943,2945,5,16,0,0,2944,2946,
		3,288,144,0,2945,2944,1,0,0,0,2945,2946,1,0,0,0,2946,2947,1,0,0,0,2947,
		2948,5,17,0,0,2948,313,1,0,0,0,2949,2961,5,105,0,0,2950,2951,5,18,0,0,
		2951,2956,3,316,158,0,2952,2953,5,13,0,0,2953,2955,3,316,158,0,2954,2952,
		1,0,0,0,2955,2958,1,0,0,0,2956,2954,1,0,0,0,2956,2957,1,0,0,0,2957,2959,
		1,0,0,0,2958,2956,1,0,0,0,2959,2960,5,19,0,0,2960,2962,1,0,0,0,2961,2950,
		1,0,0,0,2961,2962,1,0,0,0,2962,2964,1,0,0,0,2963,2949,1,0,0,0,2963,2964,
		1,0,0,0,2964,2965,1,0,0,0,2965,2966,5,14,0,0,2966,2967,3,288,144,0,2967,
		2968,5,15,0,0,2968,315,1,0,0,0,2969,2974,5,27,0,0,2970,2971,5,18,0,0,2971,
		2972,3,316,158,0,2972,2973,5,19,0,0,2973,2975,1,0,0,0,2974,2970,1,0,0,
		0,2974,2975,1,0,0,0,2975,2995,1,0,0,0,2976,2988,5,105,0,0,2977,2978,5,
		18,0,0,2978,2983,3,316,158,0,2979,2980,5,13,0,0,2980,2982,3,316,158,0,
		2981,2979,1,0,0,0,2982,2985,1,0,0,0,2983,2981,1,0,0,0,2983,2984,1,0,0,
		0,2984,2986,1,0,0,0,2985,2983,1,0,0,0,2986,2987,5,19,0,0,2987,2989,1,0,
		0,0,2988,2977,1,0,0,0,2988,2989,1,0,0,0,2989,2995,1,0,0,0,2990,2991,3,
		334,167,0,2991,2992,3,316,158,0,2992,2995,1,0,0,0,2993,2995,3,334,167,
		0,2994,2969,1,0,0,0,2994,2976,1,0,0,0,2994,2990,1,0,0,0,2994,2993,1,0,
		0,0,2995,3000,1,0,0,0,2996,2997,5,14,0,0,2997,2998,3,288,144,0,2998,2999,
		5,15,0,0,2999,3001,1,0,0,0,3000,2996,1,0,0,0,3000,3001,1,0,0,0,3001,3004,
		1,0,0,0,3002,3003,5,36,0,0,3003,3005,3,318,159,0,3004,3002,1,0,0,0,3004,
		3005,1,0,0,0,3005,3008,1,0,0,0,3006,3007,5,83,0,0,3007,3009,5,84,0,0,3008,
		3006,1,0,0,0,3008,3009,1,0,0,0,3009,3015,1,0,0,0,3010,3011,5,141,0,0,3011,
		3012,5,14,0,0,3012,3013,3,276,138,0,3013,3014,5,15,0,0,3014,3016,1,0,0,
		0,3015,3010,1,0,0,0,3015,3016,1,0,0,0,3016,317,1,0,0,0,3017,3018,7,14,
		0,0,3018,319,1,0,0,0,3019,3020,5,121,0,0,3020,3021,3,318,159,0,3021,321,
		1,0,0,0,3022,3023,5,122,0,0,3023,3024,3,318,159,0,3024,323,1,0,0,0,3025,
		3026,5,124,0,0,3026,3027,3,318,159,0,3027,325,1,0,0,0,3028,3029,5,96,0,
		0,3029,3030,5,18,0,0,3030,3031,7,15,0,0,3031,3032,5,19,0,0,3032,3033,3,
		318,159,0,3033,327,1,0,0,0,3034,3043,5,70,0,0,3035,3036,3,286,143,0,3036,
		3037,3,364,182,0,3037,3044,1,0,0,0,3038,3039,3,318,159,0,3039,3040,3,364,
		182,0,3040,3041,5,108,0,0,3041,3042,3,364,182,0,3042,3044,1,0,0,0,3043,
		3035,1,0,0,0,3043,3038,1,0,0,0,3044,329,1,0,0,0,3045,3046,5,135,0,0,3046,
		3047,3,318,159,0,3047,331,1,0,0,0,3048,3049,7,16,0,0,3049,333,1,0,0,0,
		3050,3051,7,17,0,0,3051,335,1,0,0,0,3052,3054,5,28,0,0,3053,3052,1,0,0,
		0,3053,3054,1,0,0,0,3054,3055,1,0,0,0,3055,3056,3,334,167,0,3056,337,1,
		0,0,0,3057,3058,5,27,0,0,3058,3059,5,14,0,0,3059,3060,3,286,143,0,3060,
		3061,5,15,0,0,3061,3118,1,0,0,0,3062,3063,5,153,0,0,3063,3065,5,14,0,0,
		3064,3066,5,45,0,0,3065,3064,1,0,0,0,3065,3066,1,0,0,0,3066,3067,1,0,0,
		0,3067,3068,3,286,143,0,3068,3071,5,15,0,0,3069,3070,5,91,0,0,3070,3072,
		3,348,174,0,3071,3069,1,0,0,0,3071,3072,1,0,0,0,3072,3118,1,0,0,0,3073,
		3074,5,153,0,0,3074,3075,5,14,0,0,3075,3081,3,286,143,0,3076,3077,5,13,
		0,0,3077,3078,3,334,167,0,3078,3079,5,4,0,0,3079,3080,3,286,143,0,3080,
		3082,1,0,0,0,3081,3076,1,0,0,0,3081,3082,1,0,0,0,3082,3083,1,0,0,0,3083,
		3084,5,15,0,0,3084,3118,1,0,0,0,3085,3086,5,35,0,0,3086,3087,5,14,0,0,
		3087,3088,3,286,143,0,3088,3089,5,28,0,0,3089,3091,3,334,167,0,3090,3092,
		3,350,175,0,3091,3090,1,0,0,0,3091,3092,1,0,0,0,3092,3093,1,0,0,0,3093,
		3094,5,15,0,0,3094,3118,1,0,0,0,3095,3096,5,36,0,0,3096,3097,5,14,0,0,
		3097,3098,3,286,143,0,3098,3099,5,13,0,0,3099,3100,3,286,143,0,3100,3101,
		5,15,0,0,3101,3118,1,0,0,0,3102,3103,5,53,0,0,3103,3104,5,14,0,0,3104,
		3105,3,334,167,0,3105,3106,5,58,0,0,3106,3107,3,286,143,0,3107,3108,5,
		15,0,0,3108,3118,1,0,0,0,3109,3118,3,340,170,0,3110,3111,3,334,167,0,3111,
		3113,5,14,0,0,3112,3114,3,288,144,0,3113,3112,1,0,0,0,3113,3114,1,0,0,
		0,3114,3115,1,0,0,0,3115,3116,5,15,0,0,3116,3118,1,0,0,0,3117,3057,1,0,
		0,0,3117,3062,1,0,0,0,3117,3073,1,0,0,0,3117,3085,1,0,0,0,3117,3095,1,
		0,0,0,3117,3102,1,0,0,0,3117,3109,1,0,0,0,3117,3110,1,0,0,0,3118,339,1,
		0,0,0,3119,3120,5,166,0,0,3120,3122,5,14,0,0,3121,3123,5,45,0,0,3122,3121,
		1,0,0,0,3122,3123,1,0,0,0,3123,3124,1,0,0,0,3124,3127,3,286,143,0,3125,
		3126,7,18,0,0,3126,3128,5,85,0,0,3127,3125,1,0,0,0,3127,3128,1,0,0,0,3128,
		3130,1,0,0,0,3129,3131,3,342,171,0,3130,3129,1,0,0,0,3130,3131,1,0,0,0,
		3131,3134,1,0,0,0,3132,3133,5,77,0,0,3133,3135,3,286,143,0,3134,3132,1,
		0,0,0,3134,3135,1,0,0,0,3135,3136,1,0,0,0,3136,3139,5,15,0,0,3137,3138,
		5,91,0,0,3138,3140,3,348,174,0,3139,3137,1,0,0,0,3139,3140,1,0,0,0,3140,
		341,1,0,0,0,3141,3146,3,344,172,0,3142,3143,5,13,0,0,3143,3145,3,344,172,
		0,3144,3142,1,0,0,0,3145,3148,1,0,0,0,3146,3144,1,0,0,0,3146,3147,1,0,
		0,0,3147,343,1,0,0,0,3148,3146,1,0,0,0,3149,3150,5,89,0,0,3150,3151,5,
		33,0,0,3151,3153,3,356,178,0,3152,3154,7,3,0,0,3153,3152,1,0,0,0,3153,
		3154,1,0,0,0,3154,345,1,0,0,0,3155,3156,3,334,167,0,3156,3159,5,14,0,0,
		3157,3160,3,288,144,0,3158,3160,5,8,0,0,3159,3157,1,0,0,0,3159,3158,1,
		0,0,0,3159,3160,1,0,0,0,3160,3161,1,0,0,0,3161,3162,5,15,0,0,3162,3163,
		5,91,0,0,3163,3164,3,348,174,0,3164,347,1,0,0,0,3165,3171,3,334,167,0,
		3166,3167,5,14,0,0,3167,3168,3,228,114,0,3168,3169,5,15,0,0,3169,3171,
		1,0,0,0,3170,3165,1,0,0,0,3170,3166,1,0,0,0,3171,349,1,0,0,0,3172,3173,
		5,151,0,0,3173,3174,3,286,143,0,3174,351,1,0,0,0,3175,3176,5,103,0,0,3176,
		3177,3,356,178,0,3177,3178,5,22,0,0,3178,3179,3,286,143,0,3179,3190,1,
		0,0,0,3180,3181,5,103,0,0,3181,3182,5,14,0,0,3182,3183,3,354,177,0,3183,
		3184,5,15,0,0,3184,3185,5,22,0,0,3185,3186,5,14,0,0,3186,3187,3,288,144,
		0,3187,3188,5,15,0,0,3188,3190,1,0,0,0,3189,3175,1,0,0,0,3189,3180,1,0,
		0,0,3190,353,1,0,0,0,3191,3196,3,356,178,0,3192,3193,5,13,0,0,3193,3195,
		3,356,178,0,3194,3192,1,0,0,0,3195,3198,1,0,0,0,3196,3194,1,0,0,0,3196,
		3197,1,0,0,0,3197,355,1,0,0,0,3198,3196,1,0,0,0,3199,3207,3,334,167,0,
		3200,3203,5,12,0,0,3201,3204,3,334,167,0,3202,3204,3,362,181,0,3203,3201,
		1,0,0,0,3203,3202,1,0,0,0,3204,3206,1,0,0,0,3205,3200,1,0,0,0,3206,3209,
		1,0,0,0,3207,3205,1,0,0,0,3207,3208,1,0,0,0,3208,357,1,0,0,0,3209,3207,
		1,0,0,0,3210,3215,3,360,180,0,3211,3212,5,13,0,0,3212,3214,3,360,180,0,
		3213,3211,1,0,0,0,3214,3217,1,0,0,0,3215,3213,1,0,0,0,3215,3216,1,0,0,
		0,3216,359,1,0,0,0,3217,3215,1,0,0,0,3218,3219,3,286,143,0,3219,3220,5,
		28,0,0,3220,3221,3,334,167,0,3221,361,1,0,0,0,3222,3223,7,19,0,0,3223,
		363,1,0,0,0,3224,3225,7,20,0,0,3225,365,1,0,0,0,375,369,376,381,387,395,
		402,477,484,487,493,500,505,510,515,520,527,531,536,542,549,554,560,565,
		570,575,582,586,591,597,605,610,615,620,627,631,639,649,656,663,673,678,
		683,688,693,700,704,709,715,722,729,737,744,750,755,762,776,789,795,802,
		807,814,821,827,829,838,840,852,861,864,870,875,880,885,890,901,908,917,
		920,926,931,936,941,949,958,966,969,975,980,985,990,1000,1012,1015,1021,
		1026,1031,1036,1050,1055,1058,1065,1070,1075,1080,1085,1096,1103,1110,
		1115,1118,1125,1130,1135,1140,1152,1160,1167,1172,1177,1182,1191,1198,
		1208,1215,1222,1231,1237,1242,1247,1252,1260,1266,1273,1278,1284,1294,
		1298,1306,1312,1317,1322,1327,1333,1343,1349,1354,1362,1373,1411,1426,
		1429,1437,1444,1449,1456,1461,1468,1481,1492,1497,1509,1514,1527,1532,
		1543,1549,1560,1577,1586,1591,1599,1604,1612,1620,1623,1647,1654,1659,
		1675,1686,1694,1701,1708,1723,1730,1739,1744,1751,1760,1765,1773,1812,
		1817,1823,1828,1833,1837,1843,1852,1861,1869,1878,1886,1891,1896,1905,
		1910,1915,1923,1928,1933,1943,1956,1962,1970,1978,1987,1998,2009,2018,
		2025,2032,2038,2043,2046,2079,2084,2090,2097,2102,2106,2111,2115,2126,
		2138,2146,2153,2158,2162,2165,2171,2173,2178,2180,2188,2197,2200,2208,
		2210,2212,2234,2237,2241,2246,2250,2255,2259,2263,2267,2276,2291,2298,
		2323,2333,2336,2341,2346,2349,2354,2363,2365,2389,2401,2410,2417,2430,
		2436,2439,2444,2451,2463,2471,2477,2479,2490,2492,2500,2504,2506,2511,
		2513,2518,2521,2526,2531,2536,2539,2543,2557,2562,2566,2578,2585,2590,
		2615,2620,2624,2630,2635,2639,2656,2668,2674,2676,2681,2689,2696,2728,
		2741,2761,2764,2770,2783,2799,2804,2807,2809,2817,2829,2833,2845,2849,
		2883,2888,2892,2897,2902,2906,2926,2939,2941,2945,2956,2961,2963,2974,
		2983,2988,2994,3000,3004,3008,3015,3043,3053,3065,3071,3081,3091,3113,
		3117,3122,3127,3130,3134,3139,3146,3153,3159,3170,3189,3196,3203,3207,
		3215
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BigO.BigQuery.Parser
