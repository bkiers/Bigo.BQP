//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./BigQueryParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BigO.BigQuery.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BigQueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BNOT=1, CONCAT=2, SCOL=3, ARROW=4, BAND=5, BXOR=6, BOR=7, STAR=8, DIV=9, 
		PLUS=10, SUB=11, DOT=12, COMMA=13, OPAR=14, CPAR=15, OBR=16, CBR=17, LT=18, 
		GT=19, LTE=20, GTE=21, EQ=22, NEQ=23, ALL=24, AND=25, ANY=26, ARRAY=27, 
		AS=28, ASC=29, ASSERT_ROWS_MODIFIED=30, AT=31, BETWEEN=32, BY=33, CASE=34, 
		CAST=35, COLLATE=36, CONTAINS=37, CREATE=38, CROSS=39, CUBE=40, CURRENT=41, 
		DEFAULT=42, DEFINE=43, DESC=44, DISTINCT=45, ELSE=46, END=47, ENUM=48, 
		ESCAPE=49, EXCEPT=50, EXCLUDE=51, EXISTS=52, EXTRACT=53, FALSE=54, FETCH=55, 
		FOLLOWING=56, FOR=57, FROM=58, FULL=59, GROUP=60, GROUPING=61, GROUPS=62, 
		HASH=63, HAVING=64, IF=65, IGNORE=66, IN=67, INNER=68, INTERSECT=69, INTERVAL=70, 
		INTO=71, IS=72, JOIN=73, LATERAL=74, LEFT=75, LIKE=76, LIMIT=77, LOOKUP=78, 
		MERGE=79, NATURAL=80, NEW=81, NO=82, NOT=83, NULL=84, NULLS=85, OF=86, 
		ON=87, OR=88, ORDER=89, OUTER=90, OVER=91, PARTITION=92, PRECEDING=93, 
		PROTO=94, QUALIFY=95, RANGE=96, RECURSIVE=97, RESPECT=98, RIGHT=99, ROLLUP=100, 
		ROWS=101, SELECT=102, SET=103, SOME=104, STRUCT=105, TABLESAMPLE=106, 
		THEN=107, TO=108, TREAT=109, TRUE=110, UNBOUNDED=111, UNION=112, UNNEST=113, 
		USING=114, WHEN=115, WHERE=116, WINDOW=117, WITH=118, WITHIN=119, BIGNUMERIC=120, 
		DATE=121, DATETIME=122, NUMERIC=123, TIMESTAMP=124, YEAR=125, QUARTER=126, 
		MONTH=127, WEEK=128, DAY=129, HOUR=130, MINUTE=131, SECOND=132, MILLISECOND=133, 
		MICROSECOND=134, JSON=135, OFFSET=136, NAME=137, STRICT=138, CORRESPONDING=139, 
		DIFFERENTIAL_PRIVACY=140, OPTIONS=141, VALUE=142, REPLACE=143, SYSTEM=144, 
		PERCENT=145, PIVOT=146, UNPIVOT=147, SYSTEM_TIME=148, ROW=149, INCLUDE=150, 
		FORMAT=151, SETS=152, AVG=153, SCHEMA=154, TEMP=155, TEMPORARY=156, TABLE=157, 
		CONSTRAINT=158, ENFORCED=159, PRIMARY=160, KEY=161, FOREIGN=162, REFERENCES=163, 
		CLUSTER=164, CONNECTION=165, ARRAY_AGG=166, COPY=167, SNAPSHOT=168, CLONE=169, 
		VIEW=170, DROP=171, SEARCH=172, INDEX=173, VECTOR=174, ASSIGNMENT=175, 
		RESERVATION=176, CAPACITY=177, ACCESS=178, POLICY=179, POLICIES=180, PROCEDURE=181, 
		FUNCTION=182, EXTERNAL=183, MATERIALIZED=184, CASCADE=185, RESTRICT=186, 
		UNDROP=187, REPLICA=188, COLUMNS=189, RETURNS=190, DETERMINISTIC=191, 
		LANGUAGE=192, REMOTE=193, AGGREGATE=194, TYPE=195, OUT=196, INOUT=197, 
		BEGIN=198, SECURITY=199, INVOKER=200, COALESCE=201, NULLIF=202, IFNULL=203, 
		GRANT=204, FILTER=205, COLUMN=206, STORING=207, ALTER=208, ADD=209, RENAME=210, 
		DATA=211, ORGANIZATION=212, PROJECT=213, BI_CAPACITY=214, ANY_VALUE=215, 
		MAX=216, MIN=217, ARRAY_CONCAT_AGG=218, BIT_AND=219, BIT_OR=220, BIT_XOR=221, 
		COUNT=222, COUNTIF=223, LOGICAL_AND=224, LOGICAL_OR=225, MAX_BY=226, MIN_BY=227, 
		STRING_AGG=228, SUM=229, TIMEZONE=230, TIME=231, ASSERT=232, NAN=233, 
		INF=234, UNQUOTED_IDENTIFIER=235, QUOTED_IDENTIFIER=236, STRING_LITERAL=237, 
		RAW_STRING_LITERAL=238, BYTES_LITERAL=239, RAW_BYTES_LITERAL=240, INTEGER_LITERAL=241, 
		FLOATING_POINT_LITERAL=242, SPACES=243, COMMENT=244, UNEXPECTED=245;
	public const int
		RULE_statements = 0, RULE_single_statement = 1, RULE_statement = 2, RULE_ddl_statement = 3, 
		RULE_dml_statement = 4, RULE_dcl_statement = 5, RULE_procedural_statement = 6, 
		RULE_export_statement = 7, RULE_load_statement = 8, RULE_assert_statement = 9, 
		RULE_declare = 10, RULE_query_statement = 11, RULE_create_table = 12, 
		RULE_create_table_like = 13, RULE_create_table_copy = 14, RULE_create_snapshot_table = 15, 
		RULE_create_table_clone = 16, RULE_create_view = 17, RULE_create_materialized_view = 18, 
		RULE_create_materialized_view_as_replica = 19, RULE_create_external_schema = 20, 
		RULE_create_external_table = 21, RULE_column_name_schemas = 22, RULE_column_name_schema = 23, 
		RULE_create_function = 24, RULE_named_parameters = 25, RULE_named_parameter = 26, 
		RULE_create_js_function = 27, RULE_create_py_function = 28, RULE_create_remote_function = 29, 
		RULE_create_aggregate_function = 30, RULE_function_parameters = 31, RULE_function_parameter = 32, 
		RULE_create_aggregate_js_function = 33, RULE_create_table_function = 34, 
		RULE_table_function_parameters = 35, RULE_table_function_parameter = 36, 
		RULE_column_declarations = 37, RULE_column_declaration = 38, RULE_create_procedure = 39, 
		RULE_procedure_arguments = 40, RULE_procedure_argument = 41, RULE_create_stored_procedure = 42, 
		RULE_create_row_access_policy = 43, RULE_create_capacity = 44, RULE_create_reservation = 45, 
		RULE_create_assignment = 46, RULE_create_search_index = 47, RULE_columns = 48, 
		RULE_column = 49, RULE_create_vector_index = 50, RULE_alter_schema_set_default_collate = 51, 
		RULE_alter_schema_set_options = 52, RULE_alter_schema_add_replica = 53, 
		RULE_alter_schema_drop_replica = 54, RULE_alter_table_set_options = 55, 
		RULE_alter_table_add_column = 56, RULE_alter_table_add_foreign_key = 57, 
		RULE_add_foreign_key = 58, RULE_alter_table_add_primary_key = 59, RULE_alter_table_rename = 60, 
		RULE_alter_table_rename_column = 61, RULE_rename_column = 62, RULE_column_to_column = 63, 
		RULE_alter_table_drop_column = 64, RULE_drop_column = 65, RULE_alter_table_drop_constraint = 66, 
		RULE_alter_table_drop_primary_key = 67, RULE_alter_table_set_default_collate = 68, 
		RULE_alter_table_column_set_options = 69, RULE_alter_table_column_drop_not_null = 70, 
		RULE_alter_table_column_set_data_type = 71, RULE_alter_table_column_set_default = 72, 
		RULE_alter_table_column_drop_default = 73, RULE_alter_view = 74, RULE_alter_materialized_view = 75, 
		RULE_alter_organization = 76, RULE_alter_project = 77, RULE_alter_bi_capacity = 78, 
		RULE_alter_capacity = 79, RULE_alter_reservation = 80, RULE_undrop_schema = 81, 
		RULE_drop_schema = 82, RULE_drop_table = 83, RULE_drop_snapshot_table = 84, 
		RULE_drop_external_table = 85, RULE_drop_view = 86, RULE_drop_materialized_view = 87, 
		RULE_drop_function = 88, RULE_drop_table_function = 89, RULE_drop_procedure = 90, 
		RULE_drop_row_access_policy = 91, RULE_drop_capacity = 92, RULE_drop_reservation = 93, 
		RULE_drop_assignment = 94, RULE_drop_search_index = 95, RULE_drop_vector_index = 96, 
		RULE_view_column_name_list = 97, RULE_view_column = 98, RULE_column_constraint_definitions = 99, 
		RULE_column_constraint_definition = 100, RULE_column_definition = 101, 
		RULE_primary_key = 102, RULE_foreign_key = 103, RULE_foreign_reference = 104, 
		RULE_create_schema = 105, RULE_query_expression = 106, RULE_query_expr_tail = 107, 
		RULE_set_operation_tail = 108, RULE_non_recursive_cte = 109, RULE_recursive_cte = 110, 
		RULE_recursive_union_operation = 111, RULE_select = 112, RULE_group_by_specification = 113, 
		RULE_grouping_sets_specification = 114, RULE_grouping_list = 115, RULE_grouping_list_item = 116, 
		RULE_cube_specification = 117, RULE_groupable_item_set = 118, RULE_rollup_specification = 119, 
		RULE_window_clause = 120, RULE_named_window_expression = 121, RULE_window_specification = 122, 
		RULE_window_frame_clause = 123, RULE_frame_start = 124, RULE_frame_between = 125, 
		RULE_frame_end_a = 126, RULE_frame_end_b = 127, RULE_frame_end_c = 128, 
		RULE_differential_privacy_clause = 129, RULE_from_clauses = 130, RULE_from_clause = 131, 
		RULE_from_item = 132, RULE_unnest_operator = 133, RULE_cross_join_operator = 134, 
		RULE_condition_join_operator = 135, RULE_join_condition = 136, RULE_on_clause = 137, 
		RULE_using_clause = 138, RULE_pivot_operator = 139, RULE_unpivot_operator = 140, 
		RULE_single_column_unpivot = 141, RULE_multi_column_unpivot = 142, RULE_columns_to_unpivot = 143, 
		RULE_column_sets_to_unpivot = 144, RULE_tablesample_operator = 145, RULE_option_parameters = 146, 
		RULE_option_parameter = 147, RULE_select_list = 148, RULE_select_list_item = 149, 
		RULE_select_all = 150, RULE_expression = 151, RULE_expressions = 152, 
		RULE_case_expression = 153, RULE_case_ = 154, RULE_coalesce = 155, RULE_if_ = 156, 
		RULE_ifnull = 157, RULE_nullif = 158, RULE_expressions_as_alias = 159, 
		RULE_expressions_asc_desc = 160, RULE_literal = 161, RULE_numeric_literal = 162, 
		RULE_big_numeric_literal = 163, RULE_array_literal = 164, RULE_struct_literal = 165, 
		RULE_data_type = 166, RULE_any_identifier = 167, RULE_string_literal = 168, 
		RULE_date_literal = 169, RULE_time_literal = 170, RULE_datetime_literal = 171, 
		RULE_timestamp_literal = 172, RULE_range_literal = 173, RULE_interval_literal = 174, 
		RULE_json_literal = 175, RULE_byte_literal = 176, RULE_identifier = 177, 
		RULE_as_alias = 178, RULE_function_call = 179, RULE_function_name = 180, 
		RULE_function_arguments = 181, RULE_function_expressions = 182, RULE_function_expression = 183, 
		RULE_optional_clauses = 184, RULE_limit_clause = 185, RULE_order_by_keys = 186, 
		RULE_order_by_key = 187, RULE_window_function = 188, RULE_over_clause = 189, 
		RULE_format_clause = 190, RULE_set = 191, RULE_path_expressions = 192, 
		RULE_path_expression = 193, RULE_as_column_names = 194, RULE_as_column_name = 195, 
		RULE_reserved = 196, RULE_datetime_part = 197;
	public static readonly string[] ruleNames = {
		"statements", "single_statement", "statement", "ddl_statement", "dml_statement", 
		"dcl_statement", "procedural_statement", "export_statement", "load_statement", 
		"assert_statement", "declare", "query_statement", "create_table", "create_table_like", 
		"create_table_copy", "create_snapshot_table", "create_table_clone", "create_view", 
		"create_materialized_view", "create_materialized_view_as_replica", "create_external_schema", 
		"create_external_table", "column_name_schemas", "column_name_schema", 
		"create_function", "named_parameters", "named_parameter", "create_js_function", 
		"create_py_function", "create_remote_function", "create_aggregate_function", 
		"function_parameters", "function_parameter", "create_aggregate_js_function", 
		"create_table_function", "table_function_parameters", "table_function_parameter", 
		"column_declarations", "column_declaration", "create_procedure", "procedure_arguments", 
		"procedure_argument", "create_stored_procedure", "create_row_access_policy", 
		"create_capacity", "create_reservation", "create_assignment", "create_search_index", 
		"columns", "column", "create_vector_index", "alter_schema_set_default_collate", 
		"alter_schema_set_options", "alter_schema_add_replica", "alter_schema_drop_replica", 
		"alter_table_set_options", "alter_table_add_column", "alter_table_add_foreign_key", 
		"add_foreign_key", "alter_table_add_primary_key", "alter_table_rename", 
		"alter_table_rename_column", "rename_column", "column_to_column", "alter_table_drop_column", 
		"drop_column", "alter_table_drop_constraint", "alter_table_drop_primary_key", 
		"alter_table_set_default_collate", "alter_table_column_set_options", "alter_table_column_drop_not_null", 
		"alter_table_column_set_data_type", "alter_table_column_set_default", 
		"alter_table_column_drop_default", "alter_view", "alter_materialized_view", 
		"alter_organization", "alter_project", "alter_bi_capacity", "alter_capacity", 
		"alter_reservation", "undrop_schema", "drop_schema", "drop_table", "drop_snapshot_table", 
		"drop_external_table", "drop_view", "drop_materialized_view", "drop_function", 
		"drop_table_function", "drop_procedure", "drop_row_access_policy", "drop_capacity", 
		"drop_reservation", "drop_assignment", "drop_search_index", "drop_vector_index", 
		"view_column_name_list", "view_column", "column_constraint_definitions", 
		"column_constraint_definition", "column_definition", "primary_key", "foreign_key", 
		"foreign_reference", "create_schema", "query_expression", "query_expr_tail", 
		"set_operation_tail", "non_recursive_cte", "recursive_cte", "recursive_union_operation", 
		"select", "group_by_specification", "grouping_sets_specification", "grouping_list", 
		"grouping_list_item", "cube_specification", "groupable_item_set", "rollup_specification", 
		"window_clause", "named_window_expression", "window_specification", "window_frame_clause", 
		"frame_start", "frame_between", "frame_end_a", "frame_end_b", "frame_end_c", 
		"differential_privacy_clause", "from_clauses", "from_clause", "from_item", 
		"unnest_operator", "cross_join_operator", "condition_join_operator", "join_condition", 
		"on_clause", "using_clause", "pivot_operator", "unpivot_operator", "single_column_unpivot", 
		"multi_column_unpivot", "columns_to_unpivot", "column_sets_to_unpivot", 
		"tablesample_operator", "option_parameters", "option_parameter", "select_list", 
		"select_list_item", "select_all", "expression", "expressions", "case_expression", 
		"case_", "coalesce", "if_", "ifnull", "nullif", "expressions_as_alias", 
		"expressions_asc_desc", "literal", "numeric_literal", "big_numeric_literal", 
		"array_literal", "struct_literal", "data_type", "any_identifier", "string_literal", 
		"date_literal", "time_literal", "datetime_literal", "timestamp_literal", 
		"range_literal", "interval_literal", "json_literal", "byte_literal", "identifier", 
		"as_alias", "function_call", "function_name", "function_arguments", "function_expressions", 
		"function_expression", "optional_clauses", "limit_clause", "order_by_keys", 
		"order_by_key", "window_function", "over_clause", "format_clause", "set", 
		"path_expressions", "path_expression", "as_column_names", "as_column_name", 
		"reserved", "datetime_part"
	};

	private static readonly string[] _LiteralNames = {
		null, "'~'", "'||'", "';'", "'=>'", "'&'", "'^'", "'|'", "'*'", "'/'", 
		"'+'", "'-'", "'.'", "','", "'('", "')'", "'['", "']'", "'<'", "'>'", 
		"'<='", "'>='", "'='", null, "'ALL'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", 
		"'ASC'", "'ASSERT_ROWS_MODIFIED'", "'AT'", "'BETWEEN'", "'BY'", "'CASE'", 
		"'CAST'", "'COLLATE'", "'CONTAINS'", "'CREATE'", "'CROSS'", "'CUBE'", 
		"'CURRENT'", "'DEFAULT'", "'DEFINE'", "'DESC'", "'DISTINCT'", "'ELSE'", 
		"'END'", "'ENUM'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDE'", "'EXISTS'", "'EXTRACT'", 
		"'FALSE'", "'FETCH'", "'FOLLOWING'", "'FOR'", "'FROM'", "'FULL'", "'GROUP'", 
		"'GROUPING'", "'GROUPS'", "'HASH'", "'HAVING'", "'IF'", "'IGNORE'", "'IN'", 
		"'INNER'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'JOIN'", "'LATERAL'", 
		"'LEFT'", "'LIKE'", "'LIMIT'", "'LOOKUP'", "'MERGE'", "'NATURAL'", "'NEW'", 
		"'NO'", "'NOT'", "'NULL'", "'NULLS'", "'OF'", "'ON'", "'OR'", "'ORDER'", 
		"'OUTER'", "'OVER'", "'PARTITION'", "'PRECEDING'", "'PROTO'", "'QUALIFY'", 
		"'RANGE'", "'RECURSIVE'", "'RESPECT'", "'RIGHT'", "'ROLLUP'", "'ROWS'", 
		"'SELECT'", "'SET'", "'SOME'", "'STRUCT'", "'TABLESAMPLE'", "'THEN'", 
		"'TO'", "'TREAT'", "'TRUE'", "'UNBOUNDED'", "'UNION'", "'UNNEST'", "'USING'", 
		"'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'BIGNUMERIC'", 
		"'DATE'", "'DATETIME'", "'NUMERIC'", "'TIMESTAMP'", "'YEAR'", "'QUARTER'", 
		"'MONTH'", "'WEEK'", "'DAY'", "'HOUR'", "'MINUTE'", "'SECOND'", "'MILLISECOND'", 
		"'MICROSECOND'", "'JSON'", "'OFFSET'", "'NAME'", "'STRICT'", "'CORRESPONDING'", 
		"'DIFFERENTIAL_PRIVACY'", "'OPTIONS'", "'VALUE'", "'REPLACE'", "'SYSTEM'", 
		"'PERCENT'", "'PIVOT'", "'UNPIVOT'", "'SYSTEM_TIME'", "'ROW'", "'INCLUDE'", 
		"'FORMAT'", "'SETS'", "'AVG'", "'SCHEMA'", "'TEMP'", "'TEMPORARY'", "'TABLE'", 
		"'CONSTRAINT'", "'ENFORCED'", "'PRIMARY'", "'KEY'", "'FOREIGN'", "'REFERENCES'", 
		"'CLUSTER'", "'CONNECTION'", "'ARRAY_AGG'", "'COPY'", "'SNAPSHOT'", "'CLONE'", 
		"'VIEW'", "'DROP'", "'SEARCH'", "'INDEX'", "'VECTOR'", "'ASSIGNMENT'", 
		"'RESERVATION'", "'CAPACITY'", "'ACCESS'", "'POLICY'", "'POLICIES'", "'PROCEDURE'", 
		"'FUNCTION'", "'EXTERNAL'", "'MATERIALIZED'", "'CASCADE'", "'RESTRICT'", 
		"'UNDROP'", "'REPLICA'", "'COLUMNS'", "'RETURNS'", "'DETERMINISTIC'", 
		"'LANGUAGE'", "'REMOTE'", "'AGGREGATE'", "'TYPE'", "'OUT'", "'INOUT'", 
		"'BEGIN'", "'SECURITY'", "'INVOKER'", "'COALESCE'", "'NULLIF'", "'IFNULL'", 
		"'GRANT'", "'FILTER'", "'COLUMN'", "'STORING'", "'ALTER'", "'ADD'", "'RENAME'", 
		"'DATA'", "'ORGANIZATION'", "'PROJECT'", "'BI_CAPACITY'", "'ANY_VALUE'", 
		"'MAX'", "'MIN'", "'ARRAY_CONCAT_AGG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", 
		"'COUNT'", "'COUNTIF'", "'LOGICAL_AND'", "'LOGICAL_OR'", "'MAX_BY'", "'MIN_BY'", 
		"'STRING_AGG'", "'SUM'", "'TIMEZONE'", "'TIME'", "'ASSERT'", "'NAN'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BNOT", "CONCAT", "SCOL", "ARROW", "BAND", "BXOR", "BOR", "STAR", 
		"DIV", "PLUS", "SUB", "DOT", "COMMA", "OPAR", "CPAR", "OBR", "CBR", "LT", 
		"GT", "LTE", "GTE", "EQ", "NEQ", "ALL", "AND", "ANY", "ARRAY", "AS", "ASC", 
		"ASSERT_ROWS_MODIFIED", "AT", "BETWEEN", "BY", "CASE", "CAST", "COLLATE", 
		"CONTAINS", "CREATE", "CROSS", "CUBE", "CURRENT", "DEFAULT", "DEFINE", 
		"DESC", "DISTINCT", "ELSE", "END", "ENUM", "ESCAPE", "EXCEPT", "EXCLUDE", 
		"EXISTS", "EXTRACT", "FALSE", "FETCH", "FOLLOWING", "FOR", "FROM", "FULL", 
		"GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "IF", "IGNORE", "IN", 
		"INNER", "INTERSECT", "INTERVAL", "INTO", "IS", "JOIN", "LATERAL", "LEFT", 
		"LIKE", "LIMIT", "LOOKUP", "MERGE", "NATURAL", "NEW", "NO", "NOT", "NULL", 
		"NULLS", "OF", "ON", "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", 
		"PROTO", "QUALIFY", "RANGE", "RECURSIVE", "RESPECT", "RIGHT", "ROLLUP", 
		"ROWS", "SELECT", "SET", "SOME", "STRUCT", "TABLESAMPLE", "THEN", "TO", 
		"TREAT", "TRUE", "UNBOUNDED", "UNION", "UNNEST", "USING", "WHEN", "WHERE", 
		"WINDOW", "WITH", "WITHIN", "BIGNUMERIC", "DATE", "DATETIME", "NUMERIC", 
		"TIMESTAMP", "YEAR", "QUARTER", "MONTH", "WEEK", "DAY", "HOUR", "MINUTE", 
		"SECOND", "MILLISECOND", "MICROSECOND", "JSON", "OFFSET", "NAME", "STRICT", 
		"CORRESPONDING", "DIFFERENTIAL_PRIVACY", "OPTIONS", "VALUE", "REPLACE", 
		"SYSTEM", "PERCENT", "PIVOT", "UNPIVOT", "SYSTEM_TIME", "ROW", "INCLUDE", 
		"FORMAT", "SETS", "AVG", "SCHEMA", "TEMP", "TEMPORARY", "TABLE", "CONSTRAINT", 
		"ENFORCED", "PRIMARY", "KEY", "FOREIGN", "REFERENCES", "CLUSTER", "CONNECTION", 
		"ARRAY_AGG", "COPY", "SNAPSHOT", "CLONE", "VIEW", "DROP", "SEARCH", "INDEX", 
		"VECTOR", "ASSIGNMENT", "RESERVATION", "CAPACITY", "ACCESS", "POLICY", 
		"POLICIES", "PROCEDURE", "FUNCTION", "EXTERNAL", "MATERIALIZED", "CASCADE", 
		"RESTRICT", "UNDROP", "REPLICA", "COLUMNS", "RETURNS", "DETERMINISTIC", 
		"LANGUAGE", "REMOTE", "AGGREGATE", "TYPE", "OUT", "INOUT", "BEGIN", "SECURITY", 
		"INVOKER", "COALESCE", "NULLIF", "IFNULL", "GRANT", "FILTER", "COLUMN", 
		"STORING", "ALTER", "ADD", "RENAME", "DATA", "ORGANIZATION", "PROJECT", 
		"BI_CAPACITY", "ANY_VALUE", "MAX", "MIN", "ARRAY_CONCAT_AGG", "BIT_AND", 
		"BIT_OR", "BIT_XOR", "COUNT", "COUNTIF", "LOGICAL_AND", "LOGICAL_OR", 
		"MAX_BY", "MIN_BY", "STRING_AGG", "SUM", "TIMEZONE", "TIME", "ASSERT", 
		"NAN", "INF", "UNQUOTED_IDENTIFIER", "QUOTED_IDENTIFIER", "STRING_LITERAL", 
		"RAW_STRING_LITERAL", "BYTES_LITERAL", "RAW_BYTES_LITERAL", "INTEGER_LITERAL", 
		"FLOATING_POINT_LITERAL", "SPACES", "COMMENT", "UNEXPECTED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BigQueryParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BigQueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BigQueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BigQueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigQueryParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 0, RULE_statements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 396;
				Match(SCOL);
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 402;
			statement();
			State = 411;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 403;
						Match(SCOL);
						}
						}
						State = 406;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 408;
					statement();
					}
					} 
				}
				State = 413;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 414;
				Match(SCOL);
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 420;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigQueryParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public Single_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSingle_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_statementContext single_statement() {
		Single_statementContext _localctx = new Single_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_single_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 422;
				Match(SCOL);
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 428;
			statement();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 429;
				Match(SCOL);
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 435;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_statementContext ddl_statement() {
			return GetRuleContext<Ddl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dml_statementContext dml_statement() {
			return GetRuleContext<Dml_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dcl_statementContext dcl_statement() {
			return GetRuleContext<Dcl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_statementContext procedural_statement() {
			return GetRuleContext<Procedural_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_statementContext export_statement() {
			return GetRuleContext<Export_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Load_statementContext load_statement() {
			return GetRuleContext<Load_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assert_statementContext assert_statement() {
			return GetRuleContext<Assert_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437;
				query_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438;
				ddl_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 439;
				dml_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 440;
				dcl_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 441;
				procedural_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 442;
				export_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 443;
				load_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 444;
				assert_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_likeContext create_table_like() {
			return GetRuleContext<Create_table_likeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_copyContext create_table_copy() {
			return GetRuleContext<Create_table_copyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_snapshot_tableContext create_snapshot_table() {
			return GetRuleContext<Create_snapshot_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_cloneContext create_table_clone() {
			return GetRuleContext<Create_table_cloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_materialized_viewContext create_materialized_view() {
			return GetRuleContext<Create_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_materialized_view_as_replicaContext create_materialized_view_as_replica() {
			return GetRuleContext<Create_materialized_view_as_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_schemaContext create_external_schema() {
			return GetRuleContext<Create_external_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_tableContext create_external_table() {
			return GetRuleContext<Create_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_functionContext create_function() {
			return GetRuleContext<Create_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_js_functionContext create_js_function() {
			return GetRuleContext<Create_js_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_py_functionContext create_py_function() {
			return GetRuleContext<Create_py_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_remote_functionContext create_remote_function() {
			return GetRuleContext<Create_remote_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_aggregate_functionContext create_aggregate_function() {
			return GetRuleContext<Create_aggregate_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_aggregate_js_functionContext create_aggregate_js_function() {
			return GetRuleContext<Create_aggregate_js_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_functionContext create_table_function() {
			return GetRuleContext<Create_table_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_procedureContext create_procedure() {
			return GetRuleContext<Create_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_stored_procedureContext create_stored_procedure() {
			return GetRuleContext<Create_stored_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_row_access_policyContext create_row_access_policy() {
			return GetRuleContext<Create_row_access_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_capacityContext create_capacity() {
			return GetRuleContext<Create_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_reservationContext create_reservation() {
			return GetRuleContext<Create_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_assignmentContext create_assignment() {
			return GetRuleContext<Create_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_search_indexContext create_search_index() {
			return GetRuleContext<Create_search_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_vector_indexContext create_vector_index() {
			return GetRuleContext<Create_vector_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_set_default_collateContext alter_schema_set_default_collate() {
			return GetRuleContext<Alter_schema_set_default_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_set_optionsContext alter_schema_set_options() {
			return GetRuleContext<Alter_schema_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_add_replicaContext alter_schema_add_replica() {
			return GetRuleContext<Alter_schema_add_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_drop_replicaContext alter_schema_drop_replica() {
			return GetRuleContext<Alter_schema_drop_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_optionsContext alter_table_set_options() {
			return GetRuleContext<Alter_table_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_foreign_keyContext alter_table_add_foreign_key() {
			return GetRuleContext<Alter_table_add_foreign_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_primary_keyContext alter_table_add_primary_key() {
			return GetRuleContext<Alter_table_add_primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_renameContext alter_table_rename() {
			return GetRuleContext<Alter_table_renameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_rename_columnContext alter_table_rename_column() {
			return GetRuleContext<Alter_table_rename_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_constraintContext alter_table_drop_constraint() {
			return GetRuleContext<Alter_table_drop_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_primary_keyContext alter_table_drop_primary_key() {
			return GetRuleContext<Alter_table_drop_primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_default_collateContext alter_table_set_default_collate() {
			return GetRuleContext<Alter_table_set_default_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_optionsContext alter_table_column_set_options() {
			return GetRuleContext<Alter_table_column_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_drop_not_nullContext alter_table_column_drop_not_null() {
			return GetRuleContext<Alter_table_column_drop_not_nullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_data_typeContext alter_table_column_set_data_type() {
			return GetRuleContext<Alter_table_column_set_data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_defaultContext alter_table_column_set_default() {
			return GetRuleContext<Alter_table_column_set_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_drop_defaultContext alter_table_column_drop_default() {
			return GetRuleContext<Alter_table_column_drop_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_viewContext alter_view() {
			return GetRuleContext<Alter_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_materialized_viewContext alter_materialized_view() {
			return GetRuleContext<Alter_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_organizationContext alter_organization() {
			return GetRuleContext<Alter_organizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_projectContext alter_project() {
			return GetRuleContext<Alter_projectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_bi_capacityContext alter_bi_capacity() {
			return GetRuleContext<Alter_bi_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_capacityContext alter_capacity() {
			return GetRuleContext<Alter_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_reservationContext alter_reservation() {
			return GetRuleContext<Alter_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Undrop_schemaContext undrop_schema() {
			return GetRuleContext<Undrop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_snapshot_tableContext drop_snapshot_table() {
			return GetRuleContext<Drop_snapshot_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_materialized_viewContext drop_materialized_view() {
			return GetRuleContext<Drop_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_functionContext drop_table_function() {
			return GetRuleContext<Drop_table_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_row_access_policyContext drop_row_access_policy() {
			return GetRuleContext<Drop_row_access_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_capacityContext drop_capacity() {
			return GetRuleContext<Drop_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_reservationContext drop_reservation() {
			return GetRuleContext<Drop_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_assignmentContext drop_assignment() {
			return GetRuleContext<Drop_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_search_indexContext drop_search_index() {
			return GetRuleContext<Drop_search_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_vector_indexContext drop_vector_index() {
			return GetRuleContext<Drop_vector_indexContext>(0);
		}
		public Ddl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDdl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDdl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_statementContext ddl_statement() {
		Ddl_statementContext _localctx = new Ddl_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_ddl_statement);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447;
				create_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				create_table();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 449;
				create_table_like();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 450;
				create_table_copy();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 451;
				create_snapshot_table();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 452;
				create_table_clone();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 453;
				create_view();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 454;
				create_materialized_view();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 455;
				create_materialized_view_as_replica();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 456;
				create_external_schema();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 457;
				create_external_table();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 458;
				create_function();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 459;
				create_js_function();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 460;
				create_py_function();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 461;
				create_remote_function();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 462;
				create_aggregate_function();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 463;
				create_aggregate_js_function();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 464;
				create_table_function();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 465;
				create_procedure();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 466;
				create_stored_procedure();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 467;
				create_row_access_policy();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 468;
				create_capacity();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 469;
				create_reservation();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 470;
				create_assignment();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 471;
				create_search_index();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 472;
				create_vector_index();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 473;
				alter_schema_set_default_collate();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 474;
				alter_schema_set_options();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 475;
				alter_schema_add_replica();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 476;
				alter_schema_drop_replica();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 477;
				alter_table_set_options();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 478;
				alter_table_add_column();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 479;
				alter_table_add_foreign_key();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 480;
				alter_table_add_primary_key();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 481;
				alter_table_rename();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 482;
				alter_table_rename_column();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 483;
				alter_table_drop_column();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 484;
				alter_table_drop_constraint();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 485;
				alter_table_drop_primary_key();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 486;
				alter_table_set_default_collate();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 487;
				alter_table_column_set_options();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 488;
				alter_table_column_drop_not_null();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 489;
				alter_table_column_set_data_type();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 490;
				alter_table_column_set_default();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 491;
				alter_table_column_drop_default();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 492;
				alter_view();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 493;
				alter_materialized_view();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 494;
				alter_organization();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 495;
				alter_project();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 496;
				alter_bi_capacity();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 497;
				alter_capacity();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 498;
				alter_reservation();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 499;
				undrop_schema();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 500;
				drop_schema();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 501;
				drop_table();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 502;
				drop_snapshot_table();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 503;
				drop_external_table();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 504;
				drop_view();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 505;
				drop_materialized_view();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 506;
				drop_function();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 507;
				drop_table_function();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 508;
				drop_procedure();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 509;
				drop_row_access_policy();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 510;
				drop_capacity();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 511;
				drop_reservation();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 512;
				drop_assignment();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 513;
				drop_search_index();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 514;
				drop_vector_index();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dml_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDml_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDml_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_statementContext dml_statement() {
		Dml_statementContext _localctx = new Dml_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_dml_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dcl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Dcl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDcl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDcl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dcl_statementContext dcl_statement() {
		Dcl_statementContext _localctx = new Dcl_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_dcl_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedural_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public Procedural_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedural_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedural_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedural_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedural_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedural_statementContext procedural_statement() {
		Procedural_statementContext _localctx = new Procedural_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_procedural_statement);
		try {
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521;
				declare();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522;
				set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Export_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_statementContext export_statement() {
		Export_statementContext _localctx = new Export_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_export_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Load_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLoad_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLoad_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_statementContext load_statement() {
		Load_statementContext _localctx = new Load_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_load_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assert_statementContext : ParserRuleContext {
		public String_literalContext description;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(BigQueryParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Assert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAssert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAssert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assert_statementContext assert_statement() {
		Assert_statementContext _localctx = new Assert_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_assert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(ASSERT);
			State = 530;
			expression(0);
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 531;
				Match(AS);
				State = 532;
				_localctx.description = string_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 20, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Query_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_statementContext query_statement() {
		Query_statementContext _localctx = new Query_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_query_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionsContext column_constraint_definitions() {
			return GetRuleContext<Column_constraint_definitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 24, RULE_create_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			Match(CREATE);
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 540;
				Match(OR);
				State = 541;
				Match(REPLACE);
				}
			}

			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 544;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 547;
			Match(TABLE);
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 548;
				Match(IF);
				State = 549;
				Match(NOT);
				State = 550;
				Match(EXISTS);
				}
			}

			State = 553;
			_localctx.table_name = path_expression();
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 554;
				Match(OPAR);
				State = 555;
				column_constraint_definitions();
				State = 556;
				Match(CPAR);
				}
			}

			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 560;
				Match(DEFAULT);
				State = 561;
				Match(COLLATE);
				State = 562;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 565;
				Match(PARTITION);
				State = 566;
				Match(BY);
				State = 567;
				expression(0);
				}
			}

			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 570;
				Match(CLUSTER);
				State = 571;
				Match(BY);
				State = 572;
				path_expressions();
				}
			}

			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 575;
				Match(WITH);
				State = 576;
				Match(CONNECTION);
				State = 577;
				_localctx.connection_name = identifier();
				}
			}

			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 580;
				Match(OPTIONS);
				State = 581;
				Match(OPAR);
				State = 582;
				option_parameters();
				State = 583;
				Match(CPAR);
				}
			}

			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 587;
				Match(AS);
				State = 588;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_likeContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_table_likeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_like(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_likeContext create_table_like() {
		Create_table_likeContext _localctx = new Create_table_likeContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_table_like);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(CREATE);
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 592;
				Match(OR);
				State = 593;
				Match(REPLACE);
				}
			}

			State = 596;
			Match(TABLE);
			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 597;
				Match(IF);
				State = 598;
				Match(NOT);
				State = 599;
				Match(EXISTS);
				}
			}

			State = 602;
			_localctx.table_name = path_expression();
			State = 603;
			Match(LIKE);
			State = 612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 607;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 604;
					_localctx.project_name = identifier();
					State = 605;
					Match(DOT);
					}
					break;
				}
				State = 609;
				_localctx.dataset_name = identifier();
				State = 610;
				Match(DOT);
				}
				break;
			}
			State = 614;
			_localctx.source_table_name = identifier();
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 615;
				Match(DEFAULT);
				State = 616;
				Match(COLLATE);
				State = 617;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 620;
				Match(PARTITION);
				State = 621;
				Match(BY);
				State = 622;
				expression(0);
				}
			}

			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 625;
				Match(CLUSTER);
				State = 626;
				Match(BY);
				State = 627;
				path_expressions();
				}
			}

			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 630;
				Match(WITH);
				State = 631;
				Match(CONNECTION);
				State = 632;
				_localctx.connection_name = identifier();
				}
			}

			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 635;
				Match(OPTIONS);
				State = 636;
				Match(OPAR);
				State = 637;
				option_parameters();
				State = 638;
				Match(CPAR);
				}
			}

			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 642;
				Match(AS);
				State = 643;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_copyContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Path_expressionContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(BigQueryParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_table_copyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_copy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_copy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_copy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_copy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_copyContext create_table_copy() {
		Create_table_copyContext _localctx = new Create_table_copyContext(Context, State);
		EnterRule(_localctx, 28, RULE_create_table_copy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(CREATE);
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 647;
				Match(OR);
				State = 648;
				Match(REPLACE);
				}
			}

			State = 651;
			Match(TABLE);
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 652;
				Match(IF);
				State = 653;
				Match(NOT);
				State = 654;
				Match(EXISTS);
				}
			}

			State = 657;
			_localctx.table_name = path_expression();
			State = 658;
			Match(COPY);
			State = 659;
			_localctx.source_table_name = path_expression();
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 660;
				Match(DEFAULT);
				State = 661;
				Match(COLLATE);
				State = 662;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 665;
				Match(PARTITION);
				State = 666;
				Match(BY);
				State = 667;
				expression(0);
				}
			}

			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 670;
				Match(CLUSTER);
				State = 671;
				Match(BY);
				State = 672;
				path_expressions();
				}
			}

			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 675;
				Match(WITH);
				State = 676;
				Match(CONNECTION);
				State = 677;
				_localctx.connection_name = identifier();
				}
			}

			State = 685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 680;
				Match(OPTIONS);
				State = 681;
				Match(OPAR);
				State = 682;
				option_parameters();
				State = 683;
				Match(CPAR);
				}
			}

			State = 689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 687;
				Match(AS);
				State = 688;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_snapshot_tableContext : ParserRuleContext {
		public Path_expressionContext table_snapshot_name;
		public Path_expressionContext source_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_snapshot_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_snapshot_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_snapshot_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_snapshot_tableContext create_snapshot_table() {
		Create_snapshot_tableContext _localctx = new Create_snapshot_tableContext(Context, State);
		EnterRule(_localctx, 30, RULE_create_snapshot_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(CREATE);
			State = 692;
			Match(SNAPSHOT);
			State = 693;
			Match(TABLE);
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 694;
				Match(IF);
				State = 695;
				Match(NOT);
				State = 696;
				Match(EXISTS);
				}
			}

			State = 699;
			_localctx.table_snapshot_name = path_expression();
			State = 700;
			Match(CLONE);
			State = 701;
			_localctx.source_table_name = path_expression();
			State = 707;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 702;
				Match(FOR);
				State = 703;
				Match(SYSTEM_TIME);
				State = 704;
				Match(AS);
				State = 705;
				Match(OF);
				State = 706;
				expression(0);
				}
			}

			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 709;
				Match(OPTIONS);
				State = 710;
				Match(OPAR);
				State = 711;
				option_parameters();
				State = 712;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_cloneContext : ParserRuleContext {
		public Path_expressionContext destination_table_name;
		public Path_expressionContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(BigQueryParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(BigQueryParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_table_cloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_clone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_clone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_clone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_clone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_cloneContext create_table_clone() {
		Create_table_cloneContext _localctx = new Create_table_cloneContext(Context, State);
		EnterRule(_localctx, 32, RULE_create_table_clone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(CREATE);
			State = 717;
			Match(TABLE);
			State = 721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 718;
				Match(IF);
				State = 719;
				Match(NOT);
				State = 720;
				Match(EXISTS);
				}
			}

			State = 723;
			_localctx.destination_table_name = path_expression();
			State = 724;
			Match(CLONE);
			State = 725;
			_localctx.source_table_name = path_expression();
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 726;
				Match(FOR);
				State = 727;
				Match(SYSTEM_TIME);
				State = 728;
				Match(AS);
				State = 729;
				Match(OF);
				State = 730;
				expression(0);
				}
			}

			State = 736;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 733;
				Match(DEFAULT);
				State = 734;
				Match(COLLATE);
				State = 735;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 738;
				Match(PARTITION);
				State = 739;
				Match(BY);
				State = 740;
				expression(0);
				}
			}

			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 743;
				Match(CLUSTER);
				State = 744;
				Match(BY);
				State = 745;
				path_expressions();
				}
			}

			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 748;
				Match(WITH);
				State = 749;
				Match(CONNECTION);
				State = 750;
				_localctx.connection_name = identifier();
				}
			}

			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 753;
				Match(OPTIONS);
				State = 754;
				Match(OPAR);
				State = 755;
				option_parameters();
				State = 756;
				Match(CPAR);
				}
			}

			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 760;
				Match(AS);
				State = 761;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public Path_expressionContext view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_column_name_listContext view_column_name_list() {
			return GetRuleContext<View_column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 34, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			Match(CREATE);
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 765;
				Match(OR);
				State = 766;
				Match(REPLACE);
				}
			}

			State = 769;
			Match(VIEW);
			State = 773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 770;
				Match(IF);
				State = 771;
				Match(NOT);
				State = 772;
				Match(EXISTS);
				}
			}

			State = 775;
			_localctx.view_name = path_expression();
			State = 780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 776;
				Match(OPAR);
				State = 777;
				view_column_name_list();
				State = 778;
				Match(CPAR);
				}
			}

			State = 787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 782;
				Match(OPTIONS);
				State = 783;
				Match(OPAR);
				State = 784;
				option_parameters();
				State = 785;
				Match(CPAR);
				}
			}

			State = 789;
			Match(AS);
			State = 790;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_materialized_viewContext : ParserRuleContext {
		public Path_expressionContext materialized_view_name;
		public Path_expressionsContext clustering_column_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Create_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_materialized_viewContext create_materialized_view() {
		Create_materialized_viewContext _localctx = new Create_materialized_viewContext(Context, State);
		EnterRule(_localctx, 36, RULE_create_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			Match(CREATE);
			State = 795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 793;
				Match(OR);
				State = 794;
				Match(REPLACE);
				}
			}

			State = 797;
			Match(MATERIALIZED);
			State = 798;
			Match(VIEW);
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 799;
				Match(IF);
				State = 800;
				Match(NOT);
				State = 801;
				Match(EXISTS);
				}
			}

			State = 804;
			_localctx.materialized_view_name = path_expression();
			State = 808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 805;
				Match(PARTITION);
				State = 806;
				Match(BY);
				State = 807;
				expression(0);
				}
			}

			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 810;
				Match(CLUSTER);
				State = 811;
				Match(BY);
				State = 812;
				_localctx.clustering_column_list = path_expressions();
				}
			}

			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 815;
				Match(OPTIONS);
				State = 816;
				Match(OPAR);
				State = 817;
				option_parameters();
				State = 818;
				Match(CPAR);
				}
			}

			State = 822;
			Match(AS);
			State = 823;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_materialized_view_as_replicaContext : ParserRuleContext {
		public Path_expressionContext replica_name;
		public Path_expressionContext source_materialized_view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_materialized_view_as_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_materialized_view_as_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_materialized_view_as_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_materialized_view_as_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_materialized_view_as_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_materialized_view_as_replicaContext create_materialized_view_as_replica() {
		Create_materialized_view_as_replicaContext _localctx = new Create_materialized_view_as_replicaContext(Context, State);
		EnterRule(_localctx, 38, RULE_create_materialized_view_as_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			Match(CREATE);
			State = 826;
			Match(MATERIALIZED);
			State = 827;
			Match(VIEW);
			State = 828;
			_localctx.replica_name = path_expression();
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 829;
				Match(OPTIONS);
				State = 830;
				Match(OPAR);
				State = 831;
				option_parameters();
				State = 832;
				Match(CPAR);
				}
			}

			State = 836;
			Match(AS);
			State = 837;
			Match(REPLICA);
			State = 838;
			Match(OF);
			State = 839;
			_localctx.source_materialized_view_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_schemaContext : ParserRuleContext {
		public Path_expressionContext dataset_name;
		public Path_expressionContext connection_namepath_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_external_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_schemaContext create_external_schema() {
		Create_external_schemaContext _localctx = new Create_external_schemaContext(Context, State);
		EnterRule(_localctx, 40, RULE_create_external_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			Match(CREATE);
			State = 842;
			Match(EXTERNAL);
			State = 843;
			Match(SCHEMA);
			State = 847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 844;
				Match(IF);
				State = 845;
				Match(NOT);
				State = 846;
				Match(EXISTS);
				}
			}

			State = 849;
			_localctx.dataset_name = path_expression();
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 850;
				Match(WITH);
				State = 851;
				Match(CONNECTION);
				State = 852;
				_localctx.connection_namepath_expression = path_expression();
				}
			}

			State = 860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 855;
				Match(OPTIONS);
				State = 856;
				Match(OPAR);
				State = 857;
				option_parameters();
				State = 858;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_tableContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Column_name_schemasContext column_names;
		public IdentifierContext connection_name;
		public Column_name_schemasContext partition_columns;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(BigQueryParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(BigQueryParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext[] column_name_schemas() {
			return GetRuleContexts<Column_name_schemasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext column_name_schemas(int i) {
			return GetRuleContext<Column_name_schemasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_tableContext create_external_table() {
		Create_external_tableContext _localctx = new Create_external_tableContext(Context, State);
		EnterRule(_localctx, 42, RULE_create_external_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(CREATE);
			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 863;
				Match(OR);
				State = 864;
				Match(REPLACE);
				}
			}

			State = 867;
			Match(EXTERNAL);
			State = 868;
			Match(TABLE);
			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 869;
				Match(IF);
				State = 870;
				Match(NOT);
				State = 871;
				Match(EXISTS);
				}
			}

			State = 874;
			_localctx.table_name = path_expression();
			State = 879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 875;
				Match(OPAR);
				State = 876;
				_localctx.column_names = column_name_schemas();
				State = 877;
				Match(CPAR);
				}
			}

			State = 887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 881;
				Match(WITH);
				State = 882;
				Match(CONNECTION);
				State = 885;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BIGNUMERIC:
				case DATE:
				case DATETIME:
				case NUMERIC:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MILLISECOND:
				case MICROSECOND:
				case JSON:
				case OFFSET:
				case NAME:
				case STRICT:
				case CORRESPONDING:
				case DIFFERENTIAL_PRIVACY:
				case OPTIONS:
				case VALUE:
				case REPLACE:
				case SYSTEM:
				case PERCENT:
				case PIVOT:
				case UNPIVOT:
				case SYSTEM_TIME:
				case ROW:
				case INCLUDE:
				case FORMAT:
				case SETS:
				case AVG:
				case SCHEMA:
				case TEMP:
				case TEMPORARY:
				case TABLE:
				case CONSTRAINT:
				case ENFORCED:
				case PRIMARY:
				case KEY:
				case FOREIGN:
				case REFERENCES:
				case CLUSTER:
				case CONNECTION:
				case ARRAY_AGG:
				case COPY:
				case SNAPSHOT:
				case CLONE:
				case VIEW:
				case DROP:
				case SEARCH:
				case INDEX:
				case VECTOR:
				case ASSIGNMENT:
				case RESERVATION:
				case ACCESS:
				case POLICY:
				case POLICIES:
				case PROCEDURE:
				case FUNCTION:
				case REPLICA:
				case COLUMNS:
				case RETURNS:
				case DETERMINISTIC:
				case LANGUAGE:
				case REMOTE:
				case AGGREGATE:
				case TYPE:
				case OUT:
				case INOUT:
				case BEGIN:
				case SECURITY:
				case INVOKER:
				case COALESCE:
				case NULLIF:
				case IFNULL:
				case GRANT:
				case FILTER:
				case COLUMN:
				case STORING:
				case ALTER:
				case ADD:
				case RENAME:
				case DATA:
				case ORGANIZATION:
				case PROJECT:
				case BI_CAPACITY:
				case ANY_VALUE:
				case MAX:
				case MIN:
				case ARRAY_CONCAT_AGG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case COUNTIF:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case MAX_BY:
				case MIN_BY:
				case STRING_AGG:
				case SUM:
				case TIMEZONE:
				case TIME:
				case ASSERT:
				case UNQUOTED_IDENTIFIER:
				case QUOTED_IDENTIFIER:
					{
					State = 883;
					_localctx.connection_name = identifier();
					}
					break;
				case DEFAULT:
					{
					State = 884;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 889;
				Match(WITH);
				State = 890;
				Match(PARTITION);
				State = 891;
				Match(COLUMNS);
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPAR) {
					{
					State = 892;
					Match(OPAR);
					State = 893;
					_localctx.partition_columns = column_name_schemas();
					State = 894;
					Match(CPAR);
					}
				}

				}
			}

			State = 900;
			Match(OPTIONS);
			State = 901;
			Match(OPAR);
			State = 902;
			option_parameters();
			State = 903;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_schemasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemaContext[] column_name_schema() {
			return GetRuleContexts<Column_name_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemaContext column_name_schema(int i) {
			return GetRuleContext<Column_name_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_name_schemasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_schemas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_schemas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_schemas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_schemas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_schemasContext column_name_schemas() {
		Column_name_schemasContext _localctx = new Column_name_schemasContext(Context, State);
		EnterRule(_localctx, 44, RULE_column_name_schemas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			column_name_schema();
			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 906;
				Match(COMMA);
				State = 907;
				column_name_schema();
				}
				}
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_schemaContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Column_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_schemaContext column_name_schema() {
		Column_name_schemaContext _localctx = new Column_name_schemaContext(Context, State);
		EnterRule(_localctx, 46, RULE_column_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			_localctx.column_name = identifier();
			State = 914;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_functionContext create_function() {
		Create_functionContext _localctx = new Create_functionContext(Context, State);
		EnterRule(_localctx, 48, RULE_create_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916;
			Match(CREATE);
			State = 919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 917;
				Match(OR);
				State = 918;
				Match(REPLACE);
				}
			}

			State = 922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 921;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 924;
			Match(FUNCTION);
			State = 928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 925;
				Match(IF);
				State = 926;
				Match(NOT);
				State = 927;
				Match(EXISTS);
				}
			}

			State = 938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 933;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 930;
					_localctx.project_name = identifier();
					State = 931;
					Match(DOT);
					}
					break;
				}
				State = 935;
				_localctx.dataset_name = identifier();
				State = 936;
				Match(DOT);
				}
				break;
			}
			State = 940;
			identifier();
			State = 941;
			Match(OPAR);
			State = 943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 942;
				named_parameters();
				}
			}

			State = 945;
			Match(CPAR);
			State = 948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 946;
				Match(RETURNS);
				State = 947;
				data_type();
				}
			}

			State = 950;
			Match(AS);
			State = 951;
			Match(OPAR);
			State = 952;
			expression(0);
			State = 953;
			Match(CPAR);
			State = 959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 954;
				Match(OPTIONS);
				State = 955;
				Match(OPAR);
				State = 956;
				option_parameters();
				State = 957;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_parameterContext[] named_parameter() {
			return GetRuleContexts<Named_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parameterContext named_parameter(int i) {
			return GetRuleContext<Named_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Named_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_parametersContext named_parameters() {
		Named_parametersContext _localctx = new Named_parametersContext(Context, State);
		EnterRule(_localctx, 50, RULE_named_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			named_parameter();
			State = 966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 962;
				Match(COMMA);
				State = 963;
				named_parameter();
				}
				}
				State = 968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_parameterContext : ParserRuleContext {
		public IdentifierContext param_name;
		public Data_typeContext param_type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Named_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_parameterContext named_parameter() {
		Named_parameterContext _localctx = new Named_parameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_named_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			_localctx.param_name = identifier();
			State = 970;
			_localctx.param_type = data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_js_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext javascript_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(BigQueryParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_js_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_js_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_js_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_js_functionContext create_js_function() {
		Create_js_functionContext _localctx = new Create_js_functionContext(Context, State);
		EnterRule(_localctx, 54, RULE_create_js_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972;
			Match(CREATE);
			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 973;
				Match(OR);
				State = 974;
				Match(REPLACE);
				}
			}

			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 977;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 980;
			Match(FUNCTION);
			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 981;
				Match(IF);
				State = 982;
				Match(NOT);
				State = 983;
				Match(EXISTS);
				}
			}

			State = 994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 989;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 986;
					_localctx.project_name = identifier();
					State = 987;
					Match(DOT);
					}
					break;
				}
				State = 991;
				_localctx.dataset_name = identifier();
				State = 992;
				Match(DOT);
				}
				break;
			}
			State = 996;
			identifier();
			State = 997;
			Match(OPAR);
			State = 999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 998;
				named_parameters();
				}
			}

			State = 1001;
			Match(CPAR);
			State = 1002;
			Match(RETURNS);
			State = 1003;
			data_type();
			State = 1007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DETERMINISTIC:
				{
				State = 1004;
				Match(DETERMINISTIC);
				}
				break;
			case NOT:
				{
				State = 1005;
				Match(NOT);
				State = 1006;
				Match(DETERMINISTIC);
				}
				break;
			case LANGUAGE:
				break;
			default:
				break;
			}
			State = 1009;
			Match(LANGUAGE);
			State = 1010;
			identifier();
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1011;
				Match(OPTIONS);
				State = 1012;
				Match(OPAR);
				State = 1013;
				option_parameters();
				State = 1014;
				Match(CPAR);
				}
			}

			State = 1018;
			Match(AS);
			State = 1019;
			_localctx.javascript_code = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_py_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext connection_path;
		public String_literalContext python_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Create_py_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_py_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_py_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_py_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_py_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_py_functionContext create_py_function() {
		Create_py_functionContext _localctx = new Create_py_functionContext(Context, State);
		EnterRule(_localctx, 56, RULE_create_py_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			Match(CREATE);
			State = 1024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1022;
				Match(OR);
				State = 1023;
				Match(REPLACE);
				}
			}

			State = 1027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1026;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1029;
			Match(FUNCTION);
			State = 1033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1030;
				Match(IF);
				State = 1031;
				Match(NOT);
				State = 1032;
				Match(EXISTS);
				}
			}

			State = 1043;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1038;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 1035;
					_localctx.project_name = identifier();
					State = 1036;
					Match(DOT);
					}
					break;
				}
				State = 1040;
				_localctx.dataset_name = identifier();
				State = 1041;
				Match(DOT);
				}
				break;
			}
			State = 1045;
			identifier();
			State = 1046;
			Match(OPAR);
			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 1047;
				named_parameters();
				}
			}

			State = 1050;
			Match(CPAR);
			State = 1051;
			Match(RETURNS);
			State = 1052;
			data_type();
			State = 1053;
			Match(LANGUAGE);
			State = 1054;
			identifier();
			State = 1058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1055;
				Match(WITH);
				State = 1056;
				Match(CONNECTION);
				State = 1057;
				_localctx.connection_path = path_expression();
				}
			}

			State = 1060;
			Match(OPTIONS);
			State = 1061;
			Match(OPAR);
			State = 1062;
			option_parameters();
			State = 1063;
			Match(CPAR);
			State = 1064;
			Match(AS);
			State = 1065;
			_localctx.python_code = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext connection_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_remote_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_remote_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_functionContext create_remote_function() {
		Create_remote_functionContext _localctx = new Create_remote_functionContext(Context, State);
		EnterRule(_localctx, 58, RULE_create_remote_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			Match(CREATE);
			State = 1070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1068;
				Match(OR);
				State = 1069;
				Match(REPLACE);
				}
			}

			State = 1073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1072;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1075;
			Match(FUNCTION);
			State = 1079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1076;
				Match(IF);
				State = 1077;
				Match(NOT);
				State = 1078;
				Match(EXISTS);
				}
			}

			State = 1089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 1084;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 1081;
					_localctx.project_name = identifier();
					State = 1082;
					Match(DOT);
					}
					break;
				}
				State = 1086;
				_localctx.dataset_name = identifier();
				State = 1087;
				Match(DOT);
				}
				break;
			}
			State = 1091;
			identifier();
			State = 1092;
			Match(OPAR);
			State = 1094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 1093;
				named_parameters();
				}
			}

			State = 1096;
			Match(CPAR);
			State = 1097;
			Match(RETURNS);
			State = 1098;
			data_type();
			State = 1099;
			Match(REMOTE);
			State = 1100;
			Match(WITH);
			State = 1101;
			Match(CONNECTION);
			State = 1102;
			_localctx.connection_path = path_expression();
			State = 1108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1103;
				Match(OPTIONS);
				State = 1104;
				Match(OPAR);
				State = 1105;
				option_parameters();
				State = 1106;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_aggregate_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_aggregate_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_aggregate_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_aggregate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_aggregate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_aggregate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_aggregate_functionContext create_aggregate_function() {
		Create_aggregate_functionContext _localctx = new Create_aggregate_functionContext(Context, State);
		EnterRule(_localctx, 60, RULE_create_aggregate_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			Match(CREATE);
			State = 1113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1111;
				Match(OR);
				State = 1112;
				Match(REPLACE);
				}
			}

			State = 1116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1115;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1118;
			Match(AGGREGATE);
			State = 1119;
			Match(FUNCTION);
			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1120;
				Match(IF);
				State = 1121;
				Match(NOT);
				State = 1122;
				Match(EXISTS);
				}
			}

			State = 1133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 1128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 1125;
					_localctx.project_name = identifier();
					State = 1126;
					Match(DOT);
					}
					break;
				}
				State = 1130;
				_localctx.dataset_name = identifier();
				State = 1131;
				Match(DOT);
				}
				break;
			}
			State = 1135;
			identifier();
			State = 1136;
			Match(OPAR);
			State = 1138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 1137;
				function_parameters();
				}
			}

			State = 1140;
			Match(CPAR);
			State = 1143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1141;
				Match(RETURNS);
				State = 1142;
				data_type();
				}
			}

			State = 1145;
			Match(AS);
			State = 1146;
			Match(OPAR);
			State = 1147;
			expression(0);
			State = 1148;
			Match(CPAR);
			State = 1154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1149;
				Match(OPTIONS);
				State = 1150;
				Match(OPAR);
				State = 1151;
				option_parameters();
				State = 1152;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parametersContext function_parameters() {
		Function_parametersContext _localctx = new Function_parametersContext(Context, State);
		EnterRule(_localctx, 62, RULE_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1156;
			function_parameter();
			State = 1161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1157;
				Match(COMMA);
				State = 1158;
				function_parameter();
				}
				}
				State = 1163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		public Path_expressionContext parameter_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 64, RULE_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164;
			_localctx.parameter_name = path_expression();
			State = 1165;
			data_type();
			State = 1168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1166;
				Match(NOT);
				State = 1167;
				Match(AGGREGATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_aggregate_js_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext function_body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_aggregate_js_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_aggregate_js_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_aggregate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_aggregate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_aggregate_js_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_aggregate_js_functionContext create_aggregate_js_function() {
		Create_aggregate_js_functionContext _localctx = new Create_aggregate_js_functionContext(Context, State);
		EnterRule(_localctx, 66, RULE_create_aggregate_js_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170;
			Match(CREATE);
			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1171;
				Match(OR);
				State = 1172;
				Match(REPLACE);
				}
			}

			State = 1176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1175;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1178;
			Match(AGGREGATE);
			State = 1179;
			Match(FUNCTION);
			State = 1183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1180;
				Match(IF);
				State = 1181;
				Match(NOT);
				State = 1182;
				Match(EXISTS);
				}
			}

			State = 1193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 1185;
					_localctx.project_name = identifier();
					State = 1186;
					Match(DOT);
					}
					break;
				}
				State = 1190;
				_localctx.dataset_name = identifier();
				State = 1191;
				Match(DOT);
				}
				break;
			}
			State = 1195;
			identifier();
			State = 1196;
			Match(OPAR);
			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 1197;
				function_parameters();
				}
			}

			State = 1200;
			Match(CPAR);
			State = 1201;
			Match(RETURNS);
			State = 1202;
			data_type();
			State = 1203;
			Match(LANGUAGE);
			State = 1204;
			identifier();
			State = 1210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1205;
				Match(OPTIONS);
				State = 1206;
				Match(OPAR);
				State = 1207;
				option_parameters();
				State = 1208;
				Match(CPAR);
				}
			}

			State = 1212;
			Match(AS);
			State = 1213;
			_localctx.function_body = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLE() { return GetTokens(BigQueryParser.TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE(int i) {
			return GetToken(BigQueryParser.TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parametersContext table_function_parameters() {
			return GetRuleContext<Table_function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationsContext column_declarations() {
			return GetRuleContext<Column_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_table_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_functionContext create_table_function() {
		Create_table_functionContext _localctx = new Create_table_functionContext(Context, State);
		EnterRule(_localctx, 68, RULE_create_table_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1215;
			Match(CREATE);
			State = 1218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1216;
				Match(OR);
				State = 1217;
				Match(REPLACE);
				}
			}

			State = 1220;
			Match(TABLE);
			State = 1221;
			Match(FUNCTION);
			State = 1225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1222;
				Match(IF);
				State = 1223;
				Match(NOT);
				State = 1224;
				Match(EXISTS);
				}
			}

			State = 1235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 1230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
				case 1:
					{
					State = 1227;
					_localctx.project_name = identifier();
					State = 1228;
					Match(DOT);
					}
					break;
				}
				State = 1232;
				_localctx.dataset_name = identifier();
				State = 1233;
				Match(DOT);
				}
				break;
			}
			State = 1237;
			identifier();
			State = 1238;
			Match(OPAR);
			State = 1240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 1239;
				table_function_parameters();
				}
			}

			State = 1242;
			Match(CPAR);
			State = 1249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1243;
				Match(RETURNS);
				State = 1244;
				Match(TABLE);
				State = 1245;
				Match(LT);
				State = 1246;
				column_declarations();
				State = 1247;
				Match(GT);
				}
			}

			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1251;
				Match(OPTIONS);
				State = 1252;
				Match(OPAR);
				State = 1253;
				option_parameters();
				State = 1254;
				Match(CPAR);
				}
			}

			State = 1258;
			Match(AS);
			State = 1259;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parameterContext[] table_function_parameter() {
			return GetRuleContexts<Table_function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parameterContext table_function_parameter(int i) {
			return GetRuleContext<Table_function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Table_function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTable_function_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTable_function_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_parametersContext table_function_parameters() {
		Table_function_parametersContext _localctx = new Table_function_parametersContext(Context, State);
		EnterRule(_localctx, 70, RULE_table_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261;
			table_function_parameter();
			State = 1266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1262;
				Match(COMMA);
				State = 1263;
				table_function_parameter();
				}
				}
				State = 1268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_parameterContext : ParserRuleContext {
		public Path_expressionContext parameter_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		public Table_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTable_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTable_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_parameterContext table_function_parameter() {
		Table_function_parameterContext _localctx = new Table_function_parameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_table_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1269;
			_localctx.parameter_name = path_expression();
			State = 1273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 1270;
				data_type();
				}
				break;
			case 2:
				{
				State = 1271;
				Match(ANY);
				State = 1272;
				Match(TYPE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationsContext column_declarations() {
		Column_declarationsContext _localctx = new Column_declarationsContext(Context, State);
		EnterRule(_localctx, 74, RULE_column_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275;
			column_declaration();
			State = 1280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1276;
				Match(COMMA);
				State = 1277;
				column_declaration();
				}
				}
				State = 1282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			_localctx.column_name = path_expression();
			State = 1284;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentsContext procedure_arguments() {
			return GetRuleContext<Procedure_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public Create_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedureContext create_procedure() {
		Create_procedureContext _localctx = new Create_procedureContext(Context, State);
		EnterRule(_localctx, 78, RULE_create_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286;
			Match(CREATE);
			State = 1289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1287;
				Match(OR);
				State = 1288;
				Match(REPLACE);
				}
			}

			State = 1291;
			Match(PROCEDURE);
			State = 1295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1292;
				Match(IF);
				State = 1293;
				Match(NOT);
				State = 1294;
				Match(EXISTS);
				}
			}

			State = 1305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 1300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
				case 1:
					{
					State = 1297;
					_localctx.project_name = identifier();
					State = 1298;
					Match(DOT);
					}
					break;
				}
				State = 1302;
				_localctx.dataset_name = identifier();
				State = 1303;
				Match(DOT);
				}
				break;
			}
			State = 1307;
			identifier();
			State = 1308;
			Match(OPAR);
			State = 1310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -9007199254740991L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & -139681957192663041L) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & 3573412790271L) != 0)) {
				{
				State = 1309;
				procedure_arguments();
				}
			}

			State = 1312;
			Match(CPAR);
			State = 1318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1313;
				Match(OPTIONS);
				State = 1314;
				Match(OPAR);
				State = 1315;
				option_parameters();
				State = 1316;
				Match(CPAR);
				}
			}

			State = 1320;
			Match(BEGIN);
			State = 1324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 1321;
				Match(SCOL);
				}
				}
				State = 1326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1327;
			statement();
			State = 1336;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1329;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 1328;
						Match(SCOL);
						}
						}
						State = 1331;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 1333;
					statement();
					}
					} 
				}
				State = 1338;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			State = 1342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 1339;
				Match(SCOL);
				}
				}
				State = 1344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1345;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentContext[] procedure_argument() {
			return GetRuleContexts<Procedure_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentContext procedure_argument(int i) {
			return GetRuleContext<Procedure_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Procedure_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedure_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedure_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_argumentsContext procedure_arguments() {
		Procedure_argumentsContext _localctx = new Procedure_argumentsContext(Context, State);
		EnterRule(_localctx, 80, RULE_procedure_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347;
			procedure_argument();
			State = 1352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1348;
				Match(COMMA);
				State = 1349;
				procedure_argument();
				}
				}
				State = 1354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_argumentContext : ParserRuleContext {
		public Path_expressionContext argument_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(BigQueryParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(BigQueryParser.INOUT, 0); }
		public Procedure_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedure_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedure_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_argumentContext procedure_argument() {
		Procedure_argumentContext _localctx = new Procedure_argumentContext(Context, State);
		EnterRule(_localctx, 82, RULE_procedure_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				{
				State = 1355;
				_la = TokenStream.LA(1);
				if ( !(_la==IN || _la==OUT || _la==INOUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1358;
			_localctx.argument_name = path_expression();
			State = 1359;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_stored_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext language;
		public String_literalContext pyspark_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentsContext procedure_arguments() {
			return GetRuleContext<Procedure_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(BigQueryParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(BigQueryParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_stored_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_stored_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_stored_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_stored_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_stored_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_stored_procedureContext create_stored_procedure() {
		Create_stored_procedureContext _localctx = new Create_stored_procedureContext(Context, State);
		EnterRule(_localctx, 84, RULE_create_stored_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361;
			Match(CREATE);
			State = 1364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1362;
				Match(OR);
				State = 1363;
				Match(REPLACE);
				}
			}

			State = 1366;
			Match(PROCEDURE);
			State = 1370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1367;
				Match(IF);
				State = 1368;
				Match(NOT);
				State = 1369;
				Match(EXISTS);
				}
			}

			State = 1380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1375;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
				case 1:
					{
					State = 1372;
					_localctx.project_name = identifier();
					State = 1373;
					Match(DOT);
					}
					break;
				}
				State = 1377;
				_localctx.dataset_name = identifier();
				State = 1378;
				Match(DOT);
				}
				break;
			}
			State = 1382;
			identifier();
			State = 1383;
			Match(OPAR);
			State = 1385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & -9007199254740991L) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & -139681957192663041L) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & 3573412790271L) != 0)) {
				{
				State = 1384;
				procedure_arguments();
				}
			}

			State = 1387;
			Match(CPAR);
			State = 1391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 1388;
				Match(EXTERNAL);
				State = 1389;
				Match(SECURITY);
				State = 1390;
				Match(INVOKER);
				}
			}

			State = 1393;
			Match(WITH);
			State = 1394;
			Match(CONNECTION);
			State = 1395;
			path_expression();
			State = 1401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1396;
				Match(OPTIONS);
				State = 1397;
				Match(OPAR);
				State = 1398;
				option_parameters();
				State = 1399;
				Match(CPAR);
				}
			}

			State = 1403;
			Match(LANGUAGE);
			State = 1404;
			_localctx.language = identifier();
			State = 1407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1405;
				Match(AS);
				State = 1406;
				_localctx.pyspark_code = string_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_row_access_policyContext : ParserRuleContext {
		public Path_expressionContext row_access_policy_name;
		public Path_expressionContext table_name;
		public ExpressionsContext grantee_list;
		public ExpressionContext filter_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(BigQueryParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Create_row_access_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_row_access_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_row_access_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_row_access_policyContext create_row_access_policy() {
		Create_row_access_policyContext _localctx = new Create_row_access_policyContext(Context, State);
		EnterRule(_localctx, 86, RULE_create_row_access_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409;
			Match(CREATE);
			State = 1412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1410;
				Match(OR);
				State = 1411;
				Match(REPLACE);
				}
			}

			State = 1414;
			Match(ROW);
			State = 1415;
			Match(ACCESS);
			State = 1416;
			Match(POLICY);
			State = 1420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1417;
				Match(IF);
				State = 1418;
				Match(NOT);
				State = 1419;
				Match(EXISTS);
				}
			}

			State = 1422;
			_localctx.row_access_policy_name = path_expression();
			State = 1423;
			Match(ON);
			State = 1424;
			_localctx.table_name = path_expression();
			State = 1431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GRANT) {
				{
				State = 1425;
				Match(GRANT);
				State = 1426;
				Match(TO);
				State = 1427;
				Match(OPAR);
				State = 1428;
				_localctx.grantee_list = expressions();
				State = 1429;
				Match(CPAR);
				}
			}

			State = 1433;
			Match(FILTER);
			State = 1434;
			Match(USING);
			State = 1435;
			Match(OPAR);
			State = 1436;
			_localctx.filter_expression = expression(0);
			State = 1437;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_capacityContext create_capacity() {
		Create_capacityContext _localctx = new Create_capacityContext(Context, State);
		EnterRule(_localctx, 88, RULE_create_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439;
			Match(CREATE);
			State = 1440;
			Match(CAPACITY);
			State = 1441;
			expression(0);
			State = 1442;
			Match(OPTIONS);
			State = 1443;
			Match(OPAR);
			State = 1444;
			option_parameters();
			State = 1445;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_reservationContext create_reservation() {
		Create_reservationContext _localctx = new Create_reservationContext(Context, State);
		EnterRule(_localctx, 90, RULE_create_reservation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447;
			Match(CREATE);
			State = 1448;
			Match(RESERVATION);
			State = 1449;
			expression(0);
			State = 1450;
			Match(OPTIONS);
			State = 1451;
			Match(OPAR);
			State = 1452;
			option_parameters();
			State = 1453;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_assignmentContext create_assignment() {
		Create_assignmentContext _localctx = new Create_assignmentContext(Context, State);
		EnterRule(_localctx, 92, RULE_create_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455;
			Match(CREATE);
			State = 1456;
			Match(ASSIGNMENT);
			State = 1457;
			expression(0);
			State = 1458;
			Match(OPTIONS);
			State = 1459;
			Match(OPAR);
			State = 1460;
			option_parameters();
			State = 1461;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTIONS() { return GetTokens(BigQueryParser.OPTIONS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS(int i) {
			return GetToken(BigQueryParser.OPTIONS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		public Create_search_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_search_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_indexContext create_search_index() {
		Create_search_indexContext _localctx = new Create_search_indexContext(Context, State);
		EnterRule(_localctx, 94, RULE_create_search_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463;
			Match(CREATE);
			State = 1464;
			Match(SEARCH);
			State = 1465;
			Match(INDEX);
			State = 1469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1466;
				Match(IF);
				State = 1467;
				Match(NOT);
				State = 1468;
				Match(EXISTS);
				}
			}

			State = 1471;
			_localctx.index_name = path_expression();
			State = 1472;
			Match(ON);
			State = 1473;
			_localctx.table_name = path_expression();
			State = 1474;
			Match(OPAR);
			State = 1487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 1475;
				Match(ALL);
				State = 1476;
				Match(COLUMNS);
				State = 1484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1477;
					Match(WITH);
					State = 1478;
					Match(COLUMN);
					State = 1479;
					Match(OPTIONS);
					State = 1480;
					Match(OPAR);
					State = 1481;
					columns();
					State = 1482;
					Match(CPAR);
					}
				}

				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 1486;
				columns();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1489;
			Match(CPAR);
			State = 1495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1490;
				Match(OPTIONS);
				State = 1491;
				Match(OPAR);
				State = 1492;
				option_parameters();
				State = 1493;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsContext columns() {
		ColumnsContext _localctx = new ColumnsContext(Context, State);
		EnterRule(_localctx, 96, RULE_columns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			column();
			State = 1502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1498;
				Match(COMMA);
				State = 1499;
				column();
				}
				}
				State = 1504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 98, RULE_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1505;
			_localctx.column_name = path_expression();
			State = 1507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 1506;
				data_type();
				}
				break;
			}
			State = 1514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1509;
				Match(OPTIONS);
				State = 1510;
				Match(OPAR);
				State = 1511;
				option_parameters();
				State = 1512;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_vector_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORING() { return GetToken(BigQueryParser.STORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Create_vector_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_vector_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_vector_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_vector_indexContext create_vector_index() {
		Create_vector_indexContext _localctx = new Create_vector_indexContext(Context, State);
		EnterRule(_localctx, 100, RULE_create_vector_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516;
			Match(CREATE);
			State = 1519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1517;
				Match(OR);
				State = 1518;
				Match(REPLACE);
				}
			}

			State = 1521;
			Match(VECTOR);
			State = 1522;
			Match(INDEX);
			State = 1526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1523;
				Match(IF);
				State = 1524;
				Match(NOT);
				State = 1525;
				Match(EXISTS);
				}
			}

			State = 1528;
			_localctx.index_name = path_expression();
			State = 1529;
			Match(ON);
			State = 1530;
			_localctx.table_name = path_expression();
			State = 1531;
			Match(OPAR);
			State = 1532;
			_localctx.column_name = path_expression();
			State = 1533;
			Match(CPAR);
			State = 1539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORING) {
				{
				State = 1534;
				Match(STORING);
				State = 1535;
				Match(OPAR);
				State = 1536;
				path_expressions();
				State = 1537;
				Match(CPAR);
				}
			}

			State = 1541;
			Match(OPTIONS);
			State = 1542;
			Match(OPAR);
			State = 1543;
			option_parameters();
			State = 1544;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_set_default_collateContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Alter_schema_set_default_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_set_default_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_set_default_collate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_set_default_collateContext alter_schema_set_default_collate() {
		Alter_schema_set_default_collateContext _localctx = new Alter_schema_set_default_collateContext(Context, State);
		EnterRule(_localctx, 102, RULE_alter_schema_set_default_collate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546;
			Match(ALTER);
			State = 1547;
			Match(SCHEMA);
			State = 1550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1548;
				Match(IF);
				State = 1549;
				Match(EXISTS);
				}
			}

			State = 1555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1552;
				_localctx.project_name = identifier();
				State = 1553;
				Match(DOT);
				}
				break;
			}
			State = 1557;
			_localctx.dataset_name = identifier();
			State = 1558;
			Match(SET);
			State = 1559;
			Match(DEFAULT);
			State = 1560;
			Match(COLLATE);
			State = 1561;
			_localctx.collate_specification = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_set_optionsContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Alter_schema_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_set_optionsContext alter_schema_set_options() {
		Alter_schema_set_optionsContext _localctx = new Alter_schema_set_optionsContext(Context, State);
		EnterRule(_localctx, 104, RULE_alter_schema_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563;
			Match(ALTER);
			State = 1564;
			Match(SCHEMA);
			State = 1567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1565;
				Match(IF);
				State = 1566;
				Match(EXISTS);
				}
			}

			State = 1572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				{
				State = 1569;
				_localctx.project_name = identifier();
				State = 1570;
				Match(DOT);
				}
				break;
			}
			State = 1574;
			_localctx.dataset_name = identifier();
			State = 1575;
			Match(SET);
			State = 1576;
			Match(OPTIONS);
			State = 1577;
			Match(OPAR);
			State = 1578;
			option_parameters();
			State = 1579;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_add_replicaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext replica_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_schema_add_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_add_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_add_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_add_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_add_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_add_replicaContext alter_schema_add_replica() {
		Alter_schema_add_replicaContext _localctx = new Alter_schema_add_replicaContext(Context, State);
		EnterRule(_localctx, 106, RULE_alter_schema_add_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			Match(ALTER);
			State = 1582;
			Match(SCHEMA);
			State = 1585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1583;
				Match(IF);
				State = 1584;
				Match(EXISTS);
				}
			}

			State = 1590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				{
				State = 1587;
				_localctx.project_name = identifier();
				State = 1588;
				Match(DOT);
				}
				break;
			}
			State = 1592;
			_localctx.dataset_name = identifier();
			State = 1593;
			Match(ADD);
			State = 1594;
			Match(REPLICA);
			State = 1595;
			_localctx.replica_name = path_expression();
			State = 1601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1596;
				Match(OPTIONS);
				State = 1597;
				Match(OPAR);
				State = 1598;
				option_parameters();
				State = 1599;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_drop_replicaContext : ParserRuleContext {
		public Path_expressionContext dataset_name;
		public ExpressionContext replica_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_schema_drop_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_drop_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_drop_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_drop_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_drop_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_drop_replicaContext alter_schema_drop_replica() {
		Alter_schema_drop_replicaContext _localctx = new Alter_schema_drop_replicaContext(Context, State);
		EnterRule(_localctx, 108, RULE_alter_schema_drop_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603;
			Match(ALTER);
			State = 1604;
			Match(SCHEMA);
			State = 1607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1605;
				Match(IF);
				State = 1606;
				Match(EXISTS);
				}
			}

			State = 1609;
			_localctx.dataset_name = path_expression();
			State = 1610;
			Match(DROP);
			State = 1611;
			Match(REPLICA);
			State = 1612;
			_localctx.replica_name = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_optionsContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_optionsContext alter_table_set_options() {
		Alter_table_set_optionsContext _localctx = new Alter_table_set_optionsContext(Context, State);
		EnterRule(_localctx, 110, RULE_alter_table_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1614;
			Match(ALTER);
			State = 1615;
			Match(TABLE);
			State = 1618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1616;
				Match(IF);
				State = 1617;
				Match(EXISTS);
				}
			}

			State = 1620;
			_localctx.table_name = path_expression();
			State = 1621;
			Match(SET);
			State = 1622;
			Match(OPTIONS);
			State = 1623;
			Match(OPAR);
			State = 1624;
			option_parameters();
			State = 1625;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(BigQueryParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(BigQueryParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLUMN() { return GetTokens(BigQueryParser.COLUMN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN(int i) {
			return GetToken(BigQueryParser.COLUMN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_add_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_columnContext alter_table_add_column() {
		Alter_table_add_columnContext _localctx = new Alter_table_add_columnContext(Context, State);
		EnterRule(_localctx, 112, RULE_alter_table_add_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			Match(ALTER);
			State = 1628;
			Match(TABLE);
			State = 1629;
			_localctx.table_name = path_expression();
			State = 1630;
			Match(ADD);
			State = 1631;
			Match(COLUMN);
			State = 1635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1632;
				Match(IF);
				State = 1633;
				Match(NOT);
				State = 1634;
				Match(EXISTS);
				}
			}

			State = 1637;
			column();
			State = 1649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1638;
				Match(COMMA);
				State = 1639;
				Match(ADD);
				State = 1640;
				Match(COLUMN);
				State = 1644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1641;
					Match(IF);
					State = 1642;
					Match(NOT);
					State = 1643;
					Match(EXISTS);
					}
				}

				State = 1646;
				column();
				}
				}
				State = 1651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_foreign_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Add_foreign_keyContext[] add_foreign_key() {
			return GetRuleContexts<Add_foreign_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_foreign_keyContext add_foreign_key(int i) {
			return GetRuleContext<Add_foreign_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_add_foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_foreign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_foreign_keyContext alter_table_add_foreign_key() {
		Alter_table_add_foreign_keyContext _localctx = new Alter_table_add_foreign_keyContext(Context, State);
		EnterRule(_localctx, 114, RULE_alter_table_add_foreign_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1652;
			Match(ALTER);
			State = 1653;
			Match(TABLE);
			State = 1662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1657;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
				case 1:
					{
					State = 1654;
					_localctx.project_name = identifier();
					State = 1655;
					Match(DOT);
					}
					break;
				}
				State = 1659;
				_localctx.dataset_name = identifier();
				State = 1660;
				Match(DOT);
				}
				break;
			}
			State = 1664;
			_localctx.fk_table_name = identifier();
			State = 1665;
			add_foreign_key();
			State = 1670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1666;
				Match(COMMA);
				State = 1667;
				add_foreign_key();
				}
				}
				State = 1672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_foreign_keyContext : ParserRuleContext {
		public IdentifierContext constraint_name;
		public IdentifierContext pk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext[] columns() {
			return GetRuleContexts<ColumnsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns(int i) {
			return GetRuleContext<ColumnsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		public Add_foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAdd_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAdd_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_foreign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_foreign_keyContext add_foreign_key() {
		Add_foreign_keyContext _localctx = new Add_foreign_keyContext(Context, State);
		EnterRule(_localctx, 116, RULE_add_foreign_key);
		int _la;
		try {
			State = 1705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1673;
				Match(ADD);
				State = 1681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1674;
					Match(CONSTRAINT);
					State = 1678;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IF) {
						{
						State = 1675;
						Match(IF);
						State = 1676;
						Match(NOT);
						State = 1677;
						Match(EXISTS);
						}
					}

					State = 1680;
					_localctx.constraint_name = identifier();
					}
				}

				State = 1683;
				Match(FOREIGN);
				State = 1684;
				Match(KEY);
				State = 1685;
				Match(OPAR);
				State = 1686;
				columns();
				State = 1687;
				Match(CPAR);
				State = 1688;
				Match(REFERENCES);
				State = 1689;
				_localctx.pk_table_name = identifier();
				State = 1690;
				Match(OPAR);
				State = 1691;
				columns();
				State = 1692;
				Match(CPAR);
				State = 1693;
				Match(NOT);
				State = 1694;
				Match(ENFORCED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1696;
				Match(ADD);
				State = 1697;
				Match(PRIMARY);
				State = 1698;
				Match(KEY);
				State = 1699;
				Match(OPAR);
				State = 1700;
				columns();
				State = 1701;
				Match(CPAR);
				State = 1702;
				Match(NOT);
				State = 1703;
				Match(ENFORCED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_primary_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Alter_table_add_primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_primary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_primary_keyContext alter_table_add_primary_key() {
		Alter_table_add_primary_keyContext _localctx = new Alter_table_add_primary_keyContext(Context, State);
		EnterRule(_localctx, 118, RULE_alter_table_add_primary_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1707;
			Match(ALTER);
			State = 1708;
			Match(TABLE);
			State = 1717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1712;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 1709;
					_localctx.project_name = identifier();
					State = 1710;
					Match(DOT);
					}
					break;
				}
				State = 1714;
				_localctx.dataset_name = identifier();
				State = 1715;
				Match(DOT);
				}
				break;
			}
			State = 1719;
			_localctx.fk_table_name = identifier();
			State = 1720;
			Match(ADD);
			State = 1721;
			Match(PRIMARY);
			State = 1722;
			Match(KEY);
			State = 1723;
			Match(OPAR);
			State = 1724;
			columns();
			State = 1725;
			Match(CPAR);
			State = 1726;
			Match(NOT);
			State = 1727;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_renameContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Path_expressionContext new_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_renameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_rename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_renameContext alter_table_rename() {
		Alter_table_renameContext _localctx = new Alter_table_renameContext(Context, State);
		EnterRule(_localctx, 120, RULE_alter_table_rename);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1729;
			Match(ALTER);
			State = 1730;
			Match(TABLE);
			State = 1733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1731;
				Match(IF);
				State = 1732;
				Match(EXISTS);
				}
			}

			State = 1735;
			_localctx.table_name = path_expression();
			State = 1736;
			Match(RENAME);
			State = 1737;
			Match(TO);
			State = 1738;
			_localctx.new_table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_rename_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rename_columnContext[] rename_column() {
			return GetRuleContexts<Rename_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rename_columnContext rename_column(int i) {
			return GetRuleContext<Rename_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_rename_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_rename_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_rename_columnContext alter_table_rename_column() {
		Alter_table_rename_columnContext _localctx = new Alter_table_rename_columnContext(Context, State);
		EnterRule(_localctx, 122, RULE_alter_table_rename_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740;
			Match(ALTER);
			State = 1741;
			Match(TABLE);
			State = 1744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1742;
				Match(IF);
				State = 1743;
				Match(EXISTS);
				}
			}

			State = 1746;
			_localctx.table_name = path_expression();
			State = 1747;
			rename_column();
			State = 1752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1748;
				Match(COMMA);
				State = 1749;
				rename_column();
				}
				}
				State = 1754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rename_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_to_columnContext[] column_to_column() {
			return GetRuleContexts<Column_to_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_to_columnContext column_to_column(int i) {
			return GetRuleContext<Column_to_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Rename_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rename_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRename_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rename_columnContext rename_column() {
		Rename_columnContext _localctx = new Rename_columnContext(Context, State);
		EnterRule(_localctx, 124, RULE_rename_column);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			Match(RENAME);
			State = 1756;
			Match(COLUMN);
			State = 1759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1757;
				Match(IF);
				State = 1758;
				Match(EXISTS);
				}
			}

			State = 1761;
			column_to_column();
			State = 1766;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1762;
					Match(COMMA);
					State = 1763;
					column_to_column();
					}
					} 
				}
				State = 1768;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_to_columnContext : ParserRuleContext {
		public IdentifierContext column_name;
		public IdentifierContext new_column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_to_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_to_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_to_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_to_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_to_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_to_columnContext column_to_column() {
		Column_to_columnContext _localctx = new Column_to_columnContext(Context, State);
		EnterRule(_localctx, 126, RULE_column_to_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1769;
			_localctx.column_name = identifier();
			State = 1770;
			Match(TO);
			State = 1771;
			_localctx.new_column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_columnContext[] drop_column() {
			return GetRuleContexts<Drop_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_columnContext drop_column(int i) {
			return GetRuleContext<Drop_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_columnContext alter_table_drop_column() {
		Alter_table_drop_columnContext _localctx = new Alter_table_drop_columnContext(Context, State);
		EnterRule(_localctx, 128, RULE_alter_table_drop_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1773;
			Match(ALTER);
			State = 1774;
			Match(TABLE);
			State = 1775;
			_localctx.table_name = path_expression();
			State = 1776;
			drop_column();
			State = 1781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1777;
				Match(COMMA);
				State = 1778;
				drop_column();
				}
				}
				State = 1783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_columnContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_columnContext drop_column() {
		Drop_columnContext _localctx = new Drop_columnContext(Context, State);
		EnterRule(_localctx, 130, RULE_drop_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784;
			Match(DROP);
			State = 1785;
			Match(COLUMN);
			State = 1788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1786;
				Match(IF);
				State = 1787;
				Match(EXISTS);
				}
			}

			State = 1790;
			_localctx.column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_constraintContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		public ExpressionContext constraint_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_drop_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_constraintContext alter_table_drop_constraint() {
		Alter_table_drop_constraintContext _localctx = new Alter_table_drop_constraintContext(Context, State);
		EnterRule(_localctx, 132, RULE_alter_table_drop_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1792;
			Match(ALTER);
			State = 1793;
			Match(TABLE);
			State = 1802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				{
				State = 1797;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1794;
					_localctx.project_name = identifier();
					State = 1795;
					Match(DOT);
					}
					break;
				}
				State = 1799;
				_localctx.dataset_name = identifier();
				State = 1800;
				Match(DOT);
				}
				break;
			}
			State = 1804;
			_localctx.fk_table_name = identifier();
			State = 1805;
			Match(DROP);
			State = 1806;
			Match(CONSTRAINT);
			State = 1809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1807;
				Match(IF);
				State = 1808;
				Match(EXISTS);
				}
				break;
			}
			State = 1811;
			_localctx.constraint_name = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_primary_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_drop_primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_primary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_primary_keyContext alter_table_drop_primary_key() {
		Alter_table_drop_primary_keyContext _localctx = new Alter_table_drop_primary_keyContext(Context, State);
		EnterRule(_localctx, 134, RULE_alter_table_drop_primary_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1813;
			Match(ALTER);
			State = 1814;
			Match(TABLE);
			State = 1823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 1818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1815;
					_localctx.project_name = identifier();
					State = 1816;
					Match(DOT);
					}
					break;
				}
				State = 1820;
				_localctx.dataset_name = identifier();
				State = 1821;
				Match(DOT);
				}
				break;
			}
			State = 1825;
			_localctx.fk_table_name = identifier();
			State = 1826;
			Match(DROP);
			State = 1827;
			Match(PRIMARY);
			State = 1828;
			Match(KEY);
			State = 1831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1829;
				Match(IF);
				State = 1830;
				Match(EXISTS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_default_collateContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Alter_table_set_default_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_default_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_set_default_collate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_default_collateContext alter_table_set_default_collate() {
		Alter_table_set_default_collateContext _localctx = new Alter_table_set_default_collateContext(Context, State);
		EnterRule(_localctx, 136, RULE_alter_table_set_default_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1833;
			Match(ALTER);
			State = 1834;
			Match(TABLE);
			State = 1835;
			_localctx.table_name = path_expression();
			State = 1836;
			Match(SET);
			State = 1837;
			Match(DEFAULT);
			State = 1838;
			Match(COLLATE);
			State = 1839;
			_localctx.collate_specification = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_optionsContext : ParserRuleContext {
		public Path_expressionContext name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_optionsContext alter_table_column_set_options() {
		Alter_table_column_set_optionsContext _localctx = new Alter_table_column_set_optionsContext(Context, State);
		EnterRule(_localctx, 138, RULE_alter_table_column_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1841;
			Match(ALTER);
			State = 1842;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==VIEW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1843;
				Match(IF);
				State = 1844;
				Match(EXISTS);
				}
			}

			State = 1847;
			_localctx.name = path_expression();
			State = 1848;
			Match(ALTER);
			State = 1849;
			Match(COLUMN);
			State = 1852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1850;
				Match(IF);
				State = 1851;
				Match(EXISTS);
				}
			}

			State = 1854;
			_localctx.column_name = identifier();
			State = 1855;
			Match(SET);
			State = 1856;
			Match(OPTIONS);
			State = 1857;
			Match(OPAR);
			State = 1858;
			option_parameters();
			State = 1859;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_drop_not_nullContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_drop_not_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_drop_not_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_drop_not_null(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_drop_not_nullContext alter_table_column_drop_not_null() {
		Alter_table_column_drop_not_nullContext _localctx = new Alter_table_column_drop_not_nullContext(Context, State);
		EnterRule(_localctx, 140, RULE_alter_table_column_drop_not_null);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1861;
			Match(ALTER);
			State = 1862;
			Match(TABLE);
			State = 1865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1863;
				Match(IF);
				State = 1864;
				Match(EXISTS);
				}
			}

			State = 1867;
			_localctx.table_name = path_expression();
			State = 1868;
			Match(ALTER);
			State = 1869;
			Match(COLUMN);
			State = 1872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1870;
				Match(IF);
				State = 1871;
				Match(EXISTS);
				}
			}

			State = 1874;
			_localctx.column_name = identifier();
			State = 1875;
			Match(DROP);
			State = 1876;
			Match(NOT);
			State = 1877;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_data_typeContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BigQueryParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_data_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_data_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_data_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_data_typeContext alter_table_column_set_data_type() {
		Alter_table_column_set_data_typeContext _localctx = new Alter_table_column_set_data_typeContext(Context, State);
		EnterRule(_localctx, 142, RULE_alter_table_column_set_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1879;
			Match(ALTER);
			State = 1880;
			Match(TABLE);
			State = 1883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1881;
				Match(IF);
				State = 1882;
				Match(EXISTS);
				}
			}

			State = 1885;
			_localctx.table_name = path_expression();
			State = 1886;
			Match(ALTER);
			State = 1887;
			Match(COLUMN);
			State = 1890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1888;
				Match(IF);
				State = 1889;
				Match(EXISTS);
				}
			}

			State = 1892;
			_localctx.column_name = identifier();
			State = 1893;
			Match(SET);
			State = 1894;
			Match(DATA);
			State = 1895;
			Match(TYPE);
			State = 1896;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_defaultContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_defaultContext alter_table_column_set_default() {
		Alter_table_column_set_defaultContext _localctx = new Alter_table_column_set_defaultContext(Context, State);
		EnterRule(_localctx, 144, RULE_alter_table_column_set_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898;
			Match(ALTER);
			State = 1899;
			Match(TABLE);
			State = 1902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1900;
				Match(IF);
				State = 1901;
				Match(EXISTS);
				}
			}

			State = 1904;
			_localctx.table_name = path_expression();
			State = 1905;
			Match(ALTER);
			State = 1906;
			Match(COLUMN);
			State = 1909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1907;
				Match(IF);
				State = 1908;
				Match(EXISTS);
				}
			}

			State = 1911;
			_localctx.column_name = identifier();
			State = 1912;
			Match(SET);
			State = 1913;
			Match(DEFAULT);
			State = 1914;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_drop_defaultContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_drop_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_drop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_drop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_drop_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_drop_defaultContext alter_table_column_drop_default() {
		Alter_table_column_drop_defaultContext _localctx = new Alter_table_column_drop_defaultContext(Context, State);
		EnterRule(_localctx, 146, RULE_alter_table_column_drop_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1916;
			Match(ALTER);
			State = 1917;
			Match(TABLE);
			State = 1920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1918;
				Match(IF);
				State = 1919;
				Match(EXISTS);
				}
			}

			State = 1922;
			_localctx.table_name = path_expression();
			State = 1923;
			Match(ALTER);
			State = 1924;
			Match(COLUMN);
			State = 1927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1925;
				Match(IF);
				State = 1926;
				Match(EXISTS);
				}
			}

			State = 1929;
			_localctx.column_name = identifier();
			State = 1930;
			Match(DROP);
			State = 1931;
			Match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_viewContext : ParserRuleContext {
		public Path_expressionContext view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_viewContext alter_view() {
		Alter_viewContext _localctx = new Alter_viewContext(Context, State);
		EnterRule(_localctx, 148, RULE_alter_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1933;
			Match(ALTER);
			State = 1934;
			Match(VIEW);
			State = 1937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1935;
				Match(IF);
				State = 1936;
				Match(EXISTS);
				}
			}

			State = 1939;
			_localctx.view_name = path_expression();
			State = 1940;
			Match(SET);
			State = 1941;
			Match(OPTIONS);
			State = 1942;
			Match(OPAR);
			State = 1943;
			option_parameters();
			State = 1944;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_materialized_viewContext : ParserRuleContext {
		public Path_expressionContext materialized_view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_materialized_viewContext alter_materialized_view() {
		Alter_materialized_viewContext _localctx = new Alter_materialized_viewContext(Context, State);
		EnterRule(_localctx, 150, RULE_alter_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946;
			Match(ALTER);
			State = 1947;
			Match(MATERIALIZED);
			State = 1948;
			Match(VIEW);
			State = 1951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1949;
				Match(IF);
				State = 1950;
				Match(EXISTS);
				}
			}

			State = 1953;
			_localctx.materialized_view_name = path_expression();
			State = 1954;
			Match(SET);
			State = 1955;
			Match(OPTIONS);
			State = 1956;
			Match(OPAR);
			State = 1957;
			option_parameters();
			State = 1958;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_organizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION() { return GetToken(BigQueryParser.ORGANIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_organizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_organization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_organization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_organization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_organization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_organizationContext alter_organization() {
		Alter_organizationContext _localctx = new Alter_organizationContext(Context, State);
		EnterRule(_localctx, 152, RULE_alter_organization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1960;
			Match(ALTER);
			State = 1961;
			Match(ORGANIZATION);
			State = 1962;
			Match(SET);
			State = 1963;
			Match(OPTIONS);
			State = 1964;
			Match(OPAR);
			State = 1965;
			option_parameters();
			State = 1966;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_projectContext : ParserRuleContext {
		public Path_expressionContext project_id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROJECT() { return GetToken(BigQueryParser.PROJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Alter_projectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_project; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_project(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_project(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_project(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_projectContext alter_project() {
		Alter_projectContext _localctx = new Alter_projectContext(Context, State);
		EnterRule(_localctx, 154, RULE_alter_project);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968;
			Match(ALTER);
			State = 1969;
			Match(PROJECT);
			State = 1970;
			_localctx.project_id = path_expression();
			State = 1971;
			Match(SET);
			State = 1972;
			Match(OPTIONS);
			State = 1973;
			Match(OPAR);
			State = 1974;
			option_parameters();
			State = 1975;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_bi_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BI_CAPACITY() { return GetToken(BigQueryParser.BI_CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_bi_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_bi_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_bi_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_bi_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_bi_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_bi_capacityContext alter_bi_capacity() {
		Alter_bi_capacityContext _localctx = new Alter_bi_capacityContext(Context, State);
		EnterRule(_localctx, 156, RULE_alter_bi_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1977;
			Match(ALTER);
			State = 1978;
			Match(BI_CAPACITY);
			State = 1979;
			path_expression();
			State = 1980;
			Match(SET);
			State = 1981;
			Match(OPTIONS);
			State = 1982;
			Match(OPAR);
			State = 1983;
			option_parameters();
			State = 1984;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_capacityContext alter_capacity() {
		Alter_capacityContext _localctx = new Alter_capacityContext(Context, State);
		EnterRule(_localctx, 158, RULE_alter_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1986;
			Match(ALTER);
			State = 1987;
			Match(CAPACITY);
			State = 1988;
			path_expression();
			State = 1989;
			Match(SET);
			State = 1990;
			Match(OPTIONS);
			State = 1991;
			Match(OPAR);
			State = 1992;
			option_parameters();
			State = 1993;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_reservationContext alter_reservation() {
		Alter_reservationContext _localctx = new Alter_reservationContext(Context, State);
		EnterRule(_localctx, 160, RULE_alter_reservation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1995;
			Match(ALTER);
			State = 1996;
			Match(RESERVATION);
			State = 1997;
			path_expression();
			State = 1998;
			Match(SET);
			State = 1999;
			Match(OPTIONS);
			State = 2000;
			Match(OPAR);
			State = 2001;
			option_parameters();
			State = 2002;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Undrop_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDROP() { return GetToken(BigQueryParser.UNDROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Undrop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undrop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUndrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUndrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Undrop_schemaContext undrop_schema() {
		Undrop_schemaContext _localctx = new Undrop_schemaContext(Context, State);
		EnterRule(_localctx, 162, RULE_undrop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2004;
			Match(UNDROP);
			State = 2005;
			Match(SCHEMA);
			State = 2009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2006;
				Match(IF);
				State = 2007;
				Match(NOT);
				State = 2008;
				Match(EXISTS);
				}
			}

			State = 2014;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 2011;
				_localctx.project_name = identifier();
				State = 2012;
				Match(DOT);
				}
				break;
			}
			State = 2016;
			_localctx.dataset_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(BigQueryParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(BigQueryParser.RESTRICT, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(Context, State);
		EnterRule(_localctx, 164, RULE_drop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			Match(DROP);
			State = 2020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 2019;
				Match(EXTERNAL);
				}
			}

			State = 2022;
			Match(SCHEMA);
			State = 2025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2023;
				Match(IF);
				State = 2024;
				Match(EXISTS);
				}
			}

			State = 2030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				{
				State = 2027;
				_localctx.project_name = identifier();
				State = 2028;
				Match(DOT);
				}
				break;
			}
			State = 2032;
			_localctx.dataset_name = identifier();
			State = 2034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2033;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 166, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2036;
			Match(DROP);
			State = 2037;
			Match(TABLE);
			State = 2040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2038;
				Match(IF);
				State = 2039;
				Match(EXISTS);
				}
			}

			State = 2042;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_snapshot_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_snapshot_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_snapshot_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_snapshot_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_snapshot_tableContext drop_snapshot_table() {
		Drop_snapshot_tableContext _localctx = new Drop_snapshot_tableContext(Context, State);
		EnterRule(_localctx, 168, RULE_drop_snapshot_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044;
			Match(DROP);
			State = 2045;
			Match(SNAPSHOT);
			State = 2046;
			Match(TABLE);
			State = 2049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2047;
				Match(IF);
				State = 2048;
				Match(EXISTS);
				}
			}

			State = 2051;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(Context, State);
		EnterRule(_localctx, 170, RULE_drop_external_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2053;
			Match(DROP);
			State = 2054;
			Match(EXTERNAL);
			State = 2055;
			Match(TABLE);
			State = 2058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2056;
				Match(IF);
				State = 2057;
				Match(EXISTS);
				}
			}

			State = 2060;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 172, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2062;
			Match(DROP);
			State = 2063;
			Match(VIEW);
			State = 2066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2064;
				Match(IF);
				State = 2065;
				Match(EXISTS);
				}
			}

			State = 2068;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_materialized_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_materialized_viewContext drop_materialized_view() {
		Drop_materialized_viewContext _localctx = new Drop_materialized_viewContext(Context, State);
		EnterRule(_localctx, 174, RULE_drop_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2070;
			Match(DROP);
			State = 2071;
			Match(MATERIALIZED);
			State = 2072;
			Match(VIEW);
			State = 2075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2073;
				Match(IF);
				State = 2074;
				Match(EXISTS);
				}
			}

			State = 2077;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 176, RULE_drop_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			Match(DROP);
			State = 2080;
			Match(FUNCTION);
			State = 2083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2081;
				Match(IF);
				State = 2082;
				Match(EXISTS);
				}
			}

			State = 2093;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 2088;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
				case 1:
					{
					State = 2085;
					_localctx.project_name = identifier();
					State = 2086;
					Match(DOT);
					}
					break;
				}
				State = 2090;
				_localctx.dataset_name = identifier();
				State = 2091;
				Match(DOT);
				}
				break;
			}
			State = 2095;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_table_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_functionContext drop_table_function() {
		Drop_table_functionContext _localctx = new Drop_table_functionContext(Context, State);
		EnterRule(_localctx, 178, RULE_drop_table_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2097;
			Match(DROP);
			State = 2098;
			Match(TABLE);
			State = 2099;
			Match(FUNCTION);
			State = 2102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2100;
				Match(IF);
				State = 2101;
				Match(EXISTS);
				}
			}

			State = 2112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				{
				State = 2107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
				case 1:
					{
					State = 2104;
					_localctx.project_name = identifier();
					State = 2105;
					Match(DOT);
					}
					break;
				}
				State = 2109;
				_localctx.dataset_name = identifier();
				State = 2110;
				Match(DOT);
				}
				break;
			}
			State = 2114;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext procedure_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 180, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116;
			Match(DROP);
			State = 2117;
			Match(PROCEDURE);
			State = 2120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2118;
				Match(IF);
				State = 2119;
				Match(EXISTS);
				}
			}

			State = 2130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				{
				State = 2125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
				case 1:
					{
					State = 2122;
					_localctx.project_name = identifier();
					State = 2123;
					Match(DOT);
					}
					break;
				}
				State = 2127;
				_localctx.dataset_name = identifier();
				State = 2128;
				Match(DOT);
				}
				break;
			}
			State = 2132;
			_localctx.procedure_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_row_access_policyContext : ParserRuleContext {
		public Path_expressionContext row_access_policy_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICIES() { return GetToken(BigQueryParser.POLICIES, 0); }
		public Drop_row_access_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_row_access_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_row_access_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_row_access_policyContext drop_row_access_policy() {
		Drop_row_access_policyContext _localctx = new Drop_row_access_policyContext(Context, State);
		EnterRule(_localctx, 182, RULE_drop_row_access_policy);
		int _la;
		try {
			State = 2153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2134;
				Match(DROP);
				State = 2135;
				Match(ROW);
				State = 2136;
				Match(ACCESS);
				State = 2137;
				Match(POLICY);
				State = 2140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2138;
					Match(IF);
					State = 2139;
					Match(EXISTS);
					}
				}

				State = 2142;
				_localctx.row_access_policy_name = path_expression();
				State = 2143;
				Match(ON);
				State = 2144;
				_localctx.table_name = path_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2146;
				Match(DROP);
				State = 2147;
				Match(ALL);
				State = 2148;
				Match(ROW);
				State = 2149;
				Match(ACCESS);
				State = 2150;
				Match(POLICIES);
				State = 2151;
				Match(ON);
				State = 2152;
				_localctx.table_name = path_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_capacityContext drop_capacity() {
		Drop_capacityContext _localctx = new Drop_capacityContext(Context, State);
		EnterRule(_localctx, 184, RULE_drop_capacity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			Match(DROP);
			State = 2156;
			Match(CAPACITY);
			State = 2159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2157;
				Match(IF);
				State = 2158;
				Match(EXISTS);
				}
			}

			State = 2161;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_reservationContext drop_reservation() {
		Drop_reservationContext _localctx = new Drop_reservationContext(Context, State);
		EnterRule(_localctx, 186, RULE_drop_reservation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2163;
			Match(DROP);
			State = 2164;
			Match(RESERVATION);
			State = 2167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2165;
				Match(IF);
				State = 2166;
				Match(EXISTS);
				}
			}

			State = 2169;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assignmentContext drop_assignment() {
		Drop_assignmentContext _localctx = new Drop_assignmentContext(Context, State);
		EnterRule(_localctx, 188, RULE_drop_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2171;
			Match(DROP);
			State = 2172;
			Match(ASSIGNMENT);
			State = 2175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2173;
				Match(IF);
				State = 2174;
				Match(EXISTS);
				}
			}

			State = 2177;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_search_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_search_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_indexContext drop_search_index() {
		Drop_search_indexContext _localctx = new Drop_search_indexContext(Context, State);
		EnterRule(_localctx, 190, RULE_drop_search_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2179;
			Match(DROP);
			State = 2180;
			Match(SEARCH);
			State = 2181;
			Match(INDEX);
			State = 2184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2182;
				Match(IF);
				State = 2183;
				Match(EXISTS);
				}
			}

			State = 2186;
			_localctx.index_name = path_expression();
			State = 2187;
			Match(ON);
			State = 2188;
			_localctx.table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_vector_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_vector_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_vector_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_vector_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_vector_indexContext drop_vector_index() {
		Drop_vector_indexContext _localctx = new Drop_vector_indexContext(Context, State);
		EnterRule(_localctx, 192, RULE_drop_vector_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190;
			Match(DROP);
			State = 2191;
			Match(SEARCH);
			State = 2192;
			Match(INDEX);
			State = 2195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2193;
				Match(IF);
				State = 2194;
				Match(EXISTS);
				}
			}

			State = 2197;
			_localctx.index_name = path_expression();
			State = 2198;
			Match(ON);
			State = 2199;
			_localctx.table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_column_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public View_columnContext[] view_column() {
			return GetRuleContexts<View_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_columnContext view_column(int i) {
			return GetRuleContext<View_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public View_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterView_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitView_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_column_name_listContext view_column_name_list() {
		View_column_name_listContext _localctx = new View_column_name_listContext(Context, State);
		EnterRule(_localctx, 194, RULE_view_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			view_column();
			State = 2206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2202;
				Match(COMMA);
				State = 2203;
				view_column();
				}
				}
				State = 2208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_columnContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public View_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterView_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitView_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_columnContext view_column() {
		View_columnContext _localctx = new View_columnContext(Context, State);
		EnterRule(_localctx, 196, RULE_view_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2209;
			_localctx.column_name = path_expression();
			State = 2215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2210;
				Match(OPTIONS);
				State = 2211;
				Match(OPAR);
				State = 2212;
				option_parameters();
				State = 2213;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraint_definitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionContext[] column_constraint_definition() {
			return GetRuleContexts<Column_constraint_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionContext column_constraint_definition(int i) {
			return GetRuleContext<Column_constraint_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_constraint_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint_definitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraint_definitionsContext column_constraint_definitions() {
		Column_constraint_definitionsContext _localctx = new Column_constraint_definitionsContext(Context, State);
		EnterRule(_localctx, 198, RULE_column_constraint_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2217;
			column_constraint_definition();
			State = 2222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2218;
				Match(COMMA);
				State = 2219;
				column_constraint_definition();
				}
				}
				State = 2224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraint_definitionContext : ParserRuleContext {
		public IdentifierContext constraint_name;
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_keyContext primary_key() {
			return GetRuleContext<Primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_keyContext[] foreign_key() {
			return GetRuleContexts<Foreign_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_keyContext foreign_key(int i) {
			return GetRuleContext<Foreign_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRAINT() { return GetTokens(BigQueryParser.CONSTRAINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT(int i) {
			return GetToken(BigQueryParser.CONSTRAINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_constraint_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraint_definitionContext column_constraint_definition() {
		Column_constraint_definitionContext _localctx = new Column_constraint_definitionContext(Context, State);
		EnterRule(_localctx, 200, RULE_column_constraint_definition);
		int _la;
		try {
			int _alt;
			State = 2243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2225;
				column_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2226;
				primary_key();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2227;
					Match(CONSTRAINT);
					State = 2228;
					_localctx.constraint_name = identifier();
					}
				}

				State = 2231;
				foreign_key();
				State = 2240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2232;
						Match(COMMA);
						State = 2235;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==CONSTRAINT) {
							{
							State = 2233;
							Match(CONSTRAINT);
							State = 2234;
							_localctx.constraint_name = identifier();
							}
						}

						State = 2237;
						foreign_key();
						}
						} 
					}
					State = 2242;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 202, RULE_column_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2245;
			_localctx.column_name = path_expression();
			State = 2246;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_keyContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPrimary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPrimary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_keyContext primary_key() {
		Primary_keyContext _localctx = new Primary_keyContext(Context, State);
		EnterRule(_localctx, 204, RULE_primary_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2248;
			Match(PRIMARY);
			State = 2249;
			Match(KEY);
			State = 2250;
			Match(OPAR);
			State = 2251;
			_localctx.column_names = path_expressions();
			State = 2252;
			Match(CPAR);
			State = 2253;
			Match(NOT);
			State = 2254;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_keyContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_referenceContext foreign_reference() {
			return GetRuleContext<Foreign_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterForeign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitForeign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_keyContext foreign_key() {
		Foreign_keyContext _localctx = new Foreign_keyContext(Context, State);
		EnterRule(_localctx, 206, RULE_foreign_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2256;
			Match(FOREIGN);
			State = 2257;
			Match(KEY);
			State = 2258;
			Match(OPAR);
			State = 2259;
			_localctx.column_names = path_expressions();
			State = 2260;
			Match(CPAR);
			State = 2261;
			foreign_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_referenceContext : ParserRuleContext {
		public IdentifierContext primary_key_table;
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Foreign_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterForeign_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitForeign_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_referenceContext foreign_reference() {
		Foreign_referenceContext _localctx = new Foreign_referenceContext(Context, State);
		EnterRule(_localctx, 208, RULE_foreign_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2263;
			Match(REFERENCES);
			State = 2264;
			_localctx.primary_key_table = identifier();
			State = 2265;
			Match(OPAR);
			State = 2266;
			_localctx.column_names = path_expressions();
			State = 2267;
			Match(CPAR);
			State = 2268;
			Match(NOT);
			State = 2269;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(Context, State);
		EnterRule(_localctx, 210, RULE_create_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271;
			Match(CREATE);
			State = 2272;
			Match(SCHEMA);
			State = 2276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2273;
				Match(IF);
				State = 2274;
				Match(NOT);
				State = 2275;
				Match(EXISTS);
				}
			}

			State = 2281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 2278;
				_localctx.project_name = identifier();
				State = 2279;
				Match(DOT);
				}
				break;
			}
			State = 2283;
			_localctx.dataset_name = identifier();
			State = 2287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 2284;
				Match(DEFAULT);
				State = 2285;
				Match(COLLATE);
				State = 2286;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 2294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2289;
				Match(OPTIONS);
				State = 2290;
				Match(OPAR);
				State = 2291;
				option_parameters();
				State = 2292;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expr_tailContext query_expr_tail() {
			return GetRuleContext<Query_expr_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_recursive_cteContext[] non_recursive_cte() {
			return GetRuleContexts<Non_recursive_cteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_recursive_cteContext non_recursive_cte(int i) {
			return GetRuleContext<Non_recursive_cteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_cteContext[] recursive_cte() {
			return GetRuleContexts<Recursive_cteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_cteContext recursive_cte(int i) {
			return GetRuleContext<Recursive_cteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_operation_tailContext set_operation_tail() {
			return GetRuleContext<Set_operation_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(BigQueryParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		return query_expression(0);
	}

	private Query_expressionContext query_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Query_expressionContext _localctx = new Query_expressionContext(Context, _parentState);
		Query_expressionContext _prevctx = _localctx;
		int _startState = 212;
		EnterRecursionRule(_localctx, 212, RULE_query_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 2297;
				Match(WITH);
				State = 2299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RECURSIVE) {
					{
					State = 2298;
					Match(RECURSIVE);
					}
				}

				State = 2303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
				case 1:
					{
					State = 2301;
					non_recursive_cte();
					}
					break;
				case 2:
					{
					State = 2302;
					recursive_cte();
					}
					break;
				}
				State = 2312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2305;
					Match(COMMA);
					State = 2308;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
					case 1:
						{
						State = 2306;
						non_recursive_cte();
						}
						break;
					case 2:
						{
						State = 2307;
						recursive_cte();
						}
						break;
					}
					}
					}
					State = 2314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2323;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
				case 1:
					{
					State = 2315;
					select();
					}
					break;
				case 2:
					{
					State = 2316;
					Match(OPAR);
					State = 2317;
					query_expression(0);
					State = 2318;
					Match(CPAR);
					}
					break;
				case 3:
					{
					State = 2320;
					query_expression(0);
					State = 2321;
					set_operation_tail();
					}
					break;
				}
				State = 2325;
				query_expr_tail();
				}
				break;
			case SELECT:
				{
				State = 2327;
				select();
				State = 2328;
				query_expr_tail();
				}
				break;
			case OPAR:
				{
				State = 2330;
				Match(OPAR);
				State = 2331;
				query_expression(0);
				State = 2332;
				Match(CPAR);
				State = 2333;
				query_expr_tail();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Query_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_query_expression);
					State = 2337;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2338;
					set_operation_tail();
					State = 2339;
					query_expr_tail();
					}
					} 
				}
				State = 2345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Query_expr_tailContext : ParserRuleContext {
		public ExpressionContext order_by;
		public ExpressionContext skip_rows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(BigQueryParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(BigQueryParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(BigQueryParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(BigQueryParser.DESC, i);
		}
		public Query_expr_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expr_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expr_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expr_tailContext query_expr_tail() {
		Query_expr_tailContext _localctx = new Query_expr_tailContext(Context, State);
		EnterRule(_localctx, 214, RULE_query_expr_tail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 2346;
				Match(ORDER);
				State = 2347;
				Match(BY);
				State = 2348;
				_localctx.order_by = expression(0);
				State = 2350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
				case 1:
					{
					State = 2349;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 2359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2352;
						Match(COMMA);
						State = 2353;
						expression(0);
						State = 2355;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
						case 1:
							{
							State = 2354;
							_la = TokenStream.LA(1);
							if ( !(_la==ASC || _la==DESC) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						}
						} 
					}
					State = 2361;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
				}
				}
				break;
			}
			State = 2370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				{
				State = 2364;
				Match(LIMIT);
				State = 2365;
				expression(0);
				State = 2368;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
				case 1:
					{
					State = 2366;
					Match(OFFSET);
					State = 2367;
					_localctx.skip_rows = expression(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_operation_tailContext : ParserRuleContext {
		public Path_expressionsContext column_list_3;
		public Path_expressionsContext column_list_4;
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(BigQueryParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BigQueryParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORRESPONDING() { return GetToken(BigQueryParser.CORRESPONDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(BigQueryParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Set_operation_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operation_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSet_operation_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSet_operation_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_operation_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_operation_tailContext set_operation_tail() {
		Set_operation_tailContext _localctx = new Set_operation_tailContext(Context, State);
		EnterRule(_localctx, 216, RULE_set_operation_tail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				{
				State = 2372;
				Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
				{
				State = 2373;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==LEFT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2374;
					Match(OUTER);
					}
				}

				}
				break;
			case EXCEPT:
			case INTERSECT:
			case UNION:
				break;
			default:
				break;
			}
			State = 2385;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 2379;
				Match(UNION);
				State = 2380;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case INTERSECT:
				{
				State = 2381;
				Match(INTERSECT);
				State = 2382;
				Match(DISTINCT);
				}
				break;
			case EXCEPT:
				{
				State = 2383;
				Match(EXCEPT);
				State = 2384;
				Match(DISTINCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY || _la==STRICT || _la==CORRESPONDING) {
				{
				State = 2407;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BY:
					{
					State = 2387;
					Match(BY);
					State = 2388;
					Match(NAME);
					State = 2394;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ON) {
						{
						State = 2389;
						Match(ON);
						State = 2390;
						Match(OPAR);
						State = 2391;
						_localctx.column_list_3 = path_expressions();
						State = 2392;
						Match(CPAR);
						}
					}

					}
					break;
				case STRICT:
				case CORRESPONDING:
					{
					State = 2397;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRICT) {
						{
						State = 2396;
						Match(STRICT);
						}
					}

					State = 2399;
					Match(CORRESPONDING);
					State = 2405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BY) {
						{
						State = 2400;
						Match(BY);
						State = 2401;
						Match(OPAR);
						State = 2402;
						_localctx.column_list_4 = path_expressions();
						State = 2403;
						Match(CPAR);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 2411;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_recursive_cteContext : ParserRuleContext {
		public IdentifierContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Non_recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNon_recursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNon_recursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_recursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_recursive_cteContext non_recursive_cte() {
		Non_recursive_cteContext _localctx = new Non_recursive_cteContext(Context, State);
		EnterRule(_localctx, 218, RULE_non_recursive_cte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2413;
			_localctx.cte_name = identifier();
			State = 2414;
			Match(AS);
			State = 2415;
			Match(OPAR);
			State = 2416;
			query_expression(0);
			State = 2417;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_cteContext : ParserRuleContext {
		public IdentifierContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_union_operationContext recursive_union_operation() {
			return GetRuleContext<Recursive_union_operationContext>(0);
		}
		public Recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_cteContext recursive_cte() {
		Recursive_cteContext _localctx = new Recursive_cteContext(Context, State);
		EnterRule(_localctx, 220, RULE_recursive_cte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2419;
			_localctx.cte_name = identifier();
			State = 2420;
			Match(AS);
			{
			State = 2421;
			recursive_union_operation();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_union_operationContext : ParserRuleContext {
		public Query_expressionContext base_term;
		public Query_expressionContext recursive_term;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public Recursive_union_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_union_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRecursive_union_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRecursive_union_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_union_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_union_operationContext recursive_union_operation() {
		Recursive_union_operationContext _localctx = new Recursive_union_operationContext(Context, State);
		EnterRule(_localctx, 222, RULE_recursive_union_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2423;
			_localctx.base_term = query_expression(0);
			State = 2424;
			Match(UNION);
			State = 2425;
			Match(ALL);
			State = 2426;
			_localctx.recursive_term = query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(BigQueryParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Differential_privacy_clauseContext differential_privacy_clause() {
			return GetRuleContext<Differential_privacy_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_clausesContext from_clauses() {
			return GetRuleContext<From_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_specificationContext group_by_specification() {
			return GetRuleContext<Group_by_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY() { return GetToken(BigQueryParser.QUALIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(BigQueryParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(BigQueryParser.VALUE, 0); }
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 224, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2428;
			Match(SELECT);
			State = 2431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				{
				State = 2429;
				Match(WITH);
				State = 2430;
				differential_privacy_clause();
				}
				break;
			}
			State = 2434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 2433;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				{
				State = 2436;
				Match(AS);
				State = 2437;
				_la = TokenStream.LA(1);
				if ( !(_la==STRUCT || _la==VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2440;
			select_list();
			State = 2443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 2441;
				Match(FROM);
				State = 2442;
				from_clauses();
				}
				break;
			}
			State = 2447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 2445;
				Match(WHERE);
				State = 2446;
				expression(0);
				}
				break;
			}
			State = 2452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 2449;
				Match(GROUP);
				State = 2450;
				Match(BY);
				State = 2451;
				group_by_specification();
				}
				break;
			}
			State = 2456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 2454;
				Match(HAVING);
				State = 2455;
				expression(0);
				}
				break;
			}
			State = 2460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				{
				State = 2458;
				Match(QUALIFY);
				State = 2459;
				expression(0);
				}
				break;
			}
			State = 2464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 2462;
				Match(WINDOW);
				State = 2463;
				window_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_specificationContext : ParserRuleContext {
		public ExpressionsContext groupable_items;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_specificationContext grouping_sets_specification() {
			return GetRuleContext<Grouping_sets_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_specificationContext rollup_specification() {
			return GetRuleContext<Rollup_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Group_by_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_specificationContext group_by_specification() {
		Group_by_specificationContext _localctx = new Group_by_specificationContext(Context, State);
		EnterRule(_localctx, 226, RULE_group_by_specification);
		try {
			State = 2473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2466;
				_localctx.groupable_items = expressions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2467;
				Match(ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2468;
				grouping_sets_specification();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2469;
				rollup_specification();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2470;
				cube_specification();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2471;
				Match(OPAR);
				State = 2472;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(BigQueryParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(BigQueryParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Grouping_sets_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_specificationContext grouping_sets_specification() {
		Grouping_sets_specificationContext _localctx = new Grouping_sets_specificationContext(Context, State);
		EnterRule(_localctx, 228, RULE_grouping_sets_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475;
			Match(GROUP);
			State = 2476;
			Match(BY);
			State = 2477;
			Match(GROUPING);
			State = 2478;
			Match(SETS);
			State = 2479;
			Match(OPAR);
			State = 2480;
			grouping_list();
			State = 2481;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_list_itemContext[] grouping_list_item() {
			return GetRuleContexts<Grouping_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_list_itemContext grouping_list_item(int i) {
			return GetRuleContext<Grouping_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Grouping_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_listContext grouping_list() {
		Grouping_listContext _localctx = new Grouping_listContext(Context, State);
		EnterRule(_localctx, 230, RULE_grouping_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2483;
			grouping_list_item();
			State = 2488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2484;
				Match(COMMA);
				State = 2485;
				grouping_list_item();
				}
				}
				State = 2490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_list_itemContext : ParserRuleContext {
		public ExpressionContext groupable_item;
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_specificationContext rollup_specification() {
			return GetRuleContext<Rollup_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Groupable_item_setContext groupable_item_set() {
			return GetRuleContext<Groupable_item_setContext>(0);
		}
		public Grouping_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_list_itemContext grouping_list_item() {
		Grouping_list_itemContext _localctx = new Grouping_list_itemContext(Context, State);
		EnterRule(_localctx, 232, RULE_grouping_list_item);
		try {
			State = 2495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2491;
				rollup_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2492;
				cube_specification();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2493;
				_localctx.groupable_item = expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2494;
				groupable_item_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(BigQueryParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Cube_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCube_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCube_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cube_specificationContext cube_specification() {
		Cube_specificationContext _localctx = new Cube_specificationContext(Context, State);
		EnterRule(_localctx, 234, RULE_cube_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2497;
			Match(GROUP);
			State = 2498;
			Match(BY);
			State = 2499;
			Match(CUBE);
			State = 2500;
			Match(OPAR);
			State = 2501;
			grouping_list();
			State = 2502;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupable_item_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Groupable_item_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupable_item_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGroupable_item_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGroupable_item_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupable_item_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupable_item_setContext groupable_item_set() {
		Groupable_item_setContext _localctx = new Groupable_item_setContext(Context, State);
		EnterRule(_localctx, 236, RULE_groupable_item_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2504;
			Match(OPAR);
			State = 2505;
			expressions();
			State = 2506;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(BigQueryParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Rollup_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRollup_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRollup_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_specificationContext rollup_specification() {
		Rollup_specificationContext _localctx = new Rollup_specificationContext(Context, State);
		EnterRule(_localctx, 238, RULE_rollup_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2508;
			Match(GROUP);
			State = 2509;
			Match(BY);
			State = 2510;
			Match(ROLLUP);
			State = 2511;
			Match(OPAR);
			State = 2512;
			grouping_list();
			State = 2513;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_window_expressionContext[] named_window_expression() {
			return GetRuleContexts<Named_window_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_window_expressionContext named_window_expression(int i) {
			return GetRuleContext<Named_window_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 240, RULE_window_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2515;
			named_window_expression();
			State = 2520;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,277,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2516;
					Match(COMMA);
					State = 2517;
					named_window_expression();
					}
					} 
				}
				State = 2522;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,277,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_window_expressionContext : ParserRuleContext {
		public Path_expressionContext named_window_1;
		public Path_expressionContext named_window_2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Named_window_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_window_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_window_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_window_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_window_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_window_expressionContext named_window_expression() {
		Named_window_expressionContext _localctx = new Named_window_expressionContext(Context, State);
		EnterRule(_localctx, 242, RULE_named_window_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2523;
			_localctx.named_window_1 = path_expression();
			State = 2524;
			Match(AS);
			State = 2530;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 2525;
				_localctx.named_window_2 = path_expression();
				}
				break;
			case OPAR:
				{
				State = 2526;
				Match(OPAR);
				State = 2527;
				window_specification();
				State = 2528;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		public Path_expressionContext named_window;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expressions_asc_descContext expressions_asc_desc() {
			return GetRuleContext<Expressions_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_clauseContext window_frame_clause() {
			return GetRuleContext<Window_frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 244, RULE_window_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 2532;
				_localctx.named_window = path_expression();
				}
			}

			State = 2538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2535;
				Match(PARTITION);
				State = 2536;
				Match(BY);
				State = 2537;
				expressions();
				}
			}

			State = 2543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 2540;
				Match(ORDER);
				State = 2541;
				Match(BY);
				State = 2542;
				expressions_asc_desc();
				}
			}

			State = 2546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 2545;
				window_frame_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(BigQueryParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_startContext frame_start() {
			return GetRuleContext<Frame_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_betweenContext frame_between() {
			return GetRuleContext<Frame_betweenContext>(0);
		}
		public Window_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_clauseContext window_frame_clause() {
		Window_frame_clauseContext _localctx = new Window_frame_clauseContext(Context, State);
		EnterRule(_localctx, 246, RULE_window_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2548;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				{
				State = 2549;
				frame_start();
				}
				break;
			case 2:
				{
				State = 2550;
				frame_between();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		public Frame_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_startContext frame_start() {
		Frame_startContext _localctx = new Frame_startContext(Context, State);
		EnterRule(_localctx, 248, RULE_frame_start);
		int _la;
		try {
			State = 2562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2553;
				Match(UNBOUNDED);
				State = 2554;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2555;
				expression(0);
				State = 2556;
				Match(PRECEDING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CURRENT) {
					{
					State = 2558;
					Match(CURRENT);
					State = 2559;
					Match(ROW);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_betweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_aContext frame_end_a() {
			return GetRuleContext<Frame_end_aContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_bContext frame_end_b() {
			return GetRuleContext<Frame_end_bContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_cContext frame_end_c() {
			return GetRuleContext<Frame_end_cContext>(0);
		}
		public Frame_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_between(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_betweenContext frame_between() {
		Frame_betweenContext _localctx = new Frame_betweenContext(Context, State);
		EnterRule(_localctx, 250, RULE_frame_between);
		try {
			State = 2586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2564;
				Match(BETWEEN);
				State = 2565;
				Match(UNBOUNDED);
				State = 2566;
				Match(PRECEDING);
				State = 2567;
				Match(AND);
				State = 2568;
				frame_end_a();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2569;
				Match(BETWEEN);
				State = 2570;
				expression(0);
				State = 2571;
				Match(PRECEDING);
				State = 2572;
				Match(AND);
				State = 2573;
				frame_end_a();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2575;
				Match(BETWEEN);
				State = 2576;
				Match(CURRENT);
				State = 2577;
				Match(ROW);
				State = 2578;
				Match(AND);
				State = 2579;
				frame_end_b();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2580;
				Match(BETWEEN);
				State = 2581;
				expression(0);
				State = 2582;
				Match(FOLLOWING);
				State = 2583;
				Match(AND);
				State = 2584;
				frame_end_c();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_aContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_a(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_aContext frame_end_a() {
		Frame_end_aContext _localctx = new Frame_end_aContext(Context, State);
		EnterRule(_localctx, 252, RULE_frame_end_a);
		try {
			State = 2598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2588;
				expression(0);
				State = 2589;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2591;
				Match(CURRENT);
				State = 2592;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2593;
				expression(0);
				State = 2594;
				Match(FOLLOWING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2596;
				Match(UNBOUNDED);
				State = 2597;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_bContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_bContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_b; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_b(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_b(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_b(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_bContext frame_end_b() {
		Frame_end_bContext _localctx = new Frame_end_bContext(Context, State);
		EnterRule(_localctx, 254, RULE_frame_end_b);
		try {
			State = 2607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2600;
				Match(CURRENT);
				State = 2601;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2602;
				expression(0);
				State = 2603;
				Match(FOLLOWING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2605;
				Match(UNBOUNDED);
				State = 2606;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_cContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_cContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_c(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_cContext frame_end_c() {
		Frame_end_cContext _localctx = new Frame_end_cContext(Context, State);
		EnterRule(_localctx, 256, RULE_frame_end_c);
		try {
			State = 2614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2609;
				expression(0);
				State = 2610;
				Match(FOLLOWING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2612;
				Match(UNBOUNDED);
				State = 2613;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Differential_privacy_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL_PRIVACY() { return GetToken(BigQueryParser.DIFFERENTIAL_PRIVACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Differential_privacy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_differential_privacy_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDifferential_privacy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDifferential_privacy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferential_privacy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Differential_privacy_clauseContext differential_privacy_clause() {
		Differential_privacy_clauseContext _localctx = new Differential_privacy_clauseContext(Context, State);
		EnterRule(_localctx, 258, RULE_differential_privacy_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2616;
			Match(DIFFERENTIAL_PRIVACY);
			State = 2617;
			Match(OPTIONS);
			State = 2618;
			Match(OPAR);
			State = 2619;
			option_parameters();
			State = 2620;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext[] from_clause() {
			return GetRuleContexts<From_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause(int i) {
			return GetRuleContext<From_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public From_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clausesContext from_clauses() {
		From_clausesContext _localctx = new From_clausesContext(Context, State);
		EnterRule(_localctx, 260, RULE_from_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2622;
			from_clause();
			State = 2627;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2623;
					Match(COMMA);
					State = 2624;
					from_clause();
					}
					} 
				}
				State = 2629;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext from_item() {
			return GetRuleContext<From_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pivot_operatorContext pivot_operator() {
			return GetRuleContext<Pivot_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unpivot_operatorContext unpivot_operator() {
			return GetRuleContext<Unpivot_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_operatorContext tablesample_operator() {
			return GetRuleContext<Tablesample_operatorContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 262, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2630;
			from_item(0);
			State = 2633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				{
				State = 2631;
				pivot_operator();
				}
				break;
			case 2:
				{
				State = 2632;
				unpivot_operator();
				}
				break;
			}
			State = 2636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				{
				State = 2635;
				tablesample_operator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_itemContext : ParserRuleContext {
		public IdentifierContext table_name;
		public ExpressionContext timestamp_expression;
		public Path_expressionContext field_path;
		public Path_expressionContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext[] from_item() {
			return GetRuleContexts<From_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext from_item(int i) {
			return GetRuleContext<From_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cross_join_operatorContext cross_join_operator() {
			return GetRuleContext<Cross_join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Condition_join_operatorContext condition_join_operator() {
			return GetRuleContext<Condition_join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_conditionContext join_condition() {
			return GetRuleContext<Join_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unnest_operatorContext unnest_operator() {
			return GetRuleContext<Unnest_operatorContext>(0);
		}
		public From_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_itemContext from_item() {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		From_itemContext _localctx = new From_itemContext(Context, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 264;
		EnterRecursionRule(_localctx, 264, RULE_from_item, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				{
				State = 2639;
				_localctx.table_name = identifier();
				State = 2641;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
				case 1:
					{
					State = 2640;
					as_alias();
					}
					break;
				}
				State = 2648;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
				case 1:
					{
					State = 2643;
					Match(FOR);
					State = 2644;
					Match(SYSTEM_TIME);
					State = 2645;
					Match(AS);
					State = 2646;
					Match(OF);
					State = 2647;
					_localctx.timestamp_expression = expression(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2650;
				Match(OPAR);
				State = 2660;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
				case 1:
					{
					State = 2651;
					from_item(0);
					State = 2652;
					cross_join_operator();
					State = 2653;
					from_item(0);
					}
					break;
				case 2:
					{
					State = 2655;
					from_item(0);
					State = 2656;
					condition_join_operator();
					State = 2657;
					from_item(0);
					State = 2658;
					join_condition();
					}
					break;
				}
				State = 2662;
				Match(CPAR);
				}
				break;
			case 3:
				{
				State = 2664;
				Match(OPAR);
				State = 2665;
				query_expression(0);
				State = 2666;
				Match(CPAR);
				State = 2668;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
				case 1:
					{
					State = 2667;
					as_alias();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 2670;
				_localctx.field_path = path_expression();
				}
				break;
			case 5:
				{
				State = 2671;
				unnest_operator();
				}
				break;
			case 6:
				{
				State = 2672;
				_localctx.cte_name = path_expression();
				State = 2674;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
				case 1:
					{
					State = 2673;
					as_alias();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2689;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,300,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2687;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
					case 1:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_from_item);
						State = 2678;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 2679;
						cross_join_operator();
						State = 2680;
						from_item(8);
						}
						break;
					case 2:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_from_item);
						State = 2682;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 2683;
						condition_join_operator();
						State = 2684;
						from_item(0);
						State = 2685;
						join_condition();
						}
						break;
					}
					} 
				}
				State = 2691;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,300,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unnest_operatorContext : ParserRuleContext {
		public ExpressionContext array;
		public Path_expressionContext array_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		public Unnest_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnest_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUnnest_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUnnest_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnest_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unnest_operatorContext unnest_operator() {
		Unnest_operatorContext _localctx = new Unnest_operatorContext(Context, State);
		EnterRule(_localctx, 266, RULE_unnest_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNNEST:
				{
				State = 2692;
				Match(UNNEST);
				State = 2693;
				Match(OPAR);
				State = 2694;
				_localctx.array = expression(0);
				State = 2695;
				Match(CPAR);
				State = 2697;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
				case 1:
					{
					State = 2696;
					as_alias();
					}
					break;
				}
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 2699;
				_localctx.array_path = path_expression();
				State = 2701;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
				case 1:
					{
					State = 2700;
					as_alias();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				State = 2705;
				Match(WITH);
				State = 2706;
				Match(OFFSET);
				State = 2708;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
				case 1:
					{
					State = 2707;
					as_alias();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(BigQueryParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		public Cross_join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCross_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCross_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCross_join_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cross_join_operatorContext cross_join_operator() {
		Cross_join_operatorContext _localctx = new Cross_join_operatorContext(Context, State);
		EnterRule(_localctx, 268, RULE_cross_join_operator);
		try {
			State = 2715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2712;
				Match(CROSS);
				State = 2713;
				Match(JOIN);
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2714;
				Match(COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BigQueryParser.RIGHT, 0); }
		public Condition_join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCondition_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCondition_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_join_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_join_operatorContext condition_join_operator() {
		Condition_join_operatorContext _localctx = new Condition_join_operatorContext(Context, State);
		EnterRule(_localctx, 270, RULE_condition_join_operator);
		int _la;
		try {
			State = 2736;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER) {
					{
					State = 2717;
					Match(INNER);
					}
				}

				State = 2720;
				Match(JOIN);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2721;
				Match(FULL);
				State = 2723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2722;
					Match(OUTER);
					}
				}

				State = 2725;
				Match(JOIN);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2726;
				Match(LEFT);
				State = 2728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2727;
					Match(OUTER);
					}
				}

				State = 2730;
				Match(JOIN);
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2731;
				Match(RIGHT);
				State = 2733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2732;
					Match(OUTER);
					}
				}

				State = 2735;
				Match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public On_clauseContext on_clause() {
			return GetRuleContext<On_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterJoin_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitJoin_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_conditionContext join_condition() {
		Join_conditionContext _localctx = new Join_conditionContext(Context, State);
		EnterRule(_localctx, 272, RULE_join_condition);
		try {
			State = 2740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2738;
				on_clause();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2739;
				using_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public On_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOn_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOn_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_clauseContext on_clause() {
		On_clauseContext _localctx = new On_clauseContext(Context, State);
		EnterRule(_localctx, 274, RULE_on_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2742;
			Match(ON);
			State = 2743;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		public Path_expressionsContext column_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 276, RULE_using_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2745;
			Match(USING);
			State = 2746;
			Match(OPAR);
			State = 2747;
			_localctx.column_list = path_expressions();
			State = 2748;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_operatorContext : ParserRuleContext {
		public IdentifierContext input_column;
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(BigQueryParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expressions_as_aliasContext expressions_as_alias() {
			return GetRuleContext<Expressions_as_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public Pivot_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_operatorContext pivot_operator() {
		Pivot_operatorContext _localctx = new Pivot_operatorContext(Context, State);
		EnterRule(_localctx, 278, RULE_pivot_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2750;
			Match(PIVOT);
			State = 2751;
			Match(OPAR);
			State = 2752;
			function_call();
			State = 2754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 2753;
				as_alias();
				}
			}

			State = 2763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2756;
				Match(COMMA);
				State = 2757;
				function_call();
				State = 2759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
					{
					State = 2758;
					as_alias();
					}
				}

				}
				}
				State = 2765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2766;
			Match(FOR);
			State = 2767;
			_localctx.input_column = identifier();
			State = 2768;
			Match(IN);
			State = 2769;
			Match(OPAR);
			State = 2770;
			expressions_as_alias();
			State = 2771;
			Match(CPAR);
			State = 2772;
			Match(CPAR);
			State = 2775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				{
				State = 2773;
				Match(AS);
				State = 2774;
				_localctx.alias = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_operatorContext : ParserRuleContext {
		public As_aliasContext unpivot_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(BigQueryParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_column_unpivotContext single_column_unpivot() {
			return GetRuleContext<Single_column_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multi_column_unpivotContext multi_column_unpivot() {
			return GetRuleContext<Multi_column_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BigQueryParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(BigQueryParser.EXCLUDE, 0); }
		public Unpivot_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_operatorContext unpivot_operator() {
		Unpivot_operatorContext _localctx = new Unpivot_operatorContext(Context, State);
		EnterRule(_localctx, 280, RULE_unpivot_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2777;
			Match(UNPIVOT);
			State = 2782;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				{
				State = 2778;
				Match(INCLUDE);
				State = 2779;
				Match(NULLS);
				}
				break;
			case EXCLUDE:
				{
				State = 2780;
				Match(EXCLUDE);
				State = 2781;
				Match(NULLS);
				}
				break;
			case OPAR:
				break;
			default:
				break;
			}
			State = 2784;
			Match(OPAR);
			State = 2787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				{
				State = 2785;
				single_column_unpivot();
				}
				break;
			case 2:
				{
				State = 2786;
				multi_column_unpivot();
				}
				break;
			}
			State = 2789;
			Match(CPAR);
			State = 2790;
			_localctx.unpivot_alias = as_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_column_unpivotContext : ParserRuleContext {
		public ExpressionsContext values_column;
		public Path_expressionContext name_column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Columns_to_unpivotContext columns_to_unpivot() {
			return GetRuleContext<Columns_to_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Single_column_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_column_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSingle_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSingle_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_column_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_column_unpivotContext single_column_unpivot() {
		Single_column_unpivotContext _localctx = new Single_column_unpivotContext(Context, State);
		EnterRule(_localctx, 282, RULE_single_column_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2792;
			_localctx.values_column = expressions();
			State = 2793;
			Match(FOR);
			State = 2794;
			_localctx.name_column = path_expression();
			State = 2795;
			Match(IN);
			State = 2796;
			Match(OPAR);
			State = 2797;
			columns_to_unpivot();
			State = 2798;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_column_unpivotContext : ParserRuleContext {
		public Path_expressionContext name_column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_sets_to_unpivotContext column_sets_to_unpivot() {
			return GetRuleContext<Column_sets_to_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Multi_column_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_column_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMulti_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMulti_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_column_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_column_unpivotContext multi_column_unpivot() {
		Multi_column_unpivotContext _localctx = new Multi_column_unpivotContext(Context, State);
		EnterRule(_localctx, 284, RULE_multi_column_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2800;
			Match(OPAR);
			State = 2801;
			expressions();
			State = 2802;
			Match(CPAR);
			State = 2803;
			Match(FOR);
			State = 2804;
			_localctx.name_column = path_expression();
			State = 2805;
			Match(IN);
			State = 2806;
			Match(OPAR);
			State = 2807;
			column_sets_to_unpivot();
			State = 2808;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Columns_to_unpivotContext : ParserRuleContext {
		public IdentifierContext row_value_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Columns_to_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns_to_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumns_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumns_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns_to_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Columns_to_unpivotContext columns_to_unpivot() {
		Columns_to_unpivotContext _localctx = new Columns_to_unpivotContext(Context, State);
		EnterRule(_localctx, 286, RULE_columns_to_unpivot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2810;
			expression(0);
			State = 2812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 2811;
				as_alias();
				}
			}

			State = 2821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2814;
				Match(COMMA);
				State = 2815;
				expression(0);
				State = 2817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
					{
					State = 2816;
					_localctx.row_value_alias = identifier();
					}
				}

				}
				}
				State = 2823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_sets_to_unpivotContext : ParserRuleContext {
		public IdentifierContext row_value_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_sets_to_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_sets_to_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_sets_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_sets_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_sets_to_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_sets_to_unpivotContext column_sets_to_unpivot() {
		Column_sets_to_unpivotContext _localctx = new Column_sets_to_unpivotContext(Context, State);
		EnterRule(_localctx, 288, RULE_column_sets_to_unpivot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824;
			Match(OPAR);
			State = 2825;
			expression(0);
			State = 2827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 2826;
				as_alias();
				}
			}

			State = 2836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2829;
				Match(COMMA);
				State = 2830;
				expression(0);
				State = 2832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
					{
					State = 2831;
					_localctx.row_value_alias = identifier();
					}
				}

				}
				}
				State = 2838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2839;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_operatorContext : ParserRuleContext {
		public ExpressionContext percent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(BigQueryParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(BigQueryParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BigQueryParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Tablesample_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTablesample_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTablesample_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablesample_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_operatorContext tablesample_operator() {
		Tablesample_operatorContext _localctx = new Tablesample_operatorContext(Context, State);
		EnterRule(_localctx, 290, RULE_tablesample_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2841;
			Match(TABLESAMPLE);
			State = 2842;
			Match(SYSTEM);
			State = 2843;
			Match(OPAR);
			State = 2844;
			_localctx.percent = expression(0);
			State = 2845;
			Match(PERCENT);
			State = 2846;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Option_parameterContext[] option_parameter() {
			return GetRuleContexts<Option_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parameterContext option_parameter(int i) {
			return GetRuleContext<Option_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Option_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOption_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOption_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_parametersContext option_parameters() {
		Option_parametersContext _localctx = new Option_parametersContext(Context, State);
		EnterRule(_localctx, 292, RULE_option_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2848;
			option_parameter();
			State = 2853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2849;
				Match(COMMA);
				State = 2850;
				option_parameter();
				}
				}
				State = 2855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Option_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOption_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOption_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_parameterContext option_parameter() {
		Option_parameterContext _localctx = new Option_parameterContext(Context, State);
		EnterRule(_localctx, 294, RULE_option_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2856;
			identifier();
			State = 2857;
			Match(EQ);
			State = 2858;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_itemContext[] select_list_item() {
			return GetRuleContexts<Select_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_itemContext select_list_item(int i) {
			return GetRuleContext<Select_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 296, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2860;
			select_list_item();
			State = 2865;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2861;
					Match(COMMA);
					State = 2862;
					select_list_item();
					}
					} 
				}
				State = 2867;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,326,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_allContext select_all() {
			return GetRuleContext<Select_allContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		public Select_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_itemContext select_list_item() {
		Select_list_itemContext _localctx = new Select_list_itemContext(Context, State);
		EnterRule(_localctx, 298, RULE_select_list_item);
		try {
			State = 2873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2868;
				select_all();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2869;
				expression(0);
				State = 2871;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
				case 1:
					{
					State = 2870;
					as_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_allContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_column_namesContext as_column_names() {
			return GetRuleContext<As_column_namesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Select_allContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_all(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_allContext select_all() {
		Select_allContext _localctx = new Select_allContext(Context, State);
		EnterRule(_localctx, 300, RULE_select_all);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -16692222L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1117455657541304321L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 2251799813685247L) != 0)) {
				{
				State = 2875;
				expression(0);
				State = 2876;
				Match(DOT);
				}
			}

			State = 2880;
			Match(STAR);
			State = 2886;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				{
				State = 2881;
				Match(EXCEPT);
				State = 2882;
				Match(OPAR);
				State = 2883;
				_localctx.column_names = path_expressions();
				State = 2884;
				Match(CPAR);
				}
				break;
			}
			State = 2893;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				{
				State = 2888;
				Match(REPLACE);
				State = 2889;
				Match(OPAR);
				State = 2890;
				as_column_names();
				State = 2891;
				Match(CPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BigQueryParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(BigQueryParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNOT() { return GetToken(BigQueryParser.BNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_Context case_() {
			return GetRuleContext<Case_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoalesceContext coalesce() {
			return GetRuleContext<CoalesceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_Context if_() {
			return GetRuleContext<If_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfnullContext ifnull() {
			return GetRuleContext<IfnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullifContext nullif() {
			return GetRuleContext<NullifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BigQueryParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(BigQueryParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(BigQueryParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(BigQueryParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(BigQueryParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(BigQueryParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND() { return GetToken(BigQueryParser.BAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BXOR() { return GetToken(BigQueryParser.BXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR() { return GetToken(BigQueryParser.BOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(BigQueryParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(BigQueryParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(BigQueryParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BigQueryParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(BigQueryParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBR() { return GetToken(BigQueryParser.OBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBR() { return GetToken(BigQueryParser.CBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 302;
		EnterRecursionRule(_localctx, 302, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
			case 1:
				{
				State = 2896;
				Match(OPAR);
				State = 2897;
				expression(0);
				State = 2898;
				Match(CPAR);
				}
				break;
			case 2:
				{
				State = 2900;
				select();
				}
				break;
			case 3:
				{
				State = 2901;
				path_expression();
				}
				break;
			case 4:
				{
				State = 2902;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3074L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2903;
				expression(26);
				}
				break;
			case 5:
				{
				State = 2904;
				Match(NOT);
				State = 2905;
				expression(16);
				}
				break;
			case 6:
				{
				State = 2906;
				Match(EXISTS);
				State = 2907;
				Match(OPAR);
				State = 2908;
				expression(0);
				State = 2909;
				Match(CPAR);
				}
				break;
			case 7:
				{
				State = 2911;
				Match(UNNEST);
				State = 2912;
				Match(OPAR);
				State = 2913;
				expression(0);
				State = 2914;
				Match(CPAR);
				}
				break;
			case 8:
				{
				State = 2916;
				function_call();
				}
				break;
			case 9:
				{
				State = 2917;
				window_function();
				}
				break;
			case 10:
				{
				State = 2918;
				literal();
				}
				break;
			case 11:
				{
				State = 2919;
				case_expression();
				}
				break;
			case 12:
				{
				State = 2920;
				case_();
				}
				break;
			case 13:
				{
				State = 2921;
				coalesce();
				}
				break;
			case 14:
				{
				State = 2922;
				if_();
				}
				break;
			case 15:
				{
				State = 2923;
				ifnull();
				}
				break;
			case 16:
				{
				State = 2924;
				nullif();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3006;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,341,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 3004;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2927;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 2928;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 772L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2929;
						expression(26);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2930;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 2931;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2932;
						expression(25);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2933;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 2938;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case LT:
							{
							State = 2934;
							Match(LT);
							State = 2935;
							Match(LT);
							}
							break;
						case GT:
							{
							State = 2936;
							Match(GT);
							State = 2937;
							Match(GT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2940;
						expression(24);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2941;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 2942;
						Match(BAND);
						State = 2943;
						expression(23);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2944;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 2945;
						Match(BXOR);
						State = 2946;
						expression(22);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2947;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 2948;
						Match(BOR);
						State = 2949;
						expression(21);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2950;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 2961;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case EQ:
							{
							State = 2951;
							Match(EQ);
							}
							break;
						case NEQ:
							{
							State = 2952;
							Match(NEQ);
							}
							break;
						case LT:
							{
							State = 2953;
							Match(LT);
							}
							break;
						case GT:
							{
							State = 2954;
							Match(GT);
							}
							break;
						case LTE:
							{
							State = 2955;
							Match(LTE);
							}
							break;
						case GTE:
							{
							State = 2956;
							Match(GTE);
							}
							break;
						case BETWEEN:
						case IN:
						case LIKE:
						case NOT:
							{
							State = 2958;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==NOT) {
								{
								State = 2957;
								Match(NOT);
								}
							}

							State = 2960;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & 17626545782785L) != 0)) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2963;
						expression(20);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2964;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 2965;
						Match(IS);
						State = 2967;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2966;
							Match(NOT);
							}
						}

						State = 2969;
						Match(DISTINCT);
						State = 2970;
						Match(FROM);
						State = 2971;
						expression(18);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2972;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 2973;
						Match(AND);
						State = 2974;
						expression(16);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2975;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 2976;
						Match(OR);
						State = 2977;
						expression(15);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2978;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 2980;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2979;
							Match(NOT);
							}
						}

						State = 2982;
						Match(LIKE);
						State = 2983;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 2984;
						expression(11);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2985;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 2986;
						Match(DOT);
						State = 2987;
						path_expression();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2988;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 2989;
						Match(OBR);
						State = 2990;
						expression(0);
						State = 2991;
						Match(CBR);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2993;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 2994;
						Match(IS);
						State = 2996;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2995;
							Match(NOT);
							}
						}

						State = 2998;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 72057595111669761L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2999;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 3001;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AS) {
							{
							State = 3000;
							Match(AS);
							}
						}

						State = 3003;
						_localctx.alias = identifier();
						}
						break;
					}
					} 
				}
				State = 3008;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,341,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 304, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009;
			expression(0);
			State = 3014;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,342,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3010;
					Match(COMMA);
					State = 3011;
					expression(0);
					}
					} 
				}
				State = 3016;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,342,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext expr_to_match;
		public ExpressionContext result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(Context, State);
		EnterRule(_localctx, 306, RULE_case_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3017;
			Match(CASE);
			State = 3018;
			expression(0);
			State = 3024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3019;
				Match(WHEN);
				State = 3020;
				_localctx.expr_to_match = expression(0);
				State = 3021;
				Match(THEN);
				State = 3022;
				_localctx.result = expression(0);
				}
				}
				State = 3026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 3030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3028;
				Match(ELSE);
				State = 3029;
				_localctx.else_result = expression(0);
				}
			}

			State = 3032;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_Context : ParserRuleContext {
		public ExpressionContext expr_to_match;
		public ExpressionContext result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Case_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_Context case_() {
		Case_Context _localctx = new Case_Context(Context, State);
		EnterRule(_localctx, 308, RULE_case_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3034;
			Match(CASE);
			State = 3040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3035;
				Match(WHEN);
				State = 3036;
				_localctx.expr_to_match = expression(0);
				State = 3037;
				Match(THEN);
				State = 3038;
				_localctx.result = expression(0);
				}
				}
				State = 3042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 3046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3044;
				Match(ELSE);
				State = 3045;
				_localctx.else_result = expression(0);
				}
			}

			State = 3048;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoalesceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(BigQueryParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public CoalesceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coalesce; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCoalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCoalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoalesceContext coalesce() {
		CoalesceContext _localctx = new CoalesceContext(Context, State);
		EnterRule(_localctx, 310, RULE_coalesce);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3050;
			Match(COALESCE);
			State = 3051;
			Match(OPAR);
			State = 3052;
			expressions();
			State = 3053;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_Context : ParserRuleContext {
		public ExpressionContext expr;
		public ExpressionContext true_result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public If_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIf_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIf_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_Context if_() {
		If_Context _localctx = new If_Context(Context, State);
		EnterRule(_localctx, 312, RULE_if_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3055;
			Match(IF);
			State = 3056;
			Match(OPAR);
			State = 3057;
			_localctx.expr = expression(0);
			State = 3058;
			Match(COMMA);
			State = 3059;
			_localctx.true_result = expression(0);
			State = 3060;
			Match(COMMA);
			State = 3061;
			_localctx.else_result = expression(0);
			State = 3062;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfnullContext : ParserRuleContext {
		public ExpressionContext null_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(BigQueryParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public IfnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIfnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIfnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfnullContext ifnull() {
		IfnullContext _localctx = new IfnullContext(Context, State);
		EnterRule(_localctx, 314, RULE_ifnull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3064;
			Match(IFNULL);
			State = 3065;
			Match(OPAR);
			State = 3066;
			expression(0);
			State = 3067;
			Match(COMMA);
			State = 3068;
			_localctx.null_result = expression(0);
			State = 3069;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullifContext : ParserRuleContext {
		public ExpressionContext expr_to_match;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(BigQueryParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public NullifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNullif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNullif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullifContext nullif() {
		NullifContext _localctx = new NullifContext(Context, State);
		EnterRule(_localctx, 316, RULE_nullif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3071;
			Match(NULLIF);
			State = 3072;
			Match(OPAR);
			State = 3073;
			expression(0);
			State = 3074;
			Match(COMMA);
			State = 3075;
			_localctx.expr_to_match = expression(0);
			State = 3076;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expressions_as_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Expressions_as_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions_as_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions_as_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions_as_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions_as_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expressions_as_aliasContext expressions_as_alias() {
		Expressions_as_aliasContext _localctx = new Expressions_as_aliasContext(Context, State);
		EnterRule(_localctx, 318, RULE_expressions_as_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3078;
			expressions();
			State = 3080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
				{
				State = 3079;
				as_alias();
				}
			}

			State = 3089;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3082;
				Match(COMMA);
				State = 3083;
				expressions();
				State = 3085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) {
					{
					State = 3084;
					as_alias();
					}
				}

				}
				}
				State = 3091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expressions_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(BigQueryParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(BigQueryParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(BigQueryParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(BigQueryParser.DESC, i);
		}
		public Expressions_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expressions_asc_descContext expressions_asc_desc() {
		Expressions_asc_descContext _localctx = new Expressions_asc_descContext(Context, State);
		EnterRule(_localctx, 320, RULE_expressions_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3092;
			expression(0);
			State = 3094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3093;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3096;
				Match(COMMA);
				State = 3097;
				expression(0);
				State = 3099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 3098;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 3105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Byte_literalContext byte_literal() {
			return GetRuleContext<Byte_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Big_numeric_literalContext big_numeric_literal() {
			return GetRuleContext<Big_numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_literalContext array_literal() {
			return GetRuleContext<Array_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_literalContext struct_literal() {
			return GetRuleContext<Struct_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_literalContext date_literal() {
			return GetRuleContext<Date_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Time_literalContext time_literal() {
			return GetRuleContext<Time_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_literalContext datetime_literal() {
			return GetRuleContext<Datetime_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Timestamp_literalContext timestamp_literal() {
			return GetRuleContext<Timestamp_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interval_literalContext interval_literal() {
			return GetRuleContext<Interval_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_literalContext json_literal() {
			return GetRuleContext<Json_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BigQueryParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(BigQueryParser.FLOATING_POINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INF() { return GetToken(BigQueryParser.INF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAN() { return GetToken(BigQueryParser.NAN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 322, RULE_literal);
		try {
			State = 3126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3106;
				string_literal();
				}
				break;
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3107;
				byte_literal();
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3108;
				numeric_literal();
				}
				break;
			case BIGNUMERIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3109;
				big_numeric_literal();
				}
				break;
			case OBR:
			case ARRAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3110;
				array_literal();
				}
				break;
			case OPAR:
			case STRUCT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3111;
				struct_literal();
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3112;
				date_literal();
				}
				break;
			case TIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3113;
				time_literal();
				}
				break;
			case DATETIME:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3114;
				datetime_literal();
				}
				break;
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3115;
				timestamp_literal();
				}
				break;
			case RANGE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3116;
				range_literal();
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3117;
				interval_literal();
				}
				break;
			case JSON:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3118;
				json_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3119;
				Match(INTEGER_LITERAL);
				}
				break;
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3120;
				Match(FLOATING_POINT_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3121;
				Match(NULL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3122;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3123;
				Match(FALSE);
				}
				break;
			case INF:
				EnterOuterAlt(_localctx, 19);
				{
				State = 3124;
				Match(INF);
				}
				break;
			case NAN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 3125;
				Match(NAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(BigQueryParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 324, RULE_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3128;
			Match(NUMERIC);
			State = 3129;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Big_numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGNUMERIC() { return GetToken(BigQueryParser.BIGNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Big_numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_big_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterBig_numeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitBig_numeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBig_numeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Big_numeric_literalContext big_numeric_literal() {
		Big_numeric_literalContext _localctx = new Big_numeric_literalContext(Context, State);
		EnterRule(_localctx, 326, RULE_big_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3131;
			Match(BIGNUMERIC);
			State = 3132;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBR() { return GetToken(BigQueryParser.OBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBR() { return GetToken(BigQueryParser.CBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		public Array_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterArray_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitArray_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_literalContext array_literal() {
		Array_literalContext _localctx = new Array_literalContext(Context, State);
		EnterRule(_localctx, 328, RULE_array_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARRAY) {
				{
				State = 3134;
				Match(ARRAY);
				State = 3139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3135;
					Match(LT);
					State = 3136;
					data_type();
					State = 3137;
					Match(GT);
					}
				}

				}
			}

			State = 3143;
			Match(OBR);
			State = 3145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -16692222L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1117455657541304321L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 2251799813685247L) != 0)) {
				{
				State = 3144;
				expressions();
				}
			}

			State = 3147;
			Match(CBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Struct_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_literalContext struct_literal() {
		Struct_literalContext _localctx = new Struct_literalContext(Context, State);
		EnterRule(_localctx, 330, RULE_struct_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRUCT) {
				{
				State = 3149;
				Match(STRUCT);
				State = 3161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3150;
					Match(LT);
					State = 3151;
					data_type();
					State = 3156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3152;
						Match(COMMA);
						State = 3153;
						data_type();
						}
						}
						State = 3158;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3159;
					Match(GT);
					}
				}

				}
			}

			State = 3165;
			Match(OPAR);
			State = 3166;
			expressions();
			State = 3167;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 332, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				{
				State = 3169;
				any_identifier();
				State = 3181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3170;
					Match(LT);
					State = 3171;
					data_type();
					State = 3176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3172;
						Match(COMMA);
						State = 3173;
						data_type();
						}
						}
						State = 3178;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3179;
					Match(GT);
					}
				}

				}
				break;
			case 2:
				{
				State = 3183;
				identifier();
				State = 3184;
				data_type();
				}
				break;
			case 3:
				{
				State = 3186;
				identifier();
				}
				break;
			}
			State = 3193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
			case 1:
				{
				State = 3189;
				Match(OPAR);
				State = 3190;
				expressions();
				State = 3191;
				Match(CPAR);
				}
				break;
			}
			State = 3197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				{
				State = 3195;
				Match(COLLATE);
				State = 3196;
				string_literal();
				}
				break;
			}
			State = 3201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				{
				State = 3199;
				Match(NOT);
				State = 3200;
				Match(NULL);
				}
				break;
			}
			State = 3208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
			case 1:
				{
				State = 3203;
				Match(OPTIONS);
				State = 3204;
				Match(OPAR);
				State = 3205;
				option_parameters();
				State = 3206;
				Match(CPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved() {
			return GetRuleContext<ReservedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAny_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAny_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_identifierContext any_identifier() {
		Any_identifierContext _localctx = new Any_identifierContext(Context, State);
		EnterRule(_localctx, 334, RULE_any_identifier);
		try {
			State = 3212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3210;
				reserved();
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3211;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BigQueryParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LITERAL() { return GetToken(BigQueryParser.RAW_STRING_LITERAL, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 336, RULE_string_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3214;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==RAW_STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Date_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_literalContext date_literal() {
		Date_literalContext _localctx = new Date_literalContext(Context, State);
		EnterRule(_localctx, 338, RULE_date_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3216;
			Match(DATE);
			State = 3217;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(BigQueryParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Time_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_literalContext time_literal() {
		Time_literalContext _localctx = new Time_literalContext(Context, State);
		EnterRule(_localctx, 340, RULE_time_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3219;
			Match(TIME);
			State = 3220;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDatetime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDatetime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_literalContext datetime_literal() {
		Datetime_literalContext _localctx = new Datetime_literalContext(Context, State);
		EnterRule(_localctx, 342, RULE_datetime_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3222;
			Match(DATETIME);
			State = 3223;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timestamp_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestamp_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTimestamp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTimestamp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestamp_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timestamp_literalContext timestamp_literal() {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(Context, State);
		EnterRule(_localctx, 344, RULE_timestamp_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3225;
			Match(TIMESTAMP);
			State = 3226;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 346, RULE_range_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3228;
			Match(RANGE);
			State = 3229;
			Match(LT);
			State = 3230;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3231;
			Match(GT);
			State = 3232;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(BigQueryParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_partContext[] datetime_part() {
			return GetRuleContexts<Datetime_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_partContext datetime_part(int i) {
			return GetRuleContext<Datetime_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		public Interval_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterInterval_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitInterval_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interval_literalContext interval_literal() {
		Interval_literalContext _localctx = new Interval_literalContext(Context, State);
		EnterRule(_localctx, 348, RULE_interval_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3234;
			Match(INTERVAL);
			State = 3243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
			case 1:
				{
				State = 3235;
				expression(0);
				State = 3236;
				datetime_part();
				}
				break;
			case 2:
				{
				State = 3238;
				string_literal();
				State = 3239;
				datetime_part();
				State = 3240;
				Match(TO);
				State = 3241;
				datetime_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(BigQueryParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Json_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterJson_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitJson_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Json_literalContext json_literal() {
		Json_literalContext _localctx = new Json_literalContext(Context, State);
		EnterRule(_localctx, 350, RULE_json_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3245;
			Match(JSON);
			State = 3246;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Byte_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES_LITERAL() { return GetToken(BigQueryParser.BYTES_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_BYTES_LITERAL() { return GetToken(BigQueryParser.RAW_BYTES_LITERAL, 0); }
		public Byte_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byte_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterByte_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitByte_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByte_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Byte_literalContext byte_literal() {
		Byte_literalContext _localctx = new Byte_literalContext(Context, State);
		EnterRule(_localctx, 352, RULE_byte_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3248;
			_la = TokenStream.LA(1);
			if ( !(_la==BYTES_LITERAL || _la==RAW_BYTES_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_IDENTIFIER() { return GetToken(BigQueryParser.UNQUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(BigQueryParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGNUMERIC() { return GetToken(BigQueryParser.BIGNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(BigQueryParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(BigQueryParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(BigQueryParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(BigQueryParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(BigQueryParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(BigQueryParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(BigQueryParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(BigQueryParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(BigQueryParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(BigQueryParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(BigQueryParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(BigQueryParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BigQueryParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(BigQueryParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORRESPONDING() { return GetToken(BigQueryParser.CORRESPONDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL_PRIVACY() { return GetToken(BigQueryParser.DIFFERENTIAL_PRIVACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(BigQueryParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(BigQueryParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BigQueryParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(BigQueryParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(BigQueryParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BigQueryParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(BigQueryParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(BigQueryParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(BigQueryParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_AGG() { return GetToken(BigQueryParser.ARRAY_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(BigQueryParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICIES() { return GetToken(BigQueryParser.POLICIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(BigQueryParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(BigQueryParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(BigQueryParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(BigQueryParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(BigQueryParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(BigQueryParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(BigQueryParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(BigQueryParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(BigQueryParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORING() { return GetToken(BigQueryParser.STORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BigQueryParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION() { return GetToken(BigQueryParser.ORGANIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROJECT() { return GetToken(BigQueryParser.PROJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BI_CAPACITY() { return GetToken(BigQueryParser.BI_CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_VALUE() { return GetToken(BigQueryParser.ANY_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(BigQueryParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(BigQueryParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_CONCAT_AGG() { return GetToken(BigQueryParser.ARRAY_CONCAT_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(BigQueryParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(BigQueryParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(BigQueryParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(BigQueryParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTIF() { return GetToken(BigQueryParser.COUNTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(BigQueryParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(BigQueryParser.LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_BY() { return GetToken(BigQueryParser.MAX_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_BY() { return GetToken(BigQueryParser.MIN_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_AGG() { return GetToken(BigQueryParser.STRING_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(BigQueryParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEZONE() { return GetToken(BigQueryParser.TIMEZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(BigQueryParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(BigQueryParser.ASSERT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 354, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3250;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 9079256848778919935L) != 0) || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 457396837154815L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_aliasContext : ParserRuleContext {
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public As_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_aliasContext as_alias() {
		As_aliasContext _localctx = new As_aliasContext(Context, State);
		EnterRule(_localctx, 356, RULE_as_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3252;
				Match(AS);
				}
			}

			State = 3255;
			_localctx.alias = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 358, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3257;
			function_name();
			State = 3258;
			Match(OPAR);
			State = 3260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -16691966L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1117455657541304321L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 2251799813685247L) != 0)) {
				{
				State = 3259;
				function_arguments();
				}
			}

			State = 3262;
			Match(CPAR);
			State = 3265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				{
				State = 3263;
				Match(OVER);
				State = 3264;
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved() {
			return GetRuleContext<ReservedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 360, RULE_function_name);
		try {
			State = 3269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3267;
				reserved();
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3268;
				path_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionsContext function_expressions() {
			return GetRuleContext<Function_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_clausesContext optional_clauses() {
			return GetRuleContext<Optional_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 362, RULE_function_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
			case 1:
				{
				State = 3271;
				Match(DISTINCT);
				}
				break;
			}
			State = 3274;
			function_expressions();
			State = 3275;
			optional_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionContext[] function_expression() {
			return GetRuleContexts<Function_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionContext function_expression(int i) {
			return GetRuleContext<Function_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Function_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_expressionsContext function_expressions() {
		Function_expressionsContext _localctx = new Function_expressionsContext(Context, State);
		EnterRule(_localctx, 364, RULE_function_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3277;
			function_expression();
			State = 3282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3278;
				Match(COMMA);
				State = 3279;
				function_expression();
				}
				}
				State = 3284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(BigQueryParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(BigQueryParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(BigQueryParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(BigQueryParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(BigQueryParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Format_clauseContext format_clause() {
			return GetRuleContext<Format_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BigQueryParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEZONE() { return GetToken(BigQueryParser.TIMEZONE, 0); }
		public Function_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_expressionContext function_expression() {
		Function_expressionContext _localctx = new Function_expressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_function_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				{
				State = 3285;
				Match(STAR);
				}
				break;
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case NAN:
			case INF:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				{
				State = 3286;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				{
				State = 3289;
				Match(FROM);
				State = 3290;
				expression(0);
				}
				break;
			case ARROW:
				{
				State = 3291;
				Match(ARROW);
				State = 3292;
				expression(0);
				}
				break;
			case HAVING:
				{
				State = 3293;
				Match(HAVING);
				State = 3294;
				_la = TokenStream.LA(1);
				if ( !(_la==MAX || _la==MIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3295;
				expression(0);
				}
				break;
			case AS:
				{
				State = 3296;
				Match(AS);
				State = 3297;
				data_type();
				State = 3299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 3298;
					format_clause();
					}
				}

				State = 3304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 3301;
					Match(AT);
					State = 3302;
					Match(TIMEZONE);
					State = 3303;
					expression(0);
					}
				}

				}
				break;
			case IGNORE:
			case RESPECT:
				{
				State = 3306;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==RESPECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3307;
				Match(NULLS);
				}
				break;
			case COMMA:
			case CPAR:
			case LIMIT:
			case ORDER:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keysContext order_by_keys() {
			return GetRuleContext<Order_by_keysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public Optional_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOptional_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOptional_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptional_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optional_clausesContext optional_clauses() {
		Optional_clausesContext _localctx = new Optional_clausesContext(Context, State);
		EnterRule(_localctx, 368, RULE_optional_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3310;
				order_by_keys();
				}
			}

			State = 3314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3313;
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 370, RULE_limit_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3316;
			Match(LIMIT);
			State = 3317;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_keysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keyContext[] order_by_key() {
			return GetRuleContexts<Order_by_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keyContext order_by_key(int i) {
			return GetRuleContext<Order_by_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Order_by_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_keys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_keysContext order_by_keys() {
		Order_by_keysContext _localctx = new Order_by_keysContext(Context, State);
		EnterRule(_localctx, 372, RULE_order_by_keys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3319;
			order_by_key();
			State = 3324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3320;
				Match(COMMA);
				State = 3321;
				order_by_key();
				}
				}
				State = 3326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_keyContext : ParserRuleContext {
		public ExpressionContext key;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BigQueryParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(BigQueryParser.DESC, 0); }
		public Order_by_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_keyContext order_by_key() {
		Order_by_keyContext _localctx = new Order_by_keyContext(Context, State);
		EnterRule(_localctx, 374, RULE_order_by_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3327;
			Match(ORDER);
			State = 3328;
			Match(BY);
			State = 3329;
			_localctx.key = expression(0);
			State = 3331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3330;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 376, RULE_window_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3333;
			identifier();
			State = 3334;
			Match(OPAR);
			State = 3337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case NAN:
			case INF:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				{
				State = 3335;
				expressions();
				}
				break;
			case STAR:
				{
				State = 3336;
				Match(STAR);
				}
				break;
			case CPAR:
				break;
			default:
				break;
			}
			State = 3339;
			Match(CPAR);
			State = 3340;
			Match(OVER);
			State = 3341;
			over_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public IdentifierContext named_window;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 378, RULE_over_clause);
		try {
			State = 3351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3343;
				_localctx.named_window = identifier();
				State = 3345;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
				case 1:
					{
					State = 3344;
					as_alias();
					}
					break;
				}
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3347;
				Match(OPAR);
				State = 3348;
				window_specification();
				State = 3349;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_clauseContext : ParserRuleContext {
		public ExpressionContext format_string_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(BigQueryParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Format_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFormat_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFormat_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormat_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Format_clauseContext format_clause() {
		Format_clauseContext _localctx = new Format_clauseContext(Context, State);
		EnterRule(_localctx, 380, RULE_format_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3353;
			Match(FORMAT);
			State = 3354;
			_localctx.format_string_expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public Path_expressionContext variable_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 382, RULE_set);
		try {
			State = 3370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3356;
				Match(SET);
				State = 3357;
				_localctx.variable_name = path_expression();
				State = 3358;
				Match(EQ);
				State = 3359;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3361;
				Match(SET);
				State = 3362;
				Match(OPAR);
				State = 3363;
				path_expressions();
				State = 3364;
				Match(CPAR);
				State = 3365;
				Match(EQ);
				State = 3366;
				Match(OPAR);
				State = 3367;
				expressions();
				State = 3368;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Path_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPath_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPath_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionsContext path_expressions() {
		Path_expressionsContext _localctx = new Path_expressionsContext(Context, State);
		EnterRule(_localctx, 384, RULE_path_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3372;
			path_expression();
			State = 3377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3373;
				Match(COMMA);
				State = 3374;
				path_expression();
				}
				}
				State = 3379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext[] reserved() {
			return GetRuleContexts<ReservedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved(int i) {
			return GetRuleContext<ReservedContext>(i);
		}
		public Path_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionContext path_expression() {
		Path_expressionContext _localctx = new Path_expressionContext(Context, State);
		EnterRule(_localctx, 386, RULE_path_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3380;
			identifier();
			State = 3388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,389,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3381;
					Match(DOT);
					State = 3384;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case BIGNUMERIC:
					case DATE:
					case DATETIME:
					case NUMERIC:
					case TIMESTAMP:
					case YEAR:
					case QUARTER:
					case MONTH:
					case WEEK:
					case DAY:
					case HOUR:
					case MINUTE:
					case SECOND:
					case MILLISECOND:
					case MICROSECOND:
					case JSON:
					case OFFSET:
					case NAME:
					case STRICT:
					case CORRESPONDING:
					case DIFFERENTIAL_PRIVACY:
					case OPTIONS:
					case VALUE:
					case REPLACE:
					case SYSTEM:
					case PERCENT:
					case PIVOT:
					case UNPIVOT:
					case SYSTEM_TIME:
					case ROW:
					case INCLUDE:
					case FORMAT:
					case SETS:
					case AVG:
					case SCHEMA:
					case TEMP:
					case TEMPORARY:
					case TABLE:
					case CONSTRAINT:
					case ENFORCED:
					case PRIMARY:
					case KEY:
					case FOREIGN:
					case REFERENCES:
					case CLUSTER:
					case CONNECTION:
					case ARRAY_AGG:
					case COPY:
					case SNAPSHOT:
					case CLONE:
					case VIEW:
					case DROP:
					case SEARCH:
					case INDEX:
					case VECTOR:
					case ASSIGNMENT:
					case RESERVATION:
					case ACCESS:
					case POLICY:
					case POLICIES:
					case PROCEDURE:
					case FUNCTION:
					case REPLICA:
					case COLUMNS:
					case RETURNS:
					case DETERMINISTIC:
					case LANGUAGE:
					case REMOTE:
					case AGGREGATE:
					case TYPE:
					case OUT:
					case INOUT:
					case BEGIN:
					case SECURITY:
					case INVOKER:
					case COALESCE:
					case NULLIF:
					case IFNULL:
					case GRANT:
					case FILTER:
					case COLUMN:
					case STORING:
					case ALTER:
					case ADD:
					case RENAME:
					case DATA:
					case ORGANIZATION:
					case PROJECT:
					case BI_CAPACITY:
					case ANY_VALUE:
					case MAX:
					case MIN:
					case ARRAY_CONCAT_AGG:
					case BIT_AND:
					case BIT_OR:
					case BIT_XOR:
					case COUNT:
					case COUNTIF:
					case LOGICAL_AND:
					case LOGICAL_OR:
					case MAX_BY:
					case MIN_BY:
					case STRING_AGG:
					case SUM:
					case TIMEZONE:
					case TIME:
					case ASSERT:
					case UNQUOTED_IDENTIFIER:
					case QUOTED_IDENTIFIER:
						{
						State = 3382;
						identifier();
						}
						break;
					case ALL:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSERT_ROWS_MODIFIED:
					case AT:
					case BETWEEN:
					case BY:
					case CASE:
					case CAST:
					case COLLATE:
					case CONTAINS:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case DEFAULT:
					case DEFINE:
					case DESC:
					case DISTINCT:
					case ELSE:
					case END:
					case ENUM:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDE:
					case EXISTS:
					case EXTRACT:
					case FALSE:
					case FETCH:
					case FOLLOWING:
					case FOR:
					case FROM:
					case FULL:
					case GROUP:
					case GROUPING:
					case GROUPS:
					case HASH:
					case HAVING:
					case IF:
					case IGNORE:
					case IN:
					case INNER:
					case INTERSECT:
					case INTERVAL:
					case INTO:
					case IS:
					case JOIN:
					case LATERAL:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOOKUP:
					case MERGE:
					case NATURAL:
					case NEW:
					case NO:
					case NOT:
					case NULL:
					case NULLS:
					case OF:
					case ON:
					case OR:
					case ORDER:
					case OUTER:
					case OVER:
					case PARTITION:
					case PRECEDING:
					case PROTO:
					case QUALIFY:
					case RANGE:
					case RECURSIVE:
					case RESPECT:
					case RIGHT:
					case ROLLUP:
					case ROWS:
					case SELECT:
					case SET:
					case SOME:
					case STRUCT:
					case TABLESAMPLE:
					case THEN:
					case TO:
					case TREAT:
					case TRUE:
					case UNBOUNDED:
					case UNION:
					case UNNEST:
					case USING:
					case WHEN:
					case WHERE:
					case WINDOW:
					case WITH:
					case WITHIN:
						{
						State = 3383;
						reserved();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 3390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,389,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public As_column_nameContext[] as_column_name() {
			return GetRuleContexts<As_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_column_nameContext as_column_name(int i) {
			return GetRuleContext<As_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public As_column_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_namesContext as_column_names() {
		As_column_namesContext _localctx = new As_column_namesContext(Context, State);
		EnterRule(_localctx, 388, RULE_as_column_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3391;
			as_column_name();
			State = 3396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3392;
				Match(COMMA);
				State = 3393;
				as_column_name();
				}
				}
				State = 3398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_nameContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public As_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_nameContext as_column_name() {
		As_column_nameContext _localctx = new As_column_nameContext(Context, State);
		EnterRule(_localctx, 390, RULE_as_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3399;
			expression(0);
			State = 3400;
			Match(AS);
			State = 3401;
			_localctx.column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BigQueryParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT_ROWS_MODIFIED() { return GetToken(BigQueryParser.ASSERT_ROWS_MODIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BigQueryParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(BigQueryParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(BigQueryParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(BigQueryParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(BigQueryParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BigQueryParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(BigQueryParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(BigQueryParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(BigQueryParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(BigQueryParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(BigQueryParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(BigQueryParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(BigQueryParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(BigQueryParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(BigQueryParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(BigQueryParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(BigQueryParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(BigQueryParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(BigQueryParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BigQueryParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(BigQueryParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOKUP() { return GetToken(BigQueryParser.LOOKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(BigQueryParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(BigQueryParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(BigQueryParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(BigQueryParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(BigQueryParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY() { return GetToken(BigQueryParser.QUALIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(BigQueryParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(BigQueryParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BigQueryParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(BigQueryParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(BigQueryParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(BigQueryParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(BigQueryParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(BigQueryParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BigQueryParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(BigQueryParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(BigQueryParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(BigQueryParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(BigQueryParser.WITHIN, 0); }
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 392, RULE_reserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3403;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -16777216L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 72057594037927935L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(BigQueryParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(BigQueryParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(BigQueryParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(BigQueryParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(BigQueryParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(BigQueryParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(BigQueryParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(BigQueryParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(BigQueryParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(BigQueryParser.MICROSECOND, 0); }
		public Datetime_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDatetime_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDatetime_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_partContext datetime_part() {
		Datetime_partContext _localctx = new Datetime_partContext(Context, State);
		EnterRule(_localctx, 394, RULE_datetime_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3405;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & 1023L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 106: return query_expression_sempred((Query_expressionContext)_localctx, predIndex);
		case 132: return from_item_sempred((From_itemContext)_localctx, predIndex);
		case 151: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool query_expression_sempred(Query_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 25);
		case 4: return Precpred(Context, 24);
		case 5: return Precpred(Context, 23);
		case 6: return Precpred(Context, 22);
		case 7: return Precpred(Context, 21);
		case 8: return Precpred(Context, 20);
		case 9: return Precpred(Context, 19);
		case 10: return Precpred(Context, 17);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 14);
		case 13: return Precpred(Context, 10);
		case 14: return Precpred(Context, 28);
		case 15: return Precpred(Context, 27);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,245,3408,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,1,0,5,0,398,8,0,10,0,12,0,401,9,0,
		1,0,1,0,4,0,405,8,0,11,0,12,0,406,1,0,5,0,410,8,0,10,0,12,0,413,9,0,1,
		0,5,0,416,8,0,10,0,12,0,419,9,0,1,0,1,0,1,1,5,1,424,8,1,10,1,12,1,427,
		9,1,1,1,1,1,5,1,431,8,1,10,1,12,1,434,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,3,2,446,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,516,8,3,1,4,1,4,1,5,1,5,1,6,1,6,3,6,524,8,6,1,7,1,
		7,1,8,1,8,1,9,1,9,1,9,1,9,3,9,534,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
		12,3,12,543,8,12,1,12,3,12,546,8,12,1,12,1,12,1,12,1,12,3,12,552,8,12,
		1,12,1,12,1,12,1,12,1,12,3,12,559,8,12,1,12,1,12,1,12,3,12,564,8,12,1,
		12,1,12,1,12,3,12,569,8,12,1,12,1,12,1,12,3,12,574,8,12,1,12,1,12,1,12,
		3,12,579,8,12,1,12,1,12,1,12,1,12,1,12,3,12,586,8,12,1,12,1,12,3,12,590,
		8,12,1,13,1,13,1,13,3,13,595,8,13,1,13,1,13,1,13,1,13,3,13,601,8,13,1,
		13,1,13,1,13,1,13,1,13,3,13,608,8,13,1,13,1,13,1,13,3,13,613,8,13,1,13,
		1,13,1,13,1,13,3,13,619,8,13,1,13,1,13,1,13,3,13,624,8,13,1,13,1,13,1,
		13,3,13,629,8,13,1,13,1,13,1,13,3,13,634,8,13,1,13,1,13,1,13,1,13,1,13,
		3,13,641,8,13,1,13,1,13,3,13,645,8,13,1,14,1,14,1,14,3,14,650,8,14,1,14,
		1,14,1,14,1,14,3,14,656,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,664,8,
		14,1,14,1,14,1,14,3,14,669,8,14,1,14,1,14,1,14,3,14,674,8,14,1,14,1,14,
		1,14,3,14,679,8,14,1,14,1,14,1,14,1,14,1,14,3,14,686,8,14,1,14,1,14,3,
		14,690,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,698,8,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,3,15,708,8,15,1,15,1,15,1,15,1,15,1,15,3,15,715,
		8,15,1,16,1,16,1,16,1,16,1,16,3,16,722,8,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,3,16,732,8,16,1,16,1,16,1,16,3,16,737,8,16,1,16,1,16,1,16,
		3,16,742,8,16,1,16,1,16,1,16,3,16,747,8,16,1,16,1,16,1,16,3,16,752,8,16,
		1,16,1,16,1,16,1,16,1,16,3,16,759,8,16,1,16,1,16,3,16,763,8,16,1,17,1,
		17,1,17,3,17,768,8,17,1,17,1,17,1,17,1,17,3,17,774,8,17,1,17,1,17,1,17,
		1,17,1,17,3,17,781,8,17,1,17,1,17,1,17,1,17,1,17,3,17,788,8,17,1,17,1,
		17,1,17,1,18,1,18,1,18,3,18,796,8,18,1,18,1,18,1,18,1,18,1,18,3,18,803,
		8,18,1,18,1,18,1,18,1,18,3,18,809,8,18,1,18,1,18,1,18,3,18,814,8,18,1,
		18,1,18,1,18,1,18,1,18,3,18,821,8,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,3,19,835,8,19,1,19,1,19,1,19,1,19,1,19,1,20,1,
		20,1,20,1,20,1,20,1,20,3,20,848,8,20,1,20,1,20,1,20,1,20,3,20,854,8,20,
		1,20,1,20,1,20,1,20,1,20,3,20,861,8,20,1,21,1,21,1,21,3,21,866,8,21,1,
		21,1,21,1,21,1,21,1,21,3,21,873,8,21,1,21,1,21,1,21,1,21,1,21,3,21,880,
		8,21,1,21,1,21,1,21,1,21,3,21,886,8,21,3,21,888,8,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,3,21,897,8,21,3,21,899,8,21,1,21,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,5,22,909,8,22,10,22,12,22,912,9,22,1,23,1,23,1,23,1,24,
		1,24,1,24,3,24,920,8,24,1,24,3,24,923,8,24,1,24,1,24,1,24,1,24,3,24,929,
		8,24,1,24,1,24,1,24,3,24,934,8,24,1,24,1,24,1,24,3,24,939,8,24,1,24,1,
		24,1,24,3,24,944,8,24,1,24,1,24,1,24,3,24,949,8,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,3,24,960,8,24,1,25,1,25,1,25,5,25,965,8,25,10,
		25,12,25,968,9,25,1,26,1,26,1,26,1,27,1,27,1,27,3,27,976,8,27,1,27,3,27,
		979,8,27,1,27,1,27,1,27,1,27,3,27,985,8,27,1,27,1,27,1,27,3,27,990,8,27,
		1,27,1,27,1,27,3,27,995,8,27,1,27,1,27,1,27,3,27,1000,8,27,1,27,1,27,1,
		27,1,27,1,27,1,27,3,27,1008,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
		27,1017,8,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,1025,8,28,1,28,3,28,1028,
		8,28,1,28,1,28,1,28,1,28,3,28,1034,8,28,1,28,1,28,1,28,3,28,1039,8,28,
		1,28,1,28,1,28,3,28,1044,8,28,1,28,1,28,1,28,3,28,1049,8,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,3,28,1059,8,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,29,1,29,1,29,3,29,1071,8,29,1,29,3,29,1074,8,29,1,29,1,29,
		1,29,1,29,3,29,1080,8,29,1,29,1,29,1,29,3,29,1085,8,29,1,29,1,29,1,29,
		3,29,1090,8,29,1,29,1,29,1,29,3,29,1095,8,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,1109,8,29,1,30,1,30,1,30,3,30,
		1114,8,30,1,30,3,30,1117,8,30,1,30,1,30,1,30,1,30,1,30,3,30,1124,8,30,
		1,30,1,30,1,30,3,30,1129,8,30,1,30,1,30,1,30,3,30,1134,8,30,1,30,1,30,
		1,30,3,30,1139,8,30,1,30,1,30,1,30,3,30,1144,8,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,3,30,1155,8,30,1,31,1,31,1,31,5,31,1160,8,31,
		10,31,12,31,1163,9,31,1,32,1,32,1,32,1,32,3,32,1169,8,32,1,33,1,33,1,33,
		3,33,1174,8,33,1,33,3,33,1177,8,33,1,33,1,33,1,33,1,33,1,33,3,33,1184,
		8,33,1,33,1,33,1,33,3,33,1189,8,33,1,33,1,33,1,33,3,33,1194,8,33,1,33,
		1,33,1,33,3,33,1199,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,3,33,1211,8,33,1,33,1,33,1,33,1,34,1,34,1,34,3,34,1219,8,34,1,34,
		1,34,1,34,1,34,1,34,3,34,1226,8,34,1,34,1,34,1,34,3,34,1231,8,34,1,34,
		1,34,1,34,3,34,1236,8,34,1,34,1,34,1,34,3,34,1241,8,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,3,34,1250,8,34,1,34,1,34,1,34,1,34,1,34,3,34,1257,
		8,34,1,34,1,34,1,34,1,35,1,35,1,35,5,35,1265,8,35,10,35,12,35,1268,9,35,
		1,36,1,36,1,36,1,36,3,36,1274,8,36,1,37,1,37,1,37,5,37,1279,8,37,10,37,
		12,37,1282,9,37,1,38,1,38,1,38,1,39,1,39,1,39,3,39,1290,8,39,1,39,1,39,
		1,39,1,39,3,39,1296,8,39,1,39,1,39,1,39,3,39,1301,8,39,1,39,1,39,1,39,
		3,39,1306,8,39,1,39,1,39,1,39,3,39,1311,8,39,1,39,1,39,1,39,1,39,1,39,
		1,39,3,39,1319,8,39,1,39,1,39,5,39,1323,8,39,10,39,12,39,1326,9,39,1,39,
		1,39,4,39,1330,8,39,11,39,12,39,1331,1,39,5,39,1335,8,39,10,39,12,39,1338,
		9,39,1,39,5,39,1341,8,39,10,39,12,39,1344,9,39,1,39,1,39,1,40,1,40,1,40,
		5,40,1351,8,40,10,40,12,40,1354,9,40,1,41,3,41,1357,8,41,1,41,1,41,1,41,
		1,42,1,42,1,42,3,42,1365,8,42,1,42,1,42,1,42,1,42,3,42,1371,8,42,1,42,
		1,42,1,42,3,42,1376,8,42,1,42,1,42,1,42,3,42,1381,8,42,1,42,1,42,1,42,
		3,42,1386,8,42,1,42,1,42,1,42,1,42,3,42,1392,8,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,42,3,42,1402,8,42,1,42,1,42,1,42,1,42,3,42,1408,8,42,
		1,43,1,43,1,43,3,43,1413,8,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1421,
		8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1432,8,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1470,8,47,1,47,1,47,1,47,1,47,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1485,8,47,1,47,3,47,
		1488,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1496,8,47,1,48,1,48,1,48,
		5,48,1501,8,48,10,48,12,48,1504,9,48,1,49,1,49,3,49,1508,8,49,1,49,1,49,
		1,49,1,49,1,49,3,49,1515,8,49,1,50,1,50,1,50,3,50,1520,8,50,1,50,1,50,
		1,50,1,50,1,50,3,50,1527,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,1,50,1,50,3,50,1540,8,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
		1,51,3,51,1551,8,51,1,51,1,51,1,51,3,51,1556,8,51,1,51,1,51,1,51,1,51,
		1,51,1,51,1,52,1,52,1,52,1,52,3,52,1568,8,52,1,52,1,52,1,52,3,52,1573,
		8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,1586,
		8,53,1,53,1,53,1,53,3,53,1591,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
		1,53,1,53,3,53,1602,8,53,1,54,1,54,1,54,1,54,3,54,1608,8,54,1,54,1,54,
		1,54,1,54,1,54,1,55,1,55,1,55,1,55,3,55,1619,8,55,1,55,1,55,1,55,1,55,
		1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1636,8,56,
		1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1645,8,56,1,56,5,56,1648,8,56,
		10,56,12,56,1651,9,56,1,57,1,57,1,57,1,57,1,57,3,57,1658,8,57,1,57,1,57,
		1,57,3,57,1663,8,57,1,57,1,57,1,57,1,57,5,57,1669,8,57,10,57,12,57,1672,
		9,57,1,58,1,58,1,58,1,58,1,58,3,58,1679,8,58,1,58,3,58,1682,8,58,1,58,
		1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
		1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1706,8,58,1,59,1,59,1,59,1,59,
		1,59,3,59,1713,8,59,1,59,1,59,1,59,3,59,1718,8,59,1,59,1,59,1,59,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,3,60,1734,8,60,1,60,
		1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,3,61,1745,8,61,1,61,1,61,1,61,
		1,61,5,61,1751,8,61,10,61,12,61,1754,9,61,1,62,1,62,1,62,1,62,3,62,1760,
		8,62,1,62,1,62,1,62,5,62,1765,8,62,10,62,12,62,1768,9,62,1,63,1,63,1,63,
		1,63,1,64,1,64,1,64,1,64,1,64,1,64,5,64,1780,8,64,10,64,12,64,1783,9,64,
		1,65,1,65,1,65,1,65,3,65,1789,8,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,
		3,66,1798,8,66,1,66,1,66,1,66,3,66,1803,8,66,1,66,1,66,1,66,1,66,1,66,
		3,66,1810,8,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,1819,8,67,1,67,
		1,67,1,67,3,67,1824,8,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1832,8,67,
		1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,3,69,1846,
		8,69,1,69,1,69,1,69,1,69,1,69,3,69,1853,8,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,70,1,70,1,70,1,70,3,70,1866,8,70,1,70,1,70,1,70,1,70,1,70,
		3,70,1873,8,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,3,71,1884,
		8,71,1,71,1,71,1,71,1,71,1,71,3,71,1891,8,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,72,1,72,1,72,1,72,3,72,1903,8,72,1,72,1,72,1,72,1,72,1,72,3,72,
		1910,8,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,3,73,1921,8,73,
		1,73,1,73,1,73,1,73,1,73,3,73,1928,8,73,1,73,1,73,1,73,1,73,1,74,1,74,
		1,74,1,74,3,74,1938,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,
		1,75,1,75,1,75,3,75,1952,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,
		1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,
		1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,1,81,1,81,1,81,1,81,1,81,3,81,2010,8,81,1,81,1,81,1,81,3,81,2015,
		8,81,1,81,1,81,1,82,1,82,3,82,2021,8,82,1,82,1,82,1,82,3,82,2026,8,82,
		1,82,1,82,1,82,3,82,2031,8,82,1,82,1,82,3,82,2035,8,82,1,83,1,83,1,83,
		1,83,3,83,2041,8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,3,84,2050,8,84,
		1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,2059,8,85,1,85,1,85,1,86,1,86,
		1,86,1,86,3,86,2067,8,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,3,87,2076,
		8,87,1,87,1,87,1,88,1,88,1,88,1,88,3,88,2084,8,88,1,88,1,88,1,88,3,88,
		2089,8,88,1,88,1,88,1,88,3,88,2094,8,88,1,88,1,88,1,89,1,89,1,89,1,89,
		1,89,3,89,2103,8,89,1,89,1,89,1,89,3,89,2108,8,89,1,89,1,89,1,89,3,89,
		2113,8,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,2121,8,90,1,90,1,90,1,90,
		3,90,2126,8,90,1,90,1,90,1,90,3,90,2131,8,90,1,90,1,90,1,91,1,91,1,91,
		1,91,1,91,1,91,3,91,2141,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
		1,91,1,91,1,91,3,91,2154,8,91,1,92,1,92,1,92,1,92,3,92,2160,8,92,1,92,
		1,92,1,93,1,93,1,93,1,93,3,93,2168,8,93,1,93,1,93,1,94,1,94,1,94,1,94,
		3,94,2176,8,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,3,95,2185,8,95,1,95,
		1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,3,96,2196,8,96,1,96,1,96,1,96,
		1,96,1,97,1,97,1,97,5,97,2205,8,97,10,97,12,97,2208,9,97,1,98,1,98,1,98,
		1,98,1,98,1,98,3,98,2216,8,98,1,99,1,99,1,99,5,99,2221,8,99,10,99,12,99,
		2224,9,99,1,100,1,100,1,100,1,100,3,100,2230,8,100,1,100,1,100,1,100,1,
		100,3,100,2236,8,100,1,100,5,100,2239,8,100,10,100,12,100,2242,9,100,3,
		100,2244,8,100,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,102,1,
		102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,
		1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,3,105,2277,
		8,105,1,105,1,105,1,105,3,105,2282,8,105,1,105,1,105,1,105,1,105,3,105,
		2288,8,105,1,105,1,105,1,105,1,105,1,105,3,105,2295,8,105,1,106,1,106,
		1,106,3,106,2300,8,106,1,106,1,106,3,106,2304,8,106,1,106,1,106,1,106,
		3,106,2309,8,106,5,106,2311,8,106,10,106,12,106,2314,9,106,1,106,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,3,106,2324,8,106,1,106,1,106,1,106,
		1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,2336,8,106,1,106,1,106,
		1,106,1,106,5,106,2342,8,106,10,106,12,106,2345,9,106,1,107,1,107,1,107,
		1,107,3,107,2351,8,107,1,107,1,107,1,107,3,107,2356,8,107,5,107,2358,8,
		107,10,107,12,107,2361,9,107,3,107,2363,8,107,1,107,1,107,1,107,1,107,
		3,107,2369,8,107,3,107,2371,8,107,1,108,1,108,1,108,3,108,2376,8,108,3,
		108,2378,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,2386,8,108,1,
		108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,2395,8,108,1,108,3,108,2398,
		8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,2406,8,108,3,108,2408,
		8,108,3,108,2410,8,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,
		1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,
		3,112,2432,8,112,1,112,3,112,2435,8,112,1,112,1,112,3,112,2439,8,112,1,
		112,1,112,1,112,3,112,2444,8,112,1,112,1,112,3,112,2448,8,112,1,112,1,
		112,1,112,3,112,2453,8,112,1,112,1,112,3,112,2457,8,112,1,112,1,112,3,
		112,2461,8,112,1,112,1,112,3,112,2465,8,112,1,113,1,113,1,113,1,113,1,
		113,1,113,1,113,3,113,2474,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,
		114,1,114,1,115,1,115,1,115,5,115,2487,8,115,10,115,12,115,2490,9,115,
		1,116,1,116,1,116,1,116,3,116,2496,8,116,1,117,1,117,1,117,1,117,1,117,
		1,117,1,117,1,118,1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,
		1,119,1,120,1,120,1,120,5,120,2519,8,120,10,120,12,120,2522,9,120,1,121,
		1,121,1,121,1,121,1,121,1,121,1,121,3,121,2531,8,121,1,122,3,122,2534,
		8,122,1,122,1,122,1,122,3,122,2539,8,122,1,122,1,122,1,122,3,122,2544,
		8,122,1,122,3,122,2547,8,122,1,123,1,123,1,123,3,123,2552,8,123,1,124,
		1,124,1,124,1,124,1,124,1,124,1,124,3,124,2561,8,124,3,124,2563,8,124,
		1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
		1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,2587,
		8,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,
		2599,8,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,2608,8,127,
		1,128,1,128,1,128,1,128,1,128,3,128,2615,8,128,1,129,1,129,1,129,1,129,
		1,129,1,129,1,130,1,130,1,130,5,130,2626,8,130,10,130,12,130,2629,9,130,
		1,131,1,131,1,131,3,131,2634,8,131,1,131,3,131,2637,8,131,1,132,1,132,
		1,132,3,132,2642,8,132,1,132,1,132,1,132,1,132,1,132,3,132,2649,8,132,
		1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,2661,
		8,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,2669,8,132,1,132,1,132,
		1,132,1,132,3,132,2675,8,132,3,132,2677,8,132,1,132,1,132,1,132,1,132,
		1,132,1,132,1,132,1,132,1,132,5,132,2688,8,132,10,132,12,132,2691,9,132,
		1,133,1,133,1,133,1,133,1,133,3,133,2698,8,133,1,133,1,133,3,133,2702,
		8,133,3,133,2704,8,133,1,133,1,133,1,133,3,133,2709,8,133,3,133,2711,8,
		133,1,134,1,134,1,134,3,134,2716,8,134,1,135,3,135,2719,8,135,1,135,1,
		135,1,135,3,135,2724,8,135,1,135,1,135,1,135,3,135,2729,8,135,1,135,1,
		135,1,135,3,135,2734,8,135,1,135,3,135,2737,8,135,1,136,1,136,3,136,2741,
		8,136,1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,139,1,139,1,139,
		1,139,3,139,2755,8,139,1,139,1,139,1,139,3,139,2760,8,139,5,139,2762,8,
		139,10,139,12,139,2765,9,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
		1,139,1,139,3,139,2776,8,139,1,140,1,140,1,140,1,140,1,140,3,140,2783,
		8,140,1,140,1,140,1,140,3,140,2788,8,140,1,140,1,140,1,140,1,141,1,141,
		1,141,1,141,1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,
		1,142,1,142,1,142,1,142,1,143,1,143,3,143,2813,8,143,1,143,1,143,1,143,
		3,143,2818,8,143,5,143,2820,8,143,10,143,12,143,2823,9,143,1,144,1,144,
		1,144,3,144,2828,8,144,1,144,1,144,1,144,3,144,2833,8,144,5,144,2835,8,
		144,10,144,12,144,2838,9,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,
		1,145,1,145,1,146,1,146,1,146,5,146,2852,8,146,10,146,12,146,2855,9,146,
		1,147,1,147,1,147,1,147,1,148,1,148,1,148,5,148,2864,8,148,10,148,12,148,
		2867,9,148,1,149,1,149,1,149,3,149,2872,8,149,3,149,2874,8,149,1,150,1,
		150,1,150,3,150,2879,8,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,2887,
		8,150,1,150,1,150,1,150,1,150,1,150,3,150,2894,8,150,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,3,151,2926,8,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,3,151,2939,8,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,3,151,2959,8,151,1,151,3,151,2962,8,151,1,151,1,151,1,151,
		1,151,3,151,2968,8,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,3,151,2981,8,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,2997,8,151,1,151,
		1,151,1,151,3,151,3002,8,151,1,151,5,151,3005,8,151,10,151,12,151,3008,
		9,151,1,152,1,152,1,152,5,152,3013,8,152,10,152,12,152,3016,9,152,1,153,
		1,153,1,153,1,153,1,153,1,153,1,153,4,153,3025,8,153,11,153,12,153,3026,
		1,153,1,153,3,153,3031,8,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,
		1,154,4,154,3041,8,154,11,154,12,154,3042,1,154,1,154,3,154,3047,8,154,
		1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,
		1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,158,
		1,158,1,158,1,158,1,158,1,158,1,158,1,159,1,159,3,159,3081,8,159,1,159,
		1,159,1,159,3,159,3086,8,159,5,159,3088,8,159,10,159,12,159,3091,9,159,
		1,160,1,160,3,160,3095,8,160,1,160,1,160,1,160,3,160,3100,8,160,5,160,
		3102,8,160,10,160,12,160,3105,9,160,1,161,1,161,1,161,1,161,1,161,1,161,
		1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
		1,161,1,161,3,161,3127,8,161,1,162,1,162,1,162,1,163,1,163,1,163,1,164,
		1,164,1,164,1,164,1,164,3,164,3140,8,164,3,164,3142,8,164,1,164,1,164,
		3,164,3146,8,164,1,164,1,164,1,165,1,165,1,165,1,165,1,165,5,165,3155,
		8,165,10,165,12,165,3158,9,165,1,165,1,165,3,165,3162,8,165,3,165,3164,
		8,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,5,166,3175,
		8,166,10,166,12,166,3178,9,166,1,166,1,166,3,166,3182,8,166,1,166,1,166,
		1,166,1,166,3,166,3188,8,166,1,166,1,166,1,166,1,166,3,166,3194,8,166,
		1,166,1,166,3,166,3198,8,166,1,166,1,166,3,166,3202,8,166,1,166,1,166,
		1,166,1,166,1,166,3,166,3209,8,166,1,167,1,167,3,167,3213,8,167,1,168,
		1,168,1,169,1,169,1,169,1,170,1,170,1,170,1,171,1,171,1,171,1,172,1,172,
		1,172,1,173,1,173,1,173,1,173,1,173,1,173,1,174,1,174,1,174,1,174,1,174,
		1,174,1,174,1,174,1,174,3,174,3244,8,174,1,175,1,175,1,175,1,176,1,176,
		1,177,1,177,1,178,3,178,3254,8,178,1,178,1,178,1,179,1,179,1,179,3,179,
		3261,8,179,1,179,1,179,1,179,3,179,3266,8,179,1,180,1,180,3,180,3270,8,
		180,1,181,3,181,3273,8,181,1,181,1,181,1,181,1,182,1,182,1,182,5,182,3281,
		8,182,10,182,12,182,3284,9,182,1,183,1,183,3,183,3288,8,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,3300,8,183,1,183,
		1,183,1,183,3,183,3305,8,183,1,183,1,183,3,183,3309,8,183,1,184,3,184,
		3312,8,184,1,184,3,184,3315,8,184,1,185,1,185,1,185,1,186,1,186,1,186,
		5,186,3323,8,186,10,186,12,186,3326,9,186,1,187,1,187,1,187,1,187,3,187,
		3332,8,187,1,188,1,188,1,188,1,188,3,188,3338,8,188,1,188,1,188,1,188,
		1,188,1,189,1,189,3,189,3346,8,189,1,189,1,189,1,189,1,189,3,189,3352,
		8,189,1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,
		1,191,1,191,1,191,1,191,1,191,1,191,3,191,3371,8,191,1,192,1,192,1,192,
		5,192,3376,8,192,10,192,12,192,3379,9,192,1,193,1,193,1,193,1,193,3,193,
		3385,8,193,5,193,3387,8,193,10,193,12,193,3390,9,193,1,194,1,194,1,194,
		5,194,3395,8,194,10,194,12,194,3398,9,194,1,195,1,195,1,195,1,195,1,196,
		1,196,1,197,1,197,1,197,0,3,212,264,302,198,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
		186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
		222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
		258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
		294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,
		330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,
		366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,0,23,1,0,155,
		156,2,0,67,67,196,197,2,0,157,157,170,170,1,0,185,186,2,0,29,29,44,44,
		2,0,59,59,75,75,2,0,24,24,45,45,2,0,105,105,142,142,2,0,96,96,101,101,
		2,0,1,1,10,11,2,0,2,2,8,9,1,0,10,11,3,0,32,32,67,67,76,76,3,0,24,24,26,
		26,104,104,3,0,54,54,84,84,110,110,1,0,237,238,2,0,121,122,124,124,1,0,
		239,240,4,0,120,176,178,182,188,232,235,236,1,0,216,217,2,0,66,66,98,98,
		1,0,24,119,1,0,125,134,3754,0,399,1,0,0,0,2,425,1,0,0,0,4,445,1,0,0,0,
		6,515,1,0,0,0,8,517,1,0,0,0,10,519,1,0,0,0,12,523,1,0,0,0,14,525,1,0,0,
		0,16,527,1,0,0,0,18,529,1,0,0,0,20,535,1,0,0,0,22,537,1,0,0,0,24,539,1,
		0,0,0,26,591,1,0,0,0,28,646,1,0,0,0,30,691,1,0,0,0,32,716,1,0,0,0,34,764,
		1,0,0,0,36,792,1,0,0,0,38,825,1,0,0,0,40,841,1,0,0,0,42,862,1,0,0,0,44,
		905,1,0,0,0,46,913,1,0,0,0,48,916,1,0,0,0,50,961,1,0,0,0,52,969,1,0,0,
		0,54,972,1,0,0,0,56,1021,1,0,0,0,58,1067,1,0,0,0,60,1110,1,0,0,0,62,1156,
		1,0,0,0,64,1164,1,0,0,0,66,1170,1,0,0,0,68,1215,1,0,0,0,70,1261,1,0,0,
		0,72,1269,1,0,0,0,74,1275,1,0,0,0,76,1283,1,0,0,0,78,1286,1,0,0,0,80,1347,
		1,0,0,0,82,1356,1,0,0,0,84,1361,1,0,0,0,86,1409,1,0,0,0,88,1439,1,0,0,
		0,90,1447,1,0,0,0,92,1455,1,0,0,0,94,1463,1,0,0,0,96,1497,1,0,0,0,98,1505,
		1,0,0,0,100,1516,1,0,0,0,102,1546,1,0,0,0,104,1563,1,0,0,0,106,1581,1,
		0,0,0,108,1603,1,0,0,0,110,1614,1,0,0,0,112,1627,1,0,0,0,114,1652,1,0,
		0,0,116,1705,1,0,0,0,118,1707,1,0,0,0,120,1729,1,0,0,0,122,1740,1,0,0,
		0,124,1755,1,0,0,0,126,1769,1,0,0,0,128,1773,1,0,0,0,130,1784,1,0,0,0,
		132,1792,1,0,0,0,134,1813,1,0,0,0,136,1833,1,0,0,0,138,1841,1,0,0,0,140,
		1861,1,0,0,0,142,1879,1,0,0,0,144,1898,1,0,0,0,146,1916,1,0,0,0,148,1933,
		1,0,0,0,150,1946,1,0,0,0,152,1960,1,0,0,0,154,1968,1,0,0,0,156,1977,1,
		0,0,0,158,1986,1,0,0,0,160,1995,1,0,0,0,162,2004,1,0,0,0,164,2018,1,0,
		0,0,166,2036,1,0,0,0,168,2044,1,0,0,0,170,2053,1,0,0,0,172,2062,1,0,0,
		0,174,2070,1,0,0,0,176,2079,1,0,0,0,178,2097,1,0,0,0,180,2116,1,0,0,0,
		182,2153,1,0,0,0,184,2155,1,0,0,0,186,2163,1,0,0,0,188,2171,1,0,0,0,190,
		2179,1,0,0,0,192,2190,1,0,0,0,194,2201,1,0,0,0,196,2209,1,0,0,0,198,2217,
		1,0,0,0,200,2243,1,0,0,0,202,2245,1,0,0,0,204,2248,1,0,0,0,206,2256,1,
		0,0,0,208,2263,1,0,0,0,210,2271,1,0,0,0,212,2335,1,0,0,0,214,2362,1,0,
		0,0,216,2377,1,0,0,0,218,2413,1,0,0,0,220,2419,1,0,0,0,222,2423,1,0,0,
		0,224,2428,1,0,0,0,226,2473,1,0,0,0,228,2475,1,0,0,0,230,2483,1,0,0,0,
		232,2495,1,0,0,0,234,2497,1,0,0,0,236,2504,1,0,0,0,238,2508,1,0,0,0,240,
		2515,1,0,0,0,242,2523,1,0,0,0,244,2533,1,0,0,0,246,2548,1,0,0,0,248,2562,
		1,0,0,0,250,2586,1,0,0,0,252,2598,1,0,0,0,254,2607,1,0,0,0,256,2614,1,
		0,0,0,258,2616,1,0,0,0,260,2622,1,0,0,0,262,2630,1,0,0,0,264,2676,1,0,
		0,0,266,2703,1,0,0,0,268,2715,1,0,0,0,270,2736,1,0,0,0,272,2740,1,0,0,
		0,274,2742,1,0,0,0,276,2745,1,0,0,0,278,2750,1,0,0,0,280,2777,1,0,0,0,
		282,2792,1,0,0,0,284,2800,1,0,0,0,286,2810,1,0,0,0,288,2824,1,0,0,0,290,
		2841,1,0,0,0,292,2848,1,0,0,0,294,2856,1,0,0,0,296,2860,1,0,0,0,298,2873,
		1,0,0,0,300,2878,1,0,0,0,302,2925,1,0,0,0,304,3009,1,0,0,0,306,3017,1,
		0,0,0,308,3034,1,0,0,0,310,3050,1,0,0,0,312,3055,1,0,0,0,314,3064,1,0,
		0,0,316,3071,1,0,0,0,318,3078,1,0,0,0,320,3092,1,0,0,0,322,3126,1,0,0,
		0,324,3128,1,0,0,0,326,3131,1,0,0,0,328,3141,1,0,0,0,330,3163,1,0,0,0,
		332,3187,1,0,0,0,334,3212,1,0,0,0,336,3214,1,0,0,0,338,3216,1,0,0,0,340,
		3219,1,0,0,0,342,3222,1,0,0,0,344,3225,1,0,0,0,346,3228,1,0,0,0,348,3234,
		1,0,0,0,350,3245,1,0,0,0,352,3248,1,0,0,0,354,3250,1,0,0,0,356,3253,1,
		0,0,0,358,3257,1,0,0,0,360,3269,1,0,0,0,362,3272,1,0,0,0,364,3277,1,0,
		0,0,366,3287,1,0,0,0,368,3311,1,0,0,0,370,3316,1,0,0,0,372,3319,1,0,0,
		0,374,3327,1,0,0,0,376,3333,1,0,0,0,378,3351,1,0,0,0,380,3353,1,0,0,0,
		382,3370,1,0,0,0,384,3372,1,0,0,0,386,3380,1,0,0,0,388,3391,1,0,0,0,390,
		3399,1,0,0,0,392,3403,1,0,0,0,394,3405,1,0,0,0,396,398,5,3,0,0,397,396,
		1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,
		0,401,399,1,0,0,0,402,411,3,4,2,0,403,405,5,3,0,0,404,403,1,0,0,0,405,
		406,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,410,3,
		4,2,0,409,404,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,
		412,417,1,0,0,0,413,411,1,0,0,0,414,416,5,3,0,0,415,414,1,0,0,0,416,419,
		1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,
		0,420,421,5,0,0,1,421,1,1,0,0,0,422,424,5,3,0,0,423,422,1,0,0,0,424,427,
		1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,
		0,428,432,3,4,2,0,429,431,5,3,0,0,430,429,1,0,0,0,431,434,1,0,0,0,432,
		430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,436,5,
		0,0,1,436,3,1,0,0,0,437,446,3,22,11,0,438,446,3,6,3,0,439,446,3,8,4,0,
		440,446,3,10,5,0,441,446,3,12,6,0,442,446,3,14,7,0,443,446,3,16,8,0,444,
		446,3,18,9,0,445,437,1,0,0,0,445,438,1,0,0,0,445,439,1,0,0,0,445,440,1,
		0,0,0,445,441,1,0,0,0,445,442,1,0,0,0,445,443,1,0,0,0,445,444,1,0,0,0,
		446,5,1,0,0,0,447,516,3,210,105,0,448,516,3,24,12,0,449,516,3,26,13,0,
		450,516,3,28,14,0,451,516,3,30,15,0,452,516,3,32,16,0,453,516,3,34,17,
		0,454,516,3,36,18,0,455,516,3,38,19,0,456,516,3,40,20,0,457,516,3,42,21,
		0,458,516,3,48,24,0,459,516,3,54,27,0,460,516,3,56,28,0,461,516,3,58,29,
		0,462,516,3,60,30,0,463,516,3,66,33,0,464,516,3,68,34,0,465,516,3,78,39,
		0,466,516,3,84,42,0,467,516,3,86,43,0,468,516,3,88,44,0,469,516,3,90,45,
		0,470,516,3,92,46,0,471,516,3,94,47,0,472,516,3,100,50,0,473,516,3,102,
		51,0,474,516,3,104,52,0,475,516,3,106,53,0,476,516,3,108,54,0,477,516,
		3,110,55,0,478,516,3,112,56,0,479,516,3,114,57,0,480,516,3,118,59,0,481,
		516,3,120,60,0,482,516,3,122,61,0,483,516,3,128,64,0,484,516,3,132,66,
		0,485,516,3,134,67,0,486,516,3,136,68,0,487,516,3,138,69,0,488,516,3,140,
		70,0,489,516,3,142,71,0,490,516,3,144,72,0,491,516,3,146,73,0,492,516,
		3,148,74,0,493,516,3,150,75,0,494,516,3,152,76,0,495,516,3,154,77,0,496,
		516,3,156,78,0,497,516,3,158,79,0,498,516,3,160,80,0,499,516,3,162,81,
		0,500,516,3,164,82,0,501,516,3,166,83,0,502,516,3,168,84,0,503,516,3,170,
		85,0,504,516,3,172,86,0,505,516,3,174,87,0,506,516,3,176,88,0,507,516,
		3,178,89,0,508,516,3,180,90,0,509,516,3,182,91,0,510,516,3,184,92,0,511,
		516,3,186,93,0,512,516,3,188,94,0,513,516,3,190,95,0,514,516,3,192,96,
		0,515,447,1,0,0,0,515,448,1,0,0,0,515,449,1,0,0,0,515,450,1,0,0,0,515,
		451,1,0,0,0,515,452,1,0,0,0,515,453,1,0,0,0,515,454,1,0,0,0,515,455,1,
		0,0,0,515,456,1,0,0,0,515,457,1,0,0,0,515,458,1,0,0,0,515,459,1,0,0,0,
		515,460,1,0,0,0,515,461,1,0,0,0,515,462,1,0,0,0,515,463,1,0,0,0,515,464,
		1,0,0,0,515,465,1,0,0,0,515,466,1,0,0,0,515,467,1,0,0,0,515,468,1,0,0,
		0,515,469,1,0,0,0,515,470,1,0,0,0,515,471,1,0,0,0,515,472,1,0,0,0,515,
		473,1,0,0,0,515,474,1,0,0,0,515,475,1,0,0,0,515,476,1,0,0,0,515,477,1,
		0,0,0,515,478,1,0,0,0,515,479,1,0,0,0,515,480,1,0,0,0,515,481,1,0,0,0,
		515,482,1,0,0,0,515,483,1,0,0,0,515,484,1,0,0,0,515,485,1,0,0,0,515,486,
		1,0,0,0,515,487,1,0,0,0,515,488,1,0,0,0,515,489,1,0,0,0,515,490,1,0,0,
		0,515,491,1,0,0,0,515,492,1,0,0,0,515,493,1,0,0,0,515,494,1,0,0,0,515,
		495,1,0,0,0,515,496,1,0,0,0,515,497,1,0,0,0,515,498,1,0,0,0,515,499,1,
		0,0,0,515,500,1,0,0,0,515,501,1,0,0,0,515,502,1,0,0,0,515,503,1,0,0,0,
		515,504,1,0,0,0,515,505,1,0,0,0,515,506,1,0,0,0,515,507,1,0,0,0,515,508,
		1,0,0,0,515,509,1,0,0,0,515,510,1,0,0,0,515,511,1,0,0,0,515,512,1,0,0,
		0,515,513,1,0,0,0,515,514,1,0,0,0,516,7,1,0,0,0,517,518,3,302,151,0,518,
		9,1,0,0,0,519,520,3,302,151,0,520,11,1,0,0,0,521,524,3,20,10,0,522,524,
		3,382,191,0,523,521,1,0,0,0,523,522,1,0,0,0,524,13,1,0,0,0,525,526,3,302,
		151,0,526,15,1,0,0,0,527,528,3,302,151,0,528,17,1,0,0,0,529,530,5,232,
		0,0,530,533,3,302,151,0,531,532,5,28,0,0,532,534,3,336,168,0,533,531,1,
		0,0,0,533,534,1,0,0,0,534,19,1,0,0,0,535,536,3,302,151,0,536,21,1,0,0,
		0,537,538,3,212,106,0,538,23,1,0,0,0,539,542,5,38,0,0,540,541,5,88,0,0,
		541,543,5,143,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,
		546,7,0,0,0,545,544,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,551,5,
		157,0,0,548,549,5,65,0,0,549,550,5,83,0,0,550,552,5,52,0,0,551,548,1,0,
		0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,558,3,386,193,0,554,555,5,14,0,
		0,555,556,3,198,99,0,556,557,5,15,0,0,557,559,1,0,0,0,558,554,1,0,0,0,
		558,559,1,0,0,0,559,563,1,0,0,0,560,561,5,42,0,0,561,562,5,36,0,0,562,
		564,3,336,168,0,563,560,1,0,0,0,563,564,1,0,0,0,564,568,1,0,0,0,565,566,
		5,92,0,0,566,567,5,33,0,0,567,569,3,302,151,0,568,565,1,0,0,0,568,569,
		1,0,0,0,569,573,1,0,0,0,570,571,5,164,0,0,571,572,5,33,0,0,572,574,3,384,
		192,0,573,570,1,0,0,0,573,574,1,0,0,0,574,578,1,0,0,0,575,576,5,118,0,
		0,576,577,5,165,0,0,577,579,3,354,177,0,578,575,1,0,0,0,578,579,1,0,0,
		0,579,585,1,0,0,0,580,581,5,141,0,0,581,582,5,14,0,0,582,583,3,292,146,
		0,583,584,5,15,0,0,584,586,1,0,0,0,585,580,1,0,0,0,585,586,1,0,0,0,586,
		589,1,0,0,0,587,588,5,28,0,0,588,590,3,22,11,0,589,587,1,0,0,0,589,590,
		1,0,0,0,590,25,1,0,0,0,591,594,5,38,0,0,592,593,5,88,0,0,593,595,5,143,
		0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,600,5,157,0,0,
		597,598,5,65,0,0,598,599,5,83,0,0,599,601,5,52,0,0,600,597,1,0,0,0,600,
		601,1,0,0,0,601,602,1,0,0,0,602,603,3,386,193,0,603,612,5,76,0,0,604,605,
		3,354,177,0,605,606,5,12,0,0,606,608,1,0,0,0,607,604,1,0,0,0,607,608,1,
		0,0,0,608,609,1,0,0,0,609,610,3,354,177,0,610,611,5,12,0,0,611,613,1,0,
		0,0,612,607,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,618,3,354,177,
		0,615,616,5,42,0,0,616,617,5,36,0,0,617,619,3,336,168,0,618,615,1,0,0,
		0,618,619,1,0,0,0,619,623,1,0,0,0,620,621,5,92,0,0,621,622,5,33,0,0,622,
		624,3,302,151,0,623,620,1,0,0,0,623,624,1,0,0,0,624,628,1,0,0,0,625,626,
		5,164,0,0,626,627,5,33,0,0,627,629,3,384,192,0,628,625,1,0,0,0,628,629,
		1,0,0,0,629,633,1,0,0,0,630,631,5,118,0,0,631,632,5,165,0,0,632,634,3,
		354,177,0,633,630,1,0,0,0,633,634,1,0,0,0,634,640,1,0,0,0,635,636,5,141,
		0,0,636,637,5,14,0,0,637,638,3,292,146,0,638,639,5,15,0,0,639,641,1,0,
		0,0,640,635,1,0,0,0,640,641,1,0,0,0,641,644,1,0,0,0,642,643,5,28,0,0,643,
		645,3,22,11,0,644,642,1,0,0,0,644,645,1,0,0,0,645,27,1,0,0,0,646,649,5,
		38,0,0,647,648,5,88,0,0,648,650,5,143,0,0,649,647,1,0,0,0,649,650,1,0,
		0,0,650,651,1,0,0,0,651,655,5,157,0,0,652,653,5,65,0,0,653,654,5,83,0,
		0,654,656,5,52,0,0,655,652,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,
		658,3,386,193,0,658,659,5,167,0,0,659,663,3,386,193,0,660,661,5,42,0,0,
		661,662,5,36,0,0,662,664,3,336,168,0,663,660,1,0,0,0,663,664,1,0,0,0,664,
		668,1,0,0,0,665,666,5,92,0,0,666,667,5,33,0,0,667,669,3,302,151,0,668,
		665,1,0,0,0,668,669,1,0,0,0,669,673,1,0,0,0,670,671,5,164,0,0,671,672,
		5,33,0,0,672,674,3,384,192,0,673,670,1,0,0,0,673,674,1,0,0,0,674,678,1,
		0,0,0,675,676,5,118,0,0,676,677,5,165,0,0,677,679,3,354,177,0,678,675,
		1,0,0,0,678,679,1,0,0,0,679,685,1,0,0,0,680,681,5,141,0,0,681,682,5,14,
		0,0,682,683,3,292,146,0,683,684,5,15,0,0,684,686,1,0,0,0,685,680,1,0,0,
		0,685,686,1,0,0,0,686,689,1,0,0,0,687,688,5,28,0,0,688,690,3,22,11,0,689,
		687,1,0,0,0,689,690,1,0,0,0,690,29,1,0,0,0,691,692,5,38,0,0,692,693,5,
		168,0,0,693,697,5,157,0,0,694,695,5,65,0,0,695,696,5,83,0,0,696,698,5,
		52,0,0,697,694,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,700,3,386,193,
		0,700,701,5,169,0,0,701,707,3,386,193,0,702,703,5,57,0,0,703,704,5,148,
		0,0,704,705,5,28,0,0,705,706,5,86,0,0,706,708,3,302,151,0,707,702,1,0,
		0,0,707,708,1,0,0,0,708,714,1,0,0,0,709,710,5,141,0,0,710,711,5,14,0,0,
		711,712,3,292,146,0,712,713,5,15,0,0,713,715,1,0,0,0,714,709,1,0,0,0,714,
		715,1,0,0,0,715,31,1,0,0,0,716,717,5,38,0,0,717,721,5,157,0,0,718,719,
		5,65,0,0,719,720,5,83,0,0,720,722,5,52,0,0,721,718,1,0,0,0,721,722,1,0,
		0,0,722,723,1,0,0,0,723,724,3,386,193,0,724,725,5,169,0,0,725,731,3,386,
		193,0,726,727,5,57,0,0,727,728,5,148,0,0,728,729,5,28,0,0,729,730,5,86,
		0,0,730,732,3,302,151,0,731,726,1,0,0,0,731,732,1,0,0,0,732,736,1,0,0,
		0,733,734,5,42,0,0,734,735,5,36,0,0,735,737,3,336,168,0,736,733,1,0,0,
		0,736,737,1,0,0,0,737,741,1,0,0,0,738,739,5,92,0,0,739,740,5,33,0,0,740,
		742,3,302,151,0,741,738,1,0,0,0,741,742,1,0,0,0,742,746,1,0,0,0,743,744,
		5,164,0,0,744,745,5,33,0,0,745,747,3,384,192,0,746,743,1,0,0,0,746,747,
		1,0,0,0,747,751,1,0,0,0,748,749,5,118,0,0,749,750,5,165,0,0,750,752,3,
		354,177,0,751,748,1,0,0,0,751,752,1,0,0,0,752,758,1,0,0,0,753,754,5,141,
		0,0,754,755,5,14,0,0,755,756,3,292,146,0,756,757,5,15,0,0,757,759,1,0,
		0,0,758,753,1,0,0,0,758,759,1,0,0,0,759,762,1,0,0,0,760,761,5,28,0,0,761,
		763,3,22,11,0,762,760,1,0,0,0,762,763,1,0,0,0,763,33,1,0,0,0,764,767,5,
		38,0,0,765,766,5,88,0,0,766,768,5,143,0,0,767,765,1,0,0,0,767,768,1,0,
		0,0,768,769,1,0,0,0,769,773,5,170,0,0,770,771,5,65,0,0,771,772,5,83,0,
		0,772,774,5,52,0,0,773,770,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,
		780,3,386,193,0,776,777,5,14,0,0,777,778,3,194,97,0,778,779,5,15,0,0,779,
		781,1,0,0,0,780,776,1,0,0,0,780,781,1,0,0,0,781,787,1,0,0,0,782,783,5,
		141,0,0,783,784,5,14,0,0,784,785,3,292,146,0,785,786,5,15,0,0,786,788,
		1,0,0,0,787,782,1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,789,790,5,28,0,
		0,790,791,3,212,106,0,791,35,1,0,0,0,792,795,5,38,0,0,793,794,5,88,0,0,
		794,796,5,143,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,
		798,5,184,0,0,798,802,5,170,0,0,799,800,5,65,0,0,800,801,5,83,0,0,801,
		803,5,52,0,0,802,799,1,0,0,0,802,803,1,0,0,0,803,804,1,0,0,0,804,808,3,
		386,193,0,805,806,5,92,0,0,806,807,5,33,0,0,807,809,3,302,151,0,808,805,
		1,0,0,0,808,809,1,0,0,0,809,813,1,0,0,0,810,811,5,164,0,0,811,812,5,33,
		0,0,812,814,3,384,192,0,813,810,1,0,0,0,813,814,1,0,0,0,814,820,1,0,0,
		0,815,816,5,141,0,0,816,817,5,14,0,0,817,818,3,292,146,0,818,819,5,15,
		0,0,819,821,1,0,0,0,820,815,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,
		823,5,28,0,0,823,824,3,212,106,0,824,37,1,0,0,0,825,826,5,38,0,0,826,827,
		5,184,0,0,827,828,5,170,0,0,828,834,3,386,193,0,829,830,5,141,0,0,830,
		831,5,14,0,0,831,832,3,292,146,0,832,833,5,15,0,0,833,835,1,0,0,0,834,
		829,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,837,5,28,0,0,837,838,5,
		188,0,0,838,839,5,86,0,0,839,840,3,386,193,0,840,39,1,0,0,0,841,842,5,
		38,0,0,842,843,5,183,0,0,843,847,5,154,0,0,844,845,5,65,0,0,845,846,5,
		83,0,0,846,848,5,52,0,0,847,844,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,
		0,849,853,3,386,193,0,850,851,5,118,0,0,851,852,5,165,0,0,852,854,3,386,
		193,0,853,850,1,0,0,0,853,854,1,0,0,0,854,860,1,0,0,0,855,856,5,141,0,
		0,856,857,5,14,0,0,857,858,3,292,146,0,858,859,5,15,0,0,859,861,1,0,0,
		0,860,855,1,0,0,0,860,861,1,0,0,0,861,41,1,0,0,0,862,865,5,38,0,0,863,
		864,5,88,0,0,864,866,5,143,0,0,865,863,1,0,0,0,865,866,1,0,0,0,866,867,
		1,0,0,0,867,868,5,183,0,0,868,872,5,157,0,0,869,870,5,65,0,0,870,871,5,
		83,0,0,871,873,5,52,0,0,872,869,1,0,0,0,872,873,1,0,0,0,873,874,1,0,0,
		0,874,879,3,386,193,0,875,876,5,14,0,0,876,877,3,44,22,0,877,878,5,15,
		0,0,878,880,1,0,0,0,879,875,1,0,0,0,879,880,1,0,0,0,880,887,1,0,0,0,881,
		882,5,118,0,0,882,885,5,165,0,0,883,886,3,354,177,0,884,886,5,42,0,0,885,
		883,1,0,0,0,885,884,1,0,0,0,886,888,1,0,0,0,887,881,1,0,0,0,887,888,1,
		0,0,0,888,898,1,0,0,0,889,890,5,118,0,0,890,891,5,92,0,0,891,896,5,189,
		0,0,892,893,5,14,0,0,893,894,3,44,22,0,894,895,5,15,0,0,895,897,1,0,0,
		0,896,892,1,0,0,0,896,897,1,0,0,0,897,899,1,0,0,0,898,889,1,0,0,0,898,
		899,1,0,0,0,899,900,1,0,0,0,900,901,5,141,0,0,901,902,5,14,0,0,902,903,
		3,292,146,0,903,904,5,15,0,0,904,43,1,0,0,0,905,910,3,46,23,0,906,907,
		5,13,0,0,907,909,3,46,23,0,908,906,1,0,0,0,909,912,1,0,0,0,910,908,1,0,
		0,0,910,911,1,0,0,0,911,45,1,0,0,0,912,910,1,0,0,0,913,914,3,354,177,0,
		914,915,3,332,166,0,915,47,1,0,0,0,916,919,5,38,0,0,917,918,5,88,0,0,918,
		920,5,143,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,923,
		7,0,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,924,1,0,0,0,924,928,5,182,
		0,0,925,926,5,65,0,0,926,927,5,83,0,0,927,929,5,52,0,0,928,925,1,0,0,0,
		928,929,1,0,0,0,929,938,1,0,0,0,930,931,3,354,177,0,931,932,5,12,0,0,932,
		934,1,0,0,0,933,930,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,936,3,
		354,177,0,936,937,5,12,0,0,937,939,1,0,0,0,938,933,1,0,0,0,938,939,1,0,
		0,0,939,940,1,0,0,0,940,941,3,354,177,0,941,943,5,14,0,0,942,944,3,50,
		25,0,943,942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,948,5,15,0,0,
		946,947,5,190,0,0,947,949,3,332,166,0,948,946,1,0,0,0,948,949,1,0,0,0,
		949,950,1,0,0,0,950,951,5,28,0,0,951,952,5,14,0,0,952,953,3,302,151,0,
		953,959,5,15,0,0,954,955,5,141,0,0,955,956,5,14,0,0,956,957,3,292,146,
		0,957,958,5,15,0,0,958,960,1,0,0,0,959,954,1,0,0,0,959,960,1,0,0,0,960,
		49,1,0,0,0,961,966,3,52,26,0,962,963,5,13,0,0,963,965,3,52,26,0,964,962,
		1,0,0,0,965,968,1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,51,1,0,0,0,
		968,966,1,0,0,0,969,970,3,354,177,0,970,971,3,332,166,0,971,53,1,0,0,0,
		972,975,5,38,0,0,973,974,5,88,0,0,974,976,5,143,0,0,975,973,1,0,0,0,975,
		976,1,0,0,0,976,978,1,0,0,0,977,979,7,0,0,0,978,977,1,0,0,0,978,979,1,
		0,0,0,979,980,1,0,0,0,980,984,5,182,0,0,981,982,5,65,0,0,982,983,5,83,
		0,0,983,985,5,52,0,0,984,981,1,0,0,0,984,985,1,0,0,0,985,994,1,0,0,0,986,
		987,3,354,177,0,987,988,5,12,0,0,988,990,1,0,0,0,989,986,1,0,0,0,989,990,
		1,0,0,0,990,991,1,0,0,0,991,992,3,354,177,0,992,993,5,12,0,0,993,995,1,
		0,0,0,994,989,1,0,0,0,994,995,1,0,0,0,995,996,1,0,0,0,996,997,3,354,177,
		0,997,999,5,14,0,0,998,1000,3,50,25,0,999,998,1,0,0,0,999,1000,1,0,0,0,
		1000,1001,1,0,0,0,1001,1002,5,15,0,0,1002,1003,5,190,0,0,1003,1007,3,332,
		166,0,1004,1008,5,191,0,0,1005,1006,5,83,0,0,1006,1008,5,191,0,0,1007,
		1004,1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,
		1010,5,192,0,0,1010,1016,3,354,177,0,1011,1012,5,141,0,0,1012,1013,5,14,
		0,0,1013,1014,3,292,146,0,1014,1015,5,15,0,0,1015,1017,1,0,0,0,1016,1011,
		1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1019,5,28,0,0,1019,1020,
		3,336,168,0,1020,55,1,0,0,0,1021,1024,5,38,0,0,1022,1023,5,88,0,0,1023,
		1025,5,143,0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,
		1028,7,0,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,
		1033,5,182,0,0,1030,1031,5,65,0,0,1031,1032,5,83,0,0,1032,1034,5,52,0,
		0,1033,1030,1,0,0,0,1033,1034,1,0,0,0,1034,1043,1,0,0,0,1035,1036,3,354,
		177,0,1036,1037,5,12,0,0,1037,1039,1,0,0,0,1038,1035,1,0,0,0,1038,1039,
		1,0,0,0,1039,1040,1,0,0,0,1040,1041,3,354,177,0,1041,1042,5,12,0,0,1042,
		1044,1,0,0,0,1043,1038,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,
		1046,3,354,177,0,1046,1048,5,14,0,0,1047,1049,3,50,25,0,1048,1047,1,0,
		0,0,1048,1049,1,0,0,0,1049,1050,1,0,0,0,1050,1051,5,15,0,0,1051,1052,5,
		190,0,0,1052,1053,3,332,166,0,1053,1054,5,192,0,0,1054,1058,3,354,177,
		0,1055,1056,5,118,0,0,1056,1057,5,165,0,0,1057,1059,3,386,193,0,1058,1055,
		1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1061,5,141,0,0,1061,1062,
		5,14,0,0,1062,1063,3,292,146,0,1063,1064,5,15,0,0,1064,1065,5,28,0,0,1065,
		1066,3,336,168,0,1066,57,1,0,0,0,1067,1070,5,38,0,0,1068,1069,5,88,0,0,
		1069,1071,5,143,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1073,1,0,
		0,0,1072,1074,7,0,0,0,1073,1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,
		0,0,0,1075,1079,5,182,0,0,1076,1077,5,65,0,0,1077,1078,5,83,0,0,1078,1080,
		5,52,0,0,1079,1076,1,0,0,0,1079,1080,1,0,0,0,1080,1089,1,0,0,0,1081,1082,
		3,354,177,0,1082,1083,5,12,0,0,1083,1085,1,0,0,0,1084,1081,1,0,0,0,1084,
		1085,1,0,0,0,1085,1086,1,0,0,0,1086,1087,3,354,177,0,1087,1088,5,12,0,
		0,1088,1090,1,0,0,0,1089,1084,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,
		0,0,1091,1092,3,354,177,0,1092,1094,5,14,0,0,1093,1095,3,50,25,0,1094,
		1093,1,0,0,0,1094,1095,1,0,0,0,1095,1096,1,0,0,0,1096,1097,5,15,0,0,1097,
		1098,5,190,0,0,1098,1099,3,332,166,0,1099,1100,5,193,0,0,1100,1101,5,118,
		0,0,1101,1102,5,165,0,0,1102,1108,3,386,193,0,1103,1104,5,141,0,0,1104,
		1105,5,14,0,0,1105,1106,3,292,146,0,1106,1107,5,15,0,0,1107,1109,1,0,0,
		0,1108,1103,1,0,0,0,1108,1109,1,0,0,0,1109,59,1,0,0,0,1110,1113,5,38,0,
		0,1111,1112,5,88,0,0,1112,1114,5,143,0,0,1113,1111,1,0,0,0,1113,1114,1,
		0,0,0,1114,1116,1,0,0,0,1115,1117,7,0,0,0,1116,1115,1,0,0,0,1116,1117,
		1,0,0,0,1117,1118,1,0,0,0,1118,1119,5,194,0,0,1119,1123,5,182,0,0,1120,
		1121,5,65,0,0,1121,1122,5,83,0,0,1122,1124,5,52,0,0,1123,1120,1,0,0,0,
		1123,1124,1,0,0,0,1124,1133,1,0,0,0,1125,1126,3,354,177,0,1126,1127,5,
		12,0,0,1127,1129,1,0,0,0,1128,1125,1,0,0,0,1128,1129,1,0,0,0,1129,1130,
		1,0,0,0,1130,1131,3,354,177,0,1131,1132,5,12,0,0,1132,1134,1,0,0,0,1133,
		1128,1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1136,3,354,177,0,
		1136,1138,5,14,0,0,1137,1139,3,62,31,0,1138,1137,1,0,0,0,1138,1139,1,0,
		0,0,1139,1140,1,0,0,0,1140,1143,5,15,0,0,1141,1142,5,190,0,0,1142,1144,
		3,332,166,0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,1145,1,0,0,0,1145,
		1146,5,28,0,0,1146,1147,5,14,0,0,1147,1148,3,302,151,0,1148,1154,5,15,
		0,0,1149,1150,5,141,0,0,1150,1151,5,14,0,0,1151,1152,3,292,146,0,1152,
		1153,5,15,0,0,1153,1155,1,0,0,0,1154,1149,1,0,0,0,1154,1155,1,0,0,0,1155,
		61,1,0,0,0,1156,1161,3,64,32,0,1157,1158,5,13,0,0,1158,1160,3,64,32,0,
		1159,1157,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,1,0,0,
		0,1162,63,1,0,0,0,1163,1161,1,0,0,0,1164,1165,3,386,193,0,1165,1168,3,
		332,166,0,1166,1167,5,83,0,0,1167,1169,5,194,0,0,1168,1166,1,0,0,0,1168,
		1169,1,0,0,0,1169,65,1,0,0,0,1170,1173,5,38,0,0,1171,1172,5,88,0,0,1172,
		1174,5,143,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,
		1177,7,0,0,0,1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,1178,1,0,0,0,1178,
		1179,5,194,0,0,1179,1183,5,182,0,0,1180,1181,5,65,0,0,1181,1182,5,83,0,
		0,1182,1184,5,52,0,0,1183,1180,1,0,0,0,1183,1184,1,0,0,0,1184,1193,1,0,
		0,0,1185,1186,3,354,177,0,1186,1187,5,12,0,0,1187,1189,1,0,0,0,1188,1185,
		1,0,0,0,1188,1189,1,0,0,0,1189,1190,1,0,0,0,1190,1191,3,354,177,0,1191,
		1192,5,12,0,0,1192,1194,1,0,0,0,1193,1188,1,0,0,0,1193,1194,1,0,0,0,1194,
		1195,1,0,0,0,1195,1196,3,354,177,0,1196,1198,5,14,0,0,1197,1199,3,62,31,
		0,1198,1197,1,0,0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,1201,5,15,
		0,0,1201,1202,5,190,0,0,1202,1203,3,332,166,0,1203,1204,5,192,0,0,1204,
		1210,3,354,177,0,1205,1206,5,141,0,0,1206,1207,5,14,0,0,1207,1208,3,292,
		146,0,1208,1209,5,15,0,0,1209,1211,1,0,0,0,1210,1205,1,0,0,0,1210,1211,
		1,0,0,0,1211,1212,1,0,0,0,1212,1213,5,28,0,0,1213,1214,3,336,168,0,1214,
		67,1,0,0,0,1215,1218,5,38,0,0,1216,1217,5,88,0,0,1217,1219,5,143,0,0,1218,
		1216,1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,1220,1221,5,157,0,0,1221,
		1225,5,182,0,0,1222,1223,5,65,0,0,1223,1224,5,83,0,0,1224,1226,5,52,0,
		0,1225,1222,1,0,0,0,1225,1226,1,0,0,0,1226,1235,1,0,0,0,1227,1228,3,354,
		177,0,1228,1229,5,12,0,0,1229,1231,1,0,0,0,1230,1227,1,0,0,0,1230,1231,
		1,0,0,0,1231,1232,1,0,0,0,1232,1233,3,354,177,0,1233,1234,5,12,0,0,1234,
		1236,1,0,0,0,1235,1230,1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,
		1238,3,354,177,0,1238,1240,5,14,0,0,1239,1241,3,70,35,0,1240,1239,1,0,
		0,0,1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1249,5,15,0,0,1243,1244,5,
		190,0,0,1244,1245,5,157,0,0,1245,1246,5,18,0,0,1246,1247,3,74,37,0,1247,
		1248,5,19,0,0,1248,1250,1,0,0,0,1249,1243,1,0,0,0,1249,1250,1,0,0,0,1250,
		1256,1,0,0,0,1251,1252,5,141,0,0,1252,1253,5,14,0,0,1253,1254,3,292,146,
		0,1254,1255,5,15,0,0,1255,1257,1,0,0,0,1256,1251,1,0,0,0,1256,1257,1,0,
		0,0,1257,1258,1,0,0,0,1258,1259,5,28,0,0,1259,1260,3,302,151,0,1260,69,
		1,0,0,0,1261,1266,3,72,36,0,1262,1263,5,13,0,0,1263,1265,3,72,36,0,1264,
		1262,1,0,0,0,1265,1268,1,0,0,0,1266,1264,1,0,0,0,1266,1267,1,0,0,0,1267,
		71,1,0,0,0,1268,1266,1,0,0,0,1269,1273,3,386,193,0,1270,1274,3,332,166,
		0,1271,1272,5,26,0,0,1272,1274,5,195,0,0,1273,1270,1,0,0,0,1273,1271,1,
		0,0,0,1274,73,1,0,0,0,1275,1280,3,76,38,0,1276,1277,5,13,0,0,1277,1279,
		3,76,38,0,1278,1276,1,0,0,0,1279,1282,1,0,0,0,1280,1278,1,0,0,0,1280,1281,
		1,0,0,0,1281,75,1,0,0,0,1282,1280,1,0,0,0,1283,1284,3,386,193,0,1284,1285,
		3,332,166,0,1285,77,1,0,0,0,1286,1289,5,38,0,0,1287,1288,5,88,0,0,1288,
		1290,5,143,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,1291,1,0,0,0,1291,
		1295,5,181,0,0,1292,1293,5,65,0,0,1293,1294,5,83,0,0,1294,1296,5,52,0,
		0,1295,1292,1,0,0,0,1295,1296,1,0,0,0,1296,1305,1,0,0,0,1297,1298,3,354,
		177,0,1298,1299,5,12,0,0,1299,1301,1,0,0,0,1300,1297,1,0,0,0,1300,1301,
		1,0,0,0,1301,1302,1,0,0,0,1302,1303,3,354,177,0,1303,1304,5,12,0,0,1304,
		1306,1,0,0,0,1305,1300,1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,0,0,0,1307,
		1308,3,354,177,0,1308,1310,5,14,0,0,1309,1311,3,80,40,0,1310,1309,1,0,
		0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1318,5,15,0,0,1313,1314,5,
		141,0,0,1314,1315,5,14,0,0,1315,1316,3,292,146,0,1316,1317,5,15,0,0,1317,
		1319,1,0,0,0,1318,1313,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,
		1324,5,198,0,0,1321,1323,5,3,0,0,1322,1321,1,0,0,0,1323,1326,1,0,0,0,1324,
		1322,1,0,0,0,1324,1325,1,0,0,0,1325,1327,1,0,0,0,1326,1324,1,0,0,0,1327,
		1336,3,4,2,0,1328,1330,5,3,0,0,1329,1328,1,0,0,0,1330,1331,1,0,0,0,1331,
		1329,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1335,3,4,2,0,1334,
		1329,1,0,0,0,1335,1338,1,0,0,0,1336,1334,1,0,0,0,1336,1337,1,0,0,0,1337,
		1342,1,0,0,0,1338,1336,1,0,0,0,1339,1341,5,3,0,0,1340,1339,1,0,0,0,1341,
		1344,1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,
		1342,1,0,0,0,1345,1346,5,47,0,0,1346,79,1,0,0,0,1347,1352,3,82,41,0,1348,
		1349,5,13,0,0,1349,1351,3,82,41,0,1350,1348,1,0,0,0,1351,1354,1,0,0,0,
		1352,1350,1,0,0,0,1352,1353,1,0,0,0,1353,81,1,0,0,0,1354,1352,1,0,0,0,
		1355,1357,7,1,0,0,1356,1355,1,0,0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,
		0,1358,1359,3,386,193,0,1359,1360,3,332,166,0,1360,83,1,0,0,0,1361,1364,
		5,38,0,0,1362,1363,5,88,0,0,1363,1365,5,143,0,0,1364,1362,1,0,0,0,1364,
		1365,1,0,0,0,1365,1366,1,0,0,0,1366,1370,5,181,0,0,1367,1368,5,65,0,0,
		1368,1369,5,83,0,0,1369,1371,5,52,0,0,1370,1367,1,0,0,0,1370,1371,1,0,
		0,0,1371,1380,1,0,0,0,1372,1373,3,354,177,0,1373,1374,5,12,0,0,1374,1376,
		1,0,0,0,1375,1372,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,1378,
		3,354,177,0,1378,1379,5,12,0,0,1379,1381,1,0,0,0,1380,1375,1,0,0,0,1380,
		1381,1,0,0,0,1381,1382,1,0,0,0,1382,1383,3,354,177,0,1383,1385,5,14,0,
		0,1384,1386,3,80,40,0,1385,1384,1,0,0,0,1385,1386,1,0,0,0,1386,1387,1,
		0,0,0,1387,1391,5,15,0,0,1388,1389,5,183,0,0,1389,1390,5,199,0,0,1390,
		1392,5,200,0,0,1391,1388,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,
		1394,5,118,0,0,1394,1395,5,165,0,0,1395,1401,3,386,193,0,1396,1397,5,141,
		0,0,1397,1398,5,14,0,0,1398,1399,3,292,146,0,1399,1400,5,15,0,0,1400,1402,
		1,0,0,0,1401,1396,1,0,0,0,1401,1402,1,0,0,0,1402,1403,1,0,0,0,1403,1404,
		5,192,0,0,1404,1407,3,354,177,0,1405,1406,5,28,0,0,1406,1408,3,336,168,
		0,1407,1405,1,0,0,0,1407,1408,1,0,0,0,1408,85,1,0,0,0,1409,1412,5,38,0,
		0,1410,1411,5,88,0,0,1411,1413,5,143,0,0,1412,1410,1,0,0,0,1412,1413,1,
		0,0,0,1413,1414,1,0,0,0,1414,1415,5,149,0,0,1415,1416,5,178,0,0,1416,1420,
		5,179,0,0,1417,1418,5,65,0,0,1418,1419,5,83,0,0,1419,1421,5,52,0,0,1420,
		1417,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,1422,1423,3,386,193,0,
		1423,1424,5,87,0,0,1424,1431,3,386,193,0,1425,1426,5,204,0,0,1426,1427,
		5,108,0,0,1427,1428,5,14,0,0,1428,1429,3,304,152,0,1429,1430,5,15,0,0,
		1430,1432,1,0,0,0,1431,1425,1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,
		0,1433,1434,5,205,0,0,1434,1435,5,114,0,0,1435,1436,5,14,0,0,1436,1437,
		3,302,151,0,1437,1438,5,15,0,0,1438,87,1,0,0,0,1439,1440,5,38,0,0,1440,
		1441,5,177,0,0,1441,1442,3,302,151,0,1442,1443,5,141,0,0,1443,1444,5,14,
		0,0,1444,1445,3,292,146,0,1445,1446,5,15,0,0,1446,89,1,0,0,0,1447,1448,
		5,38,0,0,1448,1449,5,176,0,0,1449,1450,3,302,151,0,1450,1451,5,141,0,0,
		1451,1452,5,14,0,0,1452,1453,3,292,146,0,1453,1454,5,15,0,0,1454,91,1,
		0,0,0,1455,1456,5,38,0,0,1456,1457,5,175,0,0,1457,1458,3,302,151,0,1458,
		1459,5,141,0,0,1459,1460,5,14,0,0,1460,1461,3,292,146,0,1461,1462,5,15,
		0,0,1462,93,1,0,0,0,1463,1464,5,38,0,0,1464,1465,5,172,0,0,1465,1469,5,
		173,0,0,1466,1467,5,65,0,0,1467,1468,5,83,0,0,1468,1470,5,52,0,0,1469,
		1466,1,0,0,0,1469,1470,1,0,0,0,1470,1471,1,0,0,0,1471,1472,3,386,193,0,
		1472,1473,5,87,0,0,1473,1474,3,386,193,0,1474,1487,5,14,0,0,1475,1476,
		5,24,0,0,1476,1484,5,189,0,0,1477,1478,5,118,0,0,1478,1479,5,206,0,0,1479,
		1480,5,141,0,0,1480,1481,5,14,0,0,1481,1482,3,96,48,0,1482,1483,5,15,0,
		0,1483,1485,1,0,0,0,1484,1477,1,0,0,0,1484,1485,1,0,0,0,1485,1488,1,0,
		0,0,1486,1488,3,96,48,0,1487,1475,1,0,0,0,1487,1486,1,0,0,0,1488,1489,
		1,0,0,0,1489,1495,5,15,0,0,1490,1491,5,141,0,0,1491,1492,5,14,0,0,1492,
		1493,3,292,146,0,1493,1494,5,15,0,0,1494,1496,1,0,0,0,1495,1490,1,0,0,
		0,1495,1496,1,0,0,0,1496,95,1,0,0,0,1497,1502,3,98,49,0,1498,1499,5,13,
		0,0,1499,1501,3,98,49,0,1500,1498,1,0,0,0,1501,1504,1,0,0,0,1502,1500,
		1,0,0,0,1502,1503,1,0,0,0,1503,97,1,0,0,0,1504,1502,1,0,0,0,1505,1507,
		3,386,193,0,1506,1508,3,332,166,0,1507,1506,1,0,0,0,1507,1508,1,0,0,0,
		1508,1514,1,0,0,0,1509,1510,5,141,0,0,1510,1511,5,14,0,0,1511,1512,3,292,
		146,0,1512,1513,5,15,0,0,1513,1515,1,0,0,0,1514,1509,1,0,0,0,1514,1515,
		1,0,0,0,1515,99,1,0,0,0,1516,1519,5,38,0,0,1517,1518,5,88,0,0,1518,1520,
		5,143,0,0,1519,1517,1,0,0,0,1519,1520,1,0,0,0,1520,1521,1,0,0,0,1521,1522,
		5,174,0,0,1522,1526,5,173,0,0,1523,1524,5,65,0,0,1524,1525,5,83,0,0,1525,
		1527,5,52,0,0,1526,1523,1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,0,0,1528,
		1529,3,386,193,0,1529,1530,5,87,0,0,1530,1531,3,386,193,0,1531,1532,5,
		14,0,0,1532,1533,3,386,193,0,1533,1539,5,15,0,0,1534,1535,5,207,0,0,1535,
		1536,5,14,0,0,1536,1537,3,384,192,0,1537,1538,5,15,0,0,1538,1540,1,0,0,
		0,1539,1534,1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,1542,5,141,
		0,0,1542,1543,5,14,0,0,1543,1544,3,292,146,0,1544,1545,5,15,0,0,1545,101,
		1,0,0,0,1546,1547,5,208,0,0,1547,1550,5,154,0,0,1548,1549,5,65,0,0,1549,
		1551,5,52,0,0,1550,1548,1,0,0,0,1550,1551,1,0,0,0,1551,1555,1,0,0,0,1552,
		1553,3,354,177,0,1553,1554,5,12,0,0,1554,1556,1,0,0,0,1555,1552,1,0,0,
		0,1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,1558,3,354,177,0,1558,1559,
		5,103,0,0,1559,1560,5,42,0,0,1560,1561,5,36,0,0,1561,1562,3,336,168,0,
		1562,103,1,0,0,0,1563,1564,5,208,0,0,1564,1567,5,154,0,0,1565,1566,5,65,
		0,0,1566,1568,5,52,0,0,1567,1565,1,0,0,0,1567,1568,1,0,0,0,1568,1572,1,
		0,0,0,1569,1570,3,354,177,0,1570,1571,5,12,0,0,1571,1573,1,0,0,0,1572,
		1569,1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,0,0,1574,1575,3,354,177,0,
		1575,1576,5,103,0,0,1576,1577,5,141,0,0,1577,1578,5,14,0,0,1578,1579,3,
		292,146,0,1579,1580,5,15,0,0,1580,105,1,0,0,0,1581,1582,5,208,0,0,1582,
		1585,5,154,0,0,1583,1584,5,65,0,0,1584,1586,5,52,0,0,1585,1583,1,0,0,0,
		1585,1586,1,0,0,0,1586,1590,1,0,0,0,1587,1588,3,354,177,0,1588,1589,5,
		12,0,0,1589,1591,1,0,0,0,1590,1587,1,0,0,0,1590,1591,1,0,0,0,1591,1592,
		1,0,0,0,1592,1593,3,354,177,0,1593,1594,5,209,0,0,1594,1595,5,188,0,0,
		1595,1601,3,386,193,0,1596,1597,5,141,0,0,1597,1598,5,14,0,0,1598,1599,
		3,292,146,0,1599,1600,5,15,0,0,1600,1602,1,0,0,0,1601,1596,1,0,0,0,1601,
		1602,1,0,0,0,1602,107,1,0,0,0,1603,1604,5,208,0,0,1604,1607,5,154,0,0,
		1605,1606,5,65,0,0,1606,1608,5,52,0,0,1607,1605,1,0,0,0,1607,1608,1,0,
		0,0,1608,1609,1,0,0,0,1609,1610,3,386,193,0,1610,1611,5,171,0,0,1611,1612,
		5,188,0,0,1612,1613,3,302,151,0,1613,109,1,0,0,0,1614,1615,5,208,0,0,1615,
		1618,5,157,0,0,1616,1617,5,65,0,0,1617,1619,5,52,0,0,1618,1616,1,0,0,0,
		1618,1619,1,0,0,0,1619,1620,1,0,0,0,1620,1621,3,386,193,0,1621,1622,5,
		103,0,0,1622,1623,5,141,0,0,1623,1624,5,14,0,0,1624,1625,3,292,146,0,1625,
		1626,5,15,0,0,1626,111,1,0,0,0,1627,1628,5,208,0,0,1628,1629,5,157,0,0,
		1629,1630,3,386,193,0,1630,1631,5,209,0,0,1631,1635,5,206,0,0,1632,1633,
		5,65,0,0,1633,1634,5,83,0,0,1634,1636,5,52,0,0,1635,1632,1,0,0,0,1635,
		1636,1,0,0,0,1636,1637,1,0,0,0,1637,1649,3,98,49,0,1638,1639,5,13,0,0,
		1639,1640,5,209,0,0,1640,1644,5,206,0,0,1641,1642,5,65,0,0,1642,1643,5,
		83,0,0,1643,1645,5,52,0,0,1644,1641,1,0,0,0,1644,1645,1,0,0,0,1645,1646,
		1,0,0,0,1646,1648,3,98,49,0,1647,1638,1,0,0,0,1648,1651,1,0,0,0,1649,1647,
		1,0,0,0,1649,1650,1,0,0,0,1650,113,1,0,0,0,1651,1649,1,0,0,0,1652,1653,
		5,208,0,0,1653,1662,5,157,0,0,1654,1655,3,354,177,0,1655,1656,5,12,0,0,
		1656,1658,1,0,0,0,1657,1654,1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,0,
		0,1659,1660,3,354,177,0,1660,1661,5,12,0,0,1661,1663,1,0,0,0,1662,1657,
		1,0,0,0,1662,1663,1,0,0,0,1663,1664,1,0,0,0,1664,1665,3,354,177,0,1665,
		1670,3,116,58,0,1666,1667,5,13,0,0,1667,1669,3,116,58,0,1668,1666,1,0,
		0,0,1669,1672,1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,115,1,0,
		0,0,1672,1670,1,0,0,0,1673,1681,5,209,0,0,1674,1678,5,158,0,0,1675,1676,
		5,65,0,0,1676,1677,5,83,0,0,1677,1679,5,52,0,0,1678,1675,1,0,0,0,1678,
		1679,1,0,0,0,1679,1680,1,0,0,0,1680,1682,3,354,177,0,1681,1674,1,0,0,0,
		1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1684,5,162,0,0,1684,1685,5,161,
		0,0,1685,1686,5,14,0,0,1686,1687,3,96,48,0,1687,1688,5,15,0,0,1688,1689,
		5,163,0,0,1689,1690,3,354,177,0,1690,1691,5,14,0,0,1691,1692,3,96,48,0,
		1692,1693,5,15,0,0,1693,1694,5,83,0,0,1694,1695,5,159,0,0,1695,1706,1,
		0,0,0,1696,1697,5,209,0,0,1697,1698,5,160,0,0,1698,1699,5,161,0,0,1699,
		1700,5,14,0,0,1700,1701,3,96,48,0,1701,1702,5,15,0,0,1702,1703,5,83,0,
		0,1703,1704,5,159,0,0,1704,1706,1,0,0,0,1705,1673,1,0,0,0,1705,1696,1,
		0,0,0,1706,117,1,0,0,0,1707,1708,5,208,0,0,1708,1717,5,157,0,0,1709,1710,
		3,354,177,0,1710,1711,5,12,0,0,1711,1713,1,0,0,0,1712,1709,1,0,0,0,1712,
		1713,1,0,0,0,1713,1714,1,0,0,0,1714,1715,3,354,177,0,1715,1716,5,12,0,
		0,1716,1718,1,0,0,0,1717,1712,1,0,0,0,1717,1718,1,0,0,0,1718,1719,1,0,
		0,0,1719,1720,3,354,177,0,1720,1721,5,209,0,0,1721,1722,5,160,0,0,1722,
		1723,5,161,0,0,1723,1724,5,14,0,0,1724,1725,3,96,48,0,1725,1726,5,15,0,
		0,1726,1727,5,83,0,0,1727,1728,5,159,0,0,1728,119,1,0,0,0,1729,1730,5,
		208,0,0,1730,1733,5,157,0,0,1731,1732,5,65,0,0,1732,1734,5,52,0,0,1733,
		1731,1,0,0,0,1733,1734,1,0,0,0,1734,1735,1,0,0,0,1735,1736,3,386,193,0,
		1736,1737,5,210,0,0,1737,1738,5,108,0,0,1738,1739,3,386,193,0,1739,121,
		1,0,0,0,1740,1741,5,208,0,0,1741,1744,5,157,0,0,1742,1743,5,65,0,0,1743,
		1745,5,52,0,0,1744,1742,1,0,0,0,1744,1745,1,0,0,0,1745,1746,1,0,0,0,1746,
		1747,3,386,193,0,1747,1752,3,124,62,0,1748,1749,5,13,0,0,1749,1751,3,124,
		62,0,1750,1748,1,0,0,0,1751,1754,1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,
		0,0,0,1753,123,1,0,0,0,1754,1752,1,0,0,0,1755,1756,5,210,0,0,1756,1759,
		5,206,0,0,1757,1758,5,65,0,0,1758,1760,5,52,0,0,1759,1757,1,0,0,0,1759,
		1760,1,0,0,0,1760,1761,1,0,0,0,1761,1766,3,126,63,0,1762,1763,5,13,0,0,
		1763,1765,3,126,63,0,1764,1762,1,0,0,0,1765,1768,1,0,0,0,1766,1764,1,0,
		0,0,1766,1767,1,0,0,0,1767,125,1,0,0,0,1768,1766,1,0,0,0,1769,1770,3,354,
		177,0,1770,1771,5,108,0,0,1771,1772,3,354,177,0,1772,127,1,0,0,0,1773,
		1774,5,208,0,0,1774,1775,5,157,0,0,1775,1776,3,386,193,0,1776,1781,3,130,
		65,0,1777,1778,5,13,0,0,1778,1780,3,130,65,0,1779,1777,1,0,0,0,1780,1783,
		1,0,0,0,1781,1779,1,0,0,0,1781,1782,1,0,0,0,1782,129,1,0,0,0,1783,1781,
		1,0,0,0,1784,1785,5,171,0,0,1785,1788,5,206,0,0,1786,1787,5,65,0,0,1787,
		1789,5,52,0,0,1788,1786,1,0,0,0,1788,1789,1,0,0,0,1789,1790,1,0,0,0,1790,
		1791,3,354,177,0,1791,131,1,0,0,0,1792,1793,5,208,0,0,1793,1802,5,157,
		0,0,1794,1795,3,354,177,0,1795,1796,5,12,0,0,1796,1798,1,0,0,0,1797,1794,
		1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,1799,1800,3,354,177,0,1800,
		1801,5,12,0,0,1801,1803,1,0,0,0,1802,1797,1,0,0,0,1802,1803,1,0,0,0,1803,
		1804,1,0,0,0,1804,1805,3,354,177,0,1805,1806,5,171,0,0,1806,1809,5,158,
		0,0,1807,1808,5,65,0,0,1808,1810,5,52,0,0,1809,1807,1,0,0,0,1809,1810,
		1,0,0,0,1810,1811,1,0,0,0,1811,1812,3,302,151,0,1812,133,1,0,0,0,1813,
		1814,5,208,0,0,1814,1823,5,157,0,0,1815,1816,3,354,177,0,1816,1817,5,12,
		0,0,1817,1819,1,0,0,0,1818,1815,1,0,0,0,1818,1819,1,0,0,0,1819,1820,1,
		0,0,0,1820,1821,3,354,177,0,1821,1822,5,12,0,0,1822,1824,1,0,0,0,1823,
		1818,1,0,0,0,1823,1824,1,0,0,0,1824,1825,1,0,0,0,1825,1826,3,354,177,0,
		1826,1827,5,171,0,0,1827,1828,5,160,0,0,1828,1831,5,161,0,0,1829,1830,
		5,65,0,0,1830,1832,5,52,0,0,1831,1829,1,0,0,0,1831,1832,1,0,0,0,1832,135,
		1,0,0,0,1833,1834,5,208,0,0,1834,1835,5,157,0,0,1835,1836,3,386,193,0,
		1836,1837,5,103,0,0,1837,1838,5,42,0,0,1838,1839,5,36,0,0,1839,1840,3,
		336,168,0,1840,137,1,0,0,0,1841,1842,5,208,0,0,1842,1845,7,2,0,0,1843,
		1844,5,65,0,0,1844,1846,5,52,0,0,1845,1843,1,0,0,0,1845,1846,1,0,0,0,1846,
		1847,1,0,0,0,1847,1848,3,386,193,0,1848,1849,5,208,0,0,1849,1852,5,206,
		0,0,1850,1851,5,65,0,0,1851,1853,5,52,0,0,1852,1850,1,0,0,0,1852,1853,
		1,0,0,0,1853,1854,1,0,0,0,1854,1855,3,354,177,0,1855,1856,5,103,0,0,1856,
		1857,5,141,0,0,1857,1858,5,14,0,0,1858,1859,3,292,146,0,1859,1860,5,15,
		0,0,1860,139,1,0,0,0,1861,1862,5,208,0,0,1862,1865,5,157,0,0,1863,1864,
		5,65,0,0,1864,1866,5,52,0,0,1865,1863,1,0,0,0,1865,1866,1,0,0,0,1866,1867,
		1,0,0,0,1867,1868,3,386,193,0,1868,1869,5,208,0,0,1869,1872,5,206,0,0,
		1870,1871,5,65,0,0,1871,1873,5,52,0,0,1872,1870,1,0,0,0,1872,1873,1,0,
		0,0,1873,1874,1,0,0,0,1874,1875,3,354,177,0,1875,1876,5,171,0,0,1876,1877,
		5,83,0,0,1877,1878,5,84,0,0,1878,141,1,0,0,0,1879,1880,5,208,0,0,1880,
		1883,5,157,0,0,1881,1882,5,65,0,0,1882,1884,5,52,0,0,1883,1881,1,0,0,0,
		1883,1884,1,0,0,0,1884,1885,1,0,0,0,1885,1886,3,386,193,0,1886,1887,5,
		208,0,0,1887,1890,5,206,0,0,1888,1889,5,65,0,0,1889,1891,5,52,0,0,1890,
		1888,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,1892,1893,3,354,177,0,
		1893,1894,5,103,0,0,1894,1895,5,211,0,0,1895,1896,5,195,0,0,1896,1897,
		3,332,166,0,1897,143,1,0,0,0,1898,1899,5,208,0,0,1899,1902,5,157,0,0,1900,
		1901,5,65,0,0,1901,1903,5,52,0,0,1902,1900,1,0,0,0,1902,1903,1,0,0,0,1903,
		1904,1,0,0,0,1904,1905,3,386,193,0,1905,1906,5,208,0,0,1906,1909,5,206,
		0,0,1907,1908,5,65,0,0,1908,1910,5,52,0,0,1909,1907,1,0,0,0,1909,1910,
		1,0,0,0,1910,1911,1,0,0,0,1911,1912,3,354,177,0,1912,1913,5,103,0,0,1913,
		1914,5,42,0,0,1914,1915,3,302,151,0,1915,145,1,0,0,0,1916,1917,5,208,0,
		0,1917,1920,5,157,0,0,1918,1919,5,65,0,0,1919,1921,5,52,0,0,1920,1918,
		1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,1923,3,386,193,0,1923,
		1924,5,208,0,0,1924,1927,5,206,0,0,1925,1926,5,65,0,0,1926,1928,5,52,0,
		0,1927,1925,1,0,0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1930,3,354,
		177,0,1930,1931,5,171,0,0,1931,1932,5,42,0,0,1932,147,1,0,0,0,1933,1934,
		5,208,0,0,1934,1937,5,170,0,0,1935,1936,5,65,0,0,1936,1938,5,52,0,0,1937,
		1935,1,0,0,0,1937,1938,1,0,0,0,1938,1939,1,0,0,0,1939,1940,3,386,193,0,
		1940,1941,5,103,0,0,1941,1942,5,141,0,0,1942,1943,5,14,0,0,1943,1944,3,
		292,146,0,1944,1945,5,15,0,0,1945,149,1,0,0,0,1946,1947,5,208,0,0,1947,
		1948,5,184,0,0,1948,1951,5,170,0,0,1949,1950,5,65,0,0,1950,1952,5,52,0,
		0,1951,1949,1,0,0,0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,1954,3,386,
		193,0,1954,1955,5,103,0,0,1955,1956,5,141,0,0,1956,1957,5,14,0,0,1957,
		1958,3,292,146,0,1958,1959,5,15,0,0,1959,151,1,0,0,0,1960,1961,5,208,0,
		0,1961,1962,5,212,0,0,1962,1963,5,103,0,0,1963,1964,5,141,0,0,1964,1965,
		5,14,0,0,1965,1966,3,292,146,0,1966,1967,5,15,0,0,1967,153,1,0,0,0,1968,
		1969,5,208,0,0,1969,1970,5,213,0,0,1970,1971,3,386,193,0,1971,1972,5,103,
		0,0,1972,1973,5,141,0,0,1973,1974,5,14,0,0,1974,1975,3,292,146,0,1975,
		1976,5,15,0,0,1976,155,1,0,0,0,1977,1978,5,208,0,0,1978,1979,5,214,0,0,
		1979,1980,3,386,193,0,1980,1981,5,103,0,0,1981,1982,5,141,0,0,1982,1983,
		5,14,0,0,1983,1984,3,292,146,0,1984,1985,5,15,0,0,1985,157,1,0,0,0,1986,
		1987,5,208,0,0,1987,1988,5,177,0,0,1988,1989,3,386,193,0,1989,1990,5,103,
		0,0,1990,1991,5,141,0,0,1991,1992,5,14,0,0,1992,1993,3,292,146,0,1993,
		1994,5,15,0,0,1994,159,1,0,0,0,1995,1996,5,208,0,0,1996,1997,5,176,0,0,
		1997,1998,3,386,193,0,1998,1999,5,103,0,0,1999,2000,5,141,0,0,2000,2001,
		5,14,0,0,2001,2002,3,292,146,0,2002,2003,5,15,0,0,2003,161,1,0,0,0,2004,
		2005,5,187,0,0,2005,2009,5,154,0,0,2006,2007,5,65,0,0,2007,2008,5,83,0,
		0,2008,2010,5,52,0,0,2009,2006,1,0,0,0,2009,2010,1,0,0,0,2010,2014,1,0,
		0,0,2011,2012,3,354,177,0,2012,2013,5,12,0,0,2013,2015,1,0,0,0,2014,2011,
		1,0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2017,3,354,177,0,2017,
		163,1,0,0,0,2018,2020,5,171,0,0,2019,2021,5,183,0,0,2020,2019,1,0,0,0,
		2020,2021,1,0,0,0,2021,2022,1,0,0,0,2022,2025,5,154,0,0,2023,2024,5,65,
		0,0,2024,2026,5,52,0,0,2025,2023,1,0,0,0,2025,2026,1,0,0,0,2026,2030,1,
		0,0,0,2027,2028,3,354,177,0,2028,2029,5,12,0,0,2029,2031,1,0,0,0,2030,
		2027,1,0,0,0,2030,2031,1,0,0,0,2031,2032,1,0,0,0,2032,2034,3,354,177,0,
		2033,2035,7,3,0,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,2035,165,1,0,0,0,
		2036,2037,5,171,0,0,2037,2040,5,157,0,0,2038,2039,5,65,0,0,2039,2041,5,
		52,0,0,2040,2038,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,0,0,2042,2043,
		3,386,193,0,2043,167,1,0,0,0,2044,2045,5,171,0,0,2045,2046,5,168,0,0,2046,
		2049,5,157,0,0,2047,2048,5,65,0,0,2048,2050,5,52,0,0,2049,2047,1,0,0,0,
		2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2052,3,386,193,0,2052,169,1,0,
		0,0,2053,2054,5,171,0,0,2054,2055,5,183,0,0,2055,2058,5,157,0,0,2056,2057,
		5,65,0,0,2057,2059,5,52,0,0,2058,2056,1,0,0,0,2058,2059,1,0,0,0,2059,2060,
		1,0,0,0,2060,2061,3,386,193,0,2061,171,1,0,0,0,2062,2063,5,171,0,0,2063,
		2066,5,170,0,0,2064,2065,5,65,0,0,2065,2067,5,52,0,0,2066,2064,1,0,0,0,
		2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2069,3,386,193,0,2069,173,1,0,
		0,0,2070,2071,5,171,0,0,2071,2072,5,184,0,0,2072,2075,5,170,0,0,2073,2074,
		5,65,0,0,2074,2076,5,52,0,0,2075,2073,1,0,0,0,2075,2076,1,0,0,0,2076,2077,
		1,0,0,0,2077,2078,3,386,193,0,2078,175,1,0,0,0,2079,2080,5,171,0,0,2080,
		2083,5,182,0,0,2081,2082,5,65,0,0,2082,2084,5,52,0,0,2083,2081,1,0,0,0,
		2083,2084,1,0,0,0,2084,2093,1,0,0,0,2085,2086,3,354,177,0,2086,2087,5,
		12,0,0,2087,2089,1,0,0,0,2088,2085,1,0,0,0,2088,2089,1,0,0,0,2089,2090,
		1,0,0,0,2090,2091,3,354,177,0,2091,2092,5,12,0,0,2092,2094,1,0,0,0,2093,
		2088,1,0,0,0,2093,2094,1,0,0,0,2094,2095,1,0,0,0,2095,2096,3,354,177,0,
		2096,177,1,0,0,0,2097,2098,5,171,0,0,2098,2099,5,157,0,0,2099,2102,5,182,
		0,0,2100,2101,5,65,0,0,2101,2103,5,52,0,0,2102,2100,1,0,0,0,2102,2103,
		1,0,0,0,2103,2112,1,0,0,0,2104,2105,3,354,177,0,2105,2106,5,12,0,0,2106,
		2108,1,0,0,0,2107,2104,1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,
		2110,3,354,177,0,2110,2111,5,12,0,0,2111,2113,1,0,0,0,2112,2107,1,0,0,
		0,2112,2113,1,0,0,0,2113,2114,1,0,0,0,2114,2115,3,354,177,0,2115,179,1,
		0,0,0,2116,2117,5,171,0,0,2117,2120,5,181,0,0,2118,2119,5,65,0,0,2119,
		2121,5,52,0,0,2120,2118,1,0,0,0,2120,2121,1,0,0,0,2121,2130,1,0,0,0,2122,
		2123,3,354,177,0,2123,2124,5,12,0,0,2124,2126,1,0,0,0,2125,2122,1,0,0,
		0,2125,2126,1,0,0,0,2126,2127,1,0,0,0,2127,2128,3,354,177,0,2128,2129,
		5,12,0,0,2129,2131,1,0,0,0,2130,2125,1,0,0,0,2130,2131,1,0,0,0,2131,2132,
		1,0,0,0,2132,2133,3,354,177,0,2133,181,1,0,0,0,2134,2135,5,171,0,0,2135,
		2136,5,149,0,0,2136,2137,5,178,0,0,2137,2140,5,179,0,0,2138,2139,5,65,
		0,0,2139,2141,5,52,0,0,2140,2138,1,0,0,0,2140,2141,1,0,0,0,2141,2142,1,
		0,0,0,2142,2143,3,386,193,0,2143,2144,5,87,0,0,2144,2145,3,386,193,0,2145,
		2154,1,0,0,0,2146,2147,5,171,0,0,2147,2148,5,24,0,0,2148,2149,5,149,0,
		0,2149,2150,5,178,0,0,2150,2151,5,180,0,0,2151,2152,5,87,0,0,2152,2154,
		3,386,193,0,2153,2134,1,0,0,0,2153,2146,1,0,0,0,2154,183,1,0,0,0,2155,
		2156,5,171,0,0,2156,2159,5,177,0,0,2157,2158,5,65,0,0,2158,2160,5,52,0,
		0,2159,2157,1,0,0,0,2159,2160,1,0,0,0,2160,2161,1,0,0,0,2161,2162,3,386,
		193,0,2162,185,1,0,0,0,2163,2164,5,171,0,0,2164,2167,5,176,0,0,2165,2166,
		5,65,0,0,2166,2168,5,52,0,0,2167,2165,1,0,0,0,2167,2168,1,0,0,0,2168,2169,
		1,0,0,0,2169,2170,3,386,193,0,2170,187,1,0,0,0,2171,2172,5,171,0,0,2172,
		2175,5,175,0,0,2173,2174,5,65,0,0,2174,2176,5,52,0,0,2175,2173,1,0,0,0,
		2175,2176,1,0,0,0,2176,2177,1,0,0,0,2177,2178,3,386,193,0,2178,189,1,0,
		0,0,2179,2180,5,171,0,0,2180,2181,5,172,0,0,2181,2184,5,173,0,0,2182,2183,
		5,65,0,0,2183,2185,5,52,0,0,2184,2182,1,0,0,0,2184,2185,1,0,0,0,2185,2186,
		1,0,0,0,2186,2187,3,386,193,0,2187,2188,5,87,0,0,2188,2189,3,386,193,0,
		2189,191,1,0,0,0,2190,2191,5,171,0,0,2191,2192,5,172,0,0,2192,2195,5,173,
		0,0,2193,2194,5,65,0,0,2194,2196,5,52,0,0,2195,2193,1,0,0,0,2195,2196,
		1,0,0,0,2196,2197,1,0,0,0,2197,2198,3,386,193,0,2198,2199,5,87,0,0,2199,
		2200,3,386,193,0,2200,193,1,0,0,0,2201,2206,3,196,98,0,2202,2203,5,13,
		0,0,2203,2205,3,196,98,0,2204,2202,1,0,0,0,2205,2208,1,0,0,0,2206,2204,
		1,0,0,0,2206,2207,1,0,0,0,2207,195,1,0,0,0,2208,2206,1,0,0,0,2209,2215,
		3,386,193,0,2210,2211,5,141,0,0,2211,2212,5,14,0,0,2212,2213,3,292,146,
		0,2213,2214,5,15,0,0,2214,2216,1,0,0,0,2215,2210,1,0,0,0,2215,2216,1,0,
		0,0,2216,197,1,0,0,0,2217,2222,3,200,100,0,2218,2219,5,13,0,0,2219,2221,
		3,200,100,0,2220,2218,1,0,0,0,2221,2224,1,0,0,0,2222,2220,1,0,0,0,2222,
		2223,1,0,0,0,2223,199,1,0,0,0,2224,2222,1,0,0,0,2225,2244,3,202,101,0,
		2226,2244,3,204,102,0,2227,2228,5,158,0,0,2228,2230,3,354,177,0,2229,2227,
		1,0,0,0,2229,2230,1,0,0,0,2230,2231,1,0,0,0,2231,2240,3,206,103,0,2232,
		2235,5,13,0,0,2233,2234,5,158,0,0,2234,2236,3,354,177,0,2235,2233,1,0,
		0,0,2235,2236,1,0,0,0,2236,2237,1,0,0,0,2237,2239,3,206,103,0,2238,2232,
		1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,2244,
		1,0,0,0,2242,2240,1,0,0,0,2243,2225,1,0,0,0,2243,2226,1,0,0,0,2243,2229,
		1,0,0,0,2244,201,1,0,0,0,2245,2246,3,386,193,0,2246,2247,3,332,166,0,2247,
		203,1,0,0,0,2248,2249,5,160,0,0,2249,2250,5,161,0,0,2250,2251,5,14,0,0,
		2251,2252,3,384,192,0,2252,2253,5,15,0,0,2253,2254,5,83,0,0,2254,2255,
		5,159,0,0,2255,205,1,0,0,0,2256,2257,5,162,0,0,2257,2258,5,161,0,0,2258,
		2259,5,14,0,0,2259,2260,3,384,192,0,2260,2261,5,15,0,0,2261,2262,3,208,
		104,0,2262,207,1,0,0,0,2263,2264,5,163,0,0,2264,2265,3,354,177,0,2265,
		2266,5,14,0,0,2266,2267,3,384,192,0,2267,2268,5,15,0,0,2268,2269,5,83,
		0,0,2269,2270,5,159,0,0,2270,209,1,0,0,0,2271,2272,5,38,0,0,2272,2276,
		5,154,0,0,2273,2274,5,65,0,0,2274,2275,5,83,0,0,2275,2277,5,52,0,0,2276,
		2273,1,0,0,0,2276,2277,1,0,0,0,2277,2281,1,0,0,0,2278,2279,3,354,177,0,
		2279,2280,5,12,0,0,2280,2282,1,0,0,0,2281,2278,1,0,0,0,2281,2282,1,0,0,
		0,2282,2283,1,0,0,0,2283,2287,3,354,177,0,2284,2285,5,42,0,0,2285,2286,
		5,36,0,0,2286,2288,3,336,168,0,2287,2284,1,0,0,0,2287,2288,1,0,0,0,2288,
		2294,1,0,0,0,2289,2290,5,141,0,0,2290,2291,5,14,0,0,2291,2292,3,292,146,
		0,2292,2293,5,15,0,0,2293,2295,1,0,0,0,2294,2289,1,0,0,0,2294,2295,1,0,
		0,0,2295,211,1,0,0,0,2296,2297,6,106,-1,0,2297,2299,5,118,0,0,2298,2300,
		5,97,0,0,2299,2298,1,0,0,0,2299,2300,1,0,0,0,2300,2303,1,0,0,0,2301,2304,
		3,218,109,0,2302,2304,3,220,110,0,2303,2301,1,0,0,0,2303,2302,1,0,0,0,
		2304,2312,1,0,0,0,2305,2308,5,13,0,0,2306,2309,3,218,109,0,2307,2309,3,
		220,110,0,2308,2306,1,0,0,0,2308,2307,1,0,0,0,2309,2311,1,0,0,0,2310,2305,
		1,0,0,0,2311,2314,1,0,0,0,2312,2310,1,0,0,0,2312,2313,1,0,0,0,2313,2323,
		1,0,0,0,2314,2312,1,0,0,0,2315,2324,3,224,112,0,2316,2317,5,14,0,0,2317,
		2318,3,212,106,0,2318,2319,5,15,0,0,2319,2324,1,0,0,0,2320,2321,3,212,
		106,0,2321,2322,3,216,108,0,2322,2324,1,0,0,0,2323,2315,1,0,0,0,2323,2316,
		1,0,0,0,2323,2320,1,0,0,0,2324,2325,1,0,0,0,2325,2326,3,214,107,0,2326,
		2336,1,0,0,0,2327,2328,3,224,112,0,2328,2329,3,214,107,0,2329,2336,1,0,
		0,0,2330,2331,5,14,0,0,2331,2332,3,212,106,0,2332,2333,5,15,0,0,2333,2334,
		3,214,107,0,2334,2336,1,0,0,0,2335,2296,1,0,0,0,2335,2327,1,0,0,0,2335,
		2330,1,0,0,0,2336,2343,1,0,0,0,2337,2338,10,1,0,0,2338,2339,3,216,108,
		0,2339,2340,3,214,107,0,2340,2342,1,0,0,0,2341,2337,1,0,0,0,2342,2345,
		1,0,0,0,2343,2341,1,0,0,0,2343,2344,1,0,0,0,2344,213,1,0,0,0,2345,2343,
		1,0,0,0,2346,2347,5,89,0,0,2347,2348,5,33,0,0,2348,2350,3,302,151,0,2349,
		2351,7,4,0,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,2359,1,0,0,0,2352,
		2353,5,13,0,0,2353,2355,3,302,151,0,2354,2356,7,4,0,0,2355,2354,1,0,0,
		0,2355,2356,1,0,0,0,2356,2358,1,0,0,0,2357,2352,1,0,0,0,2358,2361,1,0,
		0,0,2359,2357,1,0,0,0,2359,2360,1,0,0,0,2360,2363,1,0,0,0,2361,2359,1,
		0,0,0,2362,2346,1,0,0,0,2362,2363,1,0,0,0,2363,2370,1,0,0,0,2364,2365,
		5,77,0,0,2365,2368,3,302,151,0,2366,2367,5,136,0,0,2367,2369,3,302,151,
		0,2368,2366,1,0,0,0,2368,2369,1,0,0,0,2369,2371,1,0,0,0,2370,2364,1,0,
		0,0,2370,2371,1,0,0,0,2371,215,1,0,0,0,2372,2378,5,68,0,0,2373,2375,7,
		5,0,0,2374,2376,5,90,0,0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2378,
		1,0,0,0,2377,2372,1,0,0,0,2377,2373,1,0,0,0,2377,2378,1,0,0,0,2378,2385,
		1,0,0,0,2379,2380,5,112,0,0,2380,2386,7,6,0,0,2381,2382,5,69,0,0,2382,
		2386,5,45,0,0,2383,2384,5,50,0,0,2384,2386,5,45,0,0,2385,2379,1,0,0,0,
		2385,2381,1,0,0,0,2385,2383,1,0,0,0,2386,2409,1,0,0,0,2387,2388,5,33,0,
		0,2388,2394,5,137,0,0,2389,2390,5,87,0,0,2390,2391,5,14,0,0,2391,2392,
		3,384,192,0,2392,2393,5,15,0,0,2393,2395,1,0,0,0,2394,2389,1,0,0,0,2394,
		2395,1,0,0,0,2395,2408,1,0,0,0,2396,2398,5,138,0,0,2397,2396,1,0,0,0,2397,
		2398,1,0,0,0,2398,2399,1,0,0,0,2399,2405,5,139,0,0,2400,2401,5,33,0,0,
		2401,2402,5,14,0,0,2402,2403,3,384,192,0,2403,2404,5,15,0,0,2404,2406,
		1,0,0,0,2405,2400,1,0,0,0,2405,2406,1,0,0,0,2406,2408,1,0,0,0,2407,2387,
		1,0,0,0,2407,2397,1,0,0,0,2408,2410,1,0,0,0,2409,2407,1,0,0,0,2409,2410,
		1,0,0,0,2410,2411,1,0,0,0,2411,2412,3,212,106,0,2412,217,1,0,0,0,2413,
		2414,3,354,177,0,2414,2415,5,28,0,0,2415,2416,5,14,0,0,2416,2417,3,212,
		106,0,2417,2418,5,15,0,0,2418,219,1,0,0,0,2419,2420,3,354,177,0,2420,2421,
		5,28,0,0,2421,2422,3,222,111,0,2422,221,1,0,0,0,2423,2424,3,212,106,0,
		2424,2425,5,112,0,0,2425,2426,5,24,0,0,2426,2427,3,212,106,0,2427,223,
		1,0,0,0,2428,2431,5,102,0,0,2429,2430,5,118,0,0,2430,2432,3,258,129,0,
		2431,2429,1,0,0,0,2431,2432,1,0,0,0,2432,2434,1,0,0,0,2433,2435,7,6,0,
		0,2434,2433,1,0,0,0,2434,2435,1,0,0,0,2435,2438,1,0,0,0,2436,2437,5,28,
		0,0,2437,2439,7,7,0,0,2438,2436,1,0,0,0,2438,2439,1,0,0,0,2439,2440,1,
		0,0,0,2440,2443,3,296,148,0,2441,2442,5,58,0,0,2442,2444,3,260,130,0,2443,
		2441,1,0,0,0,2443,2444,1,0,0,0,2444,2447,1,0,0,0,2445,2446,5,116,0,0,2446,
		2448,3,302,151,0,2447,2445,1,0,0,0,2447,2448,1,0,0,0,2448,2452,1,0,0,0,
		2449,2450,5,60,0,0,2450,2451,5,33,0,0,2451,2453,3,226,113,0,2452,2449,
		1,0,0,0,2452,2453,1,0,0,0,2453,2456,1,0,0,0,2454,2455,5,64,0,0,2455,2457,
		3,302,151,0,2456,2454,1,0,0,0,2456,2457,1,0,0,0,2457,2460,1,0,0,0,2458,
		2459,5,95,0,0,2459,2461,3,302,151,0,2460,2458,1,0,0,0,2460,2461,1,0,0,
		0,2461,2464,1,0,0,0,2462,2463,5,117,0,0,2463,2465,3,240,120,0,2464,2462,
		1,0,0,0,2464,2465,1,0,0,0,2465,225,1,0,0,0,2466,2474,3,304,152,0,2467,
		2474,5,24,0,0,2468,2474,3,228,114,0,2469,2474,3,238,119,0,2470,2474,3,
		234,117,0,2471,2472,5,14,0,0,2472,2474,5,15,0,0,2473,2466,1,0,0,0,2473,
		2467,1,0,0,0,2473,2468,1,0,0,0,2473,2469,1,0,0,0,2473,2470,1,0,0,0,2473,
		2471,1,0,0,0,2474,227,1,0,0,0,2475,2476,5,60,0,0,2476,2477,5,33,0,0,2477,
		2478,5,61,0,0,2478,2479,5,152,0,0,2479,2480,5,14,0,0,2480,2481,3,230,115,
		0,2481,2482,5,15,0,0,2482,229,1,0,0,0,2483,2488,3,232,116,0,2484,2485,
		5,13,0,0,2485,2487,3,232,116,0,2486,2484,1,0,0,0,2487,2490,1,0,0,0,2488,
		2486,1,0,0,0,2488,2489,1,0,0,0,2489,231,1,0,0,0,2490,2488,1,0,0,0,2491,
		2496,3,238,119,0,2492,2496,3,234,117,0,2493,2496,3,302,151,0,2494,2496,
		3,236,118,0,2495,2491,1,0,0,0,2495,2492,1,0,0,0,2495,2493,1,0,0,0,2495,
		2494,1,0,0,0,2496,233,1,0,0,0,2497,2498,5,60,0,0,2498,2499,5,33,0,0,2499,
		2500,5,40,0,0,2500,2501,5,14,0,0,2501,2502,3,230,115,0,2502,2503,5,15,
		0,0,2503,235,1,0,0,0,2504,2505,5,14,0,0,2505,2506,3,304,152,0,2506,2507,
		5,15,0,0,2507,237,1,0,0,0,2508,2509,5,60,0,0,2509,2510,5,33,0,0,2510,2511,
		5,100,0,0,2511,2512,5,14,0,0,2512,2513,3,230,115,0,2513,2514,5,15,0,0,
		2514,239,1,0,0,0,2515,2520,3,242,121,0,2516,2517,5,13,0,0,2517,2519,3,
		242,121,0,2518,2516,1,0,0,0,2519,2522,1,0,0,0,2520,2518,1,0,0,0,2520,2521,
		1,0,0,0,2521,241,1,0,0,0,2522,2520,1,0,0,0,2523,2524,3,386,193,0,2524,
		2530,5,28,0,0,2525,2531,3,386,193,0,2526,2527,5,14,0,0,2527,2528,3,244,
		122,0,2528,2529,5,15,0,0,2529,2531,1,0,0,0,2530,2525,1,0,0,0,2530,2526,
		1,0,0,0,2531,243,1,0,0,0,2532,2534,3,386,193,0,2533,2532,1,0,0,0,2533,
		2534,1,0,0,0,2534,2538,1,0,0,0,2535,2536,5,92,0,0,2536,2537,5,33,0,0,2537,
		2539,3,304,152,0,2538,2535,1,0,0,0,2538,2539,1,0,0,0,2539,2543,1,0,0,0,
		2540,2541,5,89,0,0,2541,2542,5,33,0,0,2542,2544,3,320,160,0,2543,2540,
		1,0,0,0,2543,2544,1,0,0,0,2544,2546,1,0,0,0,2545,2547,3,246,123,0,2546,
		2545,1,0,0,0,2546,2547,1,0,0,0,2547,245,1,0,0,0,2548,2551,7,8,0,0,2549,
		2552,3,248,124,0,2550,2552,3,250,125,0,2551,2549,1,0,0,0,2551,2550,1,0,
		0,0,2552,247,1,0,0,0,2553,2554,5,111,0,0,2554,2563,5,93,0,0,2555,2556,
		3,302,151,0,2556,2557,5,93,0,0,2557,2563,1,0,0,0,2558,2559,5,41,0,0,2559,
		2561,5,149,0,0,2560,2558,1,0,0,0,2560,2561,1,0,0,0,2561,2563,1,0,0,0,2562,
		2553,1,0,0,0,2562,2555,1,0,0,0,2562,2560,1,0,0,0,2563,249,1,0,0,0,2564,
		2565,5,32,0,0,2565,2566,5,111,0,0,2566,2567,5,93,0,0,2567,2568,5,25,0,
		0,2568,2587,3,252,126,0,2569,2570,5,32,0,0,2570,2571,3,302,151,0,2571,
		2572,5,93,0,0,2572,2573,5,25,0,0,2573,2574,3,252,126,0,2574,2587,1,0,0,
		0,2575,2576,5,32,0,0,2576,2577,5,41,0,0,2577,2578,5,149,0,0,2578,2579,
		5,25,0,0,2579,2587,3,254,127,0,2580,2581,5,32,0,0,2581,2582,3,302,151,
		0,2582,2583,5,56,0,0,2583,2584,5,25,0,0,2584,2585,3,256,128,0,2585,2587,
		1,0,0,0,2586,2564,1,0,0,0,2586,2569,1,0,0,0,2586,2575,1,0,0,0,2586,2580,
		1,0,0,0,2587,251,1,0,0,0,2588,2589,3,302,151,0,2589,2590,5,93,0,0,2590,
		2599,1,0,0,0,2591,2592,5,41,0,0,2592,2599,5,149,0,0,2593,2594,3,302,151,
		0,2594,2595,5,56,0,0,2595,2599,1,0,0,0,2596,2597,5,111,0,0,2597,2599,5,
		56,0,0,2598,2588,1,0,0,0,2598,2591,1,0,0,0,2598,2593,1,0,0,0,2598,2596,
		1,0,0,0,2599,253,1,0,0,0,2600,2601,5,41,0,0,2601,2608,5,149,0,0,2602,2603,
		3,302,151,0,2603,2604,5,56,0,0,2604,2608,1,0,0,0,2605,2606,5,111,0,0,2606,
		2608,5,56,0,0,2607,2600,1,0,0,0,2607,2602,1,0,0,0,2607,2605,1,0,0,0,2608,
		255,1,0,0,0,2609,2610,3,302,151,0,2610,2611,5,56,0,0,2611,2615,1,0,0,0,
		2612,2613,5,111,0,0,2613,2615,5,56,0,0,2614,2609,1,0,0,0,2614,2612,1,0,
		0,0,2615,257,1,0,0,0,2616,2617,5,140,0,0,2617,2618,5,141,0,0,2618,2619,
		5,14,0,0,2619,2620,3,292,146,0,2620,2621,5,15,0,0,2621,259,1,0,0,0,2622,
		2627,3,262,131,0,2623,2624,5,13,0,0,2624,2626,3,262,131,0,2625,2623,1,
		0,0,0,2626,2629,1,0,0,0,2627,2625,1,0,0,0,2627,2628,1,0,0,0,2628,261,1,
		0,0,0,2629,2627,1,0,0,0,2630,2633,3,264,132,0,2631,2634,3,278,139,0,2632,
		2634,3,280,140,0,2633,2631,1,0,0,0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,
		2634,2636,1,0,0,0,2635,2637,3,290,145,0,2636,2635,1,0,0,0,2636,2637,1,
		0,0,0,2637,263,1,0,0,0,2638,2639,6,132,-1,0,2639,2641,3,354,177,0,2640,
		2642,3,356,178,0,2641,2640,1,0,0,0,2641,2642,1,0,0,0,2642,2648,1,0,0,0,
		2643,2644,5,57,0,0,2644,2645,5,148,0,0,2645,2646,5,28,0,0,2646,2647,5,
		86,0,0,2647,2649,3,302,151,0,2648,2643,1,0,0,0,2648,2649,1,0,0,0,2649,
		2677,1,0,0,0,2650,2660,5,14,0,0,2651,2652,3,264,132,0,2652,2653,3,268,
		134,0,2653,2654,3,264,132,0,2654,2661,1,0,0,0,2655,2656,3,264,132,0,2656,
		2657,3,270,135,0,2657,2658,3,264,132,0,2658,2659,3,272,136,0,2659,2661,
		1,0,0,0,2660,2651,1,0,0,0,2660,2655,1,0,0,0,2661,2662,1,0,0,0,2662,2663,
		5,15,0,0,2663,2677,1,0,0,0,2664,2665,5,14,0,0,2665,2666,3,212,106,0,2666,
		2668,5,15,0,0,2667,2669,3,356,178,0,2668,2667,1,0,0,0,2668,2669,1,0,0,
		0,2669,2677,1,0,0,0,2670,2677,3,386,193,0,2671,2677,3,266,133,0,2672,2674,
		3,386,193,0,2673,2675,3,356,178,0,2674,2673,1,0,0,0,2674,2675,1,0,0,0,
		2675,2677,1,0,0,0,2676,2638,1,0,0,0,2676,2650,1,0,0,0,2676,2664,1,0,0,
		0,2676,2670,1,0,0,0,2676,2671,1,0,0,0,2676,2672,1,0,0,0,2677,2689,1,0,
		0,0,2678,2679,10,7,0,0,2679,2680,3,268,134,0,2680,2681,3,264,132,8,2681,
		2688,1,0,0,0,2682,2683,10,6,0,0,2683,2684,3,270,135,0,2684,2685,3,264,
		132,0,2685,2686,3,272,136,0,2686,2688,1,0,0,0,2687,2678,1,0,0,0,2687,2682,
		1,0,0,0,2688,2691,1,0,0,0,2689,2687,1,0,0,0,2689,2690,1,0,0,0,2690,265,
		1,0,0,0,2691,2689,1,0,0,0,2692,2693,5,113,0,0,2693,2694,5,14,0,0,2694,
		2695,3,302,151,0,2695,2697,5,15,0,0,2696,2698,3,356,178,0,2697,2696,1,
		0,0,0,2697,2698,1,0,0,0,2698,2704,1,0,0,0,2699,2701,3,386,193,0,2700,2702,
		3,356,178,0,2701,2700,1,0,0,0,2701,2702,1,0,0,0,2702,2704,1,0,0,0,2703,
		2692,1,0,0,0,2703,2699,1,0,0,0,2704,2710,1,0,0,0,2705,2706,5,118,0,0,2706,
		2708,5,136,0,0,2707,2709,3,356,178,0,2708,2707,1,0,0,0,2708,2709,1,0,0,
		0,2709,2711,1,0,0,0,2710,2705,1,0,0,0,2710,2711,1,0,0,0,2711,267,1,0,0,
		0,2712,2713,5,39,0,0,2713,2716,5,73,0,0,2714,2716,5,13,0,0,2715,2712,1,
		0,0,0,2715,2714,1,0,0,0,2716,269,1,0,0,0,2717,2719,5,68,0,0,2718,2717,
		1,0,0,0,2718,2719,1,0,0,0,2719,2720,1,0,0,0,2720,2737,5,73,0,0,2721,2723,
		5,59,0,0,2722,2724,5,90,0,0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,2725,
		1,0,0,0,2725,2737,5,73,0,0,2726,2728,5,75,0,0,2727,2729,5,90,0,0,2728,
		2727,1,0,0,0,2728,2729,1,0,0,0,2729,2730,1,0,0,0,2730,2737,5,73,0,0,2731,
		2733,5,99,0,0,2732,2734,5,90,0,0,2733,2732,1,0,0,0,2733,2734,1,0,0,0,2734,
		2735,1,0,0,0,2735,2737,5,73,0,0,2736,2718,1,0,0,0,2736,2721,1,0,0,0,2736,
		2726,1,0,0,0,2736,2731,1,0,0,0,2737,271,1,0,0,0,2738,2741,3,274,137,0,
		2739,2741,3,276,138,0,2740,2738,1,0,0,0,2740,2739,1,0,0,0,2741,273,1,0,
		0,0,2742,2743,5,87,0,0,2743,2744,3,302,151,0,2744,275,1,0,0,0,2745,2746,
		5,114,0,0,2746,2747,5,14,0,0,2747,2748,3,384,192,0,2748,2749,5,15,0,0,
		2749,277,1,0,0,0,2750,2751,5,146,0,0,2751,2752,5,14,0,0,2752,2754,3,358,
		179,0,2753,2755,3,356,178,0,2754,2753,1,0,0,0,2754,2755,1,0,0,0,2755,2763,
		1,0,0,0,2756,2757,5,13,0,0,2757,2759,3,358,179,0,2758,2760,3,356,178,0,
		2759,2758,1,0,0,0,2759,2760,1,0,0,0,2760,2762,1,0,0,0,2761,2756,1,0,0,
		0,2762,2765,1,0,0,0,2763,2761,1,0,0,0,2763,2764,1,0,0,0,2764,2766,1,0,
		0,0,2765,2763,1,0,0,0,2766,2767,5,57,0,0,2767,2768,3,354,177,0,2768,2769,
		5,67,0,0,2769,2770,5,14,0,0,2770,2771,3,318,159,0,2771,2772,5,15,0,0,2772,
		2775,5,15,0,0,2773,2774,5,28,0,0,2774,2776,3,354,177,0,2775,2773,1,0,0,
		0,2775,2776,1,0,0,0,2776,279,1,0,0,0,2777,2782,5,147,0,0,2778,2779,5,150,
		0,0,2779,2783,5,85,0,0,2780,2781,5,51,0,0,2781,2783,5,85,0,0,2782,2778,
		1,0,0,0,2782,2780,1,0,0,0,2782,2783,1,0,0,0,2783,2784,1,0,0,0,2784,2787,
		5,14,0,0,2785,2788,3,282,141,0,2786,2788,3,284,142,0,2787,2785,1,0,0,0,
		2787,2786,1,0,0,0,2788,2789,1,0,0,0,2789,2790,5,15,0,0,2790,2791,3,356,
		178,0,2791,281,1,0,0,0,2792,2793,3,304,152,0,2793,2794,5,57,0,0,2794,2795,
		3,386,193,0,2795,2796,5,67,0,0,2796,2797,5,14,0,0,2797,2798,3,286,143,
		0,2798,2799,5,15,0,0,2799,283,1,0,0,0,2800,2801,5,14,0,0,2801,2802,3,304,
		152,0,2802,2803,5,15,0,0,2803,2804,5,57,0,0,2804,2805,3,386,193,0,2805,
		2806,5,67,0,0,2806,2807,5,14,0,0,2807,2808,3,288,144,0,2808,2809,5,15,
		0,0,2809,285,1,0,0,0,2810,2812,3,302,151,0,2811,2813,3,356,178,0,2812,
		2811,1,0,0,0,2812,2813,1,0,0,0,2813,2821,1,0,0,0,2814,2815,5,13,0,0,2815,
		2817,3,302,151,0,2816,2818,3,354,177,0,2817,2816,1,0,0,0,2817,2818,1,0,
		0,0,2818,2820,1,0,0,0,2819,2814,1,0,0,0,2820,2823,1,0,0,0,2821,2819,1,
		0,0,0,2821,2822,1,0,0,0,2822,287,1,0,0,0,2823,2821,1,0,0,0,2824,2825,5,
		14,0,0,2825,2827,3,302,151,0,2826,2828,3,356,178,0,2827,2826,1,0,0,0,2827,
		2828,1,0,0,0,2828,2836,1,0,0,0,2829,2830,5,13,0,0,2830,2832,3,302,151,
		0,2831,2833,3,354,177,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,2835,
		1,0,0,0,2834,2829,1,0,0,0,2835,2838,1,0,0,0,2836,2834,1,0,0,0,2836,2837,
		1,0,0,0,2837,2839,1,0,0,0,2838,2836,1,0,0,0,2839,2840,5,15,0,0,2840,289,
		1,0,0,0,2841,2842,5,106,0,0,2842,2843,5,144,0,0,2843,2844,5,14,0,0,2844,
		2845,3,302,151,0,2845,2846,5,145,0,0,2846,2847,5,15,0,0,2847,291,1,0,0,
		0,2848,2853,3,294,147,0,2849,2850,5,13,0,0,2850,2852,3,294,147,0,2851,
		2849,1,0,0,0,2852,2855,1,0,0,0,2853,2851,1,0,0,0,2853,2854,1,0,0,0,2854,
		293,1,0,0,0,2855,2853,1,0,0,0,2856,2857,3,354,177,0,2857,2858,5,22,0,0,
		2858,2859,3,302,151,0,2859,295,1,0,0,0,2860,2865,3,298,149,0,2861,2862,
		5,13,0,0,2862,2864,3,298,149,0,2863,2861,1,0,0,0,2864,2867,1,0,0,0,2865,
		2863,1,0,0,0,2865,2866,1,0,0,0,2866,297,1,0,0,0,2867,2865,1,0,0,0,2868,
		2874,3,300,150,0,2869,2871,3,302,151,0,2870,2872,3,356,178,0,2871,2870,
		1,0,0,0,2871,2872,1,0,0,0,2872,2874,1,0,0,0,2873,2868,1,0,0,0,2873,2869,
		1,0,0,0,2874,299,1,0,0,0,2875,2876,3,302,151,0,2876,2877,5,12,0,0,2877,
		2879,1,0,0,0,2878,2875,1,0,0,0,2878,2879,1,0,0,0,2879,2880,1,0,0,0,2880,
		2886,5,8,0,0,2881,2882,5,50,0,0,2882,2883,5,14,0,0,2883,2884,3,384,192,
		0,2884,2885,5,15,0,0,2885,2887,1,0,0,0,2886,2881,1,0,0,0,2886,2887,1,0,
		0,0,2887,2893,1,0,0,0,2888,2889,5,143,0,0,2889,2890,5,14,0,0,2890,2891,
		3,388,194,0,2891,2892,5,15,0,0,2892,2894,1,0,0,0,2893,2888,1,0,0,0,2893,
		2894,1,0,0,0,2894,301,1,0,0,0,2895,2896,6,151,-1,0,2896,2897,5,14,0,0,
		2897,2898,3,302,151,0,2898,2899,5,15,0,0,2899,2926,1,0,0,0,2900,2926,3,
		224,112,0,2901,2926,3,386,193,0,2902,2903,7,9,0,0,2903,2926,3,302,151,
		26,2904,2905,5,83,0,0,2905,2926,3,302,151,16,2906,2907,5,52,0,0,2907,2908,
		5,14,0,0,2908,2909,3,302,151,0,2909,2910,5,15,0,0,2910,2926,1,0,0,0,2911,
		2912,5,113,0,0,2912,2913,5,14,0,0,2913,2914,3,302,151,0,2914,2915,5,15,
		0,0,2915,2926,1,0,0,0,2916,2926,3,358,179,0,2917,2926,3,376,188,0,2918,
		2926,3,322,161,0,2919,2926,3,306,153,0,2920,2926,3,308,154,0,2921,2926,
		3,310,155,0,2922,2926,3,312,156,0,2923,2926,3,314,157,0,2924,2926,3,316,
		158,0,2925,2895,1,0,0,0,2925,2900,1,0,0,0,2925,2901,1,0,0,0,2925,2902,
		1,0,0,0,2925,2904,1,0,0,0,2925,2906,1,0,0,0,2925,2911,1,0,0,0,2925,2916,
		1,0,0,0,2925,2917,1,0,0,0,2925,2918,1,0,0,0,2925,2919,1,0,0,0,2925,2920,
		1,0,0,0,2925,2921,1,0,0,0,2925,2922,1,0,0,0,2925,2923,1,0,0,0,2925,2924,
		1,0,0,0,2926,3006,1,0,0,0,2927,2928,10,25,0,0,2928,2929,7,10,0,0,2929,
		3005,3,302,151,26,2930,2931,10,24,0,0,2931,2932,7,11,0,0,2932,3005,3,302,
		151,25,2933,2938,10,23,0,0,2934,2935,5,18,0,0,2935,2939,5,18,0,0,2936,
		2937,5,19,0,0,2937,2939,5,19,0,0,2938,2934,1,0,0,0,2938,2936,1,0,0,0,2939,
		2940,1,0,0,0,2940,3005,3,302,151,24,2941,2942,10,22,0,0,2942,2943,5,5,
		0,0,2943,3005,3,302,151,23,2944,2945,10,21,0,0,2945,2946,5,6,0,0,2946,
		3005,3,302,151,22,2947,2948,10,20,0,0,2948,2949,5,7,0,0,2949,3005,3,302,
		151,21,2950,2961,10,19,0,0,2951,2962,5,22,0,0,2952,2962,5,23,0,0,2953,
		2962,5,18,0,0,2954,2962,5,19,0,0,2955,2962,5,20,0,0,2956,2962,5,21,0,0,
		2957,2959,5,83,0,0,2958,2957,1,0,0,0,2958,2959,1,0,0,0,2959,2960,1,0,0,
		0,2960,2962,7,12,0,0,2961,2951,1,0,0,0,2961,2952,1,0,0,0,2961,2953,1,0,
		0,0,2961,2954,1,0,0,0,2961,2955,1,0,0,0,2961,2956,1,0,0,0,2961,2958,1,
		0,0,0,2962,2963,1,0,0,0,2963,3005,3,302,151,20,2964,2965,10,17,0,0,2965,
		2967,5,72,0,0,2966,2968,5,83,0,0,2967,2966,1,0,0,0,2967,2968,1,0,0,0,2968,
		2969,1,0,0,0,2969,2970,5,45,0,0,2970,2971,5,58,0,0,2971,3005,3,302,151,
		18,2972,2973,10,15,0,0,2973,2974,5,25,0,0,2974,3005,3,302,151,16,2975,
		2976,10,14,0,0,2976,2977,5,88,0,0,2977,3005,3,302,151,15,2978,2980,10,
		10,0,0,2979,2981,5,83,0,0,2980,2979,1,0,0,0,2980,2981,1,0,0,0,2981,2982,
		1,0,0,0,2982,2983,5,76,0,0,2983,2984,7,13,0,0,2984,3005,3,302,151,11,2985,
		2986,10,28,0,0,2986,2987,5,12,0,0,2987,3005,3,386,193,0,2988,2989,10,27,
		0,0,2989,2990,5,16,0,0,2990,2991,3,302,151,0,2991,2992,5,17,0,0,2992,3005,
		1,0,0,0,2993,2994,10,18,0,0,2994,2996,5,72,0,0,2995,2997,5,83,0,0,2996,
		2995,1,0,0,0,2996,2997,1,0,0,0,2997,2998,1,0,0,0,2998,3005,7,14,0,0,2999,
		3001,10,13,0,0,3000,3002,5,28,0,0,3001,3000,1,0,0,0,3001,3002,1,0,0,0,
		3002,3003,1,0,0,0,3003,3005,3,354,177,0,3004,2927,1,0,0,0,3004,2930,1,
		0,0,0,3004,2933,1,0,0,0,3004,2941,1,0,0,0,3004,2944,1,0,0,0,3004,2947,
		1,0,0,0,3004,2950,1,0,0,0,3004,2964,1,0,0,0,3004,2972,1,0,0,0,3004,2975,
		1,0,0,0,3004,2978,1,0,0,0,3004,2985,1,0,0,0,3004,2988,1,0,0,0,3004,2993,
		1,0,0,0,3004,2999,1,0,0,0,3005,3008,1,0,0,0,3006,3004,1,0,0,0,3006,3007,
		1,0,0,0,3007,303,1,0,0,0,3008,3006,1,0,0,0,3009,3014,3,302,151,0,3010,
		3011,5,13,0,0,3011,3013,3,302,151,0,3012,3010,1,0,0,0,3013,3016,1,0,0,
		0,3014,3012,1,0,0,0,3014,3015,1,0,0,0,3015,305,1,0,0,0,3016,3014,1,0,0,
		0,3017,3018,5,34,0,0,3018,3024,3,302,151,0,3019,3020,5,115,0,0,3020,3021,
		3,302,151,0,3021,3022,5,107,0,0,3022,3023,3,302,151,0,3023,3025,1,0,0,
		0,3024,3019,1,0,0,0,3025,3026,1,0,0,0,3026,3024,1,0,0,0,3026,3027,1,0,
		0,0,3027,3030,1,0,0,0,3028,3029,5,46,0,0,3029,3031,3,302,151,0,3030,3028,
		1,0,0,0,3030,3031,1,0,0,0,3031,3032,1,0,0,0,3032,3033,5,47,0,0,3033,307,
		1,0,0,0,3034,3040,5,34,0,0,3035,3036,5,115,0,0,3036,3037,3,302,151,0,3037,
		3038,5,107,0,0,3038,3039,3,302,151,0,3039,3041,1,0,0,0,3040,3035,1,0,0,
		0,3041,3042,1,0,0,0,3042,3040,1,0,0,0,3042,3043,1,0,0,0,3043,3046,1,0,
		0,0,3044,3045,5,46,0,0,3045,3047,3,302,151,0,3046,3044,1,0,0,0,3046,3047,
		1,0,0,0,3047,3048,1,0,0,0,3048,3049,5,47,0,0,3049,309,1,0,0,0,3050,3051,
		5,201,0,0,3051,3052,5,14,0,0,3052,3053,3,304,152,0,3053,3054,5,15,0,0,
		3054,311,1,0,0,0,3055,3056,5,65,0,0,3056,3057,5,14,0,0,3057,3058,3,302,
		151,0,3058,3059,5,13,0,0,3059,3060,3,302,151,0,3060,3061,5,13,0,0,3061,
		3062,3,302,151,0,3062,3063,5,15,0,0,3063,313,1,0,0,0,3064,3065,5,203,0,
		0,3065,3066,5,14,0,0,3066,3067,3,302,151,0,3067,3068,5,13,0,0,3068,3069,
		3,302,151,0,3069,3070,5,15,0,0,3070,315,1,0,0,0,3071,3072,5,202,0,0,3072,
		3073,5,14,0,0,3073,3074,3,302,151,0,3074,3075,5,13,0,0,3075,3076,3,302,
		151,0,3076,3077,5,15,0,0,3077,317,1,0,0,0,3078,3080,3,304,152,0,3079,3081,
		3,356,178,0,3080,3079,1,0,0,0,3080,3081,1,0,0,0,3081,3089,1,0,0,0,3082,
		3083,5,13,0,0,3083,3085,3,304,152,0,3084,3086,3,356,178,0,3085,3084,1,
		0,0,0,3085,3086,1,0,0,0,3086,3088,1,0,0,0,3087,3082,1,0,0,0,3088,3091,
		1,0,0,0,3089,3087,1,0,0,0,3089,3090,1,0,0,0,3090,319,1,0,0,0,3091,3089,
		1,0,0,0,3092,3094,3,302,151,0,3093,3095,7,4,0,0,3094,3093,1,0,0,0,3094,
		3095,1,0,0,0,3095,3103,1,0,0,0,3096,3097,5,13,0,0,3097,3099,3,302,151,
		0,3098,3100,7,4,0,0,3099,3098,1,0,0,0,3099,3100,1,0,0,0,3100,3102,1,0,
		0,0,3101,3096,1,0,0,0,3102,3105,1,0,0,0,3103,3101,1,0,0,0,3103,3104,1,
		0,0,0,3104,321,1,0,0,0,3105,3103,1,0,0,0,3106,3127,3,336,168,0,3107,3127,
		3,352,176,0,3108,3127,3,324,162,0,3109,3127,3,326,163,0,3110,3127,3,328,
		164,0,3111,3127,3,330,165,0,3112,3127,3,338,169,0,3113,3127,3,340,170,
		0,3114,3127,3,342,171,0,3115,3127,3,344,172,0,3116,3127,3,346,173,0,3117,
		3127,3,348,174,0,3118,3127,3,350,175,0,3119,3127,5,241,0,0,3120,3127,5,
		242,0,0,3121,3127,5,84,0,0,3122,3127,5,110,0,0,3123,3127,5,54,0,0,3124,
		3127,5,234,0,0,3125,3127,5,233,0,0,3126,3106,1,0,0,0,3126,3107,1,0,0,0,
		3126,3108,1,0,0,0,3126,3109,1,0,0,0,3126,3110,1,0,0,0,3126,3111,1,0,0,
		0,3126,3112,1,0,0,0,3126,3113,1,0,0,0,3126,3114,1,0,0,0,3126,3115,1,0,
		0,0,3126,3116,1,0,0,0,3126,3117,1,0,0,0,3126,3118,1,0,0,0,3126,3119,1,
		0,0,0,3126,3120,1,0,0,0,3126,3121,1,0,0,0,3126,3122,1,0,0,0,3126,3123,
		1,0,0,0,3126,3124,1,0,0,0,3126,3125,1,0,0,0,3127,323,1,0,0,0,3128,3129,
		5,123,0,0,3129,3130,3,336,168,0,3130,325,1,0,0,0,3131,3132,5,120,0,0,3132,
		3133,3,336,168,0,3133,327,1,0,0,0,3134,3139,5,27,0,0,3135,3136,5,18,0,
		0,3136,3137,3,332,166,0,3137,3138,5,19,0,0,3138,3140,1,0,0,0,3139,3135,
		1,0,0,0,3139,3140,1,0,0,0,3140,3142,1,0,0,0,3141,3134,1,0,0,0,3141,3142,
		1,0,0,0,3142,3143,1,0,0,0,3143,3145,5,16,0,0,3144,3146,3,304,152,0,3145,
		3144,1,0,0,0,3145,3146,1,0,0,0,3146,3147,1,0,0,0,3147,3148,5,17,0,0,3148,
		329,1,0,0,0,3149,3161,5,105,0,0,3150,3151,5,18,0,0,3151,3156,3,332,166,
		0,3152,3153,5,13,0,0,3153,3155,3,332,166,0,3154,3152,1,0,0,0,3155,3158,
		1,0,0,0,3156,3154,1,0,0,0,3156,3157,1,0,0,0,3157,3159,1,0,0,0,3158,3156,
		1,0,0,0,3159,3160,5,19,0,0,3160,3162,1,0,0,0,3161,3150,1,0,0,0,3161,3162,
		1,0,0,0,3162,3164,1,0,0,0,3163,3149,1,0,0,0,3163,3164,1,0,0,0,3164,3165,
		1,0,0,0,3165,3166,5,14,0,0,3166,3167,3,304,152,0,3167,3168,5,15,0,0,3168,
		331,1,0,0,0,3169,3181,3,334,167,0,3170,3171,5,18,0,0,3171,3176,3,332,166,
		0,3172,3173,5,13,0,0,3173,3175,3,332,166,0,3174,3172,1,0,0,0,3175,3178,
		1,0,0,0,3176,3174,1,0,0,0,3176,3177,1,0,0,0,3177,3179,1,0,0,0,3178,3176,
		1,0,0,0,3179,3180,5,19,0,0,3180,3182,1,0,0,0,3181,3170,1,0,0,0,3181,3182,
		1,0,0,0,3182,3188,1,0,0,0,3183,3184,3,354,177,0,3184,3185,3,332,166,0,
		3185,3188,1,0,0,0,3186,3188,3,354,177,0,3187,3169,1,0,0,0,3187,3183,1,
		0,0,0,3187,3186,1,0,0,0,3188,3193,1,0,0,0,3189,3190,5,14,0,0,3190,3191,
		3,304,152,0,3191,3192,5,15,0,0,3192,3194,1,0,0,0,3193,3189,1,0,0,0,3193,
		3194,1,0,0,0,3194,3197,1,0,0,0,3195,3196,5,36,0,0,3196,3198,3,336,168,
		0,3197,3195,1,0,0,0,3197,3198,1,0,0,0,3198,3201,1,0,0,0,3199,3200,5,83,
		0,0,3200,3202,5,84,0,0,3201,3199,1,0,0,0,3201,3202,1,0,0,0,3202,3208,1,
		0,0,0,3203,3204,5,141,0,0,3204,3205,5,14,0,0,3205,3206,3,292,146,0,3206,
		3207,5,15,0,0,3207,3209,1,0,0,0,3208,3203,1,0,0,0,3208,3209,1,0,0,0,3209,
		333,1,0,0,0,3210,3213,3,392,196,0,3211,3213,3,354,177,0,3212,3210,1,0,
		0,0,3212,3211,1,0,0,0,3213,335,1,0,0,0,3214,3215,7,15,0,0,3215,337,1,0,
		0,0,3216,3217,5,121,0,0,3217,3218,3,336,168,0,3218,339,1,0,0,0,3219,3220,
		5,231,0,0,3220,3221,3,336,168,0,3221,341,1,0,0,0,3222,3223,5,122,0,0,3223,
		3224,3,336,168,0,3224,343,1,0,0,0,3225,3226,5,124,0,0,3226,3227,3,336,
		168,0,3227,345,1,0,0,0,3228,3229,5,96,0,0,3229,3230,5,18,0,0,3230,3231,
		7,16,0,0,3231,3232,5,19,0,0,3232,3233,3,336,168,0,3233,347,1,0,0,0,3234,
		3243,5,70,0,0,3235,3236,3,302,151,0,3236,3237,3,394,197,0,3237,3244,1,
		0,0,0,3238,3239,3,336,168,0,3239,3240,3,394,197,0,3240,3241,5,108,0,0,
		3241,3242,3,394,197,0,3242,3244,1,0,0,0,3243,3235,1,0,0,0,3243,3238,1,
		0,0,0,3244,349,1,0,0,0,3245,3246,5,135,0,0,3246,3247,3,336,168,0,3247,
		351,1,0,0,0,3248,3249,7,17,0,0,3249,353,1,0,0,0,3250,3251,7,18,0,0,3251,
		355,1,0,0,0,3252,3254,5,28,0,0,3253,3252,1,0,0,0,3253,3254,1,0,0,0,3254,
		3255,1,0,0,0,3255,3256,3,354,177,0,3256,357,1,0,0,0,3257,3258,3,360,180,
		0,3258,3260,5,14,0,0,3259,3261,3,362,181,0,3260,3259,1,0,0,0,3260,3261,
		1,0,0,0,3261,3262,1,0,0,0,3262,3265,5,15,0,0,3263,3264,5,91,0,0,3264,3266,
		3,378,189,0,3265,3263,1,0,0,0,3265,3266,1,0,0,0,3266,359,1,0,0,0,3267,
		3270,3,392,196,0,3268,3270,3,386,193,0,3269,3267,1,0,0,0,3269,3268,1,0,
		0,0,3270,361,1,0,0,0,3271,3273,5,45,0,0,3272,3271,1,0,0,0,3272,3273,1,
		0,0,0,3273,3274,1,0,0,0,3274,3275,3,364,182,0,3275,3276,3,368,184,0,3276,
		363,1,0,0,0,3277,3282,3,366,183,0,3278,3279,5,13,0,0,3279,3281,3,366,183,
		0,3280,3278,1,0,0,0,3281,3284,1,0,0,0,3282,3280,1,0,0,0,3282,3283,1,0,
		0,0,3283,365,1,0,0,0,3284,3282,1,0,0,0,3285,3288,5,8,0,0,3286,3288,3,302,
		151,0,3287,3285,1,0,0,0,3287,3286,1,0,0,0,3288,3308,1,0,0,0,3289,3290,
		5,58,0,0,3290,3309,3,302,151,0,3291,3292,5,4,0,0,3292,3309,3,302,151,0,
		3293,3294,5,64,0,0,3294,3295,7,19,0,0,3295,3309,3,302,151,0,3296,3297,
		5,28,0,0,3297,3299,3,332,166,0,3298,3300,3,380,190,0,3299,3298,1,0,0,0,
		3299,3300,1,0,0,0,3300,3304,1,0,0,0,3301,3302,5,31,0,0,3302,3303,5,230,
		0,0,3303,3305,3,302,151,0,3304,3301,1,0,0,0,3304,3305,1,0,0,0,3305,3309,
		1,0,0,0,3306,3307,7,20,0,0,3307,3309,5,85,0,0,3308,3289,1,0,0,0,3308,3291,
		1,0,0,0,3308,3293,1,0,0,0,3308,3296,1,0,0,0,3308,3306,1,0,0,0,3308,3309,
		1,0,0,0,3309,367,1,0,0,0,3310,3312,3,372,186,0,3311,3310,1,0,0,0,3311,
		3312,1,0,0,0,3312,3314,1,0,0,0,3313,3315,3,370,185,0,3314,3313,1,0,0,0,
		3314,3315,1,0,0,0,3315,369,1,0,0,0,3316,3317,5,77,0,0,3317,3318,3,302,
		151,0,3318,371,1,0,0,0,3319,3324,3,374,187,0,3320,3321,5,13,0,0,3321,3323,
		3,374,187,0,3322,3320,1,0,0,0,3323,3326,1,0,0,0,3324,3322,1,0,0,0,3324,
		3325,1,0,0,0,3325,373,1,0,0,0,3326,3324,1,0,0,0,3327,3328,5,89,0,0,3328,
		3329,5,33,0,0,3329,3331,3,302,151,0,3330,3332,7,4,0,0,3331,3330,1,0,0,
		0,3331,3332,1,0,0,0,3332,375,1,0,0,0,3333,3334,3,354,177,0,3334,3337,5,
		14,0,0,3335,3338,3,304,152,0,3336,3338,5,8,0,0,3337,3335,1,0,0,0,3337,
		3336,1,0,0,0,3337,3338,1,0,0,0,3338,3339,1,0,0,0,3339,3340,5,15,0,0,3340,
		3341,5,91,0,0,3341,3342,3,378,189,0,3342,377,1,0,0,0,3343,3345,3,354,177,
		0,3344,3346,3,356,178,0,3345,3344,1,0,0,0,3345,3346,1,0,0,0,3346,3352,
		1,0,0,0,3347,3348,5,14,0,0,3348,3349,3,244,122,0,3349,3350,5,15,0,0,3350,
		3352,1,0,0,0,3351,3343,1,0,0,0,3351,3347,1,0,0,0,3352,379,1,0,0,0,3353,
		3354,5,151,0,0,3354,3355,3,302,151,0,3355,381,1,0,0,0,3356,3357,5,103,
		0,0,3357,3358,3,386,193,0,3358,3359,5,22,0,0,3359,3360,3,302,151,0,3360,
		3371,1,0,0,0,3361,3362,5,103,0,0,3362,3363,5,14,0,0,3363,3364,3,384,192,
		0,3364,3365,5,15,0,0,3365,3366,5,22,0,0,3366,3367,5,14,0,0,3367,3368,3,
		304,152,0,3368,3369,5,15,0,0,3369,3371,1,0,0,0,3370,3356,1,0,0,0,3370,
		3361,1,0,0,0,3371,383,1,0,0,0,3372,3377,3,386,193,0,3373,3374,5,13,0,0,
		3374,3376,3,386,193,0,3375,3373,1,0,0,0,3376,3379,1,0,0,0,3377,3375,1,
		0,0,0,3377,3378,1,0,0,0,3378,385,1,0,0,0,3379,3377,1,0,0,0,3380,3388,3,
		354,177,0,3381,3384,5,12,0,0,3382,3385,3,354,177,0,3383,3385,3,392,196,
		0,3384,3382,1,0,0,0,3384,3383,1,0,0,0,3385,3387,1,0,0,0,3386,3381,1,0,
		0,0,3387,3390,1,0,0,0,3388,3386,1,0,0,0,3388,3389,1,0,0,0,3389,387,1,0,
		0,0,3390,3388,1,0,0,0,3391,3396,3,390,195,0,3392,3393,5,13,0,0,3393,3395,
		3,390,195,0,3394,3392,1,0,0,0,3395,3398,1,0,0,0,3396,3394,1,0,0,0,3396,
		3397,1,0,0,0,3397,389,1,0,0,0,3398,3396,1,0,0,0,3399,3400,3,302,151,0,
		3400,3401,5,28,0,0,3401,3402,3,354,177,0,3402,391,1,0,0,0,3403,3404,7,
		21,0,0,3404,393,1,0,0,0,3405,3406,7,22,0,0,3406,395,1,0,0,0,391,399,406,
		411,417,425,432,445,515,523,533,542,545,551,558,563,568,573,578,585,589,
		594,600,607,612,618,623,628,633,640,644,649,655,663,668,673,678,685,689,
		697,707,714,721,731,736,741,746,751,758,762,767,773,780,787,795,802,808,
		813,820,834,847,853,860,865,872,879,885,887,896,898,910,919,922,928,933,
		938,943,948,959,966,975,978,984,989,994,999,1007,1016,1024,1027,1033,1038,
		1043,1048,1058,1070,1073,1079,1084,1089,1094,1108,1113,1116,1123,1128,
		1133,1138,1143,1154,1161,1168,1173,1176,1183,1188,1193,1198,1210,1218,
		1225,1230,1235,1240,1249,1256,1266,1273,1280,1289,1295,1300,1305,1310,
		1318,1324,1331,1336,1342,1352,1356,1364,1370,1375,1380,1385,1391,1401,
		1407,1412,1420,1431,1469,1484,1487,1495,1502,1507,1514,1519,1526,1539,
		1550,1555,1567,1572,1585,1590,1601,1607,1618,1635,1644,1649,1657,1662,
		1670,1678,1681,1705,1712,1717,1733,1744,1752,1759,1766,1781,1788,1797,
		1802,1809,1818,1823,1831,1845,1852,1865,1872,1883,1890,1902,1909,1920,
		1927,1937,1951,2009,2014,2020,2025,2030,2034,2040,2049,2058,2066,2075,
		2083,2088,2093,2102,2107,2112,2120,2125,2130,2140,2153,2159,2167,2175,
		2184,2195,2206,2215,2222,2229,2235,2240,2243,2276,2281,2287,2294,2299,
		2303,2308,2312,2323,2335,2343,2350,2355,2359,2362,2368,2370,2375,2377,
		2385,2394,2397,2405,2407,2409,2431,2434,2438,2443,2447,2452,2456,2460,
		2464,2473,2488,2495,2520,2530,2533,2538,2543,2546,2551,2560,2562,2586,
		2598,2607,2614,2627,2633,2636,2641,2648,2660,2668,2674,2676,2687,2689,
		2697,2701,2703,2708,2710,2715,2718,2723,2728,2733,2736,2740,2754,2759,
		2763,2775,2782,2787,2812,2817,2821,2827,2832,2836,2853,2865,2871,2873,
		2878,2886,2893,2925,2938,2958,2961,2967,2980,2996,3001,3004,3006,3014,
		3026,3030,3042,3046,3080,3085,3089,3094,3099,3103,3126,3139,3141,3145,
		3156,3161,3163,3176,3181,3187,3193,3197,3201,3208,3212,3243,3253,3260,
		3265,3269,3272,3282,3287,3299,3304,3308,3311,3314,3324,3331,3337,3345,
		3351,3370,3377,3384,3388,3396
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BigO.BigQuery.Parser
