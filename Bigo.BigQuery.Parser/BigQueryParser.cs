//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./BigQueryParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BigO.BigQuery.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BigQueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PIPE=1, COL=2, BNOT=3, CONCAT=4, SCOL=5, ARROW=6, BAND=7, BXOR=8, BOR=9, 
		STAR=10, DIV=11, PLUS=12, SUB=13, DOT=14, COMMA=15, OPAR=16, CPAR=17, 
		OBR=18, CBR=19, LT=20, GT=21, LTE=22, GTE=23, EQ=24, NEQ=25, ALL=26, AND=27, 
		ANY=28, ARRAY=29, AS=30, ASC=31, ASSERT_ROWS_MODIFIED=32, AT=33, BETWEEN=34, 
		BY=35, CASE=36, CAST=37, COLLATE=38, CONTAINS=39, CREATE=40, CROSS=41, 
		CUBE=42, CURRENT=43, DEFAULT=44, DEFINE=45, DESC=46, DISTINCT=47, ELSE=48, 
		END=49, ENUM=50, ESCAPE=51, EXCEPT=52, EXCLUDE=53, EXISTS=54, EXTRACT=55, 
		FALSE=56, FETCH=57, FOLLOWING=58, FOR=59, FROM=60, FULL=61, GROUP=62, 
		GROUPING=63, GROUPS=64, HASH=65, HAVING=66, IF=67, IGNORE=68, IN=69, INNER=70, 
		INTERSECT=71, INTERVAL=72, INTO=73, IS=74, JOIN=75, LATERAL=76, LEFT=77, 
		LIKE=78, LIMIT=79, LOOKUP=80, MERGE=81, NATURAL=82, NEW=83, NO=84, NOT=85, 
		NULL=86, NULLS=87, OF=88, ON=89, OR=90, ORDER=91, OUTER=92, OVER=93, PARTITION=94, 
		PRECEDING=95, PROTO=96, QUALIFY=97, RANGE=98, RECURSIVE=99, RESPECT=100, 
		RIGHT=101, ROLLUP=102, ROWS=103, SELECT=104, SET=105, SOME=106, STRUCT=107, 
		TABLESAMPLE=108, THEN=109, TO=110, TREAT=111, TRUE=112, UNBOUNDED=113, 
		UNION=114, UNNEST=115, USING=116, WHEN=117, WHERE=118, WINDOW=119, WITH=120, 
		WITHIN=121, BIGNUMERIC=122, DATE=123, DATETIME=124, NUMERIC=125, TIMESTAMP=126, 
		YEAR=127, QUARTER=128, MONTH=129, WEEK=130, DAY=131, HOUR=132, MINUTE=133, 
		SECOND=134, MILLISECOND=135, MICROSECOND=136, JSON=137, OFFSET=138, NAME=139, 
		STRICT=140, CORRESPONDING=141, DIFFERENTIAL_PRIVACY=142, OPTIONS=143, 
		VALUE=144, REPLACE=145, SYSTEM=146, PERCENT=147, PIVOT=148, UNPIVOT=149, 
		SYSTEM_TIME=150, ROW=151, INCLUDE=152, FORMAT=153, SETS=154, AVG=155, 
		SCHEMA=156, TEMP=157, TEMPORARY=158, TABLE=159, CONSTRAINT=160, ENFORCED=161, 
		PRIMARY=162, KEY=163, FOREIGN=164, REFERENCES=165, CLUSTER=166, CONNECTION=167, 
		ARRAY_AGG=168, COPY=169, SNAPSHOT=170, CLONE=171, VIEW=172, DROP=173, 
		SEARCH=174, INDEX=175, VECTOR=176, ASSIGNMENT=177, RESERVATION=178, CAPACITY=179, 
		ACCESS=180, POLICY=181, POLICIES=182, PROCEDURE=183, FUNCTION=184, EXTERNAL=185, 
		MATERIALIZED=186, CASCADE=187, RESTRICT=188, UNDROP=189, REPLICA=190, 
		COLUMNS=191, RETURNS=192, DETERMINISTIC=193, LANGUAGE=194, REMOTE=195, 
		AGGREGATE=196, TYPE=197, OUT=198, INOUT=199, BEGIN=200, SECURITY=201, 
		INVOKER=202, COALESCE=203, NULLIF=204, IFNULL=205, GRANT=206, FILTER=207, 
		COLUMN=208, STORING=209, ALTER=210, ADD=211, RENAME=212, DATA=213, ORGANIZATION=214, 
		PROJECT=215, BI_CAPACITY=216, ANY_VALUE=217, MAX=218, MIN=219, ARRAY_CONCAT_AGG=220, 
		BIT_AND=221, BIT_OR=222, BIT_XOR=223, COUNT=224, COUNTIF=225, LOGICAL_AND=226, 
		LOGICAL_OR=227, MAX_BY=228, MIN_BY=229, STRING_AGG=230, SUM=231, TIMEZONE=232, 
		TIME=233, ASSERT=234, LOAD=235, OVERWRITE=236, PARTITIONS=237, FILES=238, 
		EXPORT=239, DECLARE=240, EXECUTE=241, IMMEDIATE=242, EXCEPTION=243, ERROR=244, 
		CALL=245, ELSEIF=246, LOOP=247, WHILE=248, DO=249, REPEAT=250, UNTIL=251, 
		BREAK=252, LEAVE=253, CONTINUE=254, ITERATE=255, RETURN=256, TRANSACTION=257, 
		COMMIT=258, ROLLBACK=259, MESSAGE=260, RAISE=261, INSERT=262, VALUES=263, 
		DELETE=264, TRUNCATE=265, UPDATE=266, MATCHED=267, TARGET=268, SOURCE=269, 
		REVOKE=270, MODEL=271, TRANSFORM=272, INPUT=273, OUTPUT=274, NAN=275, 
		INF=276, UNQUOTED_IDENTIFIER=277, QUOTED_IDENTIFIER=278, STRING_LITERAL=279, 
		RAW_STRING_LITERAL=280, BYTES_LITERAL=281, RAW_BYTES_LITERAL=282, INTEGER_LITERAL=283, 
		FLOATING_POINT_LITERAL=284, SPACES=285, COMMENT=286, UNEXPECTED=287;
	public const int
		RULE_statements_eof = 0, RULE_statement_eof = 1, RULE_statement_list = 2, 
		RULE_statement = 3, RULE_ddl_statement = 4, RULE_dml_statement = 5, RULE_insert_statement = 6, 
		RULE_input = 7, RULE_delete_statement = 8, RULE_truncate_table_statement = 9, 
		RULE_update_statement = 10, RULE_update_item = 11, RULE_update_items = 12, 
		RULE_merge_statement = 13, RULE_when_clause = 14, RULE_matched_clause = 15, 
		RULE_not_matched_by_target_clause = 16, RULE_not_matched_by_source_clause = 17, 
		RULE_merge_update_clause = 18, RULE_merge_insert_clause = 19, RULE_merge_input = 20, 
		RULE_dcl_statement = 21, RULE_grant_statement = 22, RULE_resource_type = 23, 
		RULE_revoke_statement = 24, RULE_procedural_statement = 25, RULE_exception_when_error = 26, 
		RULE_export_statement = 27, RULE_load_statement = 28, RULE_assert_statement = 29, 
		RULE_declare = 30, RULE_set = 31, RULE_execute_immediate = 32, RULE_begin_end = 33, 
		RULE_begin_exception_end = 34, RULE_case_ = 35, RULE_case_search_expression = 36, 
		RULE_if_statement = 37, RULE_label = 38, RULE_loop = 39, RULE_repeat = 40, 
		RULE_while = 41, RULE_for_in = 42, RULE_begin_transaction = 43, RULE_commit_transaction = 44, 
		RULE_rollback_transaction = 45, RULE_raise = 46, RULE_call = 47, RULE_query_statement = 48, 
		RULE_create_table = 49, RULE_create_table_like = 50, RULE_create_table_copy = 51, 
		RULE_create_snapshot_table = 52, RULE_create_table_clone = 53, RULE_create_view = 54, 
		RULE_create_materialized_view = 55, RULE_create_materialized_view_as_replica = 56, 
		RULE_create_external_schema = 57, RULE_create_external_table = 58, RULE_column_name_schemas = 59, 
		RULE_column_name_schema = 60, RULE_create_function = 61, RULE_named_parameters = 62, 
		RULE_named_parameter = 63, RULE_create_js_function = 64, RULE_create_py_function = 65, 
		RULE_create_remote_function = 66, RULE_create_aggregate_function = 67, 
		RULE_function_parameters = 68, RULE_function_parameter = 69, RULE_create_aggregate_js_function = 70, 
		RULE_create_table_function = 71, RULE_table_function_parameters = 72, 
		RULE_table_function_parameter = 73, RULE_column_declarations = 74, RULE_column_declaration = 75, 
		RULE_create_procedure = 76, RULE_procedure_arguments = 77, RULE_procedure_argument = 78, 
		RULE_create_stored_procedure = 79, RULE_create_row_access_policy = 80, 
		RULE_create_capacity = 81, RULE_create_reservation = 82, RULE_create_assignment = 83, 
		RULE_create_search_index = 84, RULE_columns = 85, RULE_column = 86, RULE_create_vector_index = 87, 
		RULE_alter_schema_set_default_collate = 88, RULE_alter_schema_set_options = 89, 
		RULE_alter_schema_add_replica = 90, RULE_alter_schema_drop_replica = 91, 
		RULE_alter_table_set_options = 92, RULE_alter_table_add_column = 93, RULE_alter_table_add_foreign_key = 94, 
		RULE_add_foreign_key = 95, RULE_alter_table_add_primary_key = 96, RULE_alter_table_rename = 97, 
		RULE_alter_table_rename_column = 98, RULE_rename_column = 99, RULE_column_to_column = 100, 
		RULE_alter_table_drop_column = 101, RULE_drop_column = 102, RULE_alter_table_drop_constraint = 103, 
		RULE_alter_table_drop_primary_key = 104, RULE_alter_table_set_default_collate = 105, 
		RULE_alter_table_column_set_options = 106, RULE_alter_table_column_drop_not_null = 107, 
		RULE_alter_table_column_set_data_type = 108, RULE_alter_table_column_set_default = 109, 
		RULE_alter_table_column_drop_default = 110, RULE_alter_view = 111, RULE_alter_materialized_view = 112, 
		RULE_alter_organization = 113, RULE_alter_project = 114, RULE_alter_bi_capacity = 115, 
		RULE_alter_capacity = 116, RULE_alter_reservation = 117, RULE_undrop_schema = 118, 
		RULE_drop_schema = 119, RULE_drop_table = 120, RULE_drop_snapshot_table = 121, 
		RULE_drop_external_table = 122, RULE_drop_view = 123, RULE_drop_materialized_view = 124, 
		RULE_drop_function = 125, RULE_drop_table_function = 126, RULE_drop_procedure = 127, 
		RULE_drop_row_access_policy = 128, RULE_drop_capacity = 129, RULE_drop_reservation = 130, 
		RULE_drop_assignment = 131, RULE_drop_search_index = 132, RULE_drop_vector_index = 133, 
		RULE_view_column_name_list = 134, RULE_view_column = 135, RULE_column_constraint_definitions = 136, 
		RULE_column_constraint_definition = 137, RULE_column_definition = 138, 
		RULE_primary_key = 139, RULE_foreign_key = 140, RULE_foreign_reference = 141, 
		RULE_create_schema = 142, RULE_query_expression = 143, RULE_query_expr_tail = 144, 
		RULE_set_operation_tail = 145, RULE_non_recursive_cte = 146, RULE_recursive_cte = 147, 
		RULE_recursive_union_operation = 148, RULE_select = 149, RULE_group_by_specification = 150, 
		RULE_grouping_sets_specification = 151, RULE_grouping_list = 152, RULE_grouping_list_item = 153, 
		RULE_cube_specification = 154, RULE_groupable_item_set = 155, RULE_rollup_specification = 156, 
		RULE_window_clause = 157, RULE_named_window_expression = 158, RULE_window_specification = 159, 
		RULE_window_frame_clause = 160, RULE_frame_start = 161, RULE_frame_between = 162, 
		RULE_frame_end_a = 163, RULE_frame_end_b = 164, RULE_frame_end_c = 165, 
		RULE_differential_privacy_clause = 166, RULE_from_clauses = 167, RULE_from_clause = 168, 
		RULE_from_item = 169, RULE_unnest_operator = 170, RULE_cross_join_operator = 171, 
		RULE_condition_join_operator = 172, RULE_join_condition = 173, RULE_on_clause = 174, 
		RULE_using_clause = 175, RULE_pivot_operator = 176, RULE_unpivot_operator = 177, 
		RULE_single_column_unpivot = 178, RULE_multi_column_unpivot = 179, RULE_columns_to_unpivot = 180, 
		RULE_column_sets_to_unpivot = 181, RULE_tablesample_operator = 182, RULE_option_parameters = 183, 
		RULE_option_parameter = 184, RULE_select_list = 185, RULE_select_list_item = 186, 
		RULE_select_all = 187, RULE_expression = 188, RULE_expressions = 189, 
		RULE_case_expression = 190, RULE_coalesce = 191, RULE_expressions_as_alias = 192, 
		RULE_expressions_asc_desc = 193, RULE_literal = 194, RULE_numeric_literal = 195, 
		RULE_big_numeric_literal = 196, RULE_array_literal = 197, RULE_struct_literal = 198, 
		RULE_data_type = 199, RULE_any_identifier = 200, RULE_string_literal = 201, 
		RULE_date_literal = 202, RULE_time_literal = 203, RULE_datetime_literal = 204, 
		RULE_timestamp_literal = 205, RULE_range_literal = 206, RULE_interval_literal = 207, 
		RULE_json_literal = 208, RULE_byte_literal = 209, RULE_identifier = 210, 
		RULE_as_alias = 211, RULE_function_call = 212, RULE_function_name = 213, 
		RULE_function_arguments = 214, RULE_function_expressions = 215, RULE_function_expression = 216, 
		RULE_optional_clauses = 217, RULE_limit_clause = 218, RULE_order_by_keys = 219, 
		RULE_order_by_key = 220, RULE_window_function = 221, RULE_over_clause = 222, 
		RULE_format_clause = 223, RULE_path_expressions = 224, RULE_path_expression = 225, 
		RULE_as_column_names = 226, RULE_as_column_name = 227, RULE_reserved = 228, 
		RULE_datetime_part = 229, RULE_create_model = 230, RULE_field_name_types = 231;
	public static readonly string[] ruleNames = {
		"statements_eof", "statement_eof", "statement_list", "statement", "ddl_statement", 
		"dml_statement", "insert_statement", "input", "delete_statement", "truncate_table_statement", 
		"update_statement", "update_item", "update_items", "merge_statement", 
		"when_clause", "matched_clause", "not_matched_by_target_clause", "not_matched_by_source_clause", 
		"merge_update_clause", "merge_insert_clause", "merge_input", "dcl_statement", 
		"grant_statement", "resource_type", "revoke_statement", "procedural_statement", 
		"exception_when_error", "export_statement", "load_statement", "assert_statement", 
		"declare", "set", "execute_immediate", "begin_end", "begin_exception_end", 
		"case_", "case_search_expression", "if_statement", "label", "loop", "repeat", 
		"while", "for_in", "begin_transaction", "commit_transaction", "rollback_transaction", 
		"raise", "call", "query_statement", "create_table", "create_table_like", 
		"create_table_copy", "create_snapshot_table", "create_table_clone", "create_view", 
		"create_materialized_view", "create_materialized_view_as_replica", "create_external_schema", 
		"create_external_table", "column_name_schemas", "column_name_schema", 
		"create_function", "named_parameters", "named_parameter", "create_js_function", 
		"create_py_function", "create_remote_function", "create_aggregate_function", 
		"function_parameters", "function_parameter", "create_aggregate_js_function", 
		"create_table_function", "table_function_parameters", "table_function_parameter", 
		"column_declarations", "column_declaration", "create_procedure", "procedure_arguments", 
		"procedure_argument", "create_stored_procedure", "create_row_access_policy", 
		"create_capacity", "create_reservation", "create_assignment", "create_search_index", 
		"columns", "column", "create_vector_index", "alter_schema_set_default_collate", 
		"alter_schema_set_options", "alter_schema_add_replica", "alter_schema_drop_replica", 
		"alter_table_set_options", "alter_table_add_column", "alter_table_add_foreign_key", 
		"add_foreign_key", "alter_table_add_primary_key", "alter_table_rename", 
		"alter_table_rename_column", "rename_column", "column_to_column", "alter_table_drop_column", 
		"drop_column", "alter_table_drop_constraint", "alter_table_drop_primary_key", 
		"alter_table_set_default_collate", "alter_table_column_set_options", "alter_table_column_drop_not_null", 
		"alter_table_column_set_data_type", "alter_table_column_set_default", 
		"alter_table_column_drop_default", "alter_view", "alter_materialized_view", 
		"alter_organization", "alter_project", "alter_bi_capacity", "alter_capacity", 
		"alter_reservation", "undrop_schema", "drop_schema", "drop_table", "drop_snapshot_table", 
		"drop_external_table", "drop_view", "drop_materialized_view", "drop_function", 
		"drop_table_function", "drop_procedure", "drop_row_access_policy", "drop_capacity", 
		"drop_reservation", "drop_assignment", "drop_search_index", "drop_vector_index", 
		"view_column_name_list", "view_column", "column_constraint_definitions", 
		"column_constraint_definition", "column_definition", "primary_key", "foreign_key", 
		"foreign_reference", "create_schema", "query_expression", "query_expr_tail", 
		"set_operation_tail", "non_recursive_cte", "recursive_cte", "recursive_union_operation", 
		"select", "group_by_specification", "grouping_sets_specification", "grouping_list", 
		"grouping_list_item", "cube_specification", "groupable_item_set", "rollup_specification", 
		"window_clause", "named_window_expression", "window_specification", "window_frame_clause", 
		"frame_start", "frame_between", "frame_end_a", "frame_end_b", "frame_end_c", 
		"differential_privacy_clause", "from_clauses", "from_clause", "from_item", 
		"unnest_operator", "cross_join_operator", "condition_join_operator", "join_condition", 
		"on_clause", "using_clause", "pivot_operator", "unpivot_operator", "single_column_unpivot", 
		"multi_column_unpivot", "columns_to_unpivot", "column_sets_to_unpivot", 
		"tablesample_operator", "option_parameters", "option_parameter", "select_list", 
		"select_list_item", "select_all", "expression", "expressions", "case_expression", 
		"coalesce", "expressions_as_alias", "expressions_asc_desc", "literal", 
		"numeric_literal", "big_numeric_literal", "array_literal", "struct_literal", 
		"data_type", "any_identifier", "string_literal", "date_literal", "time_literal", 
		"datetime_literal", "timestamp_literal", "range_literal", "interval_literal", 
		"json_literal", "byte_literal", "identifier", "as_alias", "function_call", 
		"function_name", "function_arguments", "function_expressions", "function_expression", 
		"optional_clauses", "limit_clause", "order_by_keys", "order_by_key", "window_function", 
		"over_clause", "format_clause", "path_expressions", "path_expression", 
		"as_column_names", "as_column_name", "reserved", "datetime_part", "create_model", 
		"field_name_types"
	};

	private static readonly string[] _LiteralNames = {
		null, "'|>'", "':'", "'~'", "'||'", "';'", "'=>'", "'&'", "'^'", "'|'", 
		"'*'", "'/'", "'+'", "'-'", "'.'", "','", "'('", "')'", "'['", "']'", 
		"'<'", "'>'", "'<='", "'>='", "'='", null, "'ALL'", "'AND'", "'ANY'", 
		"'ARRAY'", "'AS'", "'ASC'", "'ASSERT_ROWS_MODIFIED'", "'AT'", "'BETWEEN'", 
		"'BY'", "'CASE'", "'CAST'", "'COLLATE'", "'CONTAINS'", "'CREATE'", "'CROSS'", 
		"'CUBE'", "'CURRENT'", "'DEFAULT'", "'DEFINE'", "'DESC'", "'DISTINCT'", 
		"'ELSE'", "'END'", "'ENUM'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDE'", "'EXISTS'", 
		"'EXTRACT'", "'FALSE'", "'FETCH'", "'FOLLOWING'", "'FOR'", "'FROM'", "'FULL'", 
		"'GROUP'", "'GROUPING'", "'GROUPS'", "'HASH'", "'HAVING'", "'IF'", "'IGNORE'", 
		"'IN'", "'INNER'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'JOIN'", 
		"'LATERAL'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LOOKUP'", "'MERGE'", "'NATURAL'", 
		"'NEW'", "'NO'", "'NOT'", "'NULL'", "'NULLS'", "'OF'", "'ON'", "'OR'", 
		"'ORDER'", "'OUTER'", "'OVER'", "'PARTITION'", "'PRECEDING'", "'PROTO'", 
		"'QUALIFY'", "'RANGE'", "'RECURSIVE'", "'RESPECT'", "'RIGHT'", "'ROLLUP'", 
		"'ROWS'", "'SELECT'", "'SET'", "'SOME'", "'STRUCT'", "'TABLESAMPLE'", 
		"'THEN'", "'TO'", "'TREAT'", "'TRUE'", "'UNBOUNDED'", "'UNION'", "'UNNEST'", 
		"'USING'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'BIGNUMERIC'", 
		"'DATE'", "'DATETIME'", "'NUMERIC'", "'TIMESTAMP'", "'YEAR'", "'QUARTER'", 
		"'MONTH'", "'WEEK'", "'DAY'", "'HOUR'", "'MINUTE'", "'SECOND'", "'MILLISECOND'", 
		"'MICROSECOND'", "'JSON'", "'OFFSET'", "'NAME'", "'STRICT'", "'CORRESPONDING'", 
		"'DIFFERENTIAL_PRIVACY'", "'OPTIONS'", "'VALUE'", "'REPLACE'", "'SYSTEM'", 
		"'PERCENT'", "'PIVOT'", "'UNPIVOT'", "'SYSTEM_TIME'", "'ROW'", "'INCLUDE'", 
		"'FORMAT'", "'SETS'", "'AVG'", "'SCHEMA'", "'TEMP'", "'TEMPORARY'", "'TABLE'", 
		"'CONSTRAINT'", "'ENFORCED'", "'PRIMARY'", "'KEY'", "'FOREIGN'", "'REFERENCES'", 
		"'CLUSTER'", "'CONNECTION'", "'ARRAY_AGG'", "'COPY'", "'SNAPSHOT'", "'CLONE'", 
		"'VIEW'", "'DROP'", "'SEARCH'", "'INDEX'", "'VECTOR'", "'ASSIGNMENT'", 
		"'RESERVATION'", "'CAPACITY'", "'ACCESS'", "'POLICY'", "'POLICIES'", "'PROCEDURE'", 
		"'FUNCTION'", "'EXTERNAL'", "'MATERIALIZED'", "'CASCADE'", "'RESTRICT'", 
		"'UNDROP'", "'REPLICA'", "'COLUMNS'", "'RETURNS'", "'DETERMINISTIC'", 
		"'LANGUAGE'", "'REMOTE'", "'AGGREGATE'", "'TYPE'", "'OUT'", "'INOUT'", 
		"'BEGIN'", "'SECURITY'", "'INVOKER'", "'COALESCE'", "'NULLIF'", "'IFNULL'", 
		"'GRANT'", "'FILTER'", "'COLUMN'", "'STORING'", "'ALTER'", "'ADD'", "'RENAME'", 
		"'DATA'", "'ORGANIZATION'", "'PROJECT'", "'BI_CAPACITY'", "'ANY_VALUE'", 
		"'MAX'", "'MIN'", "'ARRAY_CONCAT_AGG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", 
		"'COUNT'", "'COUNTIF'", "'LOGICAL_AND'", "'LOGICAL_OR'", "'MAX_BY'", "'MIN_BY'", 
		"'STRING_AGG'", "'SUM'", "'TIMEZONE'", "'TIME'", "'ASSERT'", "'LOAD'", 
		"'OVERWRITE'", "'PARTITIONS'", "'FILES'", "'EXPORT'", "'DECLARE'", "'EXECUTE'", 
		"'IMMEDIATE'", "'EXCEPTION'", "'ERROR'", "'CALL'", "'ELSEIF'", "'LOOP'", 
		"'WHILE'", "'DO'", "'REPEAT'", "'UNTIL'", "'BREAK'", "'LEAVE'", "'CONTINUE'", 
		"'ITERATE'", "'RETURN'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", "'MESSAGE'", 
		"'RAISE'", "'INSERT'", "'VALUES'", "'DELETE'", "'TRUNCATE'", "'UPDATE'", 
		"'MATCHED'", "'TARGET'", "'SOURCE'", "'REVOKE'", "'MODEL'", "'TRANSFORM'", 
		"'INPUT'", "'OUTPUT'", "'NAN'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PIPE", "COL", "BNOT", "CONCAT", "SCOL", "ARROW", "BAND", "BXOR", 
		"BOR", "STAR", "DIV", "PLUS", "SUB", "DOT", "COMMA", "OPAR", "CPAR", "OBR", 
		"CBR", "LT", "GT", "LTE", "GTE", "EQ", "NEQ", "ALL", "AND", "ANY", "ARRAY", 
		"AS", "ASC", "ASSERT_ROWS_MODIFIED", "AT", "BETWEEN", "BY", "CASE", "CAST", 
		"COLLATE", "CONTAINS", "CREATE", "CROSS", "CUBE", "CURRENT", "DEFAULT", 
		"DEFINE", "DESC", "DISTINCT", "ELSE", "END", "ENUM", "ESCAPE", "EXCEPT", 
		"EXCLUDE", "EXISTS", "EXTRACT", "FALSE", "FETCH", "FOLLOWING", "FOR", 
		"FROM", "FULL", "GROUP", "GROUPING", "GROUPS", "HASH", "HAVING", "IF", 
		"IGNORE", "IN", "INNER", "INTERSECT", "INTERVAL", "INTO", "IS", "JOIN", 
		"LATERAL", "LEFT", "LIKE", "LIMIT", "LOOKUP", "MERGE", "NATURAL", "NEW", 
		"NO", "NOT", "NULL", "NULLS", "OF", "ON", "OR", "ORDER", "OUTER", "OVER", 
		"PARTITION", "PRECEDING", "PROTO", "QUALIFY", "RANGE", "RECURSIVE", "RESPECT", 
		"RIGHT", "ROLLUP", "ROWS", "SELECT", "SET", "SOME", "STRUCT", "TABLESAMPLE", 
		"THEN", "TO", "TREAT", "TRUE", "UNBOUNDED", "UNION", "UNNEST", "USING", 
		"WHEN", "WHERE", "WINDOW", "WITH", "WITHIN", "BIGNUMERIC", "DATE", "DATETIME", 
		"NUMERIC", "TIMESTAMP", "YEAR", "QUARTER", "MONTH", "WEEK", "DAY", "HOUR", 
		"MINUTE", "SECOND", "MILLISECOND", "MICROSECOND", "JSON", "OFFSET", "NAME", 
		"STRICT", "CORRESPONDING", "DIFFERENTIAL_PRIVACY", "OPTIONS", "VALUE", 
		"REPLACE", "SYSTEM", "PERCENT", "PIVOT", "UNPIVOT", "SYSTEM_TIME", "ROW", 
		"INCLUDE", "FORMAT", "SETS", "AVG", "SCHEMA", "TEMP", "TEMPORARY", "TABLE", 
		"CONSTRAINT", "ENFORCED", "PRIMARY", "KEY", "FOREIGN", "REFERENCES", "CLUSTER", 
		"CONNECTION", "ARRAY_AGG", "COPY", "SNAPSHOT", "CLONE", "VIEW", "DROP", 
		"SEARCH", "INDEX", "VECTOR", "ASSIGNMENT", "RESERVATION", "CAPACITY", 
		"ACCESS", "POLICY", "POLICIES", "PROCEDURE", "FUNCTION", "EXTERNAL", "MATERIALIZED", 
		"CASCADE", "RESTRICT", "UNDROP", "REPLICA", "COLUMNS", "RETURNS", "DETERMINISTIC", 
		"LANGUAGE", "REMOTE", "AGGREGATE", "TYPE", "OUT", "INOUT", "BEGIN", "SECURITY", 
		"INVOKER", "COALESCE", "NULLIF", "IFNULL", "GRANT", "FILTER", "COLUMN", 
		"STORING", "ALTER", "ADD", "RENAME", "DATA", "ORGANIZATION", "PROJECT", 
		"BI_CAPACITY", "ANY_VALUE", "MAX", "MIN", "ARRAY_CONCAT_AGG", "BIT_AND", 
		"BIT_OR", "BIT_XOR", "COUNT", "COUNTIF", "LOGICAL_AND", "LOGICAL_OR", 
		"MAX_BY", "MIN_BY", "STRING_AGG", "SUM", "TIMEZONE", "TIME", "ASSERT", 
		"LOAD", "OVERWRITE", "PARTITIONS", "FILES", "EXPORT", "DECLARE", "EXECUTE", 
		"IMMEDIATE", "EXCEPTION", "ERROR", "CALL", "ELSEIF", "LOOP", "WHILE", 
		"DO", "REPEAT", "UNTIL", "BREAK", "LEAVE", "CONTINUE", "ITERATE", "RETURN", 
		"TRANSACTION", "COMMIT", "ROLLBACK", "MESSAGE", "RAISE", "INSERT", "VALUES", 
		"DELETE", "TRUNCATE", "UPDATE", "MATCHED", "TARGET", "SOURCE", "REVOKE", 
		"MODEL", "TRANSFORM", "INPUT", "OUTPUT", "NAN", "INF", "UNQUOTED_IDENTIFIER", 
		"QUOTED_IDENTIFIER", "STRING_LITERAL", "RAW_STRING_LITERAL", "BYTES_LITERAL", 
		"RAW_BYTES_LITERAL", "INTEGER_LITERAL", "FLOATING_POINT_LITERAL", "SPACES", 
		"COMMENT", "UNEXPECTED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BigQueryParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BigQueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BigQueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BigQueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Statements_eofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigQueryParser.Eof, 0); }
		public Statements_eofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements_eof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatements_eof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatements_eof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements_eof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statements_eofContext statements_eof() {
		Statements_eofContext _localctx = new Statements_eofContext(Context, State);
		EnterRule(_localctx, 0, RULE_statements_eof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			statement_list();
			State = 465;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_eofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigQueryParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public Statement_eofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_eof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatement_eof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatement_eof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_eof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_eofContext statement_eof() {
		Statement_eofContext _localctx = new Statement_eofContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement_eof);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 467;
				Match(SCOL);
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 473;
			statement();
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 474;
				Match(SCOL);
				}
				}
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 480;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(BigQueryParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(BigQueryParser.SCOL, i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 482;
				Match(SCOL);
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 488;
			statement();
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 490;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 489;
						Match(SCOL);
						}
						}
						State = 492;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 494;
					statement();
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 503;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 500;
					Match(SCOL);
					}
					} 
				}
				State = 505;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ddl_statementContext ddl_statement() {
			return GetRuleContext<Ddl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dml_statementContext dml_statement() {
			return GetRuleContext<Dml_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dcl_statementContext dcl_statement() {
			return GetRuleContext<Dcl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_statementContext procedural_statement() {
			return GetRuleContext<Procedural_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Export_statementContext export_statement() {
			return GetRuleContext<Export_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Load_statementContext load_statement() {
			return GetRuleContext<Load_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assert_statementContext assert_statement() {
			return GetRuleContext<Assert_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_modelContext create_model() {
			return GetRuleContext<Create_modelContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506;
				query_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 507;
				ddl_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 508;
				dml_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 509;
				dcl_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 510;
				procedural_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 511;
				export_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 512;
				load_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 513;
				assert_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 514;
				create_model();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_schemaContext create_schema() {
			return GetRuleContext<Create_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_likeContext create_table_like() {
			return GetRuleContext<Create_table_likeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_copyContext create_table_copy() {
			return GetRuleContext<Create_table_copyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_snapshot_tableContext create_snapshot_table() {
			return GetRuleContext<Create_snapshot_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_cloneContext create_table_clone() {
			return GetRuleContext<Create_table_cloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_materialized_viewContext create_materialized_view() {
			return GetRuleContext<Create_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_materialized_view_as_replicaContext create_materialized_view_as_replica() {
			return GetRuleContext<Create_materialized_view_as_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_schemaContext create_external_schema() {
			return GetRuleContext<Create_external_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_external_tableContext create_external_table() {
			return GetRuleContext<Create_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_functionContext create_function() {
			return GetRuleContext<Create_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_js_functionContext create_js_function() {
			return GetRuleContext<Create_js_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_py_functionContext create_py_function() {
			return GetRuleContext<Create_py_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_remote_functionContext create_remote_function() {
			return GetRuleContext<Create_remote_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_aggregate_functionContext create_aggregate_function() {
			return GetRuleContext<Create_aggregate_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_aggregate_js_functionContext create_aggregate_js_function() {
			return GetRuleContext<Create_aggregate_js_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_functionContext create_table_function() {
			return GetRuleContext<Create_table_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_procedureContext create_procedure() {
			return GetRuleContext<Create_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_stored_procedureContext create_stored_procedure() {
			return GetRuleContext<Create_stored_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_row_access_policyContext create_row_access_policy() {
			return GetRuleContext<Create_row_access_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_capacityContext create_capacity() {
			return GetRuleContext<Create_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_reservationContext create_reservation() {
			return GetRuleContext<Create_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_assignmentContext create_assignment() {
			return GetRuleContext<Create_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_search_indexContext create_search_index() {
			return GetRuleContext<Create_search_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_vector_indexContext create_vector_index() {
			return GetRuleContext<Create_vector_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_set_default_collateContext alter_schema_set_default_collate() {
			return GetRuleContext<Alter_schema_set_default_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_set_optionsContext alter_schema_set_options() {
			return GetRuleContext<Alter_schema_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_add_replicaContext alter_schema_add_replica() {
			return GetRuleContext<Alter_schema_add_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_schema_drop_replicaContext alter_schema_drop_replica() {
			return GetRuleContext<Alter_schema_drop_replicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_optionsContext alter_table_set_options() {
			return GetRuleContext<Alter_table_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_columnContext alter_table_add_column() {
			return GetRuleContext<Alter_table_add_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_foreign_keyContext alter_table_add_foreign_key() {
			return GetRuleContext<Alter_table_add_foreign_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_add_primary_keyContext alter_table_add_primary_key() {
			return GetRuleContext<Alter_table_add_primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_renameContext alter_table_rename() {
			return GetRuleContext<Alter_table_renameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_rename_columnContext alter_table_rename_column() {
			return GetRuleContext<Alter_table_rename_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_columnContext alter_table_drop_column() {
			return GetRuleContext<Alter_table_drop_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_constraintContext alter_table_drop_constraint() {
			return GetRuleContext<Alter_table_drop_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_drop_primary_keyContext alter_table_drop_primary_key() {
			return GetRuleContext<Alter_table_drop_primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_set_default_collateContext alter_table_set_default_collate() {
			return GetRuleContext<Alter_table_set_default_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_optionsContext alter_table_column_set_options() {
			return GetRuleContext<Alter_table_column_set_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_drop_not_nullContext alter_table_column_drop_not_null() {
			return GetRuleContext<Alter_table_column_drop_not_nullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_data_typeContext alter_table_column_set_data_type() {
			return GetRuleContext<Alter_table_column_set_data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_set_defaultContext alter_table_column_set_default() {
			return GetRuleContext<Alter_table_column_set_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_column_drop_defaultContext alter_table_column_drop_default() {
			return GetRuleContext<Alter_table_column_drop_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_viewContext alter_view() {
			return GetRuleContext<Alter_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_materialized_viewContext alter_materialized_view() {
			return GetRuleContext<Alter_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_organizationContext alter_organization() {
			return GetRuleContext<Alter_organizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_projectContext alter_project() {
			return GetRuleContext<Alter_projectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_bi_capacityContext alter_bi_capacity() {
			return GetRuleContext<Alter_bi_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_capacityContext alter_capacity() {
			return GetRuleContext<Alter_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_reservationContext alter_reservation() {
			return GetRuleContext<Alter_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Undrop_schemaContext undrop_schema() {
			return GetRuleContext<Undrop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_schemaContext drop_schema() {
			return GetRuleContext<Drop_schemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_snapshot_tableContext drop_snapshot_table() {
			return GetRuleContext<Drop_snapshot_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_external_tableContext drop_external_table() {
			return GetRuleContext<Drop_external_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_materialized_viewContext drop_materialized_view() {
			return GetRuleContext<Drop_materialized_viewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_table_functionContext drop_table_function() {
			return GetRuleContext<Drop_table_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_row_access_policyContext drop_row_access_policy() {
			return GetRuleContext<Drop_row_access_policyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_capacityContext drop_capacity() {
			return GetRuleContext<Drop_capacityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_reservationContext drop_reservation() {
			return GetRuleContext<Drop_reservationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_assignmentContext drop_assignment() {
			return GetRuleContext<Drop_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_search_indexContext drop_search_index() {
			return GetRuleContext<Drop_search_indexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_vector_indexContext drop_vector_index() {
			return GetRuleContext<Drop_vector_indexContext>(0);
		}
		public Ddl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDdl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDdl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_statementContext ddl_statement() {
		Ddl_statementContext _localctx = new Ddl_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ddl_statement);
		try {
			State = 585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517;
				create_schema();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 518;
				create_table();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 519;
				create_table_like();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 520;
				create_table_copy();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 521;
				create_snapshot_table();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 522;
				create_table_clone();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 523;
				create_view();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 524;
				create_materialized_view();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 525;
				create_materialized_view_as_replica();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 526;
				create_external_schema();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 527;
				create_external_table();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 528;
				create_function();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 529;
				create_js_function();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 530;
				create_py_function();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 531;
				create_remote_function();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 532;
				create_aggregate_function();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 533;
				create_aggregate_js_function();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 534;
				create_table_function();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 535;
				create_procedure();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 536;
				create_stored_procedure();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 537;
				create_row_access_policy();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 538;
				create_capacity();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 539;
				create_reservation();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 540;
				create_assignment();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 541;
				create_search_index();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 542;
				create_vector_index();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 543;
				alter_schema_set_default_collate();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 544;
				alter_schema_set_options();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 545;
				alter_schema_add_replica();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 546;
				alter_schema_drop_replica();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 547;
				alter_table_set_options();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 548;
				alter_table_add_column();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 549;
				alter_table_add_foreign_key();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 550;
				alter_table_add_primary_key();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 551;
				alter_table_rename();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 552;
				alter_table_rename_column();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 553;
				alter_table_drop_column();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 554;
				alter_table_drop_constraint();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 555;
				alter_table_drop_primary_key();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 556;
				alter_table_set_default_collate();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 557;
				alter_table_column_set_options();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 558;
				alter_table_column_drop_not_null();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 559;
				alter_table_column_set_data_type();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 560;
				alter_table_column_set_default();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 561;
				alter_table_column_drop_default();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 562;
				alter_view();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 563;
				alter_materialized_view();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 564;
				alter_organization();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 565;
				alter_project();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 566;
				alter_bi_capacity();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 567;
				alter_capacity();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 568;
				alter_reservation();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 569;
				undrop_schema();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 570;
				drop_schema();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 571;
				drop_table();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 572;
				drop_snapshot_table();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 573;
				drop_external_table();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 574;
				drop_view();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 575;
				drop_materialized_view();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 576;
				drop_function();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 577;
				drop_table_function();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 578;
				drop_procedure();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 579;
				drop_row_access_policy();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 580;
				drop_capacity();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 581;
				drop_reservation();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 582;
				drop_assignment();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 583;
				drop_search_index();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 584;
				drop_vector_index();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Truncate_table_statementContext truncate_table_statement() {
			return GetRuleContext<Truncate_table_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Dml_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDml_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDml_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_statementContext dml_statement() {
		Dml_statementContext _localctx = new Dml_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_dml_statement);
		try {
			State = 592;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSERT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587;
				insert_statement();
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				delete_statement();
				}
				break;
			case TRUNCATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 589;
				truncate_table_statement();
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 590;
				update_statement();
				}
				break;
			case MERGE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 591;
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public Path_expressionContext target_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(BigQueryParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(BigQueryParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(INSERT);
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 595;
				Match(INTO);
				}
			}

			State = 598;
			_localctx.target_name = path_expression();
			State = 603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 599;
				Match(OPAR);
				State = 600;
				columns();
				State = 601;
				Match(CPAR);
				}
				break;
			}
			State = 605;
			input();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(BigQueryParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 14, RULE_input);
		int _la;
		try {
			State = 622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607;
				Match(VALUES);
				State = 608;
				Match(OPAR);
				State = 609;
				expressions();
				State = 610;
				Match(CPAR);
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 611;
					Match(COMMA);
					State = 612;
					Match(OPAR);
					State = 613;
					expressions();
					State = 614;
					Match(CPAR);
					}
					}
					State = 620;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OPAR:
			case SELECT:
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621;
				query_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public Path_expressionContext target_name;
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(BigQueryParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(DELETE);
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 625;
				Match(FROM);
				}
			}

			State = 628;
			_localctx.target_name = path_expression();
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 629;
				_localctx.alias = identifier();
				}
			}

			State = 632;
			Match(WHERE);
			State = 633;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Truncate_table_statementContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(BigQueryParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Truncate_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncate_table_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTruncate_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTruncate_table_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncate_table_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truncate_table_statementContext truncate_table_statement() {
		Truncate_table_statementContext _localctx = new Truncate_table_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_truncate_table_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			Match(TRUNCATE);
			State = 636;
			Match(TABLE);
			State = 645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 640;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 637;
					_localctx.project_name = identifier();
					State = 638;
					Match(DOT);
					}
					break;
				}
				State = 642;
				_localctx.dataset_name = identifier();
				State = 643;
				Match(DOT);
				}
				break;
			}
			State = 647;
			_localctx.table_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public Path_expressionContext target_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(BigQueryParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Update_itemsContext update_items() {
			return GetRuleContext<Update_itemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(UPDATE);
			State = 650;
			_localctx.target_name = path_expression();
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 651;
				as_alias();
				}
			}

			State = 654;
			Match(SET);
			State = 655;
			update_items();
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 656;
				Match(FROM);
				State = 657;
				from_clause();
				}
			}

			State = 660;
			Match(WHERE);
			State = 661;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Update_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUpdate_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUpdate_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_itemContext update_item() {
		Update_itemContext _localctx = new Update_itemContext(Context, State);
		EnterRule(_localctx, 22, RULE_update_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			path_expression();
			State = 664;
			Match(EQ);
			State = 665;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Update_itemContext[] update_item() {
			return GetRuleContexts<Update_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_itemContext update_item(int i) {
			return GetRuleContext<Update_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Update_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUpdate_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUpdate_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_items(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_itemsContext update_items() {
		Update_itemsContext _localctx = new Update_itemsContext(Context, State);
		EnterRule(_localctx, 24, RULE_update_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			update_item();
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 668;
				Match(COMMA);
				State = 669;
				update_item();
				}
				}
				State = 674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public Path_expressionContext target_name;
		public ExpressionContext source_name;
		public ExpressionContext merge_condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(BigQueryParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(BigQueryParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext[] when_clause() {
			return GetRuleContexts<When_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext when_clause(int i) {
			return GetRuleContext<When_clauseContext>(i);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMerge_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMerge_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(MERGE);
			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 676;
				Match(INTO);
				}
			}

			State = 679;
			_localctx.target_name = path_expression();
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 680;
				as_alias();
				}
			}

			State = 683;
			Match(USING);
			State = 684;
			_localctx.source_name = expression(0);
			State = 685;
			Match(ON);
			State = 686;
			_localctx.merge_condition = expression(0);
			State = 688;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 687;
					when_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 690;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Matched_clauseContext matched_clause() {
			return GetRuleContext<Matched_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Not_matched_by_target_clauseContext not_matched_by_target_clause() {
			return GetRuleContext<Not_matched_by_target_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Not_matched_by_source_clauseContext not_matched_by_source_clause() {
			return GetRuleContext<Not_matched_by_source_clauseContext>(0);
		}
		public When_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_clauseContext when_clause() {
		When_clauseContext _localctx = new When_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_when_clause);
		try {
			State = 695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692;
				matched_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693;
				not_matched_by_target_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 694;
				not_matched_by_source_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Matched_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(BigQueryParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(BigQueryParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BigQueryParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(BigQueryParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Matched_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matched_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMatched_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMatched_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatched_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Matched_clauseContext matched_clause() {
		Matched_clauseContext _localctx = new Matched_clauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_matched_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(WHEN);
			State = 698;
			Match(MATCHED);
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 699;
				Match(AND);
				State = 700;
				expression(0);
				}
			}

			State = 703;
			Match(THEN);
			State = 706;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				{
				State = 704;
				merge_update_clause();
				}
				break;
			case DELETE:
				{
				State = 705;
				Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_matched_by_target_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(BigQueryParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(BigQueryParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BigQueryParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(BigQueryParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Not_matched_by_target_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_matched_by_target_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNot_matched_by_target_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNot_matched_by_target_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_matched_by_target_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_matched_by_target_clauseContext not_matched_by_target_clause() {
		Not_matched_by_target_clauseContext _localctx = new Not_matched_by_target_clauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_not_matched_by_target_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(WHEN);
			State = 709;
			Match(NOT);
			State = 710;
			Match(MATCHED);
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 711;
				Match(BY);
				State = 712;
				Match(TARGET);
				}
			}

			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 715;
				Match(AND);
				State = 716;
				expression(0);
				}
			}

			State = 719;
			Match(THEN);
			State = 720;
			merge_insert_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_matched_by_source_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(BigQueryParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(BigQueryParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(BigQueryParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BigQueryParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(BigQueryParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Not_matched_by_source_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_matched_by_source_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNot_matched_by_source_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNot_matched_by_source_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_matched_by_source_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_matched_by_source_clauseContext not_matched_by_source_clause() {
		Not_matched_by_source_clauseContext _localctx = new Not_matched_by_source_clauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_not_matched_by_source_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			Match(WHEN);
			State = 723;
			Match(NOT);
			State = 724;
			Match(MATCHED);
			State = 725;
			Match(BY);
			State = 726;
			Match(SOURCE);
			State = 729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 727;
				Match(AND);
				State = 728;
				expression(0);
				}
			}

			State = 731;
			Match(THEN);
			State = 734;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				{
				State = 732;
				merge_update_clause();
				}
				break;
			case DELETE:
				{
				State = 733;
				Match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(BigQueryParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Update_itemsContext update_items() {
			return GetRuleContext<Update_itemsContext>(0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMerge_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMerge_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_merge_update_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			Match(UPDATE);
			State = 737;
			Match(SET);
			State = 738;
			update_items();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(BigQueryParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Merge_inputContext merge_input() {
			return GetRuleContext<Merge_inputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMerge_insert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMerge_insert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_insert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(INSERT);
			State = 745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 741;
				Match(OPAR);
				State = 742;
				columns();
				State = 743;
				Match(CPAR);
				}
			}

			State = 747;
			merge_input();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(BigQueryParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		public Merge_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMerge_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMerge_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_inputContext merge_input() {
		Merge_inputContext _localctx = new Merge_inputContext(Context, State);
		EnterRule(_localctx, 40, RULE_merge_input);
		try {
			State = 755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 749;
				Match(VALUES);
				State = 750;
				Match(OPAR);
				State = 751;
				expressions();
				State = 752;
				Match(CPAR);
				}
				break;
			case ROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 754;
				Match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dcl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grant_statementContext grant_statement() {
			return GetRuleContext<Grant_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Revoke_statementContext revoke_statement() {
			return GetRuleContext<Revoke_statementContext>(0);
		}
		public Dcl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDcl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDcl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dcl_statementContext dcl_statement() {
		Dcl_statementContext _localctx = new Dcl_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_dcl_statement);
		try {
			State = 759;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 757;
				grant_statement();
				}
				break;
			case REVOKE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 758;
				revoke_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_statementContext : ParserRuleContext {
		public Path_expressionContext resource_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Resource_typeContext resource_type() {
			return GetRuleContext<Resource_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Grant_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrant_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrant_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_statementContext grant_statement() {
		Grant_statementContext _localctx = new Grant_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_grant_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(GRANT);
			State = 762;
			expressions();
			State = 763;
			Match(ON);
			State = 764;
			resource_type();
			State = 765;
			_localctx.resource_name = path_expression();
			State = 766;
			Match(TO);
			State = 767;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		public Resource_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterResource_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitResource_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_typeContext resource_type() {
		Resource_typeContext _localctx = new Resource_typeContext(Context, State);
		EnterRule(_localctx, 46, RULE_resource_type);
		try {
			State = 774;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCHEMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 769;
				Match(SCHEMA);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 770;
				Match(TABLE);
				}
				break;
			case VIEW:
				EnterOuterAlt(_localctx, 3);
				{
				State = 771;
				Match(VIEW);
				}
				break;
			case EXTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 772;
				Match(EXTERNAL);
				State = 773;
				Match(TABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_statementContext : ParserRuleContext {
		public Path_expressionContext resource_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(BigQueryParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Resource_typeContext resource_type() {
			return GetRuleContext<Resource_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Revoke_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRevoke_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRevoke_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_statementContext revoke_statement() {
		Revoke_statementContext _localctx = new Revoke_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_revoke_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			Match(REVOKE);
			State = 777;
			expressions();
			State = 778;
			Match(ON);
			State = 779;
			resource_type();
			State = 780;
			_localctx.resource_name = path_expression();
			State = 781;
			Match(FROM);
			State = 782;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedural_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exception_when_errorContext exception_when_error() {
			return GetRuleContext<Exception_when_errorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(BigQueryParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(BigQueryParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(BigQueryParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE() { return GetToken(BigQueryParser.ITERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BigQueryParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_immediateContext execute_immediate() {
			return GetRuleContext<Execute_immediateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Begin_endContext begin_end() {
			return GetRuleContext<Begin_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Begin_exception_endContext begin_exception_end() {
			return GetRuleContext<Begin_exception_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_Context case_() {
			return GetRuleContext<Case_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_search_expressionContext case_search_expression() {
			return GetRuleContext<Case_search_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_inContext for_in() {
			return GetRuleContext<For_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Begin_transactionContext begin_transaction() {
			return GetRuleContext<Begin_transactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commit_transactionContext commit_transaction() {
			return GetRuleContext<Commit_transactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollback_transactionContext rollback_transaction() {
			return GetRuleContext<Rollback_transactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseContext raise() {
			return GetRuleContext<RaiseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public Procedural_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedural_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedural_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedural_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedural_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedural_statementContext procedural_statement() {
		Procedural_statementContext _localctx = new Procedural_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_procedural_statement);
		int _la;
		try {
			State = 808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 784;
				exception_when_error();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 785;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 787;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 786;
					identifier();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 789;
				Match(RETURN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 790;
				declare();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 791;
				set();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 792;
				execute_immediate();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 793;
				begin_end();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 794;
				begin_exception_end();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 795;
				case_();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 796;
				case_search_expression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 797;
				if_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 798;
				label();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 799;
				@while();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 800;
				loop();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 801;
				repeat();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 802;
				for_in();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 803;
				begin_transaction();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 804;
				commit_transaction();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 805;
				rollback_transaction();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 806;
				raise();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 807;
				call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_when_errorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(BigQueryParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(BigQueryParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(BigQueryParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BigQueryParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Exception_when_errorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_when_error; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterException_when_error(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitException_when_error(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_when_error(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_when_errorContext exception_when_error() {
		Exception_when_errorContext _localctx = new Exception_when_errorContext(Context, State);
		EnterRule(_localctx, 52, RULE_exception_when_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(EXCEPTION);
			State = 811;
			Match(WHEN);
			State = 812;
			Match(ERROR);
			State = 813;
			Match(THEN);
			State = 814;
			statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Export_statementContext : ParserRuleContext {
		public Path_expressionContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(BigQueryParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BigQueryParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Export_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_export_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExport_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Export_statementContext export_statement() {
		Export_statementContext _localctx = new Export_statementContext(Context, State);
		EnterRule(_localctx, 54, RULE_export_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			Match(EXPORT);
			State = 817;
			Match(DATA);
			State = 821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 818;
				Match(WITH);
				State = 819;
				Match(CONNECTION);
				State = 820;
				_localctx.connection_name = path_expression();
				}
			}

			{
			State = 823;
			Match(OPTIONS);
			State = 824;
			Match(OPAR);
			State = 825;
			option_parameters();
			State = 826;
			Match(CPAR);
			}
			State = 828;
			Match(AS);
			State = 829;
			query_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_statementContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext table_name;
		public ColumnsContext column_list;
		public ExpressionContext partition_expression;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(BigQueryParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BigQueryParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILES() { return GetToken(BigQueryParser.FILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext[] option_parameters() {
			return GetRuleContexts<Option_parametersContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters(int i) {
			return GetRuleContext<Option_parametersContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OVERWRITE() { return GetTokens(BigQueryParser.OVERWRITE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERWRITE(int i) {
			return GetToken(BigQueryParser.OVERWRITE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(BigQueryParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(BigQueryParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PARTITION() { return GetTokens(BigQueryParser.PARTITION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION(int i) {
			return GetToken(BigQueryParser.PARTITION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(BigQueryParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(BigQueryParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext column_name_schemas() {
			return GetRuleContext<Column_name_schemasContext>(0);
		}
		public Load_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLoad_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLoad_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_statementContext load_statement() {
		Load_statementContext _localctx = new Load_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_load_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			Match(LOAD);
			State = 832;
			Match(DATA);
			State = 833;
			_la = TokenStream.LA(1);
			if ( !(_la==INTO || _la==OVERWRITE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 834;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 835;
				Match(TABLE);
				}
				break;
			}
			State = 846;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 841;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 838;
					_localctx.project_name = identifier();
					State = 839;
					Match(DOT);
					}
					break;
				}
				State = 843;
				_localctx.dataset_name = identifier();
				State = 844;
				Match(DOT);
				}
				break;
			}
			State = 848;
			_localctx.table_name = identifier();
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 849;
				Match(OPAR);
				State = 850;
				_localctx.column_list = columns();
				State = 851;
				Match(CPAR);
				}
			}

			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERWRITE || _la==PARTITIONS) {
				{
				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OVERWRITE) {
					{
					State = 855;
					Match(OVERWRITE);
					}
				}

				State = 858;
				Match(PARTITIONS);
				State = 859;
				Match(OPAR);
				State = 860;
				path_expression();
				State = 861;
				Match(EQ);
				State = 862;
				expression(0);
				State = 863;
				Match(CPAR);
				}
			}

			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 867;
				Match(PARTITION);
				State = 868;
				Match(BY);
				State = 869;
				_localctx.partition_expression = expression(0);
				}
			}

			State = 875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 872;
				Match(CLUSTER);
				State = 873;
				Match(BY);
				State = 874;
				path_expressions();
				}
			}

			State = 882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 877;
				Match(OPTIONS);
				State = 878;
				Match(OPAR);
				State = 879;
				option_parameters();
				State = 880;
				Match(CPAR);
				}
			}

			State = 884;
			Match(FROM);
			State = 885;
			Match(FILES);
			State = 886;
			Match(OPAR);
			State = 887;
			option_parameters();
			State = 888;
			Match(CPAR);
			State = 898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 889;
				Match(WITH);
				State = 890;
				Match(PARTITION);
				State = 891;
				Match(COLUMNS);
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPAR) {
					{
					State = 892;
					Match(OPAR);
					State = 893;
					column_name_schemas();
					State = 894;
					Match(CPAR);
					}
				}

				}
				break;
			}
			State = 903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 900;
				Match(WITH);
				State = 901;
				Match(CONNECTION);
				State = 902;
				_localctx.connection_name = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assert_statementContext : ParserRuleContext {
		public String_literalContext description;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(BigQueryParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Assert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAssert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAssert_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assert_statementContext assert_statement() {
		Assert_statementContext _localctx = new Assert_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_assert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(ASSERT);
			State = 906;
			expression(0);
			State = 909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 907;
				Match(AS);
				State = 908;
				_localctx.description = string_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(BigQueryParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 60, RULE_declare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(DECLARE);
			State = 912;
			path_expressions();
			State = 914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 913;
				data_type();
				}
				break;
			}
			State = 918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 916;
				Match(DEFAULT);
				State = 917;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public Path_expressionContext variable_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 62, RULE_set);
		try {
			State = 934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 920;
				Match(SET);
				State = 921;
				_localctx.variable_name = path_expression();
				State = 922;
				Match(EQ);
				State = 923;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 925;
				Match(SET);
				State = 926;
				Match(OPAR);
				State = 927;
				path_expressions();
				State = 928;
				Match(CPAR);
				State = 929;
				Match(EQ);
				State = 930;
				Match(OPAR);
				State = 931;
				expressions();
				State = 932;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_immediateContext : ParserRuleContext {
		public ExpressionContext sql_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(BigQueryParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(BigQueryParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(BigQueryParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		public Execute_immediateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_immediate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExecute_immediate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExecute_immediate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_immediate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_immediateContext execute_immediate() {
		Execute_immediateContext _localctx = new Execute_immediateContext(Context, State);
		EnterRule(_localctx, 64, RULE_execute_immediate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936;
			Match(EXECUTE);
			State = 937;
			Match(IMMEDIATE);
			State = 938;
			_localctx.sql_expression = expression(0);
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 939;
				Match(INTO);
				State = 940;
				expressions();
				}
			}

			State = 945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 943;
				Match(USING);
				State = 944;
				expressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_endContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		public Begin_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterBegin_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitBegin_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_endContext begin_end() {
		Begin_endContext _localctx = new Begin_endContext(Context, State);
		EnterRule(_localctx, 66, RULE_begin_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947;
			Match(BEGIN);
			State = 948;
			statement_list();
			State = 949;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_exception_endContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		public Begin_exception_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_exception_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterBegin_exception_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitBegin_exception_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_exception_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_exception_endContext begin_exception_end() {
		Begin_exception_endContext _localctx = new Begin_exception_endContext(Context, State);
		EnterRule(_localctx, 68, RULE_begin_exception_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951;
			Match(BEGIN);
			State = 952;
			statement_list();
			State = 953;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_Context : ParserRuleContext {
		public ExpressionContext expr_to_match;
		public ExpressionContext result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Case_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_Context case_() {
		Case_Context _localctx = new Case_Context(Context, State);
		EnterRule(_localctx, 70, RULE_case_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(CASE);
			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 956;
				Match(WHEN);
				State = 957;
				_localctx.expr_to_match = expression(0);
				State = 958;
				Match(THEN);
				State = 959;
				_localctx.result = expression(0);
				}
				}
				State = 963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 965;
				Match(ELSE);
				State = 966;
				_localctx.else_result = expression(0);
				}
			}

			State = 969;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_search_expressionContext : ParserRuleContext {
		public ExpressionContext search_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(BigQueryParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(BigQueryParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		public Case_search_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_search_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_search_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_search_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_search_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_search_expressionContext case_search_expression() {
		Case_search_expressionContext _localctx = new Case_search_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_case_search_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(CASE);
			State = 972;
			_localctx.search_expression = expression(0);
			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 973;
				Match(WHEN);
				State = 974;
				expression(0);
				State = 975;
				Match(THEN);
				State = 976;
				statement_list();
				}
				}
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 982;
				Match(ELSE);
				State = 983;
				statement_list();
				}
			}

			State = 986;
			Match(END);
			State = 987;
			Match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext[] statement_list() {
			return GetRuleContexts<Statement_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list(int i) {
			return GetRuleContext<Statement_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(BigQueryParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(BigQueryParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989;
			Match(IF);
			State = 990;
			expression(0);
			State = 991;
			Match(THEN);
			State = 993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 992;
				statement_list();
				}
				break;
			}
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 995;
				Match(ELSEIF);
				State = 996;
				expression(0);
				State = 997;
				Match(THEN);
				State = 998;
				statement_list();
				}
				}
				State = 1004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1005;
				Match(ELSE);
				State = 1006;
				statement_list();
				}
			}

			State = 1009;
			Match(END);
			State = 1010;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COL() { return GetToken(BigQueryParser.COL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(BigQueryParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(BigQueryParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(BigQueryParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(BigQueryParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(BigQueryParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(BigQueryParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(BigQueryParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT() { return GetTokens(BigQueryParser.REPEAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT(int i) {
			return GetToken(BigQueryParser.REPEAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(BigQueryParser.UNTIL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 76, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			identifier();
			State = 1013;
			Match(COL);
			State = 1056;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN:
				{
				State = 1014;
				Match(BEGIN);
				State = 1015;
				statement_list();
				State = 1016;
				Match(END);
				State = 1018;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 1017;
					identifier();
					}
					break;
				}
				}
				break;
			case LOOP:
				{
				State = 1020;
				Match(LOOP);
				State = 1021;
				statement_list();
				State = 1022;
				Match(END);
				State = 1023;
				Match(LOOP);
				State = 1025;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 1024;
					identifier();
					}
					break;
				}
				}
				break;
			case WHILE:
				{
				State = 1027;
				Match(WHILE);
				State = 1028;
				expression(0);
				State = 1029;
				Match(DO);
				State = 1030;
				statement_list();
				State = 1031;
				Match(END);
				State = 1032;
				Match(WHILE);
				State = 1034;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1033;
					identifier();
					}
					break;
				}
				}
				break;
			case FOR:
				{
				State = 1036;
				Match(FOR);
				State = 1037;
				identifier();
				State = 1038;
				Match(IN);
				State = 1039;
				expression(0);
				State = 1040;
				Match(DO);
				State = 1041;
				statement_list();
				State = 1042;
				Match(END);
				State = 1043;
				Match(FOR);
				State = 1045;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 1044;
					identifier();
					}
					break;
				}
				}
				break;
			case REPEAT:
				{
				State = 1047;
				Match(REPEAT);
				State = 1048;
				statement_list();
				State = 1049;
				Match(UNTIL);
				State = 1050;
				expression(0);
				State = 1051;
				Match(END);
				State = 1052;
				Match(REPEAT);
				State = 1054;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 1053;
					identifier();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(BigQueryParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(BigQueryParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 78, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058;
			Match(LOOP);
			State = 1059;
			statement_list();
			State = 1060;
			Match(END);
			State = 1061;
			Match(LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT() { return GetTokens(BigQueryParser.REPEAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT(int i) {
			return GetToken(BigQueryParser.REPEAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(BigQueryParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 80, RULE_repeat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			Match(REPEAT);
			State = 1064;
			statement_list();
			State = 1065;
			Match(UNTIL);
			State = 1066;
			expression(0);
			State = 1067;
			Match(END);
			State = 1068;
			Match(REPEAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(BigQueryParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(BigQueryParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(BigQueryParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 82, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			Match(WHILE);
			State = 1071;
			expression(0);
			State = 1072;
			Match(DO);
			State = 1073;
			statement_list();
			State = 1074;
			Match(END);
			State = 1075;
			Match(WHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(BigQueryParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(BigQueryParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(BigQueryParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		public For_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFor_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFor_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_in(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_inContext for_in() {
		For_inContext _localctx = new For_inContext(Context, State);
		EnterRule(_localctx, 84, RULE_for_in);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			Match(FOR);
			State = 1078;
			identifier();
			State = 1079;
			Match(IN);
			State = 1080;
			expression(0);
			State = 1081;
			Match(DO);
			State = 1082;
			statement_list();
			State = 1083;
			Match(END);
			State = 1084;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_transactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(BigQueryParser.TRANSACTION, 0); }
		public Begin_transactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_transaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterBegin_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitBegin_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_transaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_transactionContext begin_transaction() {
		Begin_transactionContext _localctx = new Begin_transactionContext(Context, State);
		EnterRule(_localctx, 86, RULE_begin_transaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			Match(BEGIN);
			State = 1088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION) {
				{
				State = 1087;
				Match(TRANSACTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_transactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(BigQueryParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(BigQueryParser.TRANSACTION, 0); }
		public Commit_transactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_transaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCommit_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCommit_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_transaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_transactionContext commit_transaction() {
		Commit_transactionContext _localctx = new Commit_transactionContext(Context, State);
		EnterRule(_localctx, 88, RULE_commit_transaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090;
			Match(COMMIT);
			State = 1092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION) {
				{
				State = 1091;
				Match(TRANSACTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_transactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(BigQueryParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(BigQueryParser.TRANSACTION, 0); }
		public Rollback_transactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_transaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRollback_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRollback_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_transaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_transactionContext rollback_transaction() {
		Rollback_transactionContext _localctx = new Rollback_transactionContext(Context, State);
		EnterRule(_localctx, 90, RULE_rollback_transaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094;
			Match(ROLLBACK);
			State = 1096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION) {
				{
				State = 1095;
				Match(TRANSACTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(BigQueryParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(BigQueryParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public RaiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRaise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRaise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseContext raise() {
		RaiseContext _localctx = new RaiseContext(Context, State);
		EnterRule(_localctx, 92, RULE_raise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(RAISE);
			State = 1103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 1099;
				Match(USING);
				State = 1100;
				Match(MESSAGE);
				State = 1101;
				Match(EQ);
				State = 1102;
				string_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public Path_expressionContext procedure_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(BigQueryParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 94, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			Match(CALL);
			State = 1106;
			_localctx.procedure_name = path_expression();
			State = 1107;
			Match(OPAR);
			State = 1109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -66768888L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -4469822630165217281L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 536870911L) != 0)) {
				{
				State = 1108;
				expressions();
				}
			}

			State = 1111;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Query_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_statementContext query_statement() {
		Query_statementContext _localctx = new Query_statementContext(Context, State);
		EnterRule(_localctx, 96, RULE_query_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionsContext column_constraint_definitions() {
			return GetRuleContext<Column_constraint_definitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 98, RULE_create_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			Match(CREATE);
			State = 1118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1116;
				Match(OR);
				State = 1117;
				Match(REPLACE);
				}
			}

			State = 1121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1120;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1123;
			Match(TABLE);
			State = 1127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1124;
				Match(IF);
				State = 1125;
				Match(NOT);
				State = 1126;
				Match(EXISTS);
				}
			}

			State = 1129;
			_localctx.table_name = path_expression();
			State = 1134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 1130;
				Match(OPAR);
				State = 1131;
				column_constraint_definitions();
				State = 1132;
				Match(CPAR);
				}
			}

			State = 1139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1136;
				Match(DEFAULT);
				State = 1137;
				Match(COLLATE);
				State = 1138;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 1144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1141;
				Match(PARTITION);
				State = 1142;
				Match(BY);
				State = 1143;
				expression(0);
				}
			}

			State = 1149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 1146;
				Match(CLUSTER);
				State = 1147;
				Match(BY);
				State = 1148;
				path_expressions();
				}
			}

			State = 1154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1151;
				Match(WITH);
				State = 1152;
				Match(CONNECTION);
				State = 1153;
				_localctx.connection_name = identifier();
				}
			}

			State = 1161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1156;
				Match(OPTIONS);
				State = 1157;
				Match(OPAR);
				State = 1158;
				option_parameters();
				State = 1159;
				Match(CPAR);
				}
			}

			State = 1165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1163;
				Match(AS);
				State = 1164;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_likeContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_table_likeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_like(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_likeContext create_table_like() {
		Create_table_likeContext _localctx = new Create_table_likeContext(Context, State);
		EnterRule(_localctx, 100, RULE_create_table_like);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167;
			Match(CREATE);
			State = 1170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1168;
				Match(OR);
				State = 1169;
				Match(REPLACE);
				}
			}

			State = 1172;
			Match(TABLE);
			State = 1176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1173;
				Match(IF);
				State = 1174;
				Match(NOT);
				State = 1175;
				Match(EXISTS);
				}
			}

			State = 1178;
			_localctx.table_name = path_expression();
			State = 1179;
			Match(LIKE);
			State = 1188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 1183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
				case 1:
					{
					State = 1180;
					_localctx.project_name = identifier();
					State = 1181;
					Match(DOT);
					}
					break;
				}
				State = 1185;
				_localctx.dataset_name = identifier();
				State = 1186;
				Match(DOT);
				}
				break;
			}
			State = 1190;
			_localctx.source_table_name = identifier();
			State = 1194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1191;
				Match(DEFAULT);
				State = 1192;
				Match(COLLATE);
				State = 1193;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 1199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1196;
				Match(PARTITION);
				State = 1197;
				Match(BY);
				State = 1198;
				expression(0);
				}
			}

			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 1201;
				Match(CLUSTER);
				State = 1202;
				Match(BY);
				State = 1203;
				path_expressions();
				}
			}

			State = 1209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1206;
				Match(WITH);
				State = 1207;
				Match(CONNECTION);
				State = 1208;
				_localctx.connection_name = identifier();
				}
			}

			State = 1216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1211;
				Match(OPTIONS);
				State = 1212;
				Match(OPAR);
				State = 1213;
				option_parameters();
				State = 1214;
				Match(CPAR);
				}
			}

			State = 1220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1218;
				Match(AS);
				State = 1219;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_copyContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Path_expressionContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(BigQueryParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_table_copyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_copy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_copy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_copy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_copy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_copyContext create_table_copy() {
		Create_table_copyContext _localctx = new Create_table_copyContext(Context, State);
		EnterRule(_localctx, 102, RULE_create_table_copy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			Match(CREATE);
			State = 1225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1223;
				Match(OR);
				State = 1224;
				Match(REPLACE);
				}
			}

			State = 1227;
			Match(TABLE);
			State = 1231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1228;
				Match(IF);
				State = 1229;
				Match(NOT);
				State = 1230;
				Match(EXISTS);
				}
			}

			State = 1233;
			_localctx.table_name = path_expression();
			State = 1234;
			Match(COPY);
			State = 1235;
			_localctx.source_table_name = path_expression();
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1236;
				Match(DEFAULT);
				State = 1237;
				Match(COLLATE);
				State = 1238;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 1244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1241;
				Match(PARTITION);
				State = 1242;
				Match(BY);
				State = 1243;
				expression(0);
				}
			}

			State = 1249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 1246;
				Match(CLUSTER);
				State = 1247;
				Match(BY);
				State = 1248;
				path_expressions();
				}
			}

			State = 1254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1251;
				Match(WITH);
				State = 1252;
				Match(CONNECTION);
				State = 1253;
				_localctx.connection_name = identifier();
				}
			}

			State = 1261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1256;
				Match(OPTIONS);
				State = 1257;
				Match(OPAR);
				State = 1258;
				option_parameters();
				State = 1259;
				Match(CPAR);
				}
			}

			State = 1265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1263;
				Match(AS);
				State = 1264;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_snapshot_tableContext : ParserRuleContext {
		public Path_expressionContext table_snapshot_name;
		public Path_expressionContext source_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_snapshot_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_snapshot_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_snapshot_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_snapshot_tableContext create_snapshot_table() {
		Create_snapshot_tableContext _localctx = new Create_snapshot_tableContext(Context, State);
		EnterRule(_localctx, 104, RULE_create_snapshot_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			Match(CREATE);
			State = 1268;
			Match(SNAPSHOT);
			State = 1269;
			Match(TABLE);
			State = 1273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1270;
				Match(IF);
				State = 1271;
				Match(NOT);
				State = 1272;
				Match(EXISTS);
				}
			}

			State = 1275;
			_localctx.table_snapshot_name = path_expression();
			State = 1276;
			Match(CLONE);
			State = 1277;
			_localctx.source_table_name = path_expression();
			State = 1283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 1278;
				Match(FOR);
				State = 1279;
				Match(SYSTEM_TIME);
				State = 1280;
				Match(AS);
				State = 1281;
				Match(OF);
				State = 1282;
				expression(0);
				}
			}

			State = 1290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1285;
				Match(OPTIONS);
				State = 1286;
				Match(OPAR);
				State = 1287;
				option_parameters();
				State = 1288;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_cloneContext : ParserRuleContext {
		public Path_expressionContext destination_table_name;
		public Path_expressionContext source_table_name;
		public String_literalContext collate_specification;
		public IdentifierContext connection_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(BigQueryParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(BigQueryParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_table_cloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_clone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_clone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_clone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_clone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_cloneContext create_table_clone() {
		Create_table_cloneContext _localctx = new Create_table_cloneContext(Context, State);
		EnterRule(_localctx, 106, RULE_create_table_clone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1292;
			Match(CREATE);
			State = 1293;
			Match(TABLE);
			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1294;
				Match(IF);
				State = 1295;
				Match(NOT);
				State = 1296;
				Match(EXISTS);
				}
			}

			State = 1299;
			_localctx.destination_table_name = path_expression();
			State = 1300;
			Match(CLONE);
			State = 1301;
			_localctx.source_table_name = path_expression();
			State = 1307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 1302;
				Match(FOR);
				State = 1303;
				Match(SYSTEM_TIME);
				State = 1304;
				Match(AS);
				State = 1305;
				Match(OF);
				State = 1306;
				expression(0);
				}
			}

			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1309;
				Match(DEFAULT);
				State = 1310;
				Match(COLLATE);
				State = 1311;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 1317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1314;
				Match(PARTITION);
				State = 1315;
				Match(BY);
				State = 1316;
				expression(0);
				}
			}

			State = 1322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 1319;
				Match(CLUSTER);
				State = 1320;
				Match(BY);
				State = 1321;
				path_expressions();
				}
			}

			State = 1327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1324;
				Match(WITH);
				State = 1325;
				Match(CONNECTION);
				State = 1326;
				_localctx.connection_name = identifier();
				}
			}

			State = 1334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1329;
				Match(OPTIONS);
				State = 1330;
				Match(OPAR);
				State = 1331;
				option_parameters();
				State = 1332;
				Match(CPAR);
				}
			}

			State = 1338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1336;
				Match(AS);
				State = 1337;
				query_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public Path_expressionContext view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_column_name_listContext view_column_name_list() {
			return GetRuleContext<View_column_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 108, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1340;
			Match(CREATE);
			State = 1343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1341;
				Match(OR);
				State = 1342;
				Match(REPLACE);
				}
			}

			State = 1345;
			Match(VIEW);
			State = 1349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1346;
				Match(IF);
				State = 1347;
				Match(NOT);
				State = 1348;
				Match(EXISTS);
				}
			}

			State = 1351;
			_localctx.view_name = path_expression();
			State = 1356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 1352;
				Match(OPAR);
				State = 1353;
				view_column_name_list();
				State = 1354;
				Match(CPAR);
				}
			}

			State = 1363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1358;
				Match(OPTIONS);
				State = 1359;
				Match(OPAR);
				State = 1360;
				option_parameters();
				State = 1361;
				Match(CPAR);
				}
			}

			State = 1365;
			Match(AS);
			State = 1366;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_materialized_viewContext : ParserRuleContext {
		public Path_expressionContext materialized_view_name;
		public Path_expressionsContext clustering_column_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Create_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_materialized_viewContext create_materialized_view() {
		Create_materialized_viewContext _localctx = new Create_materialized_viewContext(Context, State);
		EnterRule(_localctx, 110, RULE_create_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1368;
			Match(CREATE);
			State = 1371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1369;
				Match(OR);
				State = 1370;
				Match(REPLACE);
				}
			}

			State = 1373;
			Match(MATERIALIZED);
			State = 1374;
			Match(VIEW);
			State = 1378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1375;
				Match(IF);
				State = 1376;
				Match(NOT);
				State = 1377;
				Match(EXISTS);
				}
			}

			State = 1380;
			_localctx.materialized_view_name = path_expression();
			State = 1384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 1381;
				Match(PARTITION);
				State = 1382;
				Match(BY);
				State = 1383;
				expression(0);
				}
			}

			State = 1389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER) {
				{
				State = 1386;
				Match(CLUSTER);
				State = 1387;
				Match(BY);
				State = 1388;
				_localctx.clustering_column_list = path_expressions();
				}
			}

			State = 1396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1391;
				Match(OPTIONS);
				State = 1392;
				Match(OPAR);
				State = 1393;
				option_parameters();
				State = 1394;
				Match(CPAR);
				}
			}

			State = 1398;
			Match(AS);
			State = 1399;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_materialized_view_as_replicaContext : ParserRuleContext {
		public Path_expressionContext replica_name;
		public Path_expressionContext source_materialized_view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_materialized_view_as_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_materialized_view_as_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_materialized_view_as_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_materialized_view_as_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_materialized_view_as_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_materialized_view_as_replicaContext create_materialized_view_as_replica() {
		Create_materialized_view_as_replicaContext _localctx = new Create_materialized_view_as_replicaContext(Context, State);
		EnterRule(_localctx, 112, RULE_create_materialized_view_as_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			Match(CREATE);
			State = 1402;
			Match(MATERIALIZED);
			State = 1403;
			Match(VIEW);
			State = 1404;
			_localctx.replica_name = path_expression();
			State = 1410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1405;
				Match(OPTIONS);
				State = 1406;
				Match(OPAR);
				State = 1407;
				option_parameters();
				State = 1408;
				Match(CPAR);
				}
			}

			State = 1412;
			Match(AS);
			State = 1413;
			Match(REPLICA);
			State = 1414;
			Match(OF);
			State = 1415;
			_localctx.source_materialized_view_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_schemaContext : ParserRuleContext {
		public Path_expressionContext dataset_name;
		public Path_expressionContext connection_namepath_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_external_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_schemaContext create_external_schema() {
		Create_external_schemaContext _localctx = new Create_external_schemaContext(Context, State);
		EnterRule(_localctx, 114, RULE_create_external_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1417;
			Match(CREATE);
			State = 1418;
			Match(EXTERNAL);
			State = 1419;
			Match(SCHEMA);
			State = 1423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1420;
				Match(IF);
				State = 1421;
				Match(NOT);
				State = 1422;
				Match(EXISTS);
				}
			}

			State = 1425;
			_localctx.dataset_name = path_expression();
			State = 1429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1426;
				Match(WITH);
				State = 1427;
				Match(CONNECTION);
				State = 1428;
				_localctx.connection_namepath_expression = path_expression();
				}
			}

			State = 1436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1431;
				Match(OPTIONS);
				State = 1432;
				Match(OPAR);
				State = 1433;
				option_parameters();
				State = 1434;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_external_tableContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Column_name_schemasContext column_names;
		public IdentifierContext connection_name;
		public Column_name_schemasContext partition_columns;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(BigQueryParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(BigQueryParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext[] column_name_schemas() {
			return GetRuleContexts<Column_name_schemasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemasContext column_name_schemas(int i) {
			return GetRuleContext<Column_name_schemasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_external_tableContext create_external_table() {
		Create_external_tableContext _localctx = new Create_external_tableContext(Context, State);
		EnterRule(_localctx, 116, RULE_create_external_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438;
			Match(CREATE);
			State = 1441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1439;
				Match(OR);
				State = 1440;
				Match(REPLACE);
				}
			}

			State = 1443;
			Match(EXTERNAL);
			State = 1444;
			Match(TABLE);
			State = 1448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1445;
				Match(IF);
				State = 1446;
				Match(NOT);
				State = 1447;
				Match(EXISTS);
				}
			}

			State = 1450;
			_localctx.table_name = path_expression();
			State = 1455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPAR) {
				{
				State = 1451;
				Match(OPAR);
				State = 1452;
				_localctx.column_names = column_name_schemas();
				State = 1453;
				Match(CPAR);
				}
			}

			State = 1463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				State = 1457;
				Match(WITH);
				State = 1458;
				Match(CONNECTION);
				State = 1461;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BIGNUMERIC:
				case DATE:
				case DATETIME:
				case NUMERIC:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MILLISECOND:
				case MICROSECOND:
				case JSON:
				case OFFSET:
				case NAME:
				case STRICT:
				case CORRESPONDING:
				case DIFFERENTIAL_PRIVACY:
				case OPTIONS:
				case VALUE:
				case REPLACE:
				case SYSTEM:
				case PERCENT:
				case PIVOT:
				case UNPIVOT:
				case SYSTEM_TIME:
				case ROW:
				case INCLUDE:
				case FORMAT:
				case SETS:
				case AVG:
				case SCHEMA:
				case TEMP:
				case TEMPORARY:
				case TABLE:
				case CONSTRAINT:
				case ENFORCED:
				case PRIMARY:
				case KEY:
				case FOREIGN:
				case REFERENCES:
				case CLUSTER:
				case CONNECTION:
				case ARRAY_AGG:
				case COPY:
				case SNAPSHOT:
				case CLONE:
				case VIEW:
				case DROP:
				case SEARCH:
				case INDEX:
				case VECTOR:
				case ASSIGNMENT:
				case RESERVATION:
				case ACCESS:
				case POLICY:
				case POLICIES:
				case PROCEDURE:
				case FUNCTION:
				case REPLICA:
				case COLUMNS:
				case RETURNS:
				case DETERMINISTIC:
				case LANGUAGE:
				case REMOTE:
				case AGGREGATE:
				case TYPE:
				case OUT:
				case INOUT:
				case BEGIN:
				case SECURITY:
				case INVOKER:
				case COALESCE:
				case NULLIF:
				case IFNULL:
				case GRANT:
				case FILTER:
				case COLUMN:
				case STORING:
				case ALTER:
				case ADD:
				case RENAME:
				case DATA:
				case ORGANIZATION:
				case PROJECT:
				case BI_CAPACITY:
				case ANY_VALUE:
				case MAX:
				case MIN:
				case ARRAY_CONCAT_AGG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case COUNTIF:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case MAX_BY:
				case MIN_BY:
				case STRING_AGG:
				case SUM:
				case TIMEZONE:
				case TIME:
				case ASSERT:
				case LOAD:
				case OVERWRITE:
				case PARTITIONS:
				case FILES:
				case EXPORT:
				case DECLARE:
				case EXECUTE:
				case IMMEDIATE:
				case EXCEPTION:
				case ERROR:
				case CALL:
				case ELSEIF:
				case LOOP:
				case WHILE:
				case DO:
				case REPEAT:
				case UNTIL:
				case BREAK:
				case LEAVE:
				case CONTINUE:
				case ITERATE:
				case RETURN:
				case TRANSACTION:
				case COMMIT:
				case ROLLBACK:
				case MESSAGE:
				case RAISE:
				case INSERT:
				case VALUES:
				case DELETE:
				case TRUNCATE:
				case UPDATE:
				case MATCHED:
				case TARGET:
				case SOURCE:
				case REVOKE:
				case MODEL:
				case TRANSFORM:
				case INPUT:
				case OUTPUT:
				case UNQUOTED_IDENTIFIER:
				case QUOTED_IDENTIFIER:
					{
					State = 1459;
					_localctx.connection_name = identifier();
					}
					break;
				case DEFAULT:
					{
					State = 1460;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 1474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1465;
				Match(WITH);
				State = 1466;
				Match(PARTITION);
				State = 1467;
				Match(COLUMNS);
				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPAR) {
					{
					State = 1468;
					Match(OPAR);
					State = 1469;
					_localctx.partition_columns = column_name_schemas();
					State = 1470;
					Match(CPAR);
					}
				}

				}
			}

			State = 1476;
			Match(OPTIONS);
			State = 1477;
			Match(OPAR);
			State = 1478;
			option_parameters();
			State = 1479;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_schemasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemaContext[] column_name_schema() {
			return GetRuleContexts<Column_name_schemaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_name_schemaContext column_name_schema(int i) {
			return GetRuleContext<Column_name_schemaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_name_schemasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_schemas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_schemas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_schemas(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_schemas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_schemasContext column_name_schemas() {
		Column_name_schemasContext _localctx = new Column_name_schemasContext(Context, State);
		EnterRule(_localctx, 118, RULE_column_name_schemas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481;
			column_name_schema();
			State = 1486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1482;
				Match(COMMA);
				State = 1483;
				column_name_schema();
				}
				}
				State = 1488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_schemaContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Column_name_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_name_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_schemaContext column_name_schema() {
		Column_name_schemaContext _localctx = new Column_name_schemaContext(Context, State);
		EnterRule(_localctx, 120, RULE_column_name_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489;
			_localctx.column_name = identifier();
			State = 1490;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_functionContext create_function() {
		Create_functionContext _localctx = new Create_functionContext(Context, State);
		EnterRule(_localctx, 122, RULE_create_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492;
			Match(CREATE);
			State = 1495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1493;
				Match(OR);
				State = 1494;
				Match(REPLACE);
				}
			}

			State = 1498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1497;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1500;
			Match(FUNCTION);
			State = 1504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1501;
				Match(IF);
				State = 1502;
				Match(NOT);
				State = 1503;
				Match(EXISTS);
				}
			}

			State = 1514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 1509;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
				case 1:
					{
					State = 1506;
					_localctx.project_name = identifier();
					State = 1507;
					Match(DOT);
					}
					break;
				}
				State = 1511;
				_localctx.dataset_name = identifier();
				State = 1512;
				Match(DOT);
				}
				break;
			}
			State = 1516;
			identifier();
			State = 1517;
			Match(OPAR);
			State = 1519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 1518;
				named_parameters();
				}
			}

			State = 1521;
			Match(CPAR);
			State = 1524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1522;
				Match(RETURNS);
				State = 1523;
				data_type();
				}
			}

			State = 1526;
			Match(AS);
			State = 1527;
			Match(OPAR);
			State = 1528;
			expression(0);
			State = 1529;
			Match(CPAR);
			State = 1535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1530;
				Match(OPTIONS);
				State = 1531;
				Match(OPAR);
				State = 1532;
				option_parameters();
				State = 1533;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_parameterContext[] named_parameter() {
			return GetRuleContexts<Named_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parameterContext named_parameter(int i) {
			return GetRuleContext<Named_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Named_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_parametersContext named_parameters() {
		Named_parametersContext _localctx = new Named_parametersContext(Context, State);
		EnterRule(_localctx, 124, RULE_named_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1537;
			named_parameter();
			State = 1542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1538;
				Match(COMMA);
				State = 1539;
				named_parameter();
				}
				}
				State = 1544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_parameterContext : ParserRuleContext {
		public IdentifierContext param_name;
		public Data_typeContext param_type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public Named_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_parameterContext named_parameter() {
		Named_parameterContext _localctx = new Named_parameterContext(Context, State);
		EnterRule(_localctx, 126, RULE_named_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545;
			_localctx.param_name = identifier();
			State = 1546;
			_localctx.param_type = data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_js_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext javascript_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(BigQueryParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_js_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_js_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_js_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_js_functionContext create_js_function() {
		Create_js_functionContext _localctx = new Create_js_functionContext(Context, State);
		EnterRule(_localctx, 128, RULE_create_js_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548;
			Match(CREATE);
			State = 1551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1549;
				Match(OR);
				State = 1550;
				Match(REPLACE);
				}
			}

			State = 1554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1553;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1556;
			Match(FUNCTION);
			State = 1560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1557;
				Match(IF);
				State = 1558;
				Match(NOT);
				State = 1559;
				Match(EXISTS);
				}
			}

			State = 1570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1565;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 1562;
					_localctx.project_name = identifier();
					State = 1563;
					Match(DOT);
					}
					break;
				}
				State = 1567;
				_localctx.dataset_name = identifier();
				State = 1568;
				Match(DOT);
				}
				break;
			}
			State = 1572;
			identifier();
			State = 1573;
			Match(OPAR);
			State = 1575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 1574;
				named_parameters();
				}
			}

			State = 1577;
			Match(CPAR);
			State = 1578;
			Match(RETURNS);
			State = 1579;
			data_type();
			State = 1583;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DETERMINISTIC:
				{
				State = 1580;
				Match(DETERMINISTIC);
				}
				break;
			case NOT:
				{
				State = 1581;
				Match(NOT);
				State = 1582;
				Match(DETERMINISTIC);
				}
				break;
			case LANGUAGE:
				break;
			default:
				break;
			}
			State = 1585;
			Match(LANGUAGE);
			State = 1586;
			identifier();
			State = 1592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1587;
				Match(OPTIONS);
				State = 1588;
				Match(OPAR);
				State = 1589;
				option_parameters();
				State = 1590;
				Match(CPAR);
				}
			}

			State = 1594;
			Match(AS);
			State = 1595;
			_localctx.javascript_code = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_py_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext connection_path;
		public String_literalContext python_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Create_py_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_py_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_py_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_py_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_py_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_py_functionContext create_py_function() {
		Create_py_functionContext _localctx = new Create_py_functionContext(Context, State);
		EnterRule(_localctx, 130, RULE_create_py_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597;
			Match(CREATE);
			State = 1600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1598;
				Match(OR);
				State = 1599;
				Match(REPLACE);
				}
			}

			State = 1603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1602;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1605;
			Match(FUNCTION);
			State = 1609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1606;
				Match(IF);
				State = 1607;
				Match(NOT);
				State = 1608;
				Match(EXISTS);
				}
			}

			State = 1619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 1614;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
				case 1:
					{
					State = 1611;
					_localctx.project_name = identifier();
					State = 1612;
					Match(DOT);
					}
					break;
				}
				State = 1616;
				_localctx.dataset_name = identifier();
				State = 1617;
				Match(DOT);
				}
				break;
			}
			State = 1621;
			identifier();
			State = 1622;
			Match(OPAR);
			State = 1624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 1623;
				named_parameters();
				}
			}

			State = 1626;
			Match(CPAR);
			State = 1627;
			Match(RETURNS);
			State = 1628;
			data_type();
			State = 1629;
			Match(LANGUAGE);
			State = 1630;
			identifier();
			State = 1634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1631;
				Match(WITH);
				State = 1632;
				Match(CONNECTION);
				State = 1633;
				_localctx.connection_path = path_expression();
				}
			}

			State = 1636;
			Match(OPTIONS);
			State = 1637;
			Match(OPAR);
			State = 1638;
			option_parameters();
			State = 1639;
			Match(CPAR);
			State = 1640;
			Match(AS);
			State = 1641;
			_localctx.python_code = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_remote_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext connection_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_parametersContext named_parameters() {
			return GetRuleContext<Named_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_remote_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_remote_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_remote_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_remote_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_remote_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_remote_functionContext create_remote_function() {
		Create_remote_functionContext _localctx = new Create_remote_functionContext(Context, State);
		EnterRule(_localctx, 132, RULE_create_remote_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643;
			Match(CREATE);
			State = 1646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1644;
				Match(OR);
				State = 1645;
				Match(REPLACE);
				}
			}

			State = 1649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1648;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1651;
			Match(FUNCTION);
			State = 1655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1652;
				Match(IF);
				State = 1653;
				Match(NOT);
				State = 1654;
				Match(EXISTS);
				}
			}

			State = 1665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 1660;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
				case 1:
					{
					State = 1657;
					_localctx.project_name = identifier();
					State = 1658;
					Match(DOT);
					}
					break;
				}
				State = 1662;
				_localctx.dataset_name = identifier();
				State = 1663;
				Match(DOT);
				}
				break;
			}
			State = 1667;
			identifier();
			State = 1668;
			Match(OPAR);
			State = 1670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 1669;
				named_parameters();
				}
			}

			State = 1672;
			Match(CPAR);
			State = 1673;
			Match(RETURNS);
			State = 1674;
			data_type();
			State = 1675;
			Match(REMOTE);
			State = 1676;
			Match(WITH);
			State = 1677;
			Match(CONNECTION);
			State = 1678;
			_localctx.connection_path = path_expression();
			State = 1684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1679;
				Match(OPTIONS);
				State = 1680;
				Match(OPAR);
				State = 1681;
				option_parameters();
				State = 1682;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_aggregate_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_aggregate_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_aggregate_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_aggregate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_aggregate_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_aggregate_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_aggregate_functionContext create_aggregate_function() {
		Create_aggregate_functionContext _localctx = new Create_aggregate_functionContext(Context, State);
		EnterRule(_localctx, 134, RULE_create_aggregate_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686;
			Match(CREATE);
			State = 1689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1687;
				Match(OR);
				State = 1688;
				Match(REPLACE);
				}
			}

			State = 1692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1691;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1694;
			Match(AGGREGATE);
			State = 1695;
			Match(FUNCTION);
			State = 1699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1696;
				Match(IF);
				State = 1697;
				Match(NOT);
				State = 1698;
				Match(EXISTS);
				}
			}

			State = 1709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 1704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1701;
					_localctx.project_name = identifier();
					State = 1702;
					Match(DOT);
					}
					break;
				}
				State = 1706;
				_localctx.dataset_name = identifier();
				State = 1707;
				Match(DOT);
				}
				break;
			}
			State = 1711;
			identifier();
			State = 1712;
			Match(OPAR);
			State = 1714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 1713;
				function_parameters();
				}
			}

			State = 1716;
			Match(CPAR);
			State = 1719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1717;
				Match(RETURNS);
				State = 1718;
				data_type();
				}
			}

			State = 1721;
			Match(AS);
			State = 1722;
			Match(OPAR);
			State = 1723;
			expression(0);
			State = 1724;
			Match(CPAR);
			State = 1730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1725;
				Match(OPTIONS);
				State = 1726;
				Match(OPAR);
				State = 1727;
				option_parameters();
				State = 1728;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parametersContext function_parameters() {
		Function_parametersContext _localctx = new Function_parametersContext(Context, State);
		EnterRule(_localctx, 136, RULE_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1732;
			function_parameter();
			State = 1737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1733;
				Match(COMMA);
				State = 1734;
				function_parameter();
				}
				}
				State = 1739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		public Path_expressionContext parameter_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 138, RULE_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1740;
			_localctx.parameter_name = path_expression();
			State = 1741;
			data_type();
			State = 1744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1742;
				Match(NOT);
				State = 1743;
				Match(AGGREGATE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_aggregate_js_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext function_body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_parametersContext function_parameters() {
			return GetRuleContext<Function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		public Create_aggregate_js_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_aggregate_js_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_aggregate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_aggregate_js_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_aggregate_js_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_aggregate_js_functionContext create_aggregate_js_function() {
		Create_aggregate_js_functionContext _localctx = new Create_aggregate_js_functionContext(Context, State);
		EnterRule(_localctx, 140, RULE_create_aggregate_js_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746;
			Match(CREATE);
			State = 1749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1747;
				Match(OR);
				State = 1748;
				Match(REPLACE);
				}
			}

			State = 1752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				State = 1751;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1754;
			Match(AGGREGATE);
			State = 1755;
			Match(FUNCTION);
			State = 1759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1756;
				Match(IF);
				State = 1757;
				Match(NOT);
				State = 1758;
				Match(EXISTS);
				}
			}

			State = 1769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				{
				State = 1764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
				case 1:
					{
					State = 1761;
					_localctx.project_name = identifier();
					State = 1762;
					Match(DOT);
					}
					break;
				}
				State = 1766;
				_localctx.dataset_name = identifier();
				State = 1767;
				Match(DOT);
				}
				break;
			}
			State = 1771;
			identifier();
			State = 1772;
			Match(OPAR);
			State = 1774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 1773;
				function_parameters();
				}
			}

			State = 1776;
			Match(CPAR);
			State = 1777;
			Match(RETURNS);
			State = 1778;
			data_type();
			State = 1779;
			Match(LANGUAGE);
			State = 1780;
			identifier();
			State = 1786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1781;
				Match(OPTIONS);
				State = 1782;
				Match(OPAR);
				State = 1783;
				option_parameters();
				State = 1784;
				Match(CPAR);
				}
			}

			State = 1788;
			Match(AS);
			State = 1789;
			_localctx.function_body = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLE() { return GetTokens(BigQueryParser.TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE(int i) {
			return GetToken(BigQueryParser.TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parametersContext table_function_parameters() {
			return GetRuleContext<Table_function_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationsContext column_declarations() {
			return GetRuleContext<Column_declarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_table_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_functionContext create_table_function() {
		Create_table_functionContext _localctx = new Create_table_functionContext(Context, State);
		EnterRule(_localctx, 142, RULE_create_table_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1791;
			Match(CREATE);
			State = 1794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1792;
				Match(OR);
				State = 1793;
				Match(REPLACE);
				}
			}

			State = 1796;
			Match(TABLE);
			State = 1797;
			Match(FUNCTION);
			State = 1801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1798;
				Match(IF);
				State = 1799;
				Match(NOT);
				State = 1800;
				Match(EXISTS);
				}
			}

			State = 1811;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				{
				State = 1806;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1803;
					_localctx.project_name = identifier();
					State = 1804;
					Match(DOT);
					}
					break;
				}
				State = 1808;
				_localctx.dataset_name = identifier();
				State = 1809;
				Match(DOT);
				}
				break;
			}
			State = 1813;
			identifier();
			State = 1814;
			Match(OPAR);
			State = 1816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 1815;
				table_function_parameters();
				}
			}

			State = 1818;
			Match(CPAR);
			State = 1825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 1819;
				Match(RETURNS);
				State = 1820;
				Match(TABLE);
				State = 1821;
				Match(LT);
				State = 1822;
				column_declarations();
				State = 1823;
				Match(GT);
				}
			}

			State = 1832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1827;
				Match(OPTIONS);
				State = 1828;
				Match(OPAR);
				State = 1829;
				option_parameters();
				State = 1830;
				Match(CPAR);
				}
			}

			State = 1834;
			Match(AS);
			State = 1835;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parameterContext[] table_function_parameter() {
			return GetRuleContexts<Table_function_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_function_parameterContext table_function_parameter(int i) {
			return GetRuleContext<Table_function_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Table_function_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTable_function_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTable_function_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_parametersContext table_function_parameters() {
		Table_function_parametersContext _localctx = new Table_function_parametersContext(Context, State);
		EnterRule(_localctx, 144, RULE_table_function_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1837;
			table_function_parameter();
			State = 1842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1838;
				Match(COMMA);
				State = 1839;
				table_function_parameter();
				}
				}
				State = 1844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_function_parameterContext : ParserRuleContext {
		public Path_expressionContext parameter_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		public Table_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_function_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTable_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTable_function_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_function_parameterContext table_function_parameter() {
		Table_function_parameterContext _localctx = new Table_function_parameterContext(Context, State);
		EnterRule(_localctx, 146, RULE_table_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845;
			_localctx.parameter_name = path_expression();
			State = 1849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				{
				State = 1846;
				data_type();
				}
				break;
			case 2:
				{
				State = 1847;
				Match(ANY);
				State = 1848;
				Match(TYPE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext[] column_declaration() {
			return GetRuleContexts<Column_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_declarationContext column_declaration(int i) {
			return GetRuleContext<Column_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationsContext column_declarations() {
		Column_declarationsContext _localctx = new Column_declarationsContext(Context, State);
		EnterRule(_localctx, 148, RULE_column_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1851;
			column_declaration();
			State = 1856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1852;
				Match(COMMA);
				State = 1853;
				column_declaration();
				}
				}
				State = 1858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_declarationContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Column_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_declarationContext column_declaration() {
		Column_declarationContext _localctx = new Column_declarationContext(Context, State);
		EnterRule(_localctx, 150, RULE_column_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1859;
			_localctx.column_name = path_expression();
			State = 1860;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentsContext procedure_arguments() {
			return GetRuleContext<Procedure_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		public Create_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedureContext create_procedure() {
		Create_procedureContext _localctx = new Create_procedureContext(Context, State);
		EnterRule(_localctx, 152, RULE_create_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862;
			Match(CREATE);
			State = 1865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1863;
				Match(OR);
				State = 1864;
				Match(REPLACE);
				}
			}

			State = 1867;
			Match(PROCEDURE);
			State = 1871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1868;
				Match(IF);
				State = 1869;
				Match(NOT);
				State = 1870;
				Match(EXISTS);
				}
			}

			State = 1881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 1876;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1873;
					_localctx.project_name = identifier();
					State = 1874;
					Match(DOT);
					}
					break;
				}
				State = 1878;
				_localctx.dataset_name = identifier();
				State = 1879;
				Match(DOT);
				}
				break;
			}
			State = 1883;
			identifier();
			State = 1884;
			Match(OPAR);
			State = 1886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & -9007199254740991L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & -139681957192663041L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & -1L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 212991L) != 0)) {
				{
				State = 1885;
				procedure_arguments();
				}
			}

			State = 1888;
			Match(CPAR);
			State = 1894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1889;
				Match(OPTIONS);
				State = 1890;
				Match(OPAR);
				State = 1891;
				option_parameters();
				State = 1892;
				Match(CPAR);
				}
			}

			State = 1896;
			Match(BEGIN);
			State = 1897;
			statement_list();
			State = 1898;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentContext[] procedure_argument() {
			return GetRuleContexts<Procedure_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentContext procedure_argument(int i) {
			return GetRuleContext<Procedure_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Procedure_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedure_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedure_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_argumentsContext procedure_arguments() {
		Procedure_argumentsContext _localctx = new Procedure_argumentsContext(Context, State);
		EnterRule(_localctx, 154, RULE_procedure_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1900;
			procedure_argument();
			State = 1905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1901;
				Match(COMMA);
				State = 1902;
				procedure_argument();
				}
				}
				State = 1907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_argumentContext : ParserRuleContext {
		public Path_expressionContext argument_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(BigQueryParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(BigQueryParser.INOUT, 0); }
		public Procedure_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterProcedure_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitProcedure_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_argumentContext procedure_argument() {
		Procedure_argumentContext _localctx = new Procedure_argumentContext(Context, State);
		EnterRule(_localctx, 156, RULE_procedure_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1909;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 1908;
				_la = TokenStream.LA(1);
				if ( !(_la==IN || _la==OUT || _la==INOUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1911;
			_localctx.argument_name = path_expression();
			State = 1912;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_stored_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext language;
		public String_literalContext pyspark_code;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_argumentsContext procedure_arguments() {
			return GetRuleContext<Procedure_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(BigQueryParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(BigQueryParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_stored_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_stored_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_stored_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_stored_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_stored_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_stored_procedureContext create_stored_procedure() {
		Create_stored_procedureContext _localctx = new Create_stored_procedureContext(Context, State);
		EnterRule(_localctx, 158, RULE_create_stored_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914;
			Match(CREATE);
			State = 1917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1915;
				Match(OR);
				State = 1916;
				Match(REPLACE);
				}
			}

			State = 1919;
			Match(PROCEDURE);
			State = 1923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1920;
				Match(IF);
				State = 1921;
				Match(NOT);
				State = 1922;
				Match(EXISTS);
				}
			}

			State = 1933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				{
				State = 1928;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
				case 1:
					{
					State = 1925;
					_localctx.project_name = identifier();
					State = 1926;
					Match(DOT);
					}
					break;
				}
				State = 1930;
				_localctx.dataset_name = identifier();
				State = 1931;
				Match(DOT);
				}
				break;
			}
			State = 1935;
			identifier();
			State = 1936;
			Match(OPAR);
			State = 1938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & -9007199254740991L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & -139681957192663041L) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & -1L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & 212991L) != 0)) {
				{
				State = 1937;
				procedure_arguments();
				}
			}

			State = 1940;
			Match(CPAR);
			State = 1944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 1941;
				Match(EXTERNAL);
				State = 1942;
				Match(SECURITY);
				State = 1943;
				Match(INVOKER);
				}
			}

			State = 1946;
			Match(WITH);
			State = 1947;
			Match(CONNECTION);
			State = 1948;
			path_expression();
			State = 1954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 1949;
				Match(OPTIONS);
				State = 1950;
				Match(OPAR);
				State = 1951;
				option_parameters();
				State = 1952;
				Match(CPAR);
				}
			}

			State = 1956;
			Match(LANGUAGE);
			State = 1957;
			_localctx.language = identifier();
			State = 1960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1958;
				Match(AS);
				State = 1959;
				_localctx.pyspark_code = string_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_row_access_policyContext : ParserRuleContext {
		public Path_expressionContext row_access_policy_name;
		public Path_expressionContext table_name;
		public ExpressionsContext grantee_list;
		public ExpressionContext filter_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(BigQueryParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Create_row_access_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_row_access_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_row_access_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_row_access_policyContext create_row_access_policy() {
		Create_row_access_policyContext _localctx = new Create_row_access_policyContext(Context, State);
		EnterRule(_localctx, 160, RULE_create_row_access_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1962;
			Match(CREATE);
			State = 1965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1963;
				Match(OR);
				State = 1964;
				Match(REPLACE);
				}
			}

			State = 1967;
			Match(ROW);
			State = 1968;
			Match(ACCESS);
			State = 1969;
			Match(POLICY);
			State = 1973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1970;
				Match(IF);
				State = 1971;
				Match(NOT);
				State = 1972;
				Match(EXISTS);
				}
			}

			State = 1975;
			_localctx.row_access_policy_name = path_expression();
			State = 1976;
			Match(ON);
			State = 1977;
			_localctx.table_name = path_expression();
			State = 1984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GRANT) {
				{
				State = 1978;
				Match(GRANT);
				State = 1979;
				Match(TO);
				State = 1980;
				Match(OPAR);
				State = 1981;
				_localctx.grantee_list = expressions();
				State = 1982;
				Match(CPAR);
				}
			}

			State = 1986;
			Match(FILTER);
			State = 1987;
			Match(USING);
			State = 1988;
			Match(OPAR);
			State = 1989;
			_localctx.filter_expression = expression(0);
			State = 1990;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_capacityContext create_capacity() {
		Create_capacityContext _localctx = new Create_capacityContext(Context, State);
		EnterRule(_localctx, 162, RULE_create_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1992;
			Match(CREATE);
			State = 1993;
			Match(CAPACITY);
			State = 1994;
			expression(0);
			State = 1995;
			Match(OPTIONS);
			State = 1996;
			Match(OPAR);
			State = 1997;
			option_parameters();
			State = 1998;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_reservationContext create_reservation() {
		Create_reservationContext _localctx = new Create_reservationContext(Context, State);
		EnterRule(_localctx, 164, RULE_create_reservation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2000;
			Match(CREATE);
			State = 2001;
			Match(RESERVATION);
			State = 2002;
			expression(0);
			State = 2003;
			Match(OPTIONS);
			State = 2004;
			Match(OPAR);
			State = 2005;
			option_parameters();
			State = 2006;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Create_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_assignmentContext create_assignment() {
		Create_assignmentContext _localctx = new Create_assignmentContext(Context, State);
		EnterRule(_localctx, 166, RULE_create_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008;
			Match(CREATE);
			State = 2009;
			Match(ASSIGNMENT);
			State = 2010;
			expression(0);
			State = 2011;
			Match(OPTIONS);
			State = 2012;
			Match(OPAR);
			State = 2013;
			option_parameters();
			State = 2014;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_search_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTIONS() { return GetTokens(BigQueryParser.OPTIONS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS(int i) {
			return GetToken(BigQueryParser.OPTIONS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		public Create_search_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_search_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_search_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_search_indexContext create_search_index() {
		Create_search_indexContext _localctx = new Create_search_indexContext(Context, State);
		EnterRule(_localctx, 168, RULE_create_search_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2016;
			Match(CREATE);
			State = 2017;
			Match(SEARCH);
			State = 2018;
			Match(INDEX);
			State = 2022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2019;
				Match(IF);
				State = 2020;
				Match(NOT);
				State = 2021;
				Match(EXISTS);
				}
			}

			State = 2024;
			_localctx.index_name = path_expression();
			State = 2025;
			Match(ON);
			State = 2026;
			_localctx.table_name = path_expression();
			State = 2027;
			Match(OPAR);
			State = 2040;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 2028;
				Match(ALL);
				State = 2029;
				Match(COLUMNS);
				State = 2037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 2030;
					Match(WITH);
					State = 2031;
					Match(COLUMN);
					State = 2032;
					Match(OPTIONS);
					State = 2033;
					Match(OPAR);
					State = 2034;
					columns();
					State = 2035;
					Match(CPAR);
					}
				}

				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case LOAD:
			case OVERWRITE:
			case PARTITIONS:
			case FILES:
			case EXPORT:
			case DECLARE:
			case EXECUTE:
			case IMMEDIATE:
			case EXCEPTION:
			case ERROR:
			case CALL:
			case ELSEIF:
			case LOOP:
			case WHILE:
			case DO:
			case REPEAT:
			case UNTIL:
			case BREAK:
			case LEAVE:
			case CONTINUE:
			case ITERATE:
			case RETURN:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case MESSAGE:
			case RAISE:
			case INSERT:
			case VALUES:
			case DELETE:
			case TRUNCATE:
			case UPDATE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case REVOKE:
			case MODEL:
			case TRANSFORM:
			case INPUT:
			case OUTPUT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 2039;
				columns();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2042;
			Match(CPAR);
			State = 2048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2043;
				Match(OPTIONS);
				State = 2044;
				Match(OPAR);
				State = 2045;
				option_parameters();
				State = 2046;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsContext columns() {
		ColumnsContext _localctx = new ColumnsContext(Context, State);
		EnterRule(_localctx, 170, RULE_columns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050;
			column();
			State = 2055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2051;
				Match(COMMA);
				State = 2052;
				column();
				}
				}
				State = 2057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 172, RULE_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2058;
			_localctx.column_name = path_expression();
			State = 2060;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				{
				State = 2059;
				data_type();
				}
				break;
			}
			State = 2067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2062;
				Match(OPTIONS);
				State = 2063;
				Match(OPAR);
				State = 2064;
				option_parameters();
				State = 2065;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_vector_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORING() { return GetToken(BigQueryParser.STORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Create_vector_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_vector_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_vector_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_vector_indexContext create_vector_index() {
		Create_vector_indexContext _localctx = new Create_vector_indexContext(Context, State);
		EnterRule(_localctx, 174, RULE_create_vector_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069;
			Match(CREATE);
			State = 2072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 2070;
				Match(OR);
				State = 2071;
				Match(REPLACE);
				}
			}

			State = 2074;
			Match(VECTOR);
			State = 2075;
			Match(INDEX);
			State = 2079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2076;
				Match(IF);
				State = 2077;
				Match(NOT);
				State = 2078;
				Match(EXISTS);
				}
			}

			State = 2081;
			_localctx.index_name = path_expression();
			State = 2082;
			Match(ON);
			State = 2083;
			_localctx.table_name = path_expression();
			State = 2084;
			Match(OPAR);
			State = 2085;
			_localctx.column_name = path_expression();
			State = 2086;
			Match(CPAR);
			State = 2092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORING) {
				{
				State = 2087;
				Match(STORING);
				State = 2088;
				Match(OPAR);
				State = 2089;
				path_expressions();
				State = 2090;
				Match(CPAR);
				}
			}

			State = 2094;
			Match(OPTIONS);
			State = 2095;
			Match(OPAR);
			State = 2096;
			option_parameters();
			State = 2097;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_set_default_collateContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Alter_schema_set_default_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_set_default_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_set_default_collate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_set_default_collateContext alter_schema_set_default_collate() {
		Alter_schema_set_default_collateContext _localctx = new Alter_schema_set_default_collateContext(Context, State);
		EnterRule(_localctx, 176, RULE_alter_schema_set_default_collate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2099;
			Match(ALTER);
			State = 2100;
			Match(SCHEMA);
			State = 2103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2101;
				Match(IF);
				State = 2102;
				Match(EXISTS);
				}
			}

			State = 2108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 2105;
				_localctx.project_name = identifier();
				State = 2106;
				Match(DOT);
				}
				break;
			}
			State = 2110;
			_localctx.dataset_name = identifier();
			State = 2111;
			Match(SET);
			State = 2112;
			Match(DEFAULT);
			State = 2113;
			Match(COLLATE);
			State = 2114;
			_localctx.collate_specification = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_set_optionsContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Alter_schema_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_set_optionsContext alter_schema_set_options() {
		Alter_schema_set_optionsContext _localctx = new Alter_schema_set_optionsContext(Context, State);
		EnterRule(_localctx, 178, RULE_alter_schema_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2116;
			Match(ALTER);
			State = 2117;
			Match(SCHEMA);
			State = 2120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2118;
				Match(IF);
				State = 2119;
				Match(EXISTS);
				}
			}

			State = 2125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				{
				State = 2122;
				_localctx.project_name = identifier();
				State = 2123;
				Match(DOT);
				}
				break;
			}
			State = 2127;
			_localctx.dataset_name = identifier();
			State = 2128;
			Match(SET);
			State = 2129;
			Match(OPTIONS);
			State = 2130;
			Match(OPAR);
			State = 2131;
			option_parameters();
			State = 2132;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_add_replicaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public Path_expressionContext replica_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_schema_add_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_add_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_add_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_add_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_add_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_add_replicaContext alter_schema_add_replica() {
		Alter_schema_add_replicaContext _localctx = new Alter_schema_add_replicaContext(Context, State);
		EnterRule(_localctx, 180, RULE_alter_schema_add_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2134;
			Match(ALTER);
			State = 2135;
			Match(SCHEMA);
			State = 2138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2136;
				Match(IF);
				State = 2137;
				Match(EXISTS);
				}
			}

			State = 2143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				{
				State = 2140;
				_localctx.project_name = identifier();
				State = 2141;
				Match(DOT);
				}
				break;
			}
			State = 2145;
			_localctx.dataset_name = identifier();
			State = 2146;
			Match(ADD);
			State = 2147;
			Match(REPLICA);
			State = 2148;
			_localctx.replica_name = path_expression();
			State = 2154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2149;
				Match(OPTIONS);
				State = 2150;
				Match(OPAR);
				State = 2151;
				option_parameters();
				State = 2152;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_schema_drop_replicaContext : ParserRuleContext {
		public Path_expressionContext dataset_name;
		public ExpressionContext replica_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_schema_drop_replicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_schema_drop_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_schema_drop_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_schema_drop_replica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_schema_drop_replica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_schema_drop_replicaContext alter_schema_drop_replica() {
		Alter_schema_drop_replicaContext _localctx = new Alter_schema_drop_replicaContext(Context, State);
		EnterRule(_localctx, 182, RULE_alter_schema_drop_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2156;
			Match(ALTER);
			State = 2157;
			Match(SCHEMA);
			State = 2160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2158;
				Match(IF);
				State = 2159;
				Match(EXISTS);
				}
			}

			State = 2162;
			_localctx.dataset_name = path_expression();
			State = 2163;
			Match(DROP);
			State = 2164;
			Match(REPLICA);
			State = 2165;
			_localctx.replica_name = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_optionsContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_optionsContext alter_table_set_options() {
		Alter_table_set_optionsContext _localctx = new Alter_table_set_optionsContext(Context, State);
		EnterRule(_localctx, 184, RULE_alter_table_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2167;
			Match(ALTER);
			State = 2168;
			Match(TABLE);
			State = 2171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2169;
				Match(IF);
				State = 2170;
				Match(EXISTS);
				}
			}

			State = 2173;
			_localctx.table_name = path_expression();
			State = 2174;
			Match(SET);
			State = 2175;
			Match(OPTIONS);
			State = 2176;
			Match(OPAR);
			State = 2177;
			option_parameters();
			State = 2178;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(BigQueryParser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(BigQueryParser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLUMN() { return GetTokens(BigQueryParser.COLUMN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN(int i) {
			return GetToken(BigQueryParser.COLUMN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_add_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_columnContext alter_table_add_column() {
		Alter_table_add_columnContext _localctx = new Alter_table_add_columnContext(Context, State);
		EnterRule(_localctx, 186, RULE_alter_table_add_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2180;
			Match(ALTER);
			State = 2181;
			Match(TABLE);
			State = 2182;
			_localctx.table_name = path_expression();
			State = 2183;
			Match(ADD);
			State = 2184;
			Match(COLUMN);
			State = 2188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2185;
				Match(IF);
				State = 2186;
				Match(NOT);
				State = 2187;
				Match(EXISTS);
				}
			}

			State = 2190;
			column();
			State = 2202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2191;
				Match(COMMA);
				State = 2192;
				Match(ADD);
				State = 2193;
				Match(COLUMN);
				State = 2197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2194;
					Match(IF);
					State = 2195;
					Match(NOT);
					State = 2196;
					Match(EXISTS);
					}
				}

				State = 2199;
				column();
				}
				}
				State = 2204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_foreign_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Add_foreign_keyContext[] add_foreign_key() {
			return GetRuleContexts<Add_foreign_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_foreign_keyContext add_foreign_key(int i) {
			return GetRuleContext<Add_foreign_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_add_foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_foreign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_foreign_keyContext alter_table_add_foreign_key() {
		Alter_table_add_foreign_keyContext _localctx = new Alter_table_add_foreign_keyContext(Context, State);
		EnterRule(_localctx, 188, RULE_alter_table_add_foreign_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2205;
			Match(ALTER);
			State = 2206;
			Match(TABLE);
			State = 2215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				{
				State = 2210;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
				case 1:
					{
					State = 2207;
					_localctx.project_name = identifier();
					State = 2208;
					Match(DOT);
					}
					break;
				}
				State = 2212;
				_localctx.dataset_name = identifier();
				State = 2213;
				Match(DOT);
				}
				break;
			}
			State = 2217;
			_localctx.fk_table_name = identifier();
			State = 2218;
			add_foreign_key();
			State = 2223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2219;
				Match(COMMA);
				State = 2220;
				add_foreign_key();
				}
				}
				State = 2225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_foreign_keyContext : ParserRuleContext {
		public IdentifierContext constraint_name;
		public IdentifierContext pk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext[] columns() {
			return GetRuleContexts<ColumnsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns(int i) {
			return GetRuleContext<ColumnsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT() { return GetTokens(BigQueryParser.NOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT(int i) {
			return GetToken(BigQueryParser.NOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		public Add_foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAdd_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAdd_foreign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_foreign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_foreign_keyContext add_foreign_key() {
		Add_foreign_keyContext _localctx = new Add_foreign_keyContext(Context, State);
		EnterRule(_localctx, 190, RULE_add_foreign_key);
		int _la;
		try {
			State = 2258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2226;
				Match(ADD);
				State = 2234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2227;
					Match(CONSTRAINT);
					State = 2231;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IF) {
						{
						State = 2228;
						Match(IF);
						State = 2229;
						Match(NOT);
						State = 2230;
						Match(EXISTS);
						}
					}

					State = 2233;
					_localctx.constraint_name = identifier();
					}
				}

				State = 2236;
				Match(FOREIGN);
				State = 2237;
				Match(KEY);
				State = 2238;
				Match(OPAR);
				State = 2239;
				columns();
				State = 2240;
				Match(CPAR);
				State = 2241;
				Match(REFERENCES);
				State = 2242;
				_localctx.pk_table_name = identifier();
				State = 2243;
				Match(OPAR);
				State = 2244;
				columns();
				State = 2245;
				Match(CPAR);
				State = 2246;
				Match(NOT);
				State = 2247;
				Match(ENFORCED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2249;
				Match(ADD);
				State = 2250;
				Match(PRIMARY);
				State = 2251;
				Match(KEY);
				State = 2252;
				Match(OPAR);
				State = 2253;
				columns();
				State = 2254;
				Match(CPAR);
				State = 2255;
				Match(NOT);
				State = 2256;
				Match(ENFORCED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_add_primary_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Alter_table_add_primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_add_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_add_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_add_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_add_primary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_add_primary_keyContext alter_table_add_primary_key() {
		Alter_table_add_primary_keyContext _localctx = new Alter_table_add_primary_keyContext(Context, State);
		EnterRule(_localctx, 192, RULE_alter_table_add_primary_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2260;
			Match(ALTER);
			State = 2261;
			Match(TABLE);
			State = 2270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				{
				State = 2265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
				case 1:
					{
					State = 2262;
					_localctx.project_name = identifier();
					State = 2263;
					Match(DOT);
					}
					break;
				}
				State = 2267;
				_localctx.dataset_name = identifier();
				State = 2268;
				Match(DOT);
				}
				break;
			}
			State = 2272;
			_localctx.fk_table_name = identifier();
			State = 2273;
			Match(ADD);
			State = 2274;
			Match(PRIMARY);
			State = 2275;
			Match(KEY);
			State = 2276;
			Match(OPAR);
			State = 2277;
			columns();
			State = 2278;
			Match(CPAR);
			State = 2279;
			Match(NOT);
			State = 2280;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_renameContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public Path_expressionContext new_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_renameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_rename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_renameContext alter_table_rename() {
		Alter_table_renameContext _localctx = new Alter_table_renameContext(Context, State);
		EnterRule(_localctx, 194, RULE_alter_table_rename);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2282;
			Match(ALTER);
			State = 2283;
			Match(TABLE);
			State = 2286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2284;
				Match(IF);
				State = 2285;
				Match(EXISTS);
				}
			}

			State = 2288;
			_localctx.table_name = path_expression();
			State = 2289;
			Match(RENAME);
			State = 2290;
			Match(TO);
			State = 2291;
			_localctx.new_table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_rename_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rename_columnContext[] rename_column() {
			return GetRuleContexts<Rename_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rename_columnContext rename_column(int i) {
			return GetRuleContext<Rename_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_rename_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_rename_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_rename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_rename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_rename_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_rename_columnContext alter_table_rename_column() {
		Alter_table_rename_columnContext _localctx = new Alter_table_rename_columnContext(Context, State);
		EnterRule(_localctx, 196, RULE_alter_table_rename_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293;
			Match(ALTER);
			State = 2294;
			Match(TABLE);
			State = 2297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2295;
				Match(IF);
				State = 2296;
				Match(EXISTS);
				}
			}

			State = 2299;
			_localctx.table_name = path_expression();
			State = 2300;
			rename_column();
			State = 2305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2301;
				Match(COMMA);
				State = 2302;
				rename_column();
				}
				}
				State = 2307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rename_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_to_columnContext[] column_to_column() {
			return GetRuleContexts<Column_to_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_to_columnContext column_to_column(int i) {
			return GetRuleContext<Column_to_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Rename_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rename_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRename_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRename_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rename_columnContext rename_column() {
		Rename_columnContext _localctx = new Rename_columnContext(Context, State);
		EnterRule(_localctx, 198, RULE_rename_column);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2308;
			Match(RENAME);
			State = 2309;
			Match(COLUMN);
			State = 2312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2310;
				Match(IF);
				State = 2311;
				Match(EXISTS);
				}
			}

			State = 2314;
			column_to_column();
			State = 2319;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,244,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2315;
					Match(COMMA);
					State = 2316;
					column_to_column();
					}
					} 
				}
				State = 2321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,244,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_to_columnContext : ParserRuleContext {
		public IdentifierContext column_name;
		public IdentifierContext new_column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_to_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_to_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_to_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_to_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_to_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_to_columnContext column_to_column() {
		Column_to_columnContext _localctx = new Column_to_columnContext(Context, State);
		EnterRule(_localctx, 200, RULE_column_to_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2322;
			_localctx.column_name = identifier();
			State = 2323;
			Match(TO);
			State = 2324;
			_localctx.new_column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_columnContext : ParserRuleContext {
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_columnContext[] drop_column() {
			return GetRuleContexts<Drop_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_columnContext drop_column(int i) {
			return GetRuleContext<Drop_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Alter_table_drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_columnContext alter_table_drop_column() {
		Alter_table_drop_columnContext _localctx = new Alter_table_drop_columnContext(Context, State);
		EnterRule(_localctx, 202, RULE_alter_table_drop_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2326;
			Match(ALTER);
			State = 2327;
			Match(TABLE);
			State = 2328;
			_localctx.table_name = path_expression();
			State = 2329;
			drop_column();
			State = 2334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2330;
				Match(COMMA);
				State = 2331;
				drop_column();
				}
				}
				State = 2336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_columnContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_columnContext drop_column() {
		Drop_columnContext _localctx = new Drop_columnContext(Context, State);
		EnterRule(_localctx, 204, RULE_drop_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2337;
			Match(DROP);
			State = 2338;
			Match(COLUMN);
			State = 2341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2339;
				Match(IF);
				State = 2340;
				Match(EXISTS);
				}
			}

			State = 2343;
			_localctx.column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_constraintContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		public ExpressionContext constraint_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_drop_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_constraintContext alter_table_drop_constraint() {
		Alter_table_drop_constraintContext _localctx = new Alter_table_drop_constraintContext(Context, State);
		EnterRule(_localctx, 206, RULE_alter_table_drop_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2345;
			Match(ALTER);
			State = 2346;
			Match(TABLE);
			State = 2355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				{
				State = 2350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
				case 1:
					{
					State = 2347;
					_localctx.project_name = identifier();
					State = 2348;
					Match(DOT);
					}
					break;
				}
				State = 2352;
				_localctx.dataset_name = identifier();
				State = 2353;
				Match(DOT);
				}
				break;
			}
			State = 2357;
			_localctx.fk_table_name = identifier();
			State = 2358;
			Match(DROP);
			State = 2359;
			Match(CONSTRAINT);
			State = 2362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				{
				State = 2360;
				Match(IF);
				State = 2361;
				Match(EXISTS);
				}
				break;
			}
			State = 2364;
			_localctx.constraint_name = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_drop_primary_keyContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext fk_table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_table_drop_primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_drop_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_drop_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_drop_primary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_drop_primary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_drop_primary_keyContext alter_table_drop_primary_key() {
		Alter_table_drop_primary_keyContext _localctx = new Alter_table_drop_primary_keyContext(Context, State);
		EnterRule(_localctx, 208, RULE_alter_table_drop_primary_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366;
			Match(ALTER);
			State = 2367;
			Match(TABLE);
			State = 2376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
			case 1:
				{
				State = 2371;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2368;
					_localctx.project_name = identifier();
					State = 2369;
					Match(DOT);
					}
					break;
				}
				State = 2373;
				_localctx.dataset_name = identifier();
				State = 2374;
				Match(DOT);
				}
				break;
			}
			State = 2378;
			_localctx.fk_table_name = identifier();
			State = 2379;
			Match(DROP);
			State = 2380;
			Match(PRIMARY);
			State = 2381;
			Match(KEY);
			State = 2384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2382;
				Match(IF);
				State = 2383;
				Match(EXISTS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_set_default_collateContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Alter_table_set_default_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_set_default_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_set_default_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_set_default_collate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_set_default_collateContext alter_table_set_default_collate() {
		Alter_table_set_default_collateContext _localctx = new Alter_table_set_default_collateContext(Context, State);
		EnterRule(_localctx, 210, RULE_alter_table_set_default_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386;
			Match(ALTER);
			State = 2387;
			Match(TABLE);
			State = 2388;
			_localctx.table_name = path_expression();
			State = 2389;
			Match(SET);
			State = 2390;
			Match(DEFAULT);
			State = 2391;
			Match(COLLATE);
			State = 2392;
			_localctx.collate_specification = string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_optionsContext : ParserRuleContext {
		public Path_expressionContext name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_optionsContext alter_table_column_set_options() {
		Alter_table_column_set_optionsContext _localctx = new Alter_table_column_set_optionsContext(Context, State);
		EnterRule(_localctx, 212, RULE_alter_table_column_set_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2394;
			Match(ALTER);
			State = 2395;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==VIEW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2396;
				Match(IF);
				State = 2397;
				Match(EXISTS);
				}
			}

			State = 2400;
			_localctx.name = path_expression();
			State = 2401;
			Match(ALTER);
			State = 2402;
			Match(COLUMN);
			State = 2405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2403;
				Match(IF);
				State = 2404;
				Match(EXISTS);
				}
			}

			State = 2407;
			_localctx.column_name = identifier();
			State = 2408;
			Match(SET);
			State = 2409;
			Match(OPTIONS);
			State = 2410;
			Match(OPAR);
			State = 2411;
			option_parameters();
			State = 2412;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_drop_not_nullContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_drop_not_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_drop_not_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_drop_not_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_drop_not_null(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_drop_not_nullContext alter_table_column_drop_not_null() {
		Alter_table_column_drop_not_nullContext _localctx = new Alter_table_column_drop_not_nullContext(Context, State);
		EnterRule(_localctx, 214, RULE_alter_table_column_drop_not_null);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2414;
			Match(ALTER);
			State = 2415;
			Match(TABLE);
			State = 2418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2416;
				Match(IF);
				State = 2417;
				Match(EXISTS);
				}
			}

			State = 2420;
			_localctx.table_name = path_expression();
			State = 2421;
			Match(ALTER);
			State = 2422;
			Match(COLUMN);
			State = 2425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2423;
				Match(IF);
				State = 2424;
				Match(EXISTS);
				}
			}

			State = 2427;
			_localctx.column_name = identifier();
			State = 2428;
			Match(DROP);
			State = 2429;
			Match(NOT);
			State = 2430;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_data_typeContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BigQueryParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_data_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_data_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_data_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_data_typeContext alter_table_column_set_data_type() {
		Alter_table_column_set_data_typeContext _localctx = new Alter_table_column_set_data_typeContext(Context, State);
		EnterRule(_localctx, 216, RULE_alter_table_column_set_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2432;
			Match(ALTER);
			State = 2433;
			Match(TABLE);
			State = 2436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2434;
				Match(IF);
				State = 2435;
				Match(EXISTS);
				}
			}

			State = 2438;
			_localctx.table_name = path_expression();
			State = 2439;
			Match(ALTER);
			State = 2440;
			Match(COLUMN);
			State = 2443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2441;
				Match(IF);
				State = 2442;
				Match(EXISTS);
				}
			}

			State = 2445;
			_localctx.column_name = identifier();
			State = 2446;
			Match(SET);
			State = 2447;
			Match(DATA);
			State = 2448;
			Match(TYPE);
			State = 2449;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_set_defaultContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_set_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_set_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_set_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_set_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_set_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_set_defaultContext alter_table_column_set_default() {
		Alter_table_column_set_defaultContext _localctx = new Alter_table_column_set_defaultContext(Context, State);
		EnterRule(_localctx, 218, RULE_alter_table_column_set_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451;
			Match(ALTER);
			State = 2452;
			Match(TABLE);
			State = 2455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2453;
				Match(IF);
				State = 2454;
				Match(EXISTS);
				}
			}

			State = 2457;
			_localctx.table_name = path_expression();
			State = 2458;
			Match(ALTER);
			State = 2459;
			Match(COLUMN);
			State = 2462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2460;
				Match(IF);
				State = 2461;
				Match(EXISTS);
				}
			}

			State = 2464;
			_localctx.column_name = identifier();
			State = 2465;
			Match(SET);
			State = 2466;
			Match(DEFAULT);
			State = 2467;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_column_drop_defaultContext : ParserRuleContext {
		public Path_expressionContext table_name;
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(BigQueryParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(BigQueryParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(BigQueryParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(BigQueryParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXISTS() { return GetTokens(BigQueryParser.EXISTS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS(int i) {
			return GetToken(BigQueryParser.EXISTS, i);
		}
		public Alter_table_column_drop_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_column_drop_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_column_drop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_column_drop_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_column_drop_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_column_drop_defaultContext alter_table_column_drop_default() {
		Alter_table_column_drop_defaultContext _localctx = new Alter_table_column_drop_defaultContext(Context, State);
		EnterRule(_localctx, 220, RULE_alter_table_column_drop_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2469;
			Match(ALTER);
			State = 2470;
			Match(TABLE);
			State = 2473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2471;
				Match(IF);
				State = 2472;
				Match(EXISTS);
				}
			}

			State = 2475;
			_localctx.table_name = path_expression();
			State = 2476;
			Match(ALTER);
			State = 2477;
			Match(COLUMN);
			State = 2480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2478;
				Match(IF);
				State = 2479;
				Match(EXISTS);
				}
			}

			State = 2482;
			_localctx.column_name = identifier();
			State = 2483;
			Match(DROP);
			State = 2484;
			Match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_viewContext : ParserRuleContext {
		public Path_expressionContext view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_viewContext alter_view() {
		Alter_viewContext _localctx = new Alter_viewContext(Context, State);
		EnterRule(_localctx, 222, RULE_alter_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2486;
			Match(ALTER);
			State = 2487;
			Match(VIEW);
			State = 2490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2488;
				Match(IF);
				State = 2489;
				Match(EXISTS);
				}
			}

			State = 2492;
			_localctx.view_name = path_expression();
			State = 2493;
			Match(SET);
			State = 2494;
			Match(OPTIONS);
			State = 2495;
			Match(OPAR);
			State = 2496;
			option_parameters();
			State = 2497;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_materialized_viewContext : ParserRuleContext {
		public Path_expressionContext materialized_view_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Alter_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_materialized_viewContext alter_materialized_view() {
		Alter_materialized_viewContext _localctx = new Alter_materialized_viewContext(Context, State);
		EnterRule(_localctx, 224, RULE_alter_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			Match(ALTER);
			State = 2500;
			Match(MATERIALIZED);
			State = 2501;
			Match(VIEW);
			State = 2504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2502;
				Match(IF);
				State = 2503;
				Match(EXISTS);
				}
			}

			State = 2506;
			_localctx.materialized_view_name = path_expression();
			State = 2507;
			Match(SET);
			State = 2508;
			Match(OPTIONS);
			State = 2509;
			Match(OPAR);
			State = 2510;
			option_parameters();
			State = 2511;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_organizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION() { return GetToken(BigQueryParser.ORGANIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_organizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_organization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_organization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_organization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_organization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_organizationContext alter_organization() {
		Alter_organizationContext _localctx = new Alter_organizationContext(Context, State);
		EnterRule(_localctx, 226, RULE_alter_organization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2513;
			Match(ALTER);
			State = 2514;
			Match(ORGANIZATION);
			State = 2515;
			Match(SET);
			State = 2516;
			Match(OPTIONS);
			State = 2517;
			Match(OPAR);
			State = 2518;
			option_parameters();
			State = 2519;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_projectContext : ParserRuleContext {
		public Path_expressionContext project_id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROJECT() { return GetToken(BigQueryParser.PROJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Alter_projectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_project; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_project(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_project(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_project(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_projectContext alter_project() {
		Alter_projectContext _localctx = new Alter_projectContext(Context, State);
		EnterRule(_localctx, 228, RULE_alter_project);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2521;
			Match(ALTER);
			State = 2522;
			Match(PROJECT);
			State = 2523;
			_localctx.project_id = path_expression();
			State = 2524;
			Match(SET);
			State = 2525;
			Match(OPTIONS);
			State = 2526;
			Match(OPAR);
			State = 2527;
			option_parameters();
			State = 2528;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_bi_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BI_CAPACITY() { return GetToken(BigQueryParser.BI_CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_bi_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_bi_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_bi_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_bi_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_bi_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_bi_capacityContext alter_bi_capacity() {
		Alter_bi_capacityContext _localctx = new Alter_bi_capacityContext(Context, State);
		EnterRule(_localctx, 230, RULE_alter_bi_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2530;
			Match(ALTER);
			State = 2531;
			Match(BI_CAPACITY);
			State = 2532;
			path_expression();
			State = 2533;
			Match(SET);
			State = 2534;
			Match(OPTIONS);
			State = 2535;
			Match(OPAR);
			State = 2536;
			option_parameters();
			State = 2537;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_capacityContext alter_capacity() {
		Alter_capacityContext _localctx = new Alter_capacityContext(Context, State);
		EnterRule(_localctx, 232, RULE_alter_capacity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539;
			Match(ALTER);
			State = 2540;
			Match(CAPACITY);
			State = 2541;
			path_expression();
			State = 2542;
			Match(SET);
			State = 2543;
			Match(OPTIONS);
			State = 2544;
			Match(OPAR);
			State = 2545;
			option_parameters();
			State = 2546;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Alter_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAlter_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAlter_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_reservationContext alter_reservation() {
		Alter_reservationContext _localctx = new Alter_reservationContext(Context, State);
		EnterRule(_localctx, 234, RULE_alter_reservation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2548;
			Match(ALTER);
			State = 2549;
			Match(RESERVATION);
			State = 2550;
			path_expression();
			State = 2551;
			Match(SET);
			State = 2552;
			Match(OPTIONS);
			State = 2553;
			Match(OPAR);
			State = 2554;
			option_parameters();
			State = 2555;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Undrop_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDROP() { return GetToken(BigQueryParser.UNDROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		public Undrop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undrop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUndrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUndrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Undrop_schemaContext undrop_schema() {
		Undrop_schemaContext _localctx = new Undrop_schemaContext(Context, State);
		EnterRule(_localctx, 236, RULE_undrop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2557;
			Match(UNDROP);
			State = 2558;
			Match(SCHEMA);
			State = 2562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2559;
				Match(IF);
				State = 2560;
				Match(NOT);
				State = 2561;
				Match(EXISTS);
				}
			}

			State = 2567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 2564;
				_localctx.project_name = identifier();
				State = 2565;
				Match(DOT);
				}
				break;
			}
			State = 2569;
			_localctx.dataset_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(BigQueryParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(BigQueryParser.RESTRICT, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_schemaContext drop_schema() {
		Drop_schemaContext _localctx = new Drop_schemaContext(Context, State);
		EnterRule(_localctx, 238, RULE_drop_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2571;
			Match(DROP);
			State = 2573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 2572;
				Match(EXTERNAL);
				}
			}

			State = 2575;
			Match(SCHEMA);
			State = 2578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2576;
				Match(IF);
				State = 2577;
				Match(EXISTS);
				}
			}

			State = 2583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 2580;
				_localctx.project_name = identifier();
				State = 2581;
				Match(DOT);
				}
				break;
			}
			State = 2585;
			_localctx.dataset_name = identifier();
			State = 2587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 2586;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 240, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2589;
			Match(DROP);
			State = 2590;
			Match(TABLE);
			State = 2593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2591;
				Match(IF);
				State = 2592;
				Match(EXISTS);
				}
			}

			State = 2595;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_snapshot_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_snapshot_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_snapshot_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_snapshot_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_snapshot_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_snapshot_tableContext drop_snapshot_table() {
		Drop_snapshot_tableContext _localctx = new Drop_snapshot_tableContext(Context, State);
		EnterRule(_localctx, 242, RULE_drop_snapshot_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2597;
			Match(DROP);
			State = 2598;
			Match(SNAPSHOT);
			State = 2599;
			Match(TABLE);
			State = 2602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2600;
				Match(IF);
				State = 2601;
				Match(EXISTS);
				}
			}

			State = 2604;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_external_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(BigQueryParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_external_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_external_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_external_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_external_tableContext drop_external_table() {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(Context, State);
		EnterRule(_localctx, 244, RULE_drop_external_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606;
			Match(DROP);
			State = 2607;
			Match(EXTERNAL);
			State = 2608;
			Match(TABLE);
			State = 2611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2609;
				Match(IF);
				State = 2610;
				Match(EXISTS);
				}
			}

			State = 2613;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 246, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2615;
			Match(DROP);
			State = 2616;
			Match(VIEW);
			State = 2619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2617;
				Match(IF);
				State = 2618;
				Match(EXISTS);
				}
			}

			State = 2621;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_materialized_viewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(BigQueryParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_materialized_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_materialized_view; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_materialized_view(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_materialized_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_materialized_viewContext drop_materialized_view() {
		Drop_materialized_viewContext _localctx = new Drop_materialized_viewContext(Context, State);
		EnterRule(_localctx, 248, RULE_drop_materialized_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2623;
			Match(DROP);
			State = 2624;
			Match(MATERIALIZED);
			State = 2625;
			Match(VIEW);
			State = 2628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2626;
				Match(IF);
				State = 2627;
				Match(EXISTS);
				}
			}

			State = 2630;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 250, RULE_drop_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2632;
			Match(DROP);
			State = 2633;
			Match(FUNCTION);
			State = 2636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2634;
				Match(IF);
				State = 2635;
				Match(EXISTS);
				}
			}

			State = 2646;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				{
				State = 2641;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
				case 1:
					{
					State = 2638;
					_localctx.project_name = identifier();
					State = 2639;
					Match(DOT);
					}
					break;
				}
				State = 2643;
				_localctx.dataset_name = identifier();
				State = 2644;
				Match(DOT);
				}
				break;
			}
			State = 2648;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_functionContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_table_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_table_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_functionContext drop_table_function() {
		Drop_table_functionContext _localctx = new Drop_table_functionContext(Context, State);
		EnterRule(_localctx, 252, RULE_drop_table_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2650;
			Match(DROP);
			State = 2651;
			Match(TABLE);
			State = 2652;
			Match(FUNCTION);
			State = 2655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2653;
				Match(IF);
				State = 2654;
				Match(EXISTS);
				}
			}

			State = 2665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				{
				State = 2660;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 2657;
					_localctx.project_name = identifier();
					State = 2658;
					Match(DOT);
					}
					break;
				}
				State = 2662;
				_localctx.dataset_name = identifier();
				State = 2663;
				Match(DOT);
				}
				break;
			}
			State = 2667;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public IdentifierContext procedure_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 254, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2669;
			Match(DROP);
			State = 2670;
			Match(PROCEDURE);
			State = 2673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2671;
				Match(IF);
				State = 2672;
				Match(EXISTS);
				}
			}

			State = 2683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				{
				State = 2678;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 2675;
					_localctx.project_name = identifier();
					State = 2676;
					Match(DOT);
					}
					break;
				}
				State = 2680;
				_localctx.dataset_name = identifier();
				State = 2681;
				Match(DOT);
				}
				break;
			}
			State = 2685;
			_localctx.procedure_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_row_access_policyContext : ParserRuleContext {
		public Path_expressionContext row_access_policy_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICIES() { return GetToken(BigQueryParser.POLICIES, 0); }
		public Drop_row_access_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_row_access_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_row_access_policy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_row_access_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_row_access_policyContext drop_row_access_policy() {
		Drop_row_access_policyContext _localctx = new Drop_row_access_policyContext(Context, State);
		EnterRule(_localctx, 256, RULE_drop_row_access_policy);
		int _la;
		try {
			State = 2706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2687;
				Match(DROP);
				State = 2688;
				Match(ROW);
				State = 2689;
				Match(ACCESS);
				State = 2690;
				Match(POLICY);
				State = 2693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2691;
					Match(IF);
					State = 2692;
					Match(EXISTS);
					}
				}

				State = 2695;
				_localctx.row_access_policy_name = path_expression();
				State = 2696;
				Match(ON);
				State = 2697;
				_localctx.table_name = path_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2699;
				Match(DROP);
				State = 2700;
				Match(ALL);
				State = 2701;
				Match(ROW);
				State = 2702;
				Match(ACCESS);
				State = 2703;
				Match(POLICIES);
				State = 2704;
				Match(ON);
				State = 2705;
				_localctx.table_name = path_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_capacityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAPACITY() { return GetToken(BigQueryParser.CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_capacityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_capacity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_capacity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_capacity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_capacityContext drop_capacity() {
		Drop_capacityContext _localctx = new Drop_capacityContext(Context, State);
		EnterRule(_localctx, 258, RULE_drop_capacity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2708;
			Match(DROP);
			State = 2709;
			Match(CAPACITY);
			State = 2712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2710;
				Match(IF);
				State = 2711;
				Match(EXISTS);
				}
			}

			State = 2714;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_reservationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_reservationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_reservation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_reservation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_reservation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_reservationContext drop_reservation() {
		Drop_reservationContext _localctx = new Drop_reservationContext(Context, State);
		EnterRule(_localctx, 260, RULE_drop_reservation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2716;
			Match(DROP);
			State = 2717;
			Match(RESERVATION);
			State = 2720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2718;
				Match(IF);
				State = 2719;
				Match(EXISTS);
				}
			}

			State = 2722;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_assignmentContext drop_assignment() {
		Drop_assignmentContext _localctx = new Drop_assignmentContext(Context, State);
		EnterRule(_localctx, 262, RULE_drop_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2724;
			Match(DROP);
			State = 2725;
			Match(ASSIGNMENT);
			State = 2728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2726;
				Match(IF);
				State = 2727;
				Match(EXISTS);
				}
			}

			State = 2730;
			path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_search_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_search_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_search_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_search_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_search_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_search_indexContext drop_search_index() {
		Drop_search_indexContext _localctx = new Drop_search_indexContext(Context, State);
		EnterRule(_localctx, 264, RULE_drop_search_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2732;
			Match(DROP);
			State = 2733;
			Match(SEARCH);
			State = 2734;
			Match(INDEX);
			State = 2737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2735;
				Match(IF);
				State = 2736;
				Match(EXISTS);
				}
			}

			State = 2739;
			_localctx.index_name = path_expression();
			State = 2740;
			Match(ON);
			State = 2741;
			_localctx.table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_vector_indexContext : ParserRuleContext {
		public Path_expressionContext index_name;
		public Path_expressionContext table_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		public Drop_vector_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_vector_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDrop_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDrop_vector_index(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_vector_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_vector_indexContext drop_vector_index() {
		Drop_vector_indexContext _localctx = new Drop_vector_indexContext(Context, State);
		EnterRule(_localctx, 266, RULE_drop_vector_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2743;
			Match(DROP);
			State = 2744;
			Match(VECTOR);
			State = 2745;
			Match(INDEX);
			State = 2748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2746;
				Match(IF);
				State = 2747;
				Match(EXISTS);
				}
			}

			State = 2750;
			_localctx.index_name = path_expression();
			State = 2751;
			Match(ON);
			State = 2752;
			_localctx.table_name = path_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_column_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public View_columnContext[] view_column() {
			return GetRuleContexts<View_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public View_columnContext view_column(int i) {
			return GetRuleContext<View_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public View_column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_column_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterView_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitView_column_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_column_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_column_name_listContext view_column_name_list() {
		View_column_name_listContext _localctx = new View_column_name_listContext(Context, State);
		EnterRule(_localctx, 268, RULE_view_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2754;
			view_column();
			State = 2759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2755;
				Match(COMMA);
				State = 2756;
				view_column();
				}
				}
				State = 2761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_columnContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public View_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterView_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitView_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_columnContext view_column() {
		View_columnContext _localctx = new View_columnContext(Context, State);
		EnterRule(_localctx, 270, RULE_view_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2762;
			_localctx.column_name = path_expression();
			State = 2768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2763;
				Match(OPTIONS);
				State = 2764;
				Match(OPAR);
				State = 2765;
				option_parameters();
				State = 2766;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraint_definitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionContext[] column_constraint_definition() {
			return GetRuleContexts<Column_constraint_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_constraint_definitionContext column_constraint_definition(int i) {
			return GetRuleContext<Column_constraint_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Column_constraint_definitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint_definitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint_definitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint_definitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraint_definitionsContext column_constraint_definitions() {
		Column_constraint_definitionsContext _localctx = new Column_constraint_definitionsContext(Context, State);
		EnterRule(_localctx, 272, RULE_column_constraint_definitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2770;
			column_constraint_definition();
			State = 2775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2771;
				Match(COMMA);
				State = 2772;
				column_constraint_definition();
				}
				}
				State = 2777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraint_definitionContext : ParserRuleContext {
		public IdentifierContext constraint_name;
		[System.Diagnostics.DebuggerNonUserCode] public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_keyContext primary_key() {
			return GetRuleContext<Primary_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_keyContext[] foreign_key() {
			return GetRuleContexts<Foreign_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_keyContext foreign_key(int i) {
			return GetRuleContext<Foreign_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONSTRAINT() { return GetTokens(BigQueryParser.CONSTRAINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT(int i) {
			return GetToken(BigQueryParser.CONSTRAINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_constraint_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_constraint_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_constraint_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraint_definitionContext column_constraint_definition() {
		Column_constraint_definitionContext _localctx = new Column_constraint_definitionContext(Context, State);
		EnterRule(_localctx, 274, RULE_column_constraint_definition);
		int _la;
		try {
			int _alt;
			State = 2796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2778;
				column_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2779;
				primary_key();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2780;
					Match(CONSTRAINT);
					State = 2781;
					_localctx.constraint_name = identifier();
					}
				}

				State = 2784;
				foreign_key();
				State = 2793;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,297,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2785;
						Match(COMMA);
						State = 2788;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==CONSTRAINT) {
							{
							State = 2786;
							Match(CONSTRAINT);
							State = 2787;
							_localctx.constraint_name = identifier();
							}
						}

						State = 2790;
						foreign_key();
						}
						} 
					}
					State = 2795;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,297,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Path_expressionContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 276, RULE_column_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2798;
			_localctx.column_name = path_expression();
			State = 2799;
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_keyContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Primary_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPrimary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPrimary_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_keyContext primary_key() {
		Primary_keyContext _localctx = new Primary_keyContext(Context, State);
		EnterRule(_localctx, 278, RULE_primary_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801;
			Match(PRIMARY);
			State = 2802;
			Match(KEY);
			State = 2803;
			Match(OPAR);
			State = 2804;
			_localctx.column_names = path_expressions();
			State = 2805;
			Match(CPAR);
			State = 2806;
			Match(NOT);
			State = 2807;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_keyContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_referenceContext foreign_reference() {
			return GetRuleContext<Foreign_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Foreign_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterForeign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitForeign_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_keyContext foreign_key() {
		Foreign_keyContext _localctx = new Foreign_keyContext(Context, State);
		EnterRule(_localctx, 280, RULE_foreign_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2809;
			Match(FOREIGN);
			State = 2810;
			Match(KEY);
			State = 2811;
			Match(OPAR);
			State = 2812;
			_localctx.column_names = path_expressions();
			State = 2813;
			Match(CPAR);
			State = 2814;
			foreign_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_referenceContext : ParserRuleContext {
		public IdentifierContext primary_key_table;
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Foreign_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterForeign_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitForeign_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_referenceContext foreign_reference() {
		Foreign_referenceContext _localctx = new Foreign_referenceContext(Context, State);
		EnterRule(_localctx, 282, RULE_foreign_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2816;
			Match(REFERENCES);
			State = 2817;
			_localctx.primary_key_table = identifier();
			State = 2818;
			Match(OPAR);
			State = 2819;
			_localctx.column_names = path_expressions();
			State = 2820;
			Match(CPAR);
			State = 2821;
			Match(NOT);
			State = 2822;
			Match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_schemaContext : ParserRuleContext {
		public IdentifierContext project_name;
		public IdentifierContext dataset_name;
		public String_literalContext collate_specification;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_schema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_schema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_schemaContext create_schema() {
		Create_schemaContext _localctx = new Create_schemaContext(Context, State);
		EnterRule(_localctx, 284, RULE_create_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824;
			Match(CREATE);
			State = 2825;
			Match(SCHEMA);
			State = 2829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2826;
				Match(IF);
				State = 2827;
				Match(NOT);
				State = 2828;
				Match(EXISTS);
				}
			}

			State = 2834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				{
				State = 2831;
				_localctx.project_name = identifier();
				State = 2832;
				Match(DOT);
				}
				break;
			}
			State = 2836;
			_localctx.dataset_name = identifier();
			State = 2840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 2837;
				Match(DEFAULT);
				State = 2838;
				Match(COLLATE);
				State = 2839;
				_localctx.collate_specification = string_literal();
				}
			}

			State = 2847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 2842;
				Match(OPTIONS);
				State = 2843;
				Match(OPAR);
				State = 2844;
				option_parameters();
				State = 2845;
				Match(CPAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expr_tailContext query_expr_tail() {
			return GetRuleContext<Query_expr_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_recursive_cteContext[] non_recursive_cte() {
			return GetRuleContexts<Non_recursive_cteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Non_recursive_cteContext non_recursive_cte(int i) {
			return GetRuleContext<Non_recursive_cteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_cteContext[] recursive_cte() {
			return GetRuleContexts<Recursive_cteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_cteContext recursive_cte(int i) {
			return GetRuleContext<Recursive_cteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_operation_tailContext set_operation_tail() {
			return GetRuleContext<Set_operation_tailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(BigQueryParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		return query_expression(0);
	}

	private Query_expressionContext query_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Query_expressionContext _localctx = new Query_expressionContext(Context, _parentState);
		Query_expressionContext _prevctx = _localctx;
		int _startState = 286;
		EnterRecursionRule(_localctx, 286, RULE_query_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2888;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 2850;
				Match(WITH);
				State = 2852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RECURSIVE) {
					{
					State = 2851;
					Match(RECURSIVE);
					}
				}

				State = 2856;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
				case 1:
					{
					State = 2854;
					non_recursive_cte();
					}
					break;
				case 2:
					{
					State = 2855;
					recursive_cte();
					}
					break;
				}
				State = 2865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2858;
					Match(COMMA);
					State = 2861;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
					case 1:
						{
						State = 2859;
						non_recursive_cte();
						}
						break;
					case 2:
						{
						State = 2860;
						recursive_cte();
						}
						break;
					}
					}
					}
					State = 2867;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2876;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
				case 1:
					{
					State = 2868;
					select();
					}
					break;
				case 2:
					{
					State = 2869;
					Match(OPAR);
					State = 2870;
					query_expression(0);
					State = 2871;
					Match(CPAR);
					}
					break;
				case 3:
					{
					State = 2873;
					query_expression(0);
					State = 2874;
					set_operation_tail();
					}
					break;
				}
				State = 2878;
				query_expr_tail();
				}
				break;
			case SELECT:
				{
				State = 2880;
				select();
				State = 2881;
				query_expr_tail();
				}
				break;
			case OPAR:
				{
				State = 2883;
				Match(OPAR);
				State = 2884;
				query_expression(0);
				State = 2885;
				Match(CPAR);
				State = 2886;
				query_expr_tail();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2896;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,309,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Query_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_query_expression);
					State = 2890;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2891;
					set_operation_tail();
					State = 2892;
					query_expr_tail();
					}
					} 
				}
				State = 2898;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,309,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Query_expr_tailContext : ParserRuleContext {
		public ExpressionContext order_by;
		public ExpressionContext skip_rows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(BigQueryParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(BigQueryParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(BigQueryParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(BigQueryParser.DESC, i);
		}
		public Query_expr_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expr_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterQuery_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitQuery_expr_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expr_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expr_tailContext query_expr_tail() {
		Query_expr_tailContext _localctx = new Query_expr_tailContext(Context, State);
		EnterRule(_localctx, 288, RULE_query_expr_tail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				{
				State = 2899;
				Match(ORDER);
				State = 2900;
				Match(BY);
				State = 2901;
				_localctx.order_by = expression(0);
				State = 2903;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
				case 1:
					{
					State = 2902;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 2912;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,312,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2905;
						Match(COMMA);
						State = 2906;
						expression(0);
						State = 2908;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
						case 1:
							{
							State = 2907;
							_la = TokenStream.LA(1);
							if ( !(_la==ASC || _la==DESC) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						}
						} 
					}
					State = 2914;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,312,Context);
				}
				}
				break;
			}
			State = 2923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				{
				State = 2917;
				Match(LIMIT);
				State = 2918;
				expression(0);
				State = 2921;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
				case 1:
					{
					State = 2919;
					Match(OFFSET);
					State = 2920;
					_localctx.skip_rows = expression(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_operation_tailContext : ParserRuleContext {
		public Path_expressionsContext column_list_3;
		public Path_expressionsContext column_list_4;
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(BigQueryParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BigQueryParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORRESPONDING() { return GetToken(BigQueryParser.CORRESPONDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(BigQueryParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Set_operation_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operation_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSet_operation_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSet_operation_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_operation_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_operation_tailContext set_operation_tail() {
		Set_operation_tailContext _localctx = new Set_operation_tailContext(Context, State);
		EnterRule(_localctx, 290, RULE_set_operation_tail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2930;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				{
				State = 2925;
				Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
				{
				State = 2926;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==LEFT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 2927;
					Match(OUTER);
					}
				}

				}
				break;
			case EXCEPT:
			case INTERSECT:
			case UNION:
				break;
			default:
				break;
			}
			State = 2938;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 2932;
				Match(UNION);
				State = 2933;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case INTERSECT:
				{
				State = 2934;
				Match(INTERSECT);
				State = 2935;
				Match(DISTINCT);
				}
				break;
			case EXCEPT:
				{
				State = 2936;
				Match(EXCEPT);
				State = 2937;
				Match(DISTINCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY || _la==STRICT || _la==CORRESPONDING) {
				{
				State = 2960;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BY:
					{
					State = 2940;
					Match(BY);
					State = 2941;
					Match(NAME);
					State = 2947;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ON) {
						{
						State = 2942;
						Match(ON);
						State = 2943;
						Match(OPAR);
						State = 2944;
						_localctx.column_list_3 = path_expressions();
						State = 2945;
						Match(CPAR);
						}
					}

					}
					break;
				case STRICT:
				case CORRESPONDING:
					{
					State = 2950;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRICT) {
						{
						State = 2949;
						Match(STRICT);
						}
					}

					State = 2952;
					Match(CORRESPONDING);
					State = 2958;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BY) {
						{
						State = 2953;
						Match(BY);
						State = 2954;
						Match(OPAR);
						State = 2955;
						_localctx.column_list_4 = path_expressions();
						State = 2956;
						Match(CPAR);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 2964;
			query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_recursive_cteContext : ParserRuleContext {
		public IdentifierContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Non_recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNon_recursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNon_recursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_recursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_recursive_cteContext non_recursive_cte() {
		Non_recursive_cteContext _localctx = new Non_recursive_cteContext(Context, State);
		EnterRule(_localctx, 292, RULE_non_recursive_cte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2966;
			_localctx.cte_name = identifier();
			State = 2967;
			Match(AS);
			State = 2968;
			Match(OPAR);
			State = 2969;
			query_expression(0);
			State = 2970;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_cteContext : ParserRuleContext {
		public IdentifierContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Recursive_union_operationContext recursive_union_operation() {
			return GetRuleContext<Recursive_union_operationContext>(0);
		}
		public Recursive_cteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_cte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRecursive_cte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_cte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_cteContext recursive_cte() {
		Recursive_cteContext _localctx = new Recursive_cteContext(Context, State);
		EnterRule(_localctx, 294, RULE_recursive_cte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2972;
			_localctx.cte_name = identifier();
			State = 2973;
			Match(AS);
			{
			State = 2974;
			recursive_union_operation();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Recursive_union_operationContext : ParserRuleContext {
		public Query_expressionContext base_term;
		public Query_expressionContext recursive_term;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public Recursive_union_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recursive_union_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRecursive_union_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRecursive_union_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecursive_union_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Recursive_union_operationContext recursive_union_operation() {
		Recursive_union_operationContext _localctx = new Recursive_union_operationContext(Context, State);
		EnterRule(_localctx, 296, RULE_recursive_union_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2976;
			_localctx.base_term = query_expression(0);
			State = 2977;
			Match(UNION);
			State = 2978;
			Match(ALL);
			State = 2979;
			_localctx.recursive_term = query_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(BigQueryParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Differential_privacy_clauseContext differential_privacy_clause() {
			return GetRuleContext<Differential_privacy_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_clausesContext from_clauses() {
			return GetRuleContext<From_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_specificationContext group_by_specification() {
			return GetRuleContext<Group_by_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY() { return GetToken(BigQueryParser.QUALIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(BigQueryParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(BigQueryParser.VALUE, 0); }
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 298, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2981;
			Match(SELECT);
			State = 2984;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				{
				State = 2982;
				Match(WITH);
				State = 2983;
				differential_privacy_clause();
				}
				break;
			}
			State = 2987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				{
				State = 2986;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2991;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				{
				State = 2989;
				Match(AS);
				State = 2990;
				_la = TokenStream.LA(1);
				if ( !(_la==STRUCT || _la==VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2993;
			select_list();
			State = 2996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
			case 1:
				{
				State = 2994;
				Match(FROM);
				State = 2995;
				from_clauses();
				}
				break;
			}
			State = 3000;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				{
				State = 2998;
				Match(WHERE);
				State = 2999;
				expression(0);
				}
				break;
			}
			State = 3005;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				{
				State = 3002;
				Match(GROUP);
				State = 3003;
				Match(BY);
				State = 3004;
				group_by_specification();
				}
				break;
			}
			State = 3009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				{
				State = 3007;
				Match(HAVING);
				State = 3008;
				expression(0);
				}
				break;
			}
			State = 3013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				{
				State = 3011;
				Match(QUALIFY);
				State = 3012;
				expression(0);
				}
				break;
			}
			State = 3017;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
			case 1:
				{
				State = 3015;
				Match(WINDOW);
				State = 3016;
				window_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_specificationContext : ParserRuleContext {
		public ExpressionsContext groupable_items;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_specificationContext grouping_sets_specification() {
			return GetRuleContext<Grouping_sets_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_specificationContext rollup_specification() {
			return GetRuleContext<Rollup_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Group_by_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_specificationContext group_by_specification() {
		Group_by_specificationContext _localctx = new Group_by_specificationContext(Context, State);
		EnterRule(_localctx, 300, RULE_group_by_specification);
		try {
			State = 3026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3019;
				_localctx.groupable_items = expressions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3020;
				Match(ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3021;
				grouping_sets_specification();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3022;
				rollup_specification();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3023;
				cube_specification();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3024;
				Match(OPAR);
				State = 3025;
				Match(CPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(BigQueryParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(BigQueryParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Grouping_sets_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_specificationContext grouping_sets_specification() {
		Grouping_sets_specificationContext _localctx = new Grouping_sets_specificationContext(Context, State);
		EnterRule(_localctx, 302, RULE_grouping_sets_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3028;
			Match(GROUP);
			State = 3029;
			Match(BY);
			State = 3030;
			Match(GROUPING);
			State = 3031;
			Match(SETS);
			State = 3032;
			Match(OPAR);
			State = 3033;
			grouping_list();
			State = 3034;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_list_itemContext[] grouping_list_item() {
			return GetRuleContexts<Grouping_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_list_itemContext grouping_list_item(int i) {
			return GetRuleContext<Grouping_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Grouping_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_listContext grouping_list() {
		Grouping_listContext _localctx = new Grouping_listContext(Context, State);
		EnterRule(_localctx, 304, RULE_grouping_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3036;
			grouping_list_item();
			State = 3041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3037;
				Match(COMMA);
				State = 3038;
				grouping_list_item();
				}
				}
				State = 3043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_list_itemContext : ParserRuleContext {
		public ExpressionContext groupable_item;
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_specificationContext rollup_specification() {
			return GetRuleContext<Rollup_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_specificationContext cube_specification() {
			return GetRuleContext<Cube_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Groupable_item_setContext groupable_item_set() {
			return GetRuleContext<Groupable_item_setContext>(0);
		}
		public Grouping_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGrouping_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGrouping_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_list_itemContext grouping_list_item() {
		Grouping_list_itemContext _localctx = new Grouping_list_itemContext(Context, State);
		EnterRule(_localctx, 306, RULE_grouping_list_item);
		try {
			State = 3048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3044;
				rollup_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3045;
				cube_specification();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3046;
				_localctx.groupable_item = expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3047;
				groupable_item_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(BigQueryParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Cube_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCube_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCube_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCube_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cube_specificationContext cube_specification() {
		Cube_specificationContext _localctx = new Cube_specificationContext(Context, State);
		EnterRule(_localctx, 308, RULE_cube_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3050;
			Match(GROUP);
			State = 3051;
			Match(BY);
			State = 3052;
			Match(CUBE);
			State = 3053;
			Match(OPAR);
			State = 3054;
			grouping_list();
			State = 3055;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupable_item_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Groupable_item_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupable_item_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterGroupable_item_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitGroupable_item_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupable_item_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupable_item_setContext groupable_item_set() {
		Groupable_item_setContext _localctx = new Groupable_item_setContext(Context, State);
		EnterRule(_localctx, 310, RULE_groupable_item_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3057;
			Match(OPAR);
			State = 3058;
			expressions();
			State = 3059;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(BigQueryParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_listContext grouping_list() {
			return GetRuleContext<Grouping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Rollup_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRollup_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRollup_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_specificationContext rollup_specification() {
		Rollup_specificationContext _localctx = new Rollup_specificationContext(Context, State);
		EnterRule(_localctx, 312, RULE_rollup_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3061;
			Match(GROUP);
			State = 3062;
			Match(BY);
			State = 3063;
			Match(ROLLUP);
			State = 3064;
			Match(OPAR);
			State = 3065;
			grouping_list();
			State = 3066;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_window_expressionContext[] named_window_expression() {
			return GetRuleContexts<Named_window_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_window_expressionContext named_window_expression(int i) {
			return GetRuleContext<Named_window_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 314, RULE_window_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3068;
			named_window_expression();
			State = 3073;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3069;
					Match(COMMA);
					State = 3070;
					named_window_expression();
					}
					} 
				}
				State = 3075;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,336,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_window_expressionContext : ParserRuleContext {
		public Path_expressionContext named_window_1;
		public Path_expressionContext named_window_2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Named_window_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_window_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNamed_window_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNamed_window_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_window_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_window_expressionContext named_window_expression() {
		Named_window_expressionContext _localctx = new Named_window_expressionContext(Context, State);
		EnterRule(_localctx, 316, RULE_named_window_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3076;
			_localctx.named_window_1 = path_expression();
			State = 3077;
			Match(AS);
			State = 3083;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case LOAD:
			case OVERWRITE:
			case PARTITIONS:
			case FILES:
			case EXPORT:
			case DECLARE:
			case EXECUTE:
			case IMMEDIATE:
			case EXCEPTION:
			case ERROR:
			case CALL:
			case ELSEIF:
			case LOOP:
			case WHILE:
			case DO:
			case REPEAT:
			case UNTIL:
			case BREAK:
			case LEAVE:
			case CONTINUE:
			case ITERATE:
			case RETURN:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case MESSAGE:
			case RAISE:
			case INSERT:
			case VALUES:
			case DELETE:
			case TRUNCATE:
			case UPDATE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case REVOKE:
			case MODEL:
			case TRANSFORM:
			case INPUT:
			case OUTPUT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 3078;
				_localctx.named_window_2 = path_expression();
				}
				break;
			case OPAR:
				{
				State = 3079;
				Match(OPAR);
				State = 3080;
				window_specification();
				State = 3081;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		public Path_expressionContext named_window;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(BigQueryParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(BigQueryParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expressions_asc_descContext expressions_asc_desc() {
			return GetRuleContext<Expressions_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_clauseContext window_frame_clause() {
			return GetRuleContext<Window_frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 318, RULE_window_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 3085;
				_localctx.named_window = path_expression();
				}
			}

			State = 3091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3088;
				Match(PARTITION);
				State = 3089;
				Match(BY);
				State = 3090;
				expressions();
				}
			}

			State = 3096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3093;
				Match(ORDER);
				State = 3094;
				Match(BY);
				State = 3095;
				expressions_asc_desc();
				}
			}

			State = 3099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 3098;
				window_frame_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(BigQueryParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_startContext frame_start() {
			return GetRuleContext<Frame_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_betweenContext frame_between() {
			return GetRuleContext<Frame_betweenContext>(0);
		}
		public Window_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_clauseContext window_frame_clause() {
		Window_frame_clauseContext _localctx = new Window_frame_clauseContext(Context, State);
		EnterRule(_localctx, 320, RULE_window_frame_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3101;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
			case 1:
				{
				State = 3102;
				frame_start();
				}
				break;
			case 2:
				{
				State = 3103;
				frame_between();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		public Frame_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_startContext frame_start() {
		Frame_startContext _localctx = new Frame_startContext(Context, State);
		EnterRule(_localctx, 322, RULE_frame_start);
		int _la;
		try {
			State = 3115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3106;
				Match(UNBOUNDED);
				State = 3107;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3108;
				expression(0);
				State = 3109;
				Match(PRECEDING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CURRENT) {
					{
					State = 3111;
					Match(CURRENT);
					State = 3112;
					Match(ROW);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_betweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_aContext frame_end_a() {
			return GetRuleContext<Frame_end_aContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_bContext frame_end_b() {
			return GetRuleContext<Frame_end_bContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_end_cContext frame_end_c() {
			return GetRuleContext<Frame_end_cContext>(0);
		}
		public Frame_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_between(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_betweenContext frame_between() {
		Frame_betweenContext _localctx = new Frame_betweenContext(Context, State);
		EnterRule(_localctx, 324, RULE_frame_between);
		try {
			State = 3139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3117;
				Match(BETWEEN);
				State = 3118;
				Match(UNBOUNDED);
				State = 3119;
				Match(PRECEDING);
				State = 3120;
				Match(AND);
				State = 3121;
				frame_end_a();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3122;
				Match(BETWEEN);
				State = 3123;
				expression(0);
				State = 3124;
				Match(PRECEDING);
				State = 3125;
				Match(AND);
				State = 3126;
				frame_end_a();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3128;
				Match(BETWEEN);
				State = 3129;
				Match(CURRENT);
				State = 3130;
				Match(ROW);
				State = 3131;
				Match(AND);
				State = 3132;
				frame_end_b();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3133;
				Match(BETWEEN);
				State = 3134;
				expression(0);
				State = 3135;
				Match(FOLLOWING);
				State = 3136;
				Match(AND);
				State = 3137;
				frame_end_c();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_aContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_a(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_aContext frame_end_a() {
		Frame_end_aContext _localctx = new Frame_end_aContext(Context, State);
		EnterRule(_localctx, 326, RULE_frame_end_a);
		try {
			State = 3151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3141;
				expression(0);
				State = 3142;
				Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3144;
				Match(CURRENT);
				State = 3145;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3146;
				expression(0);
				State = 3147;
				Match(FOLLOWING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3149;
				Match(UNBOUNDED);
				State = 3150;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_bContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_bContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_b; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_b(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_b(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_b(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_bContext frame_end_b() {
		Frame_end_bContext _localctx = new Frame_end_bContext(Context, State);
		EnterRule(_localctx, 328, RULE_frame_end_b);
		try {
			State = 3160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3153;
				Match(CURRENT);
				State = 3154;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3155;
				expression(0);
				State = 3156;
				Match(FOLLOWING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3158;
				Match(UNBOUNDED);
				State = 3159;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_end_cContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		public Frame_end_cContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_end_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrame_end_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrame_end_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrame_end_c(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Frame_end_cContext frame_end_c() {
		Frame_end_cContext _localctx = new Frame_end_cContext(Context, State);
		EnterRule(_localctx, 330, RULE_frame_end_c);
		try {
			State = 3167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3162;
				expression(0);
				State = 3163;
				Match(FOLLOWING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3165;
				Match(UNBOUNDED);
				State = 3166;
				Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Differential_privacy_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL_PRIVACY() { return GetToken(BigQueryParser.DIFFERENTIAL_PRIVACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Differential_privacy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_differential_privacy_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDifferential_privacy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDifferential_privacy_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferential_privacy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Differential_privacy_clauseContext differential_privacy_clause() {
		Differential_privacy_clauseContext _localctx = new Differential_privacy_clauseContext(Context, State);
		EnterRule(_localctx, 332, RULE_differential_privacy_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3169;
			Match(DIFFERENTIAL_PRIVACY);
			State = 3170;
			Match(OPTIONS);
			State = 3171;
			Match(OPAR);
			State = 3172;
			option_parameters();
			State = 3173;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext[] from_clause() {
			return GetRuleContexts<From_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause(int i) {
			return GetRuleContext<From_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public From_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clausesContext from_clauses() {
		From_clausesContext _localctx = new From_clausesContext(Context, State);
		EnterRule(_localctx, 334, RULE_from_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3175;
			from_clause();
			State = 3180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,349,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3176;
					Match(COMMA);
					State = 3177;
					from_clause();
					}
					} 
				}
				State = 3182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,349,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext from_item() {
			return GetRuleContext<From_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pivot_operatorContext pivot_operator() {
			return GetRuleContext<Pivot_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unpivot_operatorContext unpivot_operator() {
			return GetRuleContext<Unpivot_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_operatorContext tablesample_operator() {
			return GetRuleContext<Tablesample_operatorContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 336, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3183;
			from_item(0);
			State = 3186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				{
				State = 3184;
				pivot_operator();
				}
				break;
			case 2:
				{
				State = 3185;
				unpivot_operator();
				}
				break;
			}
			State = 3189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				{
				State = 3188;
				tablesample_operator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_itemContext : ParserRuleContext {
		public IdentifierContext table_name;
		public ExpressionContext timestamp_expression;
		public Path_expressionContext field_path;
		public Path_expressionContext cte_name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext[] from_item() {
			return GetRuleContexts<From_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_itemContext from_item(int i) {
			return GetRuleContext<From_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cross_join_operatorContext cross_join_operator() {
			return GetRuleContext<Cross_join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Condition_join_operatorContext condition_join_operator() {
			return GetRuleContext<Condition_join_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_conditionContext join_condition() {
			return GetRuleContext<Join_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unnest_operatorContext unnest_operator() {
			return GetRuleContext<Unnest_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public From_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_itemContext from_item() {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		From_itemContext _localctx = new From_itemContext(Context, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 338;
		EnterRecursionRule(_localctx, 338, RULE_from_item, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				{
				State = 3192;
				_localctx.table_name = identifier();
				State = 3194;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
				case 1:
					{
					State = 3193;
					as_alias();
					}
					break;
				}
				State = 3201;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,353,Context) ) {
				case 1:
					{
					State = 3196;
					Match(FOR);
					State = 3197;
					Match(SYSTEM_TIME);
					State = 3198;
					Match(AS);
					State = 3199;
					Match(OF);
					State = 3200;
					_localctx.timestamp_expression = expression(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3203;
				Match(OPAR);
				State = 3213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,354,Context) ) {
				case 1:
					{
					State = 3204;
					from_item(0);
					State = 3205;
					cross_join_operator();
					State = 3206;
					from_item(0);
					}
					break;
				case 2:
					{
					State = 3208;
					from_item(0);
					State = 3209;
					condition_join_operator();
					State = 3210;
					from_item(0);
					State = 3211;
					join_condition();
					}
					break;
				}
				State = 3215;
				Match(CPAR);
				}
				break;
			case 3:
				{
				State = 3217;
				Match(OPAR);
				State = 3218;
				query_expression(0);
				State = 3219;
				Match(CPAR);
				State = 3221;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
				case 1:
					{
					State = 3220;
					as_alias();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 3223;
				_localctx.field_path = path_expression();
				}
				break;
			case 5:
				{
				State = 3224;
				unnest_operator();
				}
				break;
			case 6:
				{
				State = 3225;
				_localctx.cte_name = path_expression();
				State = 3227;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
				case 1:
					{
					State = 3226;
					as_alias();
					}
					break;
				}
				}
				break;
			case 7:
				{
				State = 3229;
				function_call();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,359,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 3241;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,358,Context) ) {
					case 1:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_from_item);
						State = 3232;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 3233;
						cross_join_operator();
						State = 3234;
						from_item(9);
						}
						break;
					case 2:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_from_item);
						State = 3236;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 3237;
						condition_join_operator();
						State = 3238;
						from_item(0);
						State = 3239;
						join_condition();
						}
						break;
					}
					} 
				}
				State = 3245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,359,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unnest_operatorContext : ParserRuleContext {
		public ExpressionContext array;
		public Path_expressionContext array_path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		public Unnest_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnest_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUnnest_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUnnest_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnnest_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unnest_operatorContext unnest_operator() {
		Unnest_operatorContext _localctx = new Unnest_operatorContext(Context, State);
		EnterRule(_localctx, 340, RULE_unnest_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3257;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNNEST:
				{
				State = 3246;
				Match(UNNEST);
				State = 3247;
				Match(OPAR);
				State = 3248;
				_localctx.array = expression(0);
				State = 3249;
				Match(CPAR);
				State = 3251;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
				case 1:
					{
					State = 3250;
					as_alias();
					}
					break;
				}
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case LOAD:
			case OVERWRITE:
			case PARTITIONS:
			case FILES:
			case EXPORT:
			case DECLARE:
			case EXECUTE:
			case IMMEDIATE:
			case EXCEPTION:
			case ERROR:
			case CALL:
			case ELSEIF:
			case LOOP:
			case WHILE:
			case DO:
			case REPEAT:
			case UNTIL:
			case BREAK:
			case LEAVE:
			case CONTINUE:
			case ITERATE:
			case RETURN:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case MESSAGE:
			case RAISE:
			case INSERT:
			case VALUES:
			case DELETE:
			case TRUNCATE:
			case UPDATE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case REVOKE:
			case MODEL:
			case TRANSFORM:
			case INPUT:
			case OUTPUT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 3253;
				_localctx.array_path = path_expression();
				State = 3255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
				case 1:
					{
					State = 3254;
					as_alias();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				{
				State = 3259;
				Match(WITH);
				State = 3260;
				Match(OFFSET);
				State = 3262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
				case 1:
					{
					State = 3261;
					as_alias();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cross_join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(BigQueryParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BigQueryParser.COMMA, 0); }
		public Cross_join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cross_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCross_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCross_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCross_join_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cross_join_operatorContext cross_join_operator() {
		Cross_join_operatorContext _localctx = new Cross_join_operatorContext(Context, State);
		EnterRule(_localctx, 342, RULE_cross_join_operator);
		try {
			State = 3269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3266;
				Match(CROSS);
				State = 3267;
				Match(JOIN);
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3268;
				Match(COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_join_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BigQueryParser.RIGHT, 0); }
		public Condition_join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_join_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCondition_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCondition_join_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_join_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_join_operatorContext condition_join_operator() {
		Condition_join_operatorContext _localctx = new Condition_join_operatorContext(Context, State);
		EnterRule(_localctx, 344, RULE_condition_join_operator);
		int _la;
		try {
			State = 3290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER) {
					{
					State = 3271;
					Match(INNER);
					}
				}

				State = 3274;
				Match(JOIN);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3275;
				Match(FULL);
				State = 3277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 3276;
					Match(OUTER);
					}
				}

				State = 3279;
				Match(JOIN);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3280;
				Match(LEFT);
				State = 3282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 3281;
					Match(OUTER);
					}
				}

				State = 3284;
				Match(JOIN);
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3285;
				Match(RIGHT);
				State = 3287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 3286;
					Match(OUTER);
					}
				}

				State = 3289;
				Match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public On_clauseContext on_clause() {
			return GetRuleContext<On_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterJoin_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitJoin_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_conditionContext join_condition() {
		Join_conditionContext _localctx = new Join_conditionContext(Context, State);
		EnterRule(_localctx, 346, RULE_join_condition);
		try {
			State = 3294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3292;
				on_clause();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3293;
				using_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public On_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOn_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOn_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_clauseContext on_clause() {
		On_clauseContext _localctx = new On_clauseContext(Context, State);
		EnterRule(_localctx, 348, RULE_on_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3296;
			Match(ON);
			State = 3297;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		public Path_expressionsContext column_list;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 350, RULE_using_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3299;
			Match(USING);
			State = 3300;
			Match(OPAR);
			State = 3301;
			_localctx.column_list = path_expressions();
			State = 3302;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_operatorContext : ParserRuleContext {
		public IdentifierContext input_column;
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(BigQueryParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext[] function_call() {
			return GetRuleContexts<Function_callContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call(int i) {
			return GetRuleContext<Function_callContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expressions_as_aliasContext expressions_as_alias() {
			return GetRuleContext<Expressions_as_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public Pivot_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_operatorContext pivot_operator() {
		Pivot_operatorContext _localctx = new Pivot_operatorContext(Context, State);
		EnterRule(_localctx, 352, RULE_pivot_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3304;
			Match(PIVOT);
			State = 3305;
			Match(OPAR);
			State = 3306;
			function_call();
			State = 3308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 3307;
				as_alias();
				}
			}

			State = 3317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3310;
				Match(COMMA);
				State = 3311;
				function_call();
				State = 3313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
					{
					State = 3312;
					as_alias();
					}
				}

				}
				}
				State = 3319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3320;
			Match(FOR);
			State = 3321;
			_localctx.input_column = identifier();
			State = 3322;
			Match(IN);
			State = 3323;
			Match(OPAR);
			State = 3324;
			expressions_as_alias();
			State = 3325;
			Match(CPAR);
			State = 3326;
			Match(CPAR);
			State = 3329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
			case 1:
				{
				State = 3327;
				Match(AS);
				State = 3328;
				_localctx.alias = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_operatorContext : ParserRuleContext {
		public As_aliasContext unpivot_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(BigQueryParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_column_unpivotContext single_column_unpivot() {
			return GetRuleContext<Single_column_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multi_column_unpivotContext multi_column_unpivot() {
			return GetRuleContext<Multi_column_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BigQueryParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(BigQueryParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		public Unpivot_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterUnpivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitUnpivot_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_operatorContext unpivot_operator() {
		Unpivot_operatorContext _localctx = new Unpivot_operatorContext(Context, State);
		EnterRule(_localctx, 354, RULE_unpivot_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3331;
			Match(UNPIVOT);
			State = 3336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				{
				State = 3332;
				Match(INCLUDE);
				State = 3333;
				Match(NULLS);
				}
				break;
			case EXCLUDE:
				{
				State = 3334;
				Match(EXCLUDE);
				State = 3335;
				Match(NULLS);
				}
				break;
			case OPAR:
				break;
			default:
				break;
			}
			State = 3338;
			Match(OPAR);
			State = 3341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				{
				State = 3339;
				single_column_unpivot();
				}
				break;
			case 2:
				{
				State = 3340;
				multi_column_unpivot();
				}
				break;
			}
			State = 3343;
			Match(CPAR);
			State = 3345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
			case 1:
				{
				State = 3344;
				_localctx.unpivot_alias = as_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_column_unpivotContext : ParserRuleContext {
		public ExpressionsContext values_column;
		public Path_expressionContext name_column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Columns_to_unpivotContext columns_to_unpivot() {
			return GetRuleContext<Columns_to_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Single_column_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_column_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSingle_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSingle_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_column_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_column_unpivotContext single_column_unpivot() {
		Single_column_unpivotContext _localctx = new Single_column_unpivotContext(Context, State);
		EnterRule(_localctx, 356, RULE_single_column_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3347;
			_localctx.values_column = expressions();
			State = 3348;
			Match(FOR);
			State = 3349;
			_localctx.name_column = path_expression();
			State = 3350;
			Match(IN);
			State = 3351;
			Match(OPAR);
			State = 3352;
			columns_to_unpivot();
			State = 3353;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_column_unpivotContext : ParserRuleContext {
		public Path_expressionContext name_column;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_sets_to_unpivotContext column_sets_to_unpivot() {
			return GetRuleContext<Column_sets_to_unpivotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Multi_column_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_column_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterMulti_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitMulti_column_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_column_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_column_unpivotContext multi_column_unpivot() {
		Multi_column_unpivotContext _localctx = new Multi_column_unpivotContext(Context, State);
		EnterRule(_localctx, 358, RULE_multi_column_unpivot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3355;
			Match(OPAR);
			State = 3356;
			expressions();
			State = 3357;
			Match(CPAR);
			State = 3358;
			Match(FOR);
			State = 3359;
			_localctx.name_column = path_expression();
			State = 3360;
			Match(IN);
			State = 3361;
			Match(OPAR);
			State = 3362;
			column_sets_to_unpivot();
			State = 3363;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Columns_to_unpivotContext : ParserRuleContext {
		public IdentifierContext row_value_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Columns_to_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns_to_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumns_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumns_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns_to_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Columns_to_unpivotContext columns_to_unpivot() {
		Columns_to_unpivotContext _localctx = new Columns_to_unpivotContext(Context, State);
		EnterRule(_localctx, 360, RULE_columns_to_unpivot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3365;
			expression(0);
			State = 3367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 3366;
				as_alias();
				}
			}

			State = 3376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3369;
				Match(COMMA);
				State = 3370;
				expression(0);
				State = 3372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
					{
					State = 3371;
					_localctx.row_value_alias = identifier();
					}
				}

				}
				}
				State = 3378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_sets_to_unpivotContext : ParserRuleContext {
		public IdentifierContext row_value_alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Column_sets_to_unpivotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_sets_to_unpivot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterColumn_sets_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitColumn_sets_to_unpivot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_sets_to_unpivot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_sets_to_unpivotContext column_sets_to_unpivot() {
		Column_sets_to_unpivotContext _localctx = new Column_sets_to_unpivotContext(Context, State);
		EnterRule(_localctx, 362, RULE_column_sets_to_unpivot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3379;
			Match(OPAR);
			State = 3380;
			expression(0);
			State = 3382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 3381;
				as_alias();
				}
			}

			State = 3391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3384;
				Match(COMMA);
				State = 3385;
				expression(0);
				State = 3387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
					{
					State = 3386;
					_localctx.row_value_alias = identifier();
					}
				}

				}
				}
				State = 3393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3394;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_operatorContext : ParserRuleContext {
		public ExpressionContext percent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(BigQueryParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(BigQueryParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BigQueryParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Tablesample_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTablesample_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTablesample_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablesample_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_operatorContext tablesample_operator() {
		Tablesample_operatorContext _localctx = new Tablesample_operatorContext(Context, State);
		EnterRule(_localctx, 364, RULE_tablesample_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3396;
			Match(TABLESAMPLE);
			State = 3397;
			Match(SYSTEM);
			State = 3398;
			Match(OPAR);
			State = 3399;
			_localctx.percent = expression(0);
			State = 3400;
			Match(PERCENT);
			State = 3401;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Option_parameterContext[] option_parameter() {
			return GetRuleContexts<Option_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Option_parameterContext option_parameter(int i) {
			return GetRuleContext<Option_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Option_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOption_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOption_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_parametersContext option_parameters() {
		Option_parametersContext _localctx = new Option_parametersContext(Context, State);
		EnterRule(_localctx, 366, RULE_option_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3403;
			option_parameter();
			State = 3408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3404;
				Match(COMMA);
				State = 3405;
				option_parameter();
				}
				}
				State = 3410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Option_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOption_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOption_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_parameterContext option_parameter() {
		Option_parameterContext _localctx = new Option_parameterContext(Context, State);
		EnterRule(_localctx, 368, RULE_option_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3411;
			identifier();
			State = 3412;
			Match(EQ);
			State = 3413;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_itemContext[] select_list_item() {
			return GetRuleContexts<Select_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_list_itemContext select_list_item(int i) {
			return GetRuleContext<Select_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 370, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3415;
			select_list_item();
			State = 3420;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,386,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3416;
					Match(COMMA);
					State = 3417;
					select_list_item();
					}
					} 
				}
				State = 3422;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,386,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_allContext select_all() {
			return GetRuleContext<Select_allContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		public Select_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_itemContext select_list_item() {
		Select_list_itemContext _localctx = new Select_list_itemContext(Context, State);
		EnterRule(_localctx, 372, RULE_select_list_item);
		try {
			State = 3428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3423;
				select_all();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3424;
				expression(0);
				State = 3426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
				case 1:
					{
					State = 3425;
					as_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_allContext : ParserRuleContext {
		public Path_expressionsContext column_names;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public As_column_namesContext as_column_names() {
			return GetRuleContext<As_column_namesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionsContext path_expressions() {
			return GetRuleContext<Path_expressionsContext>(0);
		}
		public Select_allContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_all; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterSelect_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitSelect_all(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_all(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_allContext select_all() {
		Select_allContext _localctx = new Select_allContext(Context, State);
		EnterRule(_localctx, 374, RULE_select_all);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -66768888L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -4469822630165217281L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 536870911L) != 0)) {
				{
				State = 3430;
				expression(0);
				State = 3431;
				Match(DOT);
				}
			}

			State = 3435;
			Match(STAR);
			State = 3441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				{
				State = 3436;
				Match(EXCEPT);
				State = 3437;
				Match(OPAR);
				State = 3438;
				_localctx.column_names = path_expressions();
				State = 3439;
				Match(CPAR);
				}
				break;
			}
			State = 3448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
			case 1:
				{
				State = 3443;
				Match(REPLACE);
				State = 3444;
				Match(OPAR);
				State = 3445;
				as_column_names();
				State = 3446;
				Match(CPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BigQueryParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(BigQueryParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNOT() { return GetToken(BigQueryParser.BNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_functionContext window_function() {
			return GetRuleContext<Window_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_expressionContext case_expression() {
			return GetRuleContext<Case_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoalesceContext coalesce() {
			return GetRuleContext<CoalesceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BigQueryParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(BigQueryParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(BigQueryParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(BigQueryParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(BigQueryParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(BigQueryParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND() { return GetToken(BigQueryParser.BAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BXOR() { return GetToken(BigQueryParser.BXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR() { return GetToken(BigQueryParser.BOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BigQueryParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(BigQueryParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(BigQueryParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(BigQueryParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BigQueryParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(BigQueryParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BigQueryParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBR() { return GetToken(BigQueryParser.OBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBR() { return GetToken(BigQueryParser.CBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 376;
		EnterRecursionRule(_localctx, 376, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,392,Context) ) {
			case 1:
				{
				State = 3451;
				Match(OPAR);
				State = 3452;
				query_expression(0);
				State = 3453;
				Match(CPAR);
				}
				break;
			case 2:
				{
				State = 3455;
				select();
				}
				break;
			case 3:
				{
				State = 3456;
				path_expression();
				}
				break;
			case 4:
				{
				State = 3457;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12296L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3458;
				expression(22);
				}
				break;
			case 5:
				{
				State = 3459;
				Match(NOT);
				State = 3460;
				expression(12);
				}
				break;
			case 6:
				{
				State = 3461;
				Match(EXISTS);
				State = 3462;
				Match(OPAR);
				State = 3463;
				expression(0);
				State = 3464;
				Match(CPAR);
				}
				break;
			case 7:
				{
				State = 3466;
				Match(UNNEST);
				State = 3467;
				Match(OPAR);
				State = 3468;
				expression(0);
				State = 3469;
				Match(CPAR);
				}
				break;
			case 8:
				{
				State = 3471;
				function_call();
				}
				break;
			case 9:
				{
				State = 3472;
				window_function();
				}
				break;
			case 10:
				{
				State = 3473;
				literal();
				}
				break;
			case 11:
				{
				State = 3474;
				case_expression();
				}
				break;
			case 12:
				{
				State = 3475;
				coalesce();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 3557;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,401,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 3555;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3478;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 3479;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3088L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 3480;
						expression(22);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3481;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 3482;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 3483;
						expression(21);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3484;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 3489;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case LT:
							{
							State = 3485;
							Match(LT);
							State = 3486;
							Match(LT);
							}
							break;
						case GT:
							{
							State = 3487;
							Match(GT);
							State = 3488;
							Match(GT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3491;
						expression(20);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3492;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 3493;
						Match(BAND);
						State = 3494;
						expression(19);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3495;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 3496;
						Match(BXOR);
						State = 3497;
						expression(18);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3498;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 3499;
						Match(BOR);
						State = 3500;
						expression(17);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3501;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 3512;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case EQ:
							{
							State = 3502;
							Match(EQ);
							}
							break;
						case NEQ:
							{
							State = 3503;
							Match(NEQ);
							}
							break;
						case LT:
							{
							State = 3504;
							Match(LT);
							}
							break;
						case GT:
							{
							State = 3505;
							Match(GT);
							}
							break;
						case LTE:
							{
							State = 3506;
							Match(LTE);
							}
							break;
						case GTE:
							{
							State = 3507;
							Match(GTE);
							}
							break;
						case BETWEEN:
						case IN:
						case LIKE:
						case NOT:
							{
							State = 3509;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==NOT) {
								{
								State = 3508;
								Match(NOT);
								}
							}

							State = 3511;
							_la = TokenStream.LA(1);
							if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 17626545782785L) != 0)) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 3514;
						expression(16);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3515;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 3516;
						Match(IS);
						State = 3518;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 3517;
							Match(NOT);
							}
						}

						State = 3520;
						Match(DISTINCT);
						State = 3521;
						Match(FROM);
						State = 3522;
						expression(14);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3523;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 3524;
						Match(AND);
						State = 3525;
						expression(12);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3526;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 3527;
						Match(OR);
						State = 3528;
						expression(11);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3529;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 3531;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 3530;
							Match(NOT);
							}
						}

						State = 3533;
						Match(LIKE);
						State = 3534;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 3535;
						expression(7);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3536;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 3537;
						Match(DOT);
						State = 3538;
						path_expression();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3539;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 3540;
						Match(OBR);
						State = 3541;
						expression(0);
						State = 3542;
						Match(CBR);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3544;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 3545;
						Match(IS);
						State = 3547;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 3546;
							Match(NOT);
							}
						}

						State = 3549;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 72057595111669761L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3550;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 3552;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AS) {
							{
							State = 3551;
							Match(AS);
							}
						}

						State = 3554;
						_localctx.alias = identifier();
						}
						break;
					}
					} 
				}
				State = 3559;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,401,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 378, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3560;
			expression(0);
			State = 3565;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,402,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3561;
					Match(COMMA);
					State = 3562;
					expression(0);
					}
					} 
				}
				State = 3567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,402,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_expressionContext : ParserRuleContext {
		public ExpressionContext expr_to_match;
		public ExpressionContext result;
		public ExpressionContext else_result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(BigQueryParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(BigQueryParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(BigQueryParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(BigQueryParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		public Case_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_expressionContext case_expression() {
		Case_expressionContext _localctx = new Case_expressionContext(Context, State);
		EnterRule(_localctx, 380, RULE_case_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3568;
			Match(CASE);
			State = 3569;
			expression(0);
			State = 3575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3570;
				Match(WHEN);
				State = 3571;
				_localctx.expr_to_match = expression(0);
				State = 3572;
				Match(THEN);
				State = 3573;
				_localctx.result = expression(0);
				}
				}
				State = 3577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 3581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3579;
				Match(ELSE);
				State = 3580;
				_localctx.else_result = expression(0);
				}
			}

			State = 3583;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoalesceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(BigQueryParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public CoalesceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coalesce; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCoalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCoalesce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoalesceContext coalesce() {
		CoalesceContext _localctx = new CoalesceContext(Context, State);
		EnterRule(_localctx, 382, RULE_coalesce);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3585;
			Match(COALESCE);
			State = 3586;
			Match(OPAR);
			State = 3587;
			expressions();
			State = 3588;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expressions_as_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext[] as_alias() {
			return GetRuleContexts<As_aliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias(int i) {
			return GetRuleContext<As_aliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Expressions_as_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions_as_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions_as_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions_as_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions_as_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expressions_as_aliasContext expressions_as_alias() {
		Expressions_as_aliasContext _localctx = new Expressions_as_aliasContext(Context, State);
		EnterRule(_localctx, 384, RULE_expressions_as_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3590;
			expressions();
			State = 3592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
				{
				State = 3591;
				as_alias();
				}
			}

			State = 3601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3594;
				Match(COMMA);
				State = 3595;
				expressions();
				State = 3597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) {
					{
					State = 3596;
					as_alias();
					}
				}

				}
				}
				State = 3603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expressions_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASC() { return GetTokens(BigQueryParser.ASC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC(int i) {
			return GetToken(BigQueryParser.ASC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DESC() { return GetTokens(BigQueryParser.DESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC(int i) {
			return GetToken(BigQueryParser.DESC, i);
		}
		public Expressions_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterExpressions_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitExpressions_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions_asc_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expressions_asc_descContext expressions_asc_desc() {
		Expressions_asc_descContext _localctx = new Expressions_asc_descContext(Context, State);
		EnterRule(_localctx, 386, RULE_expressions_asc_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3604;
			expression(0);
			State = 3606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3605;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3608;
				Match(COMMA);
				State = 3609;
				expression(0);
				State = 3611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					State = 3610;
					_la = TokenStream.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 3617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Byte_literalContext byte_literal() {
			return GetRuleContext<Byte_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Big_numeric_literalContext big_numeric_literal() {
			return GetRuleContext<Big_numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_literalContext array_literal() {
			return GetRuleContext<Array_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_literalContext struct_literal() {
			return GetRuleContext<Struct_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_literalContext date_literal() {
			return GetRuleContext<Date_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Time_literalContext time_literal() {
			return GetRuleContext<Time_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_literalContext datetime_literal() {
			return GetRuleContext<Datetime_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Timestamp_literalContext timestamp_literal() {
			return GetRuleContext<Timestamp_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_literalContext range_literal() {
			return GetRuleContext<Range_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interval_literalContext interval_literal() {
			return GetRuleContext<Interval_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Json_literalContext json_literal() {
			return GetRuleContext<Json_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BigQueryParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(BigQueryParser.FLOATING_POINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INF() { return GetToken(BigQueryParser.INF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAN() { return GetToken(BigQueryParser.NAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 388, RULE_literal);
		try {
			State = 3639;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3618;
				string_literal();
				}
				break;
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3619;
				byte_literal();
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3620;
				numeric_literal();
				}
				break;
			case BIGNUMERIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3621;
				big_numeric_literal();
				}
				break;
			case OBR:
			case ARRAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3622;
				array_literal();
				}
				break;
			case OPAR:
			case STRUCT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3623;
				struct_literal();
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3624;
				date_literal();
				}
				break;
			case TIME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3625;
				time_literal();
				}
				break;
			case DATETIME:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3626;
				datetime_literal();
				}
				break;
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3627;
				timestamp_literal();
				}
				break;
			case RANGE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3628;
				range_literal();
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3629;
				interval_literal();
				}
				break;
			case JSON:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3630;
				json_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3631;
				Match(INTEGER_LITERAL);
				}
				break;
			case FLOATING_POINT_LITERAL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3632;
				Match(FLOATING_POINT_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3633;
				Match(NULL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3634;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3635;
				Match(FALSE);
				}
				break;
			case INF:
				EnterOuterAlt(_localctx, 19);
				{
				State = 3636;
				Match(INF);
				}
				break;
			case NAN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 3637;
				Match(NAN);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 21);
				{
				State = 3638;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(BigQueryParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 390, RULE_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3641;
			Match(NUMERIC);
			State = 3642;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Big_numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGNUMERIC() { return GetToken(BigQueryParser.BIGNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Big_numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_big_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterBig_numeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitBig_numeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBig_numeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Big_numeric_literalContext big_numeric_literal() {
		Big_numeric_literalContext _localctx = new Big_numeric_literalContext(Context, State);
		EnterRule(_localctx, 392, RULE_big_numeric_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3644;
			Match(BIGNUMERIC);
			State = 3645;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBR() { return GetToken(BigQueryParser.OBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBR() { return GetToken(BigQueryParser.CBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		public Array_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterArray_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitArray_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_literalContext array_literal() {
		Array_literalContext _localctx = new Array_literalContext(Context, State);
		EnterRule(_localctx, 394, RULE_array_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARRAY) {
				{
				State = 3647;
				Match(ARRAY);
				State = 3652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3648;
					Match(LT);
					State = 3649;
					data_type();
					State = 3650;
					Match(GT);
					}
				}

				}
			}

			State = 3656;
			Match(OBR);
			State = 3658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -66768888L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -4469822630165217281L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 536870911L) != 0)) {
				{
				State = 3657;
				expressions();
				}
			}

			State = 3660;
			Match(CBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Struct_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitStruct_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_literalContext struct_literal() {
		Struct_literalContext _localctx = new Struct_literalContext(Context, State);
		EnterRule(_localctx, 396, RULE_struct_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRUCT) {
				{
				State = 3662;
				Match(STRUCT);
				State = 3674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3663;
					Match(LT);
					State = 3664;
					data_type();
					State = 3669;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3665;
						Match(COMMA);
						State = 3666;
						data_type();
						}
						}
						State = 3671;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3672;
					Match(GT);
					}
				}

				}
			}

			State = 3678;
			Match(OPAR);
			State = 3679;
			expressions();
			State = 3680;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 398, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,420,Context) ) {
			case 1:
				{
				State = 3682;
				any_identifier();
				State = 3694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 3683;
					Match(LT);
					State = 3684;
					data_type();
					State = 3689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3685;
						Match(COMMA);
						State = 3686;
						data_type();
						}
						}
						State = 3691;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3692;
					Match(GT);
					}
				}

				}
				break;
			case 2:
				{
				State = 3696;
				identifier();
				State = 3697;
				data_type();
				}
				break;
			case 3:
				{
				State = 3699;
				identifier();
				}
				break;
			}
			State = 3706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,421,Context) ) {
			case 1:
				{
				State = 3702;
				Match(OPAR);
				State = 3703;
				expressions();
				State = 3704;
				Match(CPAR);
				}
				break;
			}
			State = 3710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				{
				State = 3708;
				Match(COLLATE);
				State = 3709;
				string_literal();
				}
				break;
			}
			State = 3714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				{
				State = 3712;
				Match(NOT);
				State = 3713;
				Match(NULL);
				}
				break;
			}
			State = 3721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,424,Context) ) {
			case 1:
				{
				State = 3716;
				Match(OPTIONS);
				State = 3717;
				Match(OPAR);
				State = 3718;
				option_parameters();
				State = 3719;
				Match(CPAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved() {
			return GetRuleContext<ReservedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAny_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAny_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_identifierContext any_identifier() {
		Any_identifierContext _localctx = new Any_identifierContext(Context, State);
		EnterRule(_localctx, 400, RULE_any_identifier);
		try {
			State = 3725;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3723;
				reserved();
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case LOAD:
			case OVERWRITE:
			case PARTITIONS:
			case FILES:
			case EXPORT:
			case DECLARE:
			case EXECUTE:
			case IMMEDIATE:
			case EXCEPTION:
			case ERROR:
			case CALL:
			case ELSEIF:
			case LOOP:
			case WHILE:
			case DO:
			case REPEAT:
			case UNTIL:
			case BREAK:
			case LEAVE:
			case CONTINUE:
			case ITERATE:
			case RETURN:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case MESSAGE:
			case RAISE:
			case INSERT:
			case VALUES:
			case DELETE:
			case TRUNCATE:
			case UPDATE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case REVOKE:
			case MODEL:
			case TRANSFORM:
			case INPUT:
			case OUTPUT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3724;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BigQueryParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LITERAL() { return GetToken(BigQueryParser.RAW_STRING_LITERAL, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 402, RULE_string_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3727;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING_LITERAL || _la==RAW_STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Date_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDate_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_literalContext date_literal() {
		Date_literalContext _localctx = new Date_literalContext(Context, State);
		EnterRule(_localctx, 404, RULE_date_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3729;
			Match(DATE);
			State = 3730;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Time_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(BigQueryParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Time_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Time_literalContext time_literal() {
		Time_literalContext _localctx = new Time_literalContext(Context, State);
		EnterRule(_localctx, 406, RULE_time_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3732;
			Match(TIME);
			State = 3733;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDatetime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDatetime_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_literalContext datetime_literal() {
		Datetime_literalContext _localctx = new Datetime_literalContext(Context, State);
		EnterRule(_localctx, 408, RULE_datetime_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3735;
			Match(DATETIME);
			State = 3736;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timestamp_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestamp_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterTimestamp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitTimestamp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestamp_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timestamp_literalContext timestamp_literal() {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(Context, State);
		EnterRule(_localctx, 410, RULE_timestamp_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3738;
			Match(TIMESTAMP);
			State = 3739;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BigQueryParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BigQueryParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		public Range_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitRange_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_literalContext range_literal() {
		Range_literalContext _localctx = new Range_literalContext(Context, State);
		EnterRule(_localctx, 412, RULE_range_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3741;
			Match(RANGE);
			State = 3742;
			Match(LT);
			State = 3743;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & 11L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3744;
			Match(GT);
			State = 3745;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(BigQueryParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_partContext[] datetime_part() {
			return GetRuleContexts<Datetime_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datetime_partContext datetime_part(int i) {
			return GetRuleContext<Datetime_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		public Interval_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterInterval_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitInterval_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interval_literalContext interval_literal() {
		Interval_literalContext _localctx = new Interval_literalContext(Context, State);
		EnterRule(_localctx, 414, RULE_interval_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3747;
			Match(INTERVAL);
			State = 3756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
			case 1:
				{
				State = 3748;
				expression(0);
				State = 3749;
				datetime_part();
				}
				break;
			case 2:
				{
				State = 3751;
				string_literal();
				State = 3752;
				datetime_part();
				State = 3753;
				Match(TO);
				State = 3754;
				datetime_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Json_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(BigQueryParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public Json_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterJson_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitJson_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Json_literalContext json_literal() {
		Json_literalContext _localctx = new Json_literalContext(Context, State);
		EnterRule(_localctx, 416, RULE_json_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3758;
			Match(JSON);
			State = 3759;
			string_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Byte_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES_LITERAL() { return GetToken(BigQueryParser.BYTES_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_BYTES_LITERAL() { return GetToken(BigQueryParser.RAW_BYTES_LITERAL, 0); }
		public Byte_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byte_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterByte_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitByte_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByte_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Byte_literalContext byte_literal() {
		Byte_literalContext _localctx = new Byte_literalContext(Context, State);
		EnterRule(_localctx, 418, RULE_byte_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3761;
			_la = TokenStream.LA(1);
			if ( !(_la==BYTES_LITERAL || _la==RAW_BYTES_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_IDENTIFIER() { return GetToken(BigQueryParser.UNQUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(BigQueryParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGNUMERIC() { return GetToken(BigQueryParser.BIGNUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(BigQueryParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(BigQueryParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(BigQueryParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(BigQueryParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(BigQueryParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(BigQueryParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(BigQueryParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(BigQueryParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(BigQueryParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(BigQueryParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(BigQueryParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(BigQueryParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(BigQueryParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(BigQueryParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(BigQueryParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(BigQueryParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(BigQueryParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT() { return GetToken(BigQueryParser.STRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORRESPONDING() { return GetToken(BigQueryParser.CORRESPONDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIFFERENTIAL_PRIVACY() { return GetToken(BigQueryParser.DIFFERENTIAL_PRIVACY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(BigQueryParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(BigQueryParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(BigQueryParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIVOT() { return GetToken(BigQueryParser.PIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNPIVOT() { return GetToken(BigQueryParser.UNPIVOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(BigQueryParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(BigQueryParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(BigQueryParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(BigQueryParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(BigQueryParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(BigQueryParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(BigQueryParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(BigQueryParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(BigQueryParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(BigQueryParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(BigQueryParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED() { return GetToken(BigQueryParser.ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(BigQueryParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(BigQueryParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(BigQueryParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(BigQueryParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(BigQueryParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_AGG() { return GetToken(BigQueryParser.ARRAY_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(BigQueryParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(BigQueryParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE() { return GetToken(BigQueryParser.CLONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(BigQueryParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(BigQueryParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(BigQueryParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(BigQueryParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VECTOR() { return GetToken(BigQueryParser.VECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(BigQueryParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVATION() { return GetToken(BigQueryParser.RESERVATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICIES() { return GetToken(BigQueryParser.POLICIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(BigQueryParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(BigQueryParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BigQueryParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(BigQueryParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(BigQueryParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(BigQueryParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(BigQueryParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(BigQueryParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(BigQueryParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(BigQueryParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigQueryParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(BigQueryParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(BigQueryParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BigQueryParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(BigQueryParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(BigQueryParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(BigQueryParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(BigQueryParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(BigQueryParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(BigQueryParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(BigQueryParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(BigQueryParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORING() { return GetToken(BigQueryParser.STORING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(BigQueryParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(BigQueryParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(BigQueryParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(BigQueryParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION() { return GetToken(BigQueryParser.ORGANIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROJECT() { return GetToken(BigQueryParser.PROJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BI_CAPACITY() { return GetToken(BigQueryParser.BI_CAPACITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_VALUE() { return GetToken(BigQueryParser.ANY_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(BigQueryParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(BigQueryParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_CONCAT_AGG() { return GetToken(BigQueryParser.ARRAY_CONCAT_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(BigQueryParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(BigQueryParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(BigQueryParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(BigQueryParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTIF() { return GetToken(BigQueryParser.COUNTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(BigQueryParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(BigQueryParser.LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_BY() { return GetToken(BigQueryParser.MAX_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_BY() { return GetToken(BigQueryParser.MIN_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_AGG() { return GetToken(BigQueryParser.STRING_AGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(BigQueryParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEZONE() { return GetToken(BigQueryParser.TIMEZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(BigQueryParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(BigQueryParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(BigQueryParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERWRITE() { return GetToken(BigQueryParser.OVERWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(BigQueryParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILES() { return GetToken(BigQueryParser.FILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(BigQueryParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(BigQueryParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(BigQueryParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(BigQueryParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(BigQueryParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(BigQueryParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(BigQueryParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(BigQueryParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(BigQueryParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BigQueryParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(BigQueryParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(BigQueryParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(BigQueryParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(BigQueryParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(BigQueryParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(BigQueryParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE() { return GetToken(BigQueryParser.ITERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BigQueryParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(BigQueryParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(BigQueryParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(BigQueryParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(BigQueryParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(BigQueryParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(BigQueryParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(BigQueryParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(BigQueryParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(BigQueryParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(BigQueryParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(BigQueryParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(BigQueryParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(BigQueryParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(BigQueryParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL() { return GetToken(BigQueryParser.MODEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(BigQueryParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(BigQueryParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(BigQueryParser.OUTPUT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 420, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3763;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 9079256848778919935L) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & -1L) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 27262975L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_aliasContext : ParserRuleContext {
		public IdentifierContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		public As_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_aliasContext as_alias() {
		As_aliasContext _localctx = new As_aliasContext(Context, State);
		EnterRule(_localctx, 422, RULE_as_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3765;
				Match(AS);
				}
			}

			State = 3768;
			_localctx.alias = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 424, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3770;
			function_name();
			State = 3771;
			Match(OPAR);
			State = 3773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -66767864L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -4469822630165217281L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 536870911L) != 0)) {
				{
				State = 3772;
				function_arguments();
				}
			}

			State = 3775;
			Match(CPAR);
			State = 3778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,429,Context) ) {
			case 1:
				{
				State = 3776;
				Match(OVER);
				State = 3777;
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved() {
			return GetRuleContext<ReservedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 426, RULE_function_name);
		try {
			State = 3782;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3780;
				reserved();
				}
				break;
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case LOAD:
			case OVERWRITE:
			case PARTITIONS:
			case FILES:
			case EXPORT:
			case DECLARE:
			case EXECUTE:
			case IMMEDIATE:
			case EXCEPTION:
			case ERROR:
			case CALL:
			case ELSEIF:
			case LOOP:
			case WHILE:
			case DO:
			case REPEAT:
			case UNTIL:
			case BREAK:
			case LEAVE:
			case CONTINUE:
			case ITERATE:
			case RETURN:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case MESSAGE:
			case RAISE:
			case INSERT:
			case VALUES:
			case DELETE:
			case TRUNCATE:
			case UPDATE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case REVOKE:
			case MODEL:
			case TRANSFORM:
			case INPUT:
			case OUTPUT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3781;
				path_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionsContext function_expressions() {
			return GetRuleContext<Function_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_clausesContext optional_clauses() {
			return GetRuleContext<Optional_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 428, RULE_function_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
			case 1:
				{
				State = 3784;
				Match(DISTINCT);
				}
				break;
			}
			State = 3787;
			function_expressions();
			State = 3788;
			optional_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionContext[] function_expression() {
			return GetRuleContexts<Function_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_expressionContext function_expression(int i) {
			return GetRuleContext<Function_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Function_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_expressionsContext function_expressions() {
		Function_expressionsContext _localctx = new Function_expressionsContext(Context, State);
		EnterRule(_localctx, 430, RULE_function_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3790;
			function_expression();
			State = 3795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3791;
				Match(COMMA);
				State = 3792;
				function_expression();
				}
				}
				State = 3797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(BigQueryParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(BigQueryParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(BigQueryParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(BigQueryParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(BigQueryParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Format_clauseContext format_clause() {
			return GetRuleContext<Format_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BigQueryParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEZONE() { return GetToken(BigQueryParser.TIMEZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Function_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFunction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFunction_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_expressionContext function_expression() {
		Function_expressionContext _localctx = new Function_expressionContext(Context, State);
		EnterRule(_localctx, 432, RULE_function_expression);
		int _la;
		try {
			State = 3824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3800;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 3798;
					Match(STAR);
					}
					break;
				case BNOT:
				case PLUS:
				case SUB:
				case OPAR:
				case OBR:
				case ALL:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASSERT_ROWS_MODIFIED:
				case AT:
				case BETWEEN:
				case BY:
				case CASE:
				case CAST:
				case COLLATE:
				case CONTAINS:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT:
				case DEFAULT:
				case DEFINE:
				case DESC:
				case DISTINCT:
				case ELSE:
				case END:
				case ENUM:
				case ESCAPE:
				case EXCEPT:
				case EXCLUDE:
				case EXISTS:
				case EXTRACT:
				case FALSE:
				case FETCH:
				case FOLLOWING:
				case FOR:
				case FROM:
				case FULL:
				case GROUP:
				case GROUPING:
				case GROUPS:
				case HASH:
				case HAVING:
				case IF:
				case IGNORE:
				case IN:
				case INNER:
				case INTERSECT:
				case INTERVAL:
				case INTO:
				case IS:
				case JOIN:
				case LATERAL:
				case LEFT:
				case LIKE:
				case LIMIT:
				case LOOKUP:
				case MERGE:
				case NATURAL:
				case NEW:
				case NO:
				case NOT:
				case NULL:
				case NULLS:
				case OF:
				case ON:
				case OR:
				case ORDER:
				case OUTER:
				case OVER:
				case PARTITION:
				case PRECEDING:
				case PROTO:
				case QUALIFY:
				case RANGE:
				case RECURSIVE:
				case RESPECT:
				case RIGHT:
				case ROLLUP:
				case ROWS:
				case SELECT:
				case SET:
				case SOME:
				case STRUCT:
				case TABLESAMPLE:
				case THEN:
				case TO:
				case TREAT:
				case TRUE:
				case UNBOUNDED:
				case UNION:
				case UNNEST:
				case USING:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case WITHIN:
				case BIGNUMERIC:
				case DATE:
				case DATETIME:
				case NUMERIC:
				case TIMESTAMP:
				case YEAR:
				case QUARTER:
				case MONTH:
				case WEEK:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case MILLISECOND:
				case MICROSECOND:
				case JSON:
				case OFFSET:
				case NAME:
				case STRICT:
				case CORRESPONDING:
				case DIFFERENTIAL_PRIVACY:
				case OPTIONS:
				case VALUE:
				case REPLACE:
				case SYSTEM:
				case PERCENT:
				case PIVOT:
				case UNPIVOT:
				case SYSTEM_TIME:
				case ROW:
				case INCLUDE:
				case FORMAT:
				case SETS:
				case AVG:
				case SCHEMA:
				case TEMP:
				case TEMPORARY:
				case TABLE:
				case CONSTRAINT:
				case ENFORCED:
				case PRIMARY:
				case KEY:
				case FOREIGN:
				case REFERENCES:
				case CLUSTER:
				case CONNECTION:
				case ARRAY_AGG:
				case COPY:
				case SNAPSHOT:
				case CLONE:
				case VIEW:
				case DROP:
				case SEARCH:
				case INDEX:
				case VECTOR:
				case ASSIGNMENT:
				case RESERVATION:
				case ACCESS:
				case POLICY:
				case POLICIES:
				case PROCEDURE:
				case FUNCTION:
				case REPLICA:
				case COLUMNS:
				case RETURNS:
				case DETERMINISTIC:
				case LANGUAGE:
				case REMOTE:
				case AGGREGATE:
				case TYPE:
				case OUT:
				case INOUT:
				case BEGIN:
				case SECURITY:
				case INVOKER:
				case COALESCE:
				case NULLIF:
				case IFNULL:
				case GRANT:
				case FILTER:
				case COLUMN:
				case STORING:
				case ALTER:
				case ADD:
				case RENAME:
				case DATA:
				case ORGANIZATION:
				case PROJECT:
				case BI_CAPACITY:
				case ANY_VALUE:
				case MAX:
				case MIN:
				case ARRAY_CONCAT_AGG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case COUNTIF:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case MAX_BY:
				case MIN_BY:
				case STRING_AGG:
				case SUM:
				case TIMEZONE:
				case TIME:
				case ASSERT:
				case LOAD:
				case OVERWRITE:
				case PARTITIONS:
				case FILES:
				case EXPORT:
				case DECLARE:
				case EXECUTE:
				case IMMEDIATE:
				case EXCEPTION:
				case ERROR:
				case CALL:
				case ELSEIF:
				case LOOP:
				case WHILE:
				case DO:
				case REPEAT:
				case UNTIL:
				case BREAK:
				case LEAVE:
				case CONTINUE:
				case ITERATE:
				case RETURN:
				case TRANSACTION:
				case COMMIT:
				case ROLLBACK:
				case MESSAGE:
				case RAISE:
				case INSERT:
				case VALUES:
				case DELETE:
				case TRUNCATE:
				case UPDATE:
				case MATCHED:
				case TARGET:
				case SOURCE:
				case REVOKE:
				case MODEL:
				case TRANSFORM:
				case INPUT:
				case OUTPUT:
				case NAN:
				case INF:
				case UNQUOTED_IDENTIFIER:
				case QUOTED_IDENTIFIER:
				case STRING_LITERAL:
				case RAW_STRING_LITERAL:
				case BYTES_LITERAL:
				case RAW_BYTES_LITERAL:
				case INTEGER_LITERAL:
				case FLOATING_POINT_LITERAL:
					{
					State = 3799;
					expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3821;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FROM:
					{
					State = 3802;
					Match(FROM);
					State = 3803;
					expression(0);
					}
					break;
				case ARROW:
					{
					State = 3804;
					Match(ARROW);
					State = 3805;
					expression(0);
					}
					break;
				case HAVING:
					{
					State = 3806;
					Match(HAVING);
					State = 3807;
					_la = TokenStream.LA(1);
					if ( !(_la==MAX || _la==MIN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3808;
					expression(0);
					}
					break;
				case AS:
					{
					State = 3809;
					Match(AS);
					State = 3810;
					data_type();
					State = 3812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FORMAT) {
						{
						State = 3811;
						format_clause();
						}
					}

					State = 3817;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT) {
						{
						State = 3814;
						Match(AT);
						State = 3815;
						Match(TIMEZONE);
						State = 3816;
						expression(0);
						}
					}

					}
					break;
				case IGNORE:
				case RESPECT:
					{
					State = 3819;
					_la = TokenStream.LA(1);
					if ( !(_la==IGNORE || _la==RESPECT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3820;
					Match(NULLS);
					}
					break;
				case COMMA:
				case CPAR:
				case LIMIT:
				case ORDER:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3823;
				query_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keysContext order_by_keys() {
			return GetRuleContext<Order_by_keysContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public Optional_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOptional_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOptional_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptional_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optional_clausesContext optional_clauses() {
		Optional_clausesContext _localctx = new Optional_clausesContext(Context, State);
		EnterRule(_localctx, 434, RULE_optional_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3826;
				order_by_keys();
				}
			}

			State = 3830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3829;
				limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 436, RULE_limit_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3832;
			Match(LIMIT);
			State = 3833;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_keysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keyContext[] order_by_key() {
			return GetRuleContexts<Order_by_keyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_keyContext order_by_key(int i) {
			return GetRuleContext<Order_by_keyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Order_by_keysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_keys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_keys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_keys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_keysContext order_by_keys() {
		Order_by_keysContext _localctx = new Order_by_keysContext(Context, State);
		EnterRule(_localctx, 438, RULE_order_by_keys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3835;
			order_by_key();
			State = 3840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3836;
				Match(COMMA);
				State = 3837;
				order_by_key();
				}
				}
				State = 3842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_keyContext : ParserRuleContext {
		public ExpressionContext key;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BigQueryParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(BigQueryParser.DESC, 0); }
		public Order_by_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_keyContext order_by_key() {
		Order_by_keyContext _localctx = new Order_by_keyContext(Context, State);
		EnterRule(_localctx, 440, RULE_order_by_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3843;
			Match(ORDER);
			State = 3844;
			Match(BY);
			State = 3845;
			_localctx.key = expression(0);
			State = 3847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 3846;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BigQueryParser.STAR, 0); }
		public Window_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitWindow_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_functionContext window_function() {
		Window_functionContext _localctx = new Window_functionContext(Context, State);
		EnterRule(_localctx, 442, RULE_window_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3849;
			identifier();
			State = 3850;
			Match(OPAR);
			State = 3853;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BNOT:
			case PLUS:
			case SUB:
			case OPAR:
			case OBR:
			case ALL:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASSERT_ROWS_MODIFIED:
			case AT:
			case BETWEEN:
			case BY:
			case CASE:
			case CAST:
			case COLLATE:
			case CONTAINS:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT:
			case DEFAULT:
			case DEFINE:
			case DESC:
			case DISTINCT:
			case ELSE:
			case END:
			case ENUM:
			case ESCAPE:
			case EXCEPT:
			case EXCLUDE:
			case EXISTS:
			case EXTRACT:
			case FALSE:
			case FETCH:
			case FOLLOWING:
			case FOR:
			case FROM:
			case FULL:
			case GROUP:
			case GROUPING:
			case GROUPS:
			case HASH:
			case HAVING:
			case IF:
			case IGNORE:
			case IN:
			case INNER:
			case INTERSECT:
			case INTERVAL:
			case INTO:
			case IS:
			case JOIN:
			case LATERAL:
			case LEFT:
			case LIKE:
			case LIMIT:
			case LOOKUP:
			case MERGE:
			case NATURAL:
			case NEW:
			case NO:
			case NOT:
			case NULL:
			case NULLS:
			case OF:
			case ON:
			case OR:
			case ORDER:
			case OUTER:
			case OVER:
			case PARTITION:
			case PRECEDING:
			case PROTO:
			case QUALIFY:
			case RANGE:
			case RECURSIVE:
			case RESPECT:
			case RIGHT:
			case ROLLUP:
			case ROWS:
			case SELECT:
			case SET:
			case SOME:
			case STRUCT:
			case TABLESAMPLE:
			case THEN:
			case TO:
			case TREAT:
			case TRUE:
			case UNBOUNDED:
			case UNION:
			case UNNEST:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case WITHIN:
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case LOAD:
			case OVERWRITE:
			case PARTITIONS:
			case FILES:
			case EXPORT:
			case DECLARE:
			case EXECUTE:
			case IMMEDIATE:
			case EXCEPTION:
			case ERROR:
			case CALL:
			case ELSEIF:
			case LOOP:
			case WHILE:
			case DO:
			case REPEAT:
			case UNTIL:
			case BREAK:
			case LEAVE:
			case CONTINUE:
			case ITERATE:
			case RETURN:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case MESSAGE:
			case RAISE:
			case INSERT:
			case VALUES:
			case DELETE:
			case TRUNCATE:
			case UPDATE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case REVOKE:
			case MODEL:
			case TRANSFORM:
			case INPUT:
			case OUTPUT:
			case NAN:
			case INF:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
			case STRING_LITERAL:
			case RAW_STRING_LITERAL:
			case BYTES_LITERAL:
			case RAW_BYTES_LITERAL:
			case INTEGER_LITERAL:
			case FLOATING_POINT_LITERAL:
				{
				State = 3851;
				expressions();
				}
				break;
			case STAR:
				{
				State = 3852;
				Match(STAR);
				}
				break;
			case CPAR:
				break;
			default:
				break;
			}
			State = 3855;
			Match(CPAR);
			State = 3856;
			Match(OVER);
			State = 3857;
			over_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public IdentifierContext named_window;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_aliasContext as_alias() {
			return GetRuleContext<As_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 444, RULE_over_clause);
		try {
			State = 3867;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIGNUMERIC:
			case DATE:
			case DATETIME:
			case NUMERIC:
			case TIMESTAMP:
			case YEAR:
			case QUARTER:
			case MONTH:
			case WEEK:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case MILLISECOND:
			case MICROSECOND:
			case JSON:
			case OFFSET:
			case NAME:
			case STRICT:
			case CORRESPONDING:
			case DIFFERENTIAL_PRIVACY:
			case OPTIONS:
			case VALUE:
			case REPLACE:
			case SYSTEM:
			case PERCENT:
			case PIVOT:
			case UNPIVOT:
			case SYSTEM_TIME:
			case ROW:
			case INCLUDE:
			case FORMAT:
			case SETS:
			case AVG:
			case SCHEMA:
			case TEMP:
			case TEMPORARY:
			case TABLE:
			case CONSTRAINT:
			case ENFORCED:
			case PRIMARY:
			case KEY:
			case FOREIGN:
			case REFERENCES:
			case CLUSTER:
			case CONNECTION:
			case ARRAY_AGG:
			case COPY:
			case SNAPSHOT:
			case CLONE:
			case VIEW:
			case DROP:
			case SEARCH:
			case INDEX:
			case VECTOR:
			case ASSIGNMENT:
			case RESERVATION:
			case ACCESS:
			case POLICY:
			case POLICIES:
			case PROCEDURE:
			case FUNCTION:
			case REPLICA:
			case COLUMNS:
			case RETURNS:
			case DETERMINISTIC:
			case LANGUAGE:
			case REMOTE:
			case AGGREGATE:
			case TYPE:
			case OUT:
			case INOUT:
			case BEGIN:
			case SECURITY:
			case INVOKER:
			case COALESCE:
			case NULLIF:
			case IFNULL:
			case GRANT:
			case FILTER:
			case COLUMN:
			case STORING:
			case ALTER:
			case ADD:
			case RENAME:
			case DATA:
			case ORGANIZATION:
			case PROJECT:
			case BI_CAPACITY:
			case ANY_VALUE:
			case MAX:
			case MIN:
			case ARRAY_CONCAT_AGG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case COUNTIF:
			case LOGICAL_AND:
			case LOGICAL_OR:
			case MAX_BY:
			case MIN_BY:
			case STRING_AGG:
			case SUM:
			case TIMEZONE:
			case TIME:
			case ASSERT:
			case LOAD:
			case OVERWRITE:
			case PARTITIONS:
			case FILES:
			case EXPORT:
			case DECLARE:
			case EXECUTE:
			case IMMEDIATE:
			case EXCEPTION:
			case ERROR:
			case CALL:
			case ELSEIF:
			case LOOP:
			case WHILE:
			case DO:
			case REPEAT:
			case UNTIL:
			case BREAK:
			case LEAVE:
			case CONTINUE:
			case ITERATE:
			case RETURN:
			case TRANSACTION:
			case COMMIT:
			case ROLLBACK:
			case MESSAGE:
			case RAISE:
			case INSERT:
			case VALUES:
			case DELETE:
			case TRUNCATE:
			case UPDATE:
			case MATCHED:
			case TARGET:
			case SOURCE:
			case REVOKE:
			case MODEL:
			case TRANSFORM:
			case INPUT:
			case OUTPUT:
			case UNQUOTED_IDENTIFIER:
			case QUOTED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3859;
				_localctx.named_window = identifier();
				State = 3861;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
				case 1:
					{
					State = 3860;
					as_alias();
					}
					break;
				}
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3863;
				Match(OPAR);
				State = 3864;
				window_specification();
				State = 3865;
				Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_clauseContext : ParserRuleContext {
		public ExpressionContext format_string_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(BigQueryParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Format_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterFormat_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitFormat_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormat_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Format_clauseContext format_clause() {
		Format_clauseContext _localctx = new Format_clauseContext(Context, State);
		EnterRule(_localctx, 446, RULE_format_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3869;
			Match(FORMAT);
			State = 3870;
			_localctx.format_string_expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext[] path_expression() {
			return GetRuleContexts<Path_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression(int i) {
			return GetRuleContext<Path_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Path_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPath_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPath_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionsContext path_expressions() {
		Path_expressionsContext _localctx = new Path_expressionsContext(Context, State);
		EnterRule(_localctx, 448, RULE_path_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3872;
			path_expression();
			State = 3877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3873;
				Match(COMMA);
				State = 3874;
				path_expression();
				}
				}
				State = 3879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Path_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BigQueryParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BigQueryParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext[] reserved() {
			return GetRuleContexts<ReservedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReservedContext reserved(int i) {
			return GetRuleContext<ReservedContext>(i);
		}
		public Path_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterPath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitPath_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Path_expressionContext path_expression() {
		Path_expressionContext _localctx = new Path_expressionContext(Context, State);
		EnterRule(_localctx, 450, RULE_path_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3880;
			identifier();
			State = 3888;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,447,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3881;
					Match(DOT);
					State = 3884;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case BIGNUMERIC:
					case DATE:
					case DATETIME:
					case NUMERIC:
					case TIMESTAMP:
					case YEAR:
					case QUARTER:
					case MONTH:
					case WEEK:
					case DAY:
					case HOUR:
					case MINUTE:
					case SECOND:
					case MILLISECOND:
					case MICROSECOND:
					case JSON:
					case OFFSET:
					case NAME:
					case STRICT:
					case CORRESPONDING:
					case DIFFERENTIAL_PRIVACY:
					case OPTIONS:
					case VALUE:
					case REPLACE:
					case SYSTEM:
					case PERCENT:
					case PIVOT:
					case UNPIVOT:
					case SYSTEM_TIME:
					case ROW:
					case INCLUDE:
					case FORMAT:
					case SETS:
					case AVG:
					case SCHEMA:
					case TEMP:
					case TEMPORARY:
					case TABLE:
					case CONSTRAINT:
					case ENFORCED:
					case PRIMARY:
					case KEY:
					case FOREIGN:
					case REFERENCES:
					case CLUSTER:
					case CONNECTION:
					case ARRAY_AGG:
					case COPY:
					case SNAPSHOT:
					case CLONE:
					case VIEW:
					case DROP:
					case SEARCH:
					case INDEX:
					case VECTOR:
					case ASSIGNMENT:
					case RESERVATION:
					case ACCESS:
					case POLICY:
					case POLICIES:
					case PROCEDURE:
					case FUNCTION:
					case REPLICA:
					case COLUMNS:
					case RETURNS:
					case DETERMINISTIC:
					case LANGUAGE:
					case REMOTE:
					case AGGREGATE:
					case TYPE:
					case OUT:
					case INOUT:
					case BEGIN:
					case SECURITY:
					case INVOKER:
					case COALESCE:
					case NULLIF:
					case IFNULL:
					case GRANT:
					case FILTER:
					case COLUMN:
					case STORING:
					case ALTER:
					case ADD:
					case RENAME:
					case DATA:
					case ORGANIZATION:
					case PROJECT:
					case BI_CAPACITY:
					case ANY_VALUE:
					case MAX:
					case MIN:
					case ARRAY_CONCAT_AGG:
					case BIT_AND:
					case BIT_OR:
					case BIT_XOR:
					case COUNT:
					case COUNTIF:
					case LOGICAL_AND:
					case LOGICAL_OR:
					case MAX_BY:
					case MIN_BY:
					case STRING_AGG:
					case SUM:
					case TIMEZONE:
					case TIME:
					case ASSERT:
					case LOAD:
					case OVERWRITE:
					case PARTITIONS:
					case FILES:
					case EXPORT:
					case DECLARE:
					case EXECUTE:
					case IMMEDIATE:
					case EXCEPTION:
					case ERROR:
					case CALL:
					case ELSEIF:
					case LOOP:
					case WHILE:
					case DO:
					case REPEAT:
					case UNTIL:
					case BREAK:
					case LEAVE:
					case CONTINUE:
					case ITERATE:
					case RETURN:
					case TRANSACTION:
					case COMMIT:
					case ROLLBACK:
					case MESSAGE:
					case RAISE:
					case INSERT:
					case VALUES:
					case DELETE:
					case TRUNCATE:
					case UPDATE:
					case MATCHED:
					case TARGET:
					case SOURCE:
					case REVOKE:
					case MODEL:
					case TRANSFORM:
					case INPUT:
					case OUTPUT:
					case UNQUOTED_IDENTIFIER:
					case QUOTED_IDENTIFIER:
						{
						State = 3882;
						identifier();
						}
						break;
					case ALL:
					case AND:
					case ANY:
					case ARRAY:
					case AS:
					case ASC:
					case ASSERT_ROWS_MODIFIED:
					case AT:
					case BETWEEN:
					case BY:
					case CASE:
					case CAST:
					case COLLATE:
					case CONTAINS:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT:
					case DEFAULT:
					case DEFINE:
					case DESC:
					case DISTINCT:
					case ELSE:
					case END:
					case ENUM:
					case ESCAPE:
					case EXCEPT:
					case EXCLUDE:
					case EXISTS:
					case EXTRACT:
					case FALSE:
					case FETCH:
					case FOLLOWING:
					case FOR:
					case FROM:
					case FULL:
					case GROUP:
					case GROUPING:
					case GROUPS:
					case HASH:
					case HAVING:
					case IF:
					case IGNORE:
					case IN:
					case INNER:
					case INTERSECT:
					case INTERVAL:
					case INTO:
					case IS:
					case JOIN:
					case LATERAL:
					case LEFT:
					case LIKE:
					case LIMIT:
					case LOOKUP:
					case MERGE:
					case NATURAL:
					case NEW:
					case NO:
					case NOT:
					case NULL:
					case NULLS:
					case OF:
					case ON:
					case OR:
					case ORDER:
					case OUTER:
					case OVER:
					case PARTITION:
					case PRECEDING:
					case PROTO:
					case QUALIFY:
					case RANGE:
					case RECURSIVE:
					case RESPECT:
					case RIGHT:
					case ROLLUP:
					case ROWS:
					case SELECT:
					case SET:
					case SOME:
					case STRUCT:
					case TABLESAMPLE:
					case THEN:
					case TO:
					case TREAT:
					case TRUE:
					case UNBOUNDED:
					case UNION:
					case UNNEST:
					case USING:
					case WHEN:
					case WHERE:
					case WINDOW:
					case WITH:
					case WITHIN:
						{
						State = 3883;
						reserved();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 3890;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,447,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public As_column_nameContext[] as_column_name() {
			return GetRuleContexts<As_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public As_column_nameContext as_column_name(int i) {
			return GetRuleContext<As_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public As_column_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_column_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_namesContext as_column_names() {
		As_column_namesContext _localctx = new As_column_namesContext(Context, State);
		EnterRule(_localctx, 452, RULE_as_column_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3891;
			as_column_name();
			State = 3896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3892;
				Match(COMMA);
				State = 3893;
				as_column_name();
				}
				}
				State = 3898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_column_nameContext : ParserRuleContext {
		public IdentifierContext column_name;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public As_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterAs_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitAs_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_column_nameContext as_column_name() {
		As_column_nameContext _localctx = new As_column_nameContext(Context, State);
		EnterRule(_localctx, 454, RULE_as_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3899;
			expression(0);
			State = 3900;
			Match(AS);
			State = 3901;
			_localctx.column_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(BigQueryParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BigQueryParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigQueryParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BigQueryParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(BigQueryParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(BigQueryParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT_ROWS_MODIFIED() { return GetToken(BigQueryParser.ASSERT_ROWS_MODIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BigQueryParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(BigQueryParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(BigQueryParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(BigQueryParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(BigQueryParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(BigQueryParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(BigQueryParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(BigQueryParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(BigQueryParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(BigQueryParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(BigQueryParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(BigQueryParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(BigQueryParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(BigQueryParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BigQueryParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BigQueryParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(BigQueryParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(BigQueryParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(BigQueryParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(BigQueryParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(BigQueryParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BigQueryParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(BigQueryParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(BigQueryParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(BigQueryParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(BigQueryParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(BigQueryParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(BigQueryParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(BigQueryParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(BigQueryParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(BigQueryParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(BigQueryParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(BigQueryParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(BigQueryParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(BigQueryParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(BigQueryParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(BigQueryParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(BigQueryParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(BigQueryParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(BigQueryParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(BigQueryParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(BigQueryParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(BigQueryParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(BigQueryParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOKUP() { return GetToken(BigQueryParser.LOOKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(BigQueryParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(BigQueryParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(BigQueryParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(BigQueryParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(BigQueryParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(BigQueryParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BigQueryParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(BigQueryParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(BigQueryParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(BigQueryParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(BigQueryParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(BigQueryParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(BigQueryParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTO() { return GetToken(BigQueryParser.PROTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY() { return GetToken(BigQueryParser.QUALIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(BigQueryParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(BigQueryParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT() { return GetToken(BigQueryParser.RESPECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(BigQueryParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(BigQueryParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(BigQueryParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(BigQueryParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(BigQueryParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(BigQueryParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(BigQueryParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(BigQueryParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BigQueryParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(BigQueryParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(BigQueryParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BigQueryParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(BigQueryParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(BigQueryParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNNEST() { return GetToken(BigQueryParser.UNNEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(BigQueryParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(BigQueryParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(BigQueryParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(BigQueryParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(BigQueryParser.WITHIN, 0); }
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 456, RULE_reserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3903;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -67108864L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 288230376151711743L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datetime_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(BigQueryParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(BigQueryParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(BigQueryParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(BigQueryParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(BigQueryParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(BigQueryParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(BigQueryParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(BigQueryParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(BigQueryParser.MILLISECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(BigQueryParser.MICROSECOND, 0); }
		public Datetime_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterDatetime_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitDatetime_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datetime_partContext datetime_part() {
		Datetime_partContext _localctx = new Datetime_partContext(Context, State);
		EnterRule(_localctx, 458, RULE_datetime_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3905;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 1023L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_modelContext : ParserRuleContext {
		public Path_expressionContext model_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(BigQueryParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Path_expressionContext path_expression() {
			return GetRuleContext<Path_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL() { return GetToken(BigQueryParser.MODEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BigQueryParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BigQueryParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(BigQueryParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BigQueryParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(BigQueryParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(BigQueryParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPAR() { return GetTokens(BigQueryParser.OPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR(int i) {
			return GetToken(BigQueryParser.OPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CPAR() { return GetTokens(BigQueryParser.CPAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR(int i) {
			return GetToken(BigQueryParser.CPAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT() { return GetToken(BigQueryParser.INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_name_typesContext[] field_name_types() {
			return GetRuleContexts<Field_name_typesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_name_typesContext field_name_types(int i) {
			return GetRuleContext<Field_name_typesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(BigQueryParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE() { return GetToken(BigQueryParser.REMOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(BigQueryParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(BigQueryParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(BigQueryParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_parametersContext option_parameters() {
			return GetRuleContext<Option_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(BigQueryParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(BigQueryParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Query_statementContext query_statement() {
			return GetRuleContext<Query_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Create_modelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_model; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterCreate_model(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitCreate_model(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_model(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_modelContext create_model() {
		Create_modelContext _localctx = new Create_modelContext(Context, State);
		EnterRule(_localctx, 460, RULE_create_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3907;
			Match(CREATE);
			State = 3916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
			case 1:
				{
				State = 3908;
				Match(MODEL);
				}
				break;
			case 2:
				{
				State = 3909;
				Match(MODEL);
				State = 3910;
				Match(IF);
				State = 3911;
				Match(NOT);
				State = 3912;
				Match(EXISTS);
				}
				break;
			case 3:
				{
				State = 3913;
				Match(OR);
				State = 3914;
				Match(REPLACE);
				State = 3915;
				Match(MODEL);
				}
				break;
			}
			State = 3918;
			_localctx.model_name = path_expression();
			State = 3924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSFORM) {
				{
				State = 3919;
				Match(TRANSFORM);
				State = 3920;
				Match(OPAR);
				State = 3921;
				select_list();
				State = 3922;
				Match(CPAR);
				}
			}

			State = 3931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INPUT) {
				{
				State = 3926;
				Match(INPUT);
				State = 3927;
				field_name_types();
				State = 3928;
				Match(OUTPUT);
				State = 3929;
				field_name_types();
				}
			}

			State = 3937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REMOTE) {
				{
				State = 3933;
				Match(REMOTE);
				State = 3934;
				Match(WITH);
				State = 3935;
				Match(CONNECTION);
				State = 3936;
				expression(0);
				}
			}

			State = 3944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONS) {
				{
				State = 3939;
				Match(OPTIONS);
				State = 3940;
				Match(OPAR);
				State = 3941;
				option_parameters();
				State = 3942;
				Match(CPAR);
				}
			}

			State = 3958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3946;
				Match(AS);
				State = 3956;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
				case 1:
					{
					State = 3947;
					query_statement();
					}
					break;
				case 2:
					{
					State = 3948;
					Match(OPAR);
					State = 3949;
					identifier();
					State = 3950;
					Match(AS);
					State = 3951;
					Match(OPAR);
					State = 3952;
					query_statement();
					State = 3953;
					Match(CPAR);
					State = 3954;
					Match(CPAR);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_name_typesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(BigQueryParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext[] data_type() {
			return GetRuleContexts<Data_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_typeContext data_type(int i) {
			return GetRuleContext<Data_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(BigQueryParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BigQueryParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BigQueryParser.COMMA, i);
		}
		public Field_name_typesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_name_types; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.EnterField_name_types(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigQueryParserListener typedListener = listener as IBigQueryParserListener;
			if (typedListener != null) typedListener.ExitField_name_types(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBigQueryParserVisitor<TResult> typedVisitor = visitor as IBigQueryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_name_types(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_name_typesContext field_name_types() {
		Field_name_typesContext _localctx = new Field_name_typesContext(Context, State);
		EnterRule(_localctx, 462, RULE_field_name_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3960;
			Match(OPAR);
			State = 3961;
			identifier();
			State = 3962;
			data_type();
			State = 3969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3963;
				Match(COMMA);
				State = 3964;
				identifier();
				State = 3965;
				data_type();
				}
				}
				State = 3971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3972;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 143: return query_expression_sempred((Query_expressionContext)_localctx, predIndex);
		case 169: return from_item_sempred((From_itemContext)_localctx, predIndex);
		case 188: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool query_expression_sempred(Query_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 21);
		case 4: return Precpred(Context, 20);
		case 5: return Precpred(Context, 19);
		case 6: return Precpred(Context, 18);
		case 7: return Precpred(Context, 17);
		case 8: return Precpred(Context, 16);
		case 9: return Precpred(Context, 15);
		case 10: return Precpred(Context, 13);
		case 11: return Precpred(Context, 11);
		case 12: return Precpred(Context, 10);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 24);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 14);
		case 17: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,287,3975,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,1,0,1,0,1,0,1,1,5,1,469,8,1,10,1,12,1,472,9,1,1,1,1,1,5,1,
		476,8,1,10,1,12,1,479,9,1,1,1,1,1,1,2,5,2,484,8,2,10,2,12,2,487,9,2,1,
		2,1,2,4,2,491,8,2,11,2,12,2,492,1,2,5,2,496,8,2,10,2,12,2,499,9,2,1,2,
		5,2,502,8,2,10,2,12,2,505,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
		516,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		3,4,586,8,4,1,5,1,5,1,5,1,5,1,5,3,5,593,8,5,1,6,1,6,3,6,597,8,6,1,6,1,
		6,1,6,1,6,1,6,3,6,604,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		5,7,617,8,7,10,7,12,7,620,9,7,1,7,3,7,623,8,7,1,8,1,8,3,8,627,8,8,1,8,
		1,8,3,8,631,8,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,641,8,9,1,9,1,9,1,
		9,3,9,646,8,9,1,9,1,9,1,10,1,10,1,10,3,10,653,8,10,1,10,1,10,1,10,1,10,
		3,10,659,8,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,5,12,671,
		8,12,10,12,12,12,674,9,12,1,13,1,13,3,13,678,8,13,1,13,1,13,3,13,682,8,
		13,1,13,1,13,1,13,1,13,1,13,4,13,689,8,13,11,13,12,13,690,1,14,1,14,1,
		14,3,14,696,8,14,1,15,1,15,1,15,1,15,3,15,702,8,15,1,15,1,15,1,15,3,15,
		707,8,15,1,16,1,16,1,16,1,16,1,16,3,16,714,8,16,1,16,1,16,3,16,718,8,16,
		1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,730,8,17,1,17,1,
		17,1,17,3,17,735,8,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,
		746,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,756,8,20,1,21,1,
		21,3,21,760,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
		1,23,1,23,3,23,775,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
		25,1,25,3,25,788,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,809,8,25,1,26,1,26,1,
		26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,822,8,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,3,28,837,8,28,1,28,1,
		28,1,28,3,28,842,8,28,1,28,1,28,1,28,3,28,847,8,28,1,28,1,28,1,28,1,28,
		1,28,3,28,854,8,28,1,28,3,28,857,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,3,28,866,8,28,1,28,1,28,1,28,3,28,871,8,28,1,28,1,28,1,28,3,28,876,
		8,28,1,28,1,28,1,28,1,28,1,28,3,28,883,8,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,897,8,28,3,28,899,8,28,1,28,1,28,
		1,28,3,28,904,8,28,1,29,1,29,1,29,1,29,3,29,910,8,29,1,30,1,30,1,30,3,
		30,915,8,30,1,30,1,30,3,30,919,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,935,8,31,1,32,1,32,1,32,1,32,1,
		32,3,32,942,8,32,1,32,1,32,3,32,946,8,32,1,33,1,33,1,33,1,33,1,34,1,34,
		1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,4,35,962,8,35,11,35,12,35,963,
		1,35,1,35,3,35,968,8,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,4,
		36,979,8,36,11,36,12,36,980,1,36,1,36,3,36,985,8,36,1,36,1,36,1,36,1,37,
		1,37,1,37,1,37,3,37,994,8,37,1,37,1,37,1,37,1,37,1,37,5,37,1001,8,37,10,
		37,12,37,1004,9,37,1,37,1,37,3,37,1008,8,37,1,37,1,37,1,37,1,38,1,38,1,
		38,1,38,1,38,1,38,3,38,1019,8,38,1,38,1,38,1,38,1,38,1,38,3,38,1026,8,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1035,8,38,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,3,38,1046,8,38,1,38,1,38,1,38,1,38,1,38,1,
		38,1,38,3,38,1055,8,38,3,38,1057,8,38,1,39,1,39,1,39,1,39,1,39,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,
		42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,3,43,1089,8,43,1,44,1,
		44,3,44,1093,8,44,1,45,1,45,3,45,1097,8,45,1,46,1,46,1,46,1,46,1,46,3,
		46,1104,8,46,1,47,1,47,1,47,1,47,3,47,1110,8,47,1,47,1,47,1,48,1,48,1,
		49,1,49,1,49,3,49,1119,8,49,1,49,3,49,1122,8,49,1,49,1,49,1,49,1,49,3,
		49,1128,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1135,8,49,1,49,1,49,1,49,3,
		49,1140,8,49,1,49,1,49,1,49,3,49,1145,8,49,1,49,1,49,1,49,3,49,1150,8,
		49,1,49,1,49,1,49,3,49,1155,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1162,8,
		49,1,49,1,49,3,49,1166,8,49,1,50,1,50,1,50,3,50,1171,8,50,1,50,1,50,1,
		50,1,50,3,50,1177,8,50,1,50,1,50,1,50,1,50,1,50,3,50,1184,8,50,1,50,1,
		50,1,50,3,50,1189,8,50,1,50,1,50,1,50,1,50,3,50,1195,8,50,1,50,1,50,1,
		50,3,50,1200,8,50,1,50,1,50,1,50,3,50,1205,8,50,1,50,1,50,1,50,3,50,1210,
		8,50,1,50,1,50,1,50,1,50,1,50,3,50,1217,8,50,1,50,1,50,3,50,1221,8,50,
		1,51,1,51,1,51,3,51,1226,8,51,1,51,1,51,1,51,1,51,3,51,1232,8,51,1,51,
		1,51,1,51,1,51,1,51,1,51,3,51,1240,8,51,1,51,1,51,1,51,3,51,1245,8,51,
		1,51,1,51,1,51,3,51,1250,8,51,1,51,1,51,1,51,3,51,1255,8,51,1,51,1,51,
		1,51,1,51,1,51,3,51,1262,8,51,1,51,1,51,3,51,1266,8,51,1,52,1,52,1,52,
		1,52,1,52,1,52,3,52,1274,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		3,52,1284,8,52,1,52,1,52,1,52,1,52,1,52,3,52,1291,8,52,1,53,1,53,1,53,
		1,53,1,53,3,53,1298,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
		1308,8,53,1,53,1,53,1,53,3,53,1313,8,53,1,53,1,53,1,53,3,53,1318,8,53,
		1,53,1,53,1,53,3,53,1323,8,53,1,53,1,53,1,53,3,53,1328,8,53,1,53,1,53,
		1,53,1,53,1,53,3,53,1335,8,53,1,53,1,53,3,53,1339,8,53,1,54,1,54,1,54,
		3,54,1344,8,54,1,54,1,54,1,54,1,54,3,54,1350,8,54,1,54,1,54,1,54,1,54,
		1,54,3,54,1357,8,54,1,54,1,54,1,54,1,54,1,54,3,54,1364,8,54,1,54,1,54,
		1,54,1,55,1,55,1,55,3,55,1372,8,55,1,55,1,55,1,55,1,55,1,55,3,55,1379,
		8,55,1,55,1,55,1,55,1,55,3,55,1385,8,55,1,55,1,55,1,55,3,55,1390,8,55,
		1,55,1,55,1,55,1,55,1,55,3,55,1397,8,55,1,55,1,55,1,55,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,1,56,1,56,3,56,1411,8,56,1,56,1,56,1,56,1,56,1,56,
		1,57,1,57,1,57,1,57,1,57,1,57,3,57,1424,8,57,1,57,1,57,1,57,1,57,3,57,
		1430,8,57,1,57,1,57,1,57,1,57,1,57,3,57,1437,8,57,1,58,1,58,1,58,3,58,
		1442,8,58,1,58,1,58,1,58,1,58,1,58,3,58,1449,8,58,1,58,1,58,1,58,1,58,
		1,58,3,58,1456,8,58,1,58,1,58,1,58,1,58,3,58,1462,8,58,3,58,1464,8,58,
		1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1473,8,58,3,58,1475,8,58,1,58,
		1,58,1,58,1,58,1,58,1,59,1,59,1,59,5,59,1485,8,59,10,59,12,59,1488,9,59,
		1,60,1,60,1,60,1,61,1,61,1,61,3,61,1496,8,61,1,61,3,61,1499,8,61,1,61,
		1,61,1,61,1,61,3,61,1505,8,61,1,61,1,61,1,61,3,61,1510,8,61,1,61,1,61,
		1,61,3,61,1515,8,61,1,61,1,61,1,61,3,61,1520,8,61,1,61,1,61,1,61,3,61,
		1525,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1536,8,61,
		1,62,1,62,1,62,5,62,1541,8,62,10,62,12,62,1544,9,62,1,63,1,63,1,63,1,64,
		1,64,1,64,3,64,1552,8,64,1,64,3,64,1555,8,64,1,64,1,64,1,64,1,64,3,64,
		1561,8,64,1,64,1,64,1,64,3,64,1566,8,64,1,64,1,64,1,64,3,64,1571,8,64,
		1,64,1,64,1,64,3,64,1576,8,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1584,
		8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1593,8,64,1,64,1,64,1,64,
		1,65,1,65,1,65,3,65,1601,8,65,1,65,3,65,1604,8,65,1,65,1,65,1,65,1,65,
		3,65,1610,8,65,1,65,1,65,1,65,3,65,1615,8,65,1,65,1,65,1,65,3,65,1620,
		8,65,1,65,1,65,1,65,3,65,1625,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
		1,65,3,65,1635,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,
		3,66,1647,8,66,1,66,3,66,1650,8,66,1,66,1,66,1,66,1,66,3,66,1656,8,66,
		1,66,1,66,1,66,3,66,1661,8,66,1,66,1,66,1,66,3,66,1666,8,66,1,66,1,66,
		1,66,3,66,1671,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
		1,66,1,66,3,66,1685,8,66,1,67,1,67,1,67,3,67,1690,8,67,1,67,3,67,1693,
		8,67,1,67,1,67,1,67,1,67,1,67,3,67,1700,8,67,1,67,1,67,1,67,3,67,1705,
		8,67,1,67,1,67,1,67,3,67,1710,8,67,1,67,1,67,1,67,3,67,1715,8,67,1,67,
		1,67,1,67,3,67,1720,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
		3,67,1731,8,67,1,68,1,68,1,68,5,68,1736,8,68,10,68,12,68,1739,9,68,1,69,
		1,69,1,69,1,69,3,69,1745,8,69,1,70,1,70,1,70,3,70,1750,8,70,1,70,3,70,
		1753,8,70,1,70,1,70,1,70,1,70,1,70,3,70,1760,8,70,1,70,1,70,1,70,3,70,
		1765,8,70,1,70,1,70,1,70,3,70,1770,8,70,1,70,1,70,1,70,3,70,1775,8,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1787,8,70,1,70,
		1,70,1,70,1,71,1,71,1,71,3,71,1795,8,71,1,71,1,71,1,71,1,71,1,71,3,71,
		1802,8,71,1,71,1,71,1,71,3,71,1807,8,71,1,71,1,71,1,71,3,71,1812,8,71,
		1,71,1,71,1,71,3,71,1817,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,
		1826,8,71,1,71,1,71,1,71,1,71,1,71,3,71,1833,8,71,1,71,1,71,1,71,1,72,
		1,72,1,72,5,72,1841,8,72,10,72,12,72,1844,9,72,1,73,1,73,1,73,1,73,3,73,
		1850,8,73,1,74,1,74,1,74,5,74,1855,8,74,10,74,12,74,1858,9,74,1,75,1,75,
		1,75,1,76,1,76,1,76,3,76,1866,8,76,1,76,1,76,1,76,1,76,3,76,1872,8,76,
		1,76,1,76,1,76,3,76,1877,8,76,1,76,1,76,1,76,3,76,1882,8,76,1,76,1,76,
		1,76,3,76,1887,8,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1895,8,76,1,76,
		1,76,1,76,1,76,1,77,1,77,1,77,5,77,1904,8,77,10,77,12,77,1907,9,77,1,78,
		3,78,1910,8,78,1,78,1,78,1,78,1,79,1,79,1,79,3,79,1918,8,79,1,79,1,79,
		1,79,1,79,3,79,1924,8,79,1,79,1,79,1,79,3,79,1929,8,79,1,79,1,79,1,79,
		3,79,1934,8,79,1,79,1,79,1,79,3,79,1939,8,79,1,79,1,79,1,79,1,79,3,79,
		1945,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1955,8,79,1,79,
		1,79,1,79,1,79,3,79,1961,8,79,1,80,1,80,1,80,3,80,1966,8,80,1,80,1,80,
		1,80,1,80,1,80,1,80,3,80,1974,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,1,80,3,80,1985,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,
		2023,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,3,84,2038,8,84,1,84,3,84,2041,8,84,1,84,1,84,1,84,1,84,1,84,1,84,
		3,84,2049,8,84,1,85,1,85,1,85,5,85,2054,8,85,10,85,12,85,2057,9,85,1,86,
		1,86,3,86,2061,8,86,1,86,1,86,1,86,1,86,1,86,3,86,2068,8,86,1,87,1,87,
		1,87,3,87,2073,8,87,1,87,1,87,1,87,1,87,1,87,3,87,2080,8,87,1,87,1,87,
		1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2093,8,87,1,87,1,87,
		1,87,1,87,1,87,1,88,1,88,1,88,1,88,3,88,2104,8,88,1,88,1,88,1,88,3,88,
		2109,8,88,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,3,89,2121,
		8,89,1,89,1,89,1,89,3,89,2126,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
		1,90,1,90,1,90,1,90,3,90,2139,8,90,1,90,1,90,1,90,3,90,2144,8,90,1,90,
		1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2155,8,90,1,91,1,91,1,91,
		1,91,3,91,2161,8,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,3,92,
		2172,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,
		1,93,1,93,1,93,3,93,2189,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,
		2198,8,93,1,93,5,93,2201,8,93,10,93,12,93,2204,9,93,1,94,1,94,1,94,1,94,
		1,94,3,94,2211,8,94,1,94,1,94,1,94,3,94,2216,8,94,1,94,1,94,1,94,1,94,
		5,94,2222,8,94,10,94,12,94,2225,9,94,1,95,1,95,1,95,1,95,1,95,3,95,2232,
		8,95,1,95,3,95,2235,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
		1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,
		2259,8,95,1,96,1,96,1,96,1,96,1,96,3,96,2266,8,96,1,96,1,96,1,96,3,96,
		2271,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,97,1,97,
		1,97,1,97,3,97,2287,8,97,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,
		3,98,2298,8,98,1,98,1,98,1,98,1,98,5,98,2304,8,98,10,98,12,98,2307,9,98,
		1,99,1,99,1,99,1,99,3,99,2313,8,99,1,99,1,99,1,99,5,99,2318,8,99,10,99,
		12,99,2321,9,99,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,
		1,101,5,101,2333,8,101,10,101,12,101,2336,9,101,1,102,1,102,1,102,1,102,
		3,102,2342,8,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,3,103,2351,
		8,103,1,103,1,103,1,103,3,103,2356,8,103,1,103,1,103,1,103,1,103,1,103,
		3,103,2363,8,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,3,104,2372,
		8,104,1,104,1,104,1,104,3,104,2377,8,104,1,104,1,104,1,104,1,104,1,104,
		1,104,3,104,2385,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		1,106,1,106,1,106,1,106,3,106,2399,8,106,1,106,1,106,1,106,1,106,1,106,
		3,106,2406,8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,
		1,107,1,107,3,107,2419,8,107,1,107,1,107,1,107,1,107,1,107,3,107,2426,
		8,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,3,108,2437,
		8,108,1,108,1,108,1,108,1,108,1,108,3,108,2444,8,108,1,108,1,108,1,108,
		1,108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,2456,8,109,1,109,1,109,
		1,109,1,109,1,109,3,109,2463,8,109,1,109,1,109,1,109,1,109,1,109,1,110,
		1,110,1,110,1,110,3,110,2474,8,110,1,110,1,110,1,110,1,110,1,110,3,110,
		2481,8,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,3,111,2491,
		8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,
		1,112,3,112,2505,8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,113,
		1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
		1,114,1,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
		1,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,117,1,117,
		1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,
		3,118,2563,8,118,1,118,1,118,1,118,3,118,2568,8,118,1,118,1,118,1,119,
		1,119,3,119,2574,8,119,1,119,1,119,1,119,3,119,2579,8,119,1,119,1,119,
		1,119,3,119,2584,8,119,1,119,1,119,3,119,2588,8,119,1,120,1,120,1,120,
		1,120,3,120,2594,8,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,3,121,
		2603,8,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,3,122,2612,8,122,
		1,122,1,122,1,123,1,123,1,123,1,123,3,123,2620,8,123,1,123,1,123,1,124,
		1,124,1,124,1,124,1,124,3,124,2629,8,124,1,124,1,124,1,125,1,125,1,125,
		1,125,3,125,2637,8,125,1,125,1,125,1,125,3,125,2642,8,125,1,125,1,125,
		1,125,3,125,2647,8,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,3,126,
		2656,8,126,1,126,1,126,1,126,3,126,2661,8,126,1,126,1,126,1,126,3,126,
		2666,8,126,1,126,1,126,1,127,1,127,1,127,1,127,3,127,2674,8,127,1,127,
		1,127,1,127,3,127,2679,8,127,1,127,1,127,1,127,3,127,2684,8,127,1,127,
		1,127,1,128,1,128,1,128,1,128,1,128,1,128,3,128,2694,8,128,1,128,1,128,
		1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,2707,8,128,
		1,129,1,129,1,129,1,129,3,129,2713,8,129,1,129,1,129,1,130,1,130,1,130,
		1,130,3,130,2721,8,130,1,130,1,130,1,131,1,131,1,131,1,131,3,131,2729,
		8,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,3,132,2738,8,132,1,132,
		1,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,3,133,2749,8,133,1,133,
		1,133,1,133,1,133,1,134,1,134,1,134,5,134,2758,8,134,10,134,12,134,2761,
		9,134,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2769,8,135,1,136,1,136,
		1,136,5,136,2774,8,136,10,136,12,136,2777,9,136,1,137,1,137,1,137,1,137,
		3,137,2783,8,137,1,137,1,137,1,137,1,137,3,137,2789,8,137,1,137,5,137,
		2792,8,137,10,137,12,137,2795,9,137,3,137,2797,8,137,1,138,1,138,1,138,
		1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,
		1,140,1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,142,
		1,142,1,142,1,142,1,142,3,142,2830,8,142,1,142,1,142,1,142,3,142,2835,
		8,142,1,142,1,142,1,142,1,142,3,142,2841,8,142,1,142,1,142,1,142,1,142,
		1,142,3,142,2848,8,142,1,143,1,143,1,143,3,143,2853,8,143,1,143,1,143,
		3,143,2857,8,143,1,143,1,143,1,143,3,143,2862,8,143,5,143,2864,8,143,10,
		143,12,143,2867,9,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
		3,143,2877,8,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
		1,143,3,143,2889,8,143,1,143,1,143,1,143,1,143,5,143,2895,8,143,10,143,
		12,143,2898,9,143,1,144,1,144,1,144,1,144,3,144,2904,8,144,1,144,1,144,
		1,144,3,144,2909,8,144,5,144,2911,8,144,10,144,12,144,2914,9,144,3,144,
		2916,8,144,1,144,1,144,1,144,1,144,3,144,2922,8,144,3,144,2924,8,144,1,
		145,1,145,1,145,3,145,2929,8,145,3,145,2931,8,145,1,145,1,145,1,145,1,
		145,1,145,1,145,3,145,2939,8,145,1,145,1,145,1,145,1,145,1,145,1,145,1,
		145,3,145,2948,8,145,1,145,3,145,2951,8,145,1,145,1,145,1,145,1,145,1,
		145,1,145,3,145,2959,8,145,3,145,2961,8,145,3,145,2963,8,145,1,145,1,145,
		1,146,1,146,1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,148,1,148,
		1,148,1,148,1,148,1,149,1,149,1,149,3,149,2985,8,149,1,149,3,149,2988,
		8,149,1,149,1,149,3,149,2992,8,149,1,149,1,149,1,149,3,149,2997,8,149,
		1,149,1,149,3,149,3001,8,149,1,149,1,149,1,149,3,149,3006,8,149,1,149,
		1,149,3,149,3010,8,149,1,149,1,149,3,149,3014,8,149,1,149,1,149,3,149,
		3018,8,149,1,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,3027,8,150,
		1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,152,1,152,1,152,5,152,
		3040,8,152,10,152,12,152,3043,9,152,1,153,1,153,1,153,1,153,3,153,3049,
		8,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,
		1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,157,1,157,1,157,5,157,3072,
		8,157,10,157,12,157,3075,9,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
		3,158,3084,8,158,1,159,3,159,3087,8,159,1,159,1,159,1,159,3,159,3092,8,
		159,1,159,1,159,1,159,3,159,3097,8,159,1,159,3,159,3100,8,159,1,160,1,
		160,1,160,3,160,3105,8,160,1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,
		161,3114,8,161,3,161,3116,8,161,1,162,1,162,1,162,1,162,1,162,1,162,1,
		162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
		1,162,1,162,1,162,1,162,3,162,3140,8,162,1,163,1,163,1,163,1,163,1,163,
		1,163,1,163,1,163,1,163,1,163,3,163,3152,8,163,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,3,164,3161,8,164,1,165,1,165,1,165,1,165,1,165,3,165,
		3168,8,165,1,166,1,166,1,166,1,166,1,166,1,166,1,167,1,167,1,167,5,167,
		3179,8,167,10,167,12,167,3182,9,167,1,168,1,168,1,168,3,168,3187,8,168,
		1,168,3,168,3190,8,168,1,169,1,169,1,169,3,169,3195,8,169,1,169,1,169,
		1,169,1,169,1,169,3,169,3202,8,169,1,169,1,169,1,169,1,169,1,169,1,169,
		1,169,1,169,1,169,1,169,3,169,3214,8,169,1,169,1,169,1,169,1,169,1,169,
		1,169,3,169,3222,8,169,1,169,1,169,1,169,1,169,3,169,3228,8,169,1,169,
		3,169,3231,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
		5,169,3242,8,169,10,169,12,169,3245,9,169,1,170,1,170,1,170,1,170,1,170,
		3,170,3252,8,170,1,170,1,170,3,170,3256,8,170,3,170,3258,8,170,1,170,1,
		170,1,170,3,170,3263,8,170,3,170,3265,8,170,1,171,1,171,1,171,3,171,3270,
		8,171,1,172,3,172,3273,8,172,1,172,1,172,1,172,3,172,3278,8,172,1,172,
		1,172,1,172,3,172,3283,8,172,1,172,1,172,1,172,3,172,3288,8,172,1,172,
		3,172,3291,8,172,1,173,1,173,3,173,3295,8,173,1,174,1,174,1,174,1,175,
		1,175,1,175,1,175,1,175,1,176,1,176,1,176,1,176,3,176,3309,8,176,1,176,
		1,176,1,176,3,176,3314,8,176,5,176,3316,8,176,10,176,12,176,3319,9,176,
		1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,3330,8,176,
		1,177,1,177,1,177,1,177,1,177,3,177,3337,8,177,1,177,1,177,1,177,3,177,
		3342,8,177,1,177,1,177,3,177,3346,8,177,1,178,1,178,1,178,1,178,1,178,
		1,178,1,178,1,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
		1,179,1,180,1,180,3,180,3368,8,180,1,180,1,180,1,180,3,180,3373,8,180,
		5,180,3375,8,180,10,180,12,180,3378,9,180,1,181,1,181,1,181,3,181,3383,
		8,181,1,181,1,181,1,181,3,181,3388,8,181,5,181,3390,8,181,10,181,12,181,
		3393,9,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,183,
		1,183,1,183,5,183,3407,8,183,10,183,12,183,3410,9,183,1,184,1,184,1,184,
		1,184,1,185,1,185,1,185,5,185,3419,8,185,10,185,12,185,3422,9,185,1,186,
		1,186,1,186,3,186,3427,8,186,3,186,3429,8,186,1,187,1,187,1,187,3,187,
		3434,8,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3442,8,187,1,187,
		1,187,1,187,1,187,1,187,3,187,3449,8,187,1,188,1,188,1,188,1,188,1,188,
		1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
		1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,3477,8,188,
		1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,
		3490,8,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
		1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,3510,8,188,1,188,
		3,188,3513,8,188,1,188,1,188,1,188,1,188,3,188,3519,8,188,1,188,1,188,
		1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,3532,8,188,
		1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
		1,188,1,188,3,188,3548,8,188,1,188,1,188,1,188,3,188,3553,8,188,1,188,
		5,188,3556,8,188,10,188,12,188,3559,9,188,1,189,1,189,1,189,5,189,3564,
		8,189,10,189,12,189,3567,9,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
		4,190,3576,8,190,11,190,12,190,3577,1,190,1,190,3,190,3582,8,190,1,190,
		1,190,1,191,1,191,1,191,1,191,1,191,1,192,1,192,3,192,3593,8,192,1,192,
		1,192,1,192,3,192,3598,8,192,5,192,3600,8,192,10,192,12,192,3603,9,192,
		1,193,1,193,3,193,3607,8,193,1,193,1,193,1,193,3,193,3612,8,193,5,193,
		3614,8,193,10,193,12,193,3617,9,193,1,194,1,194,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,3,194,3640,8,194,1,195,1,195,1,195,1,196,1,196,1,196,
		1,197,1,197,1,197,1,197,1,197,3,197,3653,8,197,3,197,3655,8,197,1,197,
		1,197,3,197,3659,8,197,1,197,1,197,1,198,1,198,1,198,1,198,1,198,5,198,
		3668,8,198,10,198,12,198,3671,9,198,1,198,1,198,3,198,3675,8,198,3,198,
		3677,8,198,1,198,1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,199,5,199,
		3688,8,199,10,199,12,199,3691,9,199,1,199,1,199,3,199,3695,8,199,1,199,
		1,199,1,199,1,199,3,199,3701,8,199,1,199,1,199,1,199,1,199,3,199,3707,
		8,199,1,199,1,199,3,199,3711,8,199,1,199,1,199,3,199,3715,8,199,1,199,
		1,199,1,199,1,199,1,199,3,199,3722,8,199,1,200,1,200,3,200,3726,8,200,
		1,201,1,201,1,202,1,202,1,202,1,203,1,203,1,203,1,204,1,204,1,204,1,205,
		1,205,1,205,1,206,1,206,1,206,1,206,1,206,1,206,1,207,1,207,1,207,1,207,
		1,207,1,207,1,207,1,207,1,207,3,207,3757,8,207,1,208,1,208,1,208,1,209,
		1,209,1,210,1,210,1,211,3,211,3767,8,211,1,211,1,211,1,212,1,212,1,212,
		3,212,3774,8,212,1,212,1,212,1,212,3,212,3779,8,212,1,213,1,213,3,213,
		3783,8,213,1,214,3,214,3786,8,214,1,214,1,214,1,214,1,215,1,215,1,215,
		5,215,3794,8,215,10,215,12,215,3797,9,215,1,216,1,216,3,216,3801,8,216,
		1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,3813,
		8,216,1,216,1,216,1,216,3,216,3818,8,216,1,216,1,216,3,216,3822,8,216,
		1,216,3,216,3825,8,216,1,217,3,217,3828,8,217,1,217,3,217,3831,8,217,1,
		218,1,218,1,218,1,219,1,219,1,219,5,219,3839,8,219,10,219,12,219,3842,
		9,219,1,220,1,220,1,220,1,220,3,220,3848,8,220,1,221,1,221,1,221,1,221,
		3,221,3854,8,221,1,221,1,221,1,221,1,221,1,222,1,222,3,222,3862,8,222,
		1,222,1,222,1,222,1,222,3,222,3868,8,222,1,223,1,223,1,223,1,224,1,224,
		1,224,5,224,3876,8,224,10,224,12,224,3879,9,224,1,225,1,225,1,225,1,225,
		3,225,3885,8,225,5,225,3887,8,225,10,225,12,225,3890,9,225,1,226,1,226,
		1,226,5,226,3895,8,226,10,226,12,226,3898,9,226,1,227,1,227,1,227,1,227,
		1,228,1,228,1,229,1,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
		1,230,3,230,3917,8,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,3925,
		8,230,1,230,1,230,1,230,1,230,1,230,3,230,3932,8,230,1,230,1,230,1,230,
		1,230,3,230,3938,8,230,1,230,1,230,1,230,1,230,1,230,3,230,3945,8,230,
		1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,3957,
		8,230,3,230,3959,8,230,1,231,1,231,1,231,1,231,1,231,1,231,1,231,5,231,
		3968,8,231,10,231,12,231,3971,9,231,1,231,1,231,1,231,0,3,286,338,376,
		232,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
		204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
		240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
		276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
		312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
		348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
		384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
		420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,
		456,458,460,462,0,25,1,0,252,255,2,0,73,73,236,236,1,0,157,158,2,0,69,
		69,198,199,2,0,159,159,172,172,1,0,187,188,2,0,31,31,46,46,2,0,61,61,77,
		77,2,0,26,26,47,47,2,0,107,107,144,144,2,0,98,98,103,103,2,0,3,3,12,13,
		2,0,4,4,10,11,1,0,12,13,3,0,34,34,69,69,78,78,3,0,26,26,28,28,106,106,
		3,0,56,56,86,86,112,112,1,0,279,280,2,0,123,124,126,126,1,0,281,282,4,
		0,122,178,180,184,190,274,277,278,1,0,218,219,2,0,68,68,100,100,1,0,26,
		121,1,0,127,136,4381,0,464,1,0,0,0,2,470,1,0,0,0,4,485,1,0,0,0,6,515,1,
		0,0,0,8,585,1,0,0,0,10,592,1,0,0,0,12,594,1,0,0,0,14,622,1,0,0,0,16,624,
		1,0,0,0,18,635,1,0,0,0,20,649,1,0,0,0,22,663,1,0,0,0,24,667,1,0,0,0,26,
		675,1,0,0,0,28,695,1,0,0,0,30,697,1,0,0,0,32,708,1,0,0,0,34,722,1,0,0,
		0,36,736,1,0,0,0,38,740,1,0,0,0,40,755,1,0,0,0,42,759,1,0,0,0,44,761,1,
		0,0,0,46,774,1,0,0,0,48,776,1,0,0,0,50,808,1,0,0,0,52,810,1,0,0,0,54,816,
		1,0,0,0,56,831,1,0,0,0,58,905,1,0,0,0,60,911,1,0,0,0,62,934,1,0,0,0,64,
		936,1,0,0,0,66,947,1,0,0,0,68,951,1,0,0,0,70,955,1,0,0,0,72,971,1,0,0,
		0,74,989,1,0,0,0,76,1012,1,0,0,0,78,1058,1,0,0,0,80,1063,1,0,0,0,82,1070,
		1,0,0,0,84,1077,1,0,0,0,86,1086,1,0,0,0,88,1090,1,0,0,0,90,1094,1,0,0,
		0,92,1098,1,0,0,0,94,1105,1,0,0,0,96,1113,1,0,0,0,98,1115,1,0,0,0,100,
		1167,1,0,0,0,102,1222,1,0,0,0,104,1267,1,0,0,0,106,1292,1,0,0,0,108,1340,
		1,0,0,0,110,1368,1,0,0,0,112,1401,1,0,0,0,114,1417,1,0,0,0,116,1438,1,
		0,0,0,118,1481,1,0,0,0,120,1489,1,0,0,0,122,1492,1,0,0,0,124,1537,1,0,
		0,0,126,1545,1,0,0,0,128,1548,1,0,0,0,130,1597,1,0,0,0,132,1643,1,0,0,
		0,134,1686,1,0,0,0,136,1732,1,0,0,0,138,1740,1,0,0,0,140,1746,1,0,0,0,
		142,1791,1,0,0,0,144,1837,1,0,0,0,146,1845,1,0,0,0,148,1851,1,0,0,0,150,
		1859,1,0,0,0,152,1862,1,0,0,0,154,1900,1,0,0,0,156,1909,1,0,0,0,158,1914,
		1,0,0,0,160,1962,1,0,0,0,162,1992,1,0,0,0,164,2000,1,0,0,0,166,2008,1,
		0,0,0,168,2016,1,0,0,0,170,2050,1,0,0,0,172,2058,1,0,0,0,174,2069,1,0,
		0,0,176,2099,1,0,0,0,178,2116,1,0,0,0,180,2134,1,0,0,0,182,2156,1,0,0,
		0,184,2167,1,0,0,0,186,2180,1,0,0,0,188,2205,1,0,0,0,190,2258,1,0,0,0,
		192,2260,1,0,0,0,194,2282,1,0,0,0,196,2293,1,0,0,0,198,2308,1,0,0,0,200,
		2322,1,0,0,0,202,2326,1,0,0,0,204,2337,1,0,0,0,206,2345,1,0,0,0,208,2366,
		1,0,0,0,210,2386,1,0,0,0,212,2394,1,0,0,0,214,2414,1,0,0,0,216,2432,1,
		0,0,0,218,2451,1,0,0,0,220,2469,1,0,0,0,222,2486,1,0,0,0,224,2499,1,0,
		0,0,226,2513,1,0,0,0,228,2521,1,0,0,0,230,2530,1,0,0,0,232,2539,1,0,0,
		0,234,2548,1,0,0,0,236,2557,1,0,0,0,238,2571,1,0,0,0,240,2589,1,0,0,0,
		242,2597,1,0,0,0,244,2606,1,0,0,0,246,2615,1,0,0,0,248,2623,1,0,0,0,250,
		2632,1,0,0,0,252,2650,1,0,0,0,254,2669,1,0,0,0,256,2706,1,0,0,0,258,2708,
		1,0,0,0,260,2716,1,0,0,0,262,2724,1,0,0,0,264,2732,1,0,0,0,266,2743,1,
		0,0,0,268,2754,1,0,0,0,270,2762,1,0,0,0,272,2770,1,0,0,0,274,2796,1,0,
		0,0,276,2798,1,0,0,0,278,2801,1,0,0,0,280,2809,1,0,0,0,282,2816,1,0,0,
		0,284,2824,1,0,0,0,286,2888,1,0,0,0,288,2915,1,0,0,0,290,2930,1,0,0,0,
		292,2966,1,0,0,0,294,2972,1,0,0,0,296,2976,1,0,0,0,298,2981,1,0,0,0,300,
		3026,1,0,0,0,302,3028,1,0,0,0,304,3036,1,0,0,0,306,3048,1,0,0,0,308,3050,
		1,0,0,0,310,3057,1,0,0,0,312,3061,1,0,0,0,314,3068,1,0,0,0,316,3076,1,
		0,0,0,318,3086,1,0,0,0,320,3101,1,0,0,0,322,3115,1,0,0,0,324,3139,1,0,
		0,0,326,3151,1,0,0,0,328,3160,1,0,0,0,330,3167,1,0,0,0,332,3169,1,0,0,
		0,334,3175,1,0,0,0,336,3183,1,0,0,0,338,3230,1,0,0,0,340,3257,1,0,0,0,
		342,3269,1,0,0,0,344,3290,1,0,0,0,346,3294,1,0,0,0,348,3296,1,0,0,0,350,
		3299,1,0,0,0,352,3304,1,0,0,0,354,3331,1,0,0,0,356,3347,1,0,0,0,358,3355,
		1,0,0,0,360,3365,1,0,0,0,362,3379,1,0,0,0,364,3396,1,0,0,0,366,3403,1,
		0,0,0,368,3411,1,0,0,0,370,3415,1,0,0,0,372,3428,1,0,0,0,374,3433,1,0,
		0,0,376,3476,1,0,0,0,378,3560,1,0,0,0,380,3568,1,0,0,0,382,3585,1,0,0,
		0,384,3590,1,0,0,0,386,3604,1,0,0,0,388,3639,1,0,0,0,390,3641,1,0,0,0,
		392,3644,1,0,0,0,394,3654,1,0,0,0,396,3676,1,0,0,0,398,3700,1,0,0,0,400,
		3725,1,0,0,0,402,3727,1,0,0,0,404,3729,1,0,0,0,406,3732,1,0,0,0,408,3735,
		1,0,0,0,410,3738,1,0,0,0,412,3741,1,0,0,0,414,3747,1,0,0,0,416,3758,1,
		0,0,0,418,3761,1,0,0,0,420,3763,1,0,0,0,422,3766,1,0,0,0,424,3770,1,0,
		0,0,426,3782,1,0,0,0,428,3785,1,0,0,0,430,3790,1,0,0,0,432,3824,1,0,0,
		0,434,3827,1,0,0,0,436,3832,1,0,0,0,438,3835,1,0,0,0,440,3843,1,0,0,0,
		442,3849,1,0,0,0,444,3867,1,0,0,0,446,3869,1,0,0,0,448,3872,1,0,0,0,450,
		3880,1,0,0,0,452,3891,1,0,0,0,454,3899,1,0,0,0,456,3903,1,0,0,0,458,3905,
		1,0,0,0,460,3907,1,0,0,0,462,3960,1,0,0,0,464,465,3,4,2,0,465,466,5,0,
		0,1,466,1,1,0,0,0,467,469,5,5,0,0,468,467,1,0,0,0,469,472,1,0,0,0,470,
		468,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,470,1,0,0,0,473,477,3,
		6,3,0,474,476,5,5,0,0,475,474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,
		477,478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,481,5,0,0,1,481,3,
		1,0,0,0,482,484,5,5,0,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,
		0,485,486,1,0,0,0,486,488,1,0,0,0,487,485,1,0,0,0,488,497,3,6,3,0,489,
		491,5,5,0,0,490,489,1,0,0,0,491,492,1,0,0,0,492,490,1,0,0,0,492,493,1,
		0,0,0,493,494,1,0,0,0,494,496,3,6,3,0,495,490,1,0,0,0,496,499,1,0,0,0,
		497,495,1,0,0,0,497,498,1,0,0,0,498,503,1,0,0,0,499,497,1,0,0,0,500,502,
		5,5,0,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,
		0,504,5,1,0,0,0,505,503,1,0,0,0,506,516,3,96,48,0,507,516,3,8,4,0,508,
		516,3,10,5,0,509,516,3,42,21,0,510,516,3,50,25,0,511,516,3,54,27,0,512,
		516,3,56,28,0,513,516,3,58,29,0,514,516,3,460,230,0,515,506,1,0,0,0,515,
		507,1,0,0,0,515,508,1,0,0,0,515,509,1,0,0,0,515,510,1,0,0,0,515,511,1,
		0,0,0,515,512,1,0,0,0,515,513,1,0,0,0,515,514,1,0,0,0,516,7,1,0,0,0,517,
		586,3,284,142,0,518,586,3,98,49,0,519,586,3,100,50,0,520,586,3,102,51,
		0,521,586,3,104,52,0,522,586,3,106,53,0,523,586,3,108,54,0,524,586,3,110,
		55,0,525,586,3,112,56,0,526,586,3,114,57,0,527,586,3,116,58,0,528,586,
		3,122,61,0,529,586,3,128,64,0,530,586,3,130,65,0,531,586,3,132,66,0,532,
		586,3,134,67,0,533,586,3,140,70,0,534,586,3,142,71,0,535,586,3,152,76,
		0,536,586,3,158,79,0,537,586,3,160,80,0,538,586,3,162,81,0,539,586,3,164,
		82,0,540,586,3,166,83,0,541,586,3,168,84,0,542,586,3,174,87,0,543,586,
		3,176,88,0,544,586,3,178,89,0,545,586,3,180,90,0,546,586,3,182,91,0,547,
		586,3,184,92,0,548,586,3,186,93,0,549,586,3,188,94,0,550,586,3,192,96,
		0,551,586,3,194,97,0,552,586,3,196,98,0,553,586,3,202,101,0,554,586,3,
		206,103,0,555,586,3,208,104,0,556,586,3,210,105,0,557,586,3,212,106,0,
		558,586,3,214,107,0,559,586,3,216,108,0,560,586,3,218,109,0,561,586,3,
		220,110,0,562,586,3,222,111,0,563,586,3,224,112,0,564,586,3,226,113,0,
		565,586,3,228,114,0,566,586,3,230,115,0,567,586,3,232,116,0,568,586,3,
		234,117,0,569,586,3,236,118,0,570,586,3,238,119,0,571,586,3,240,120,0,
		572,586,3,242,121,0,573,586,3,244,122,0,574,586,3,246,123,0,575,586,3,
		248,124,0,576,586,3,250,125,0,577,586,3,252,126,0,578,586,3,254,127,0,
		579,586,3,256,128,0,580,586,3,258,129,0,581,586,3,260,130,0,582,586,3,
		262,131,0,583,586,3,264,132,0,584,586,3,266,133,0,585,517,1,0,0,0,585,
		518,1,0,0,0,585,519,1,0,0,0,585,520,1,0,0,0,585,521,1,0,0,0,585,522,1,
		0,0,0,585,523,1,0,0,0,585,524,1,0,0,0,585,525,1,0,0,0,585,526,1,0,0,0,
		585,527,1,0,0,0,585,528,1,0,0,0,585,529,1,0,0,0,585,530,1,0,0,0,585,531,
		1,0,0,0,585,532,1,0,0,0,585,533,1,0,0,0,585,534,1,0,0,0,585,535,1,0,0,
		0,585,536,1,0,0,0,585,537,1,0,0,0,585,538,1,0,0,0,585,539,1,0,0,0,585,
		540,1,0,0,0,585,541,1,0,0,0,585,542,1,0,0,0,585,543,1,0,0,0,585,544,1,
		0,0,0,585,545,1,0,0,0,585,546,1,0,0,0,585,547,1,0,0,0,585,548,1,0,0,0,
		585,549,1,0,0,0,585,550,1,0,0,0,585,551,1,0,0,0,585,552,1,0,0,0,585,553,
		1,0,0,0,585,554,1,0,0,0,585,555,1,0,0,0,585,556,1,0,0,0,585,557,1,0,0,
		0,585,558,1,0,0,0,585,559,1,0,0,0,585,560,1,0,0,0,585,561,1,0,0,0,585,
		562,1,0,0,0,585,563,1,0,0,0,585,564,1,0,0,0,585,565,1,0,0,0,585,566,1,
		0,0,0,585,567,1,0,0,0,585,568,1,0,0,0,585,569,1,0,0,0,585,570,1,0,0,0,
		585,571,1,0,0,0,585,572,1,0,0,0,585,573,1,0,0,0,585,574,1,0,0,0,585,575,
		1,0,0,0,585,576,1,0,0,0,585,577,1,0,0,0,585,578,1,0,0,0,585,579,1,0,0,
		0,585,580,1,0,0,0,585,581,1,0,0,0,585,582,1,0,0,0,585,583,1,0,0,0,585,
		584,1,0,0,0,586,9,1,0,0,0,587,593,3,12,6,0,588,593,3,16,8,0,589,593,3,
		18,9,0,590,593,3,20,10,0,591,593,3,26,13,0,592,587,1,0,0,0,592,588,1,0,
		0,0,592,589,1,0,0,0,592,590,1,0,0,0,592,591,1,0,0,0,593,11,1,0,0,0,594,
		596,5,262,0,0,595,597,5,73,0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,
		1,0,0,0,598,603,3,450,225,0,599,600,5,16,0,0,600,601,3,170,85,0,601,602,
		5,17,0,0,602,604,1,0,0,0,603,599,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,
		0,605,606,3,14,7,0,606,13,1,0,0,0,607,608,5,263,0,0,608,609,5,16,0,0,609,
		610,3,378,189,0,610,618,5,17,0,0,611,612,5,15,0,0,612,613,5,16,0,0,613,
		614,3,378,189,0,614,615,5,17,0,0,615,617,1,0,0,0,616,611,1,0,0,0,617,620,
		1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,623,1,0,0,0,620,618,1,0,0,
		0,621,623,3,286,143,0,622,607,1,0,0,0,622,621,1,0,0,0,623,15,1,0,0,0,624,
		626,5,264,0,0,625,627,5,60,0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,
		1,0,0,0,628,630,3,450,225,0,629,631,3,420,210,0,630,629,1,0,0,0,630,631,
		1,0,0,0,631,632,1,0,0,0,632,633,5,118,0,0,633,634,3,376,188,0,634,17,1,
		0,0,0,635,636,5,265,0,0,636,645,5,159,0,0,637,638,3,420,210,0,638,639,
		5,14,0,0,639,641,1,0,0,0,640,637,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,
		0,642,643,3,420,210,0,643,644,5,14,0,0,644,646,1,0,0,0,645,640,1,0,0,0,
		645,646,1,0,0,0,646,647,1,0,0,0,647,648,3,420,210,0,648,19,1,0,0,0,649,
		650,5,266,0,0,650,652,3,450,225,0,651,653,3,422,211,0,652,651,1,0,0,0,
		652,653,1,0,0,0,653,654,1,0,0,0,654,655,5,105,0,0,655,658,3,24,12,0,656,
		657,5,60,0,0,657,659,3,336,168,0,658,656,1,0,0,0,658,659,1,0,0,0,659,660,
		1,0,0,0,660,661,5,118,0,0,661,662,3,376,188,0,662,21,1,0,0,0,663,664,3,
		450,225,0,664,665,5,24,0,0,665,666,3,376,188,0,666,23,1,0,0,0,667,672,
		3,22,11,0,668,669,5,15,0,0,669,671,3,22,11,0,670,668,1,0,0,0,671,674,1,
		0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,25,1,0,0,0,674,672,1,0,0,0,675,
		677,5,81,0,0,676,678,5,73,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,
		1,0,0,0,679,681,3,450,225,0,680,682,3,422,211,0,681,680,1,0,0,0,681,682,
		1,0,0,0,682,683,1,0,0,0,683,684,5,116,0,0,684,685,3,376,188,0,685,686,
		5,89,0,0,686,688,3,376,188,0,687,689,3,28,14,0,688,687,1,0,0,0,689,690,
		1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,27,1,0,0,0,692,696,3,30,15,
		0,693,696,3,32,16,0,694,696,3,34,17,0,695,692,1,0,0,0,695,693,1,0,0,0,
		695,694,1,0,0,0,696,29,1,0,0,0,697,698,5,117,0,0,698,701,5,267,0,0,699,
		700,5,27,0,0,700,702,3,376,188,0,701,699,1,0,0,0,701,702,1,0,0,0,702,703,
		1,0,0,0,703,706,5,109,0,0,704,707,3,36,18,0,705,707,5,264,0,0,706,704,
		1,0,0,0,706,705,1,0,0,0,707,31,1,0,0,0,708,709,5,117,0,0,709,710,5,85,
		0,0,710,713,5,267,0,0,711,712,5,35,0,0,712,714,5,268,0,0,713,711,1,0,0,
		0,713,714,1,0,0,0,714,717,1,0,0,0,715,716,5,27,0,0,716,718,3,376,188,0,
		717,715,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,720,5,109,0,0,720,
		721,3,38,19,0,721,33,1,0,0,0,722,723,5,117,0,0,723,724,5,85,0,0,724,725,
		5,267,0,0,725,726,5,35,0,0,726,729,5,269,0,0,727,728,5,27,0,0,728,730,
		3,376,188,0,729,727,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,734,5,
		109,0,0,732,735,3,36,18,0,733,735,5,264,0,0,734,732,1,0,0,0,734,733,1,
		0,0,0,735,35,1,0,0,0,736,737,5,266,0,0,737,738,5,105,0,0,738,739,3,24,
		12,0,739,37,1,0,0,0,740,745,5,262,0,0,741,742,5,16,0,0,742,743,3,170,85,
		0,743,744,5,17,0,0,744,746,1,0,0,0,745,741,1,0,0,0,745,746,1,0,0,0,746,
		747,1,0,0,0,747,748,3,40,20,0,748,39,1,0,0,0,749,750,5,263,0,0,750,751,
		5,16,0,0,751,752,3,378,189,0,752,753,5,17,0,0,753,756,1,0,0,0,754,756,
		5,151,0,0,755,749,1,0,0,0,755,754,1,0,0,0,756,41,1,0,0,0,757,760,3,44,
		22,0,758,760,3,48,24,0,759,757,1,0,0,0,759,758,1,0,0,0,760,43,1,0,0,0,
		761,762,5,206,0,0,762,763,3,378,189,0,763,764,5,89,0,0,764,765,3,46,23,
		0,765,766,3,450,225,0,766,767,5,110,0,0,767,768,3,378,189,0,768,45,1,0,
		0,0,769,775,5,156,0,0,770,775,5,159,0,0,771,775,5,172,0,0,772,773,5,185,
		0,0,773,775,5,159,0,0,774,769,1,0,0,0,774,770,1,0,0,0,774,771,1,0,0,0,
		774,772,1,0,0,0,775,47,1,0,0,0,776,777,5,270,0,0,777,778,3,378,189,0,778,
		779,5,89,0,0,779,780,3,46,23,0,780,781,3,450,225,0,781,782,5,60,0,0,782,
		783,3,378,189,0,783,49,1,0,0,0,784,809,3,52,26,0,785,787,7,0,0,0,786,788,
		3,420,210,0,787,786,1,0,0,0,787,788,1,0,0,0,788,809,1,0,0,0,789,809,5,
		256,0,0,790,809,3,60,30,0,791,809,3,62,31,0,792,809,3,64,32,0,793,809,
		3,66,33,0,794,809,3,68,34,0,795,809,3,70,35,0,796,809,3,72,36,0,797,809,
		3,74,37,0,798,809,3,76,38,0,799,809,3,82,41,0,800,809,3,78,39,0,801,809,
		3,80,40,0,802,809,3,84,42,0,803,809,3,86,43,0,804,809,3,88,44,0,805,809,
		3,90,45,0,806,809,3,92,46,0,807,809,3,94,47,0,808,784,1,0,0,0,808,785,
		1,0,0,0,808,789,1,0,0,0,808,790,1,0,0,0,808,791,1,0,0,0,808,792,1,0,0,
		0,808,793,1,0,0,0,808,794,1,0,0,0,808,795,1,0,0,0,808,796,1,0,0,0,808,
		797,1,0,0,0,808,798,1,0,0,0,808,799,1,0,0,0,808,800,1,0,0,0,808,801,1,
		0,0,0,808,802,1,0,0,0,808,803,1,0,0,0,808,804,1,0,0,0,808,805,1,0,0,0,
		808,806,1,0,0,0,808,807,1,0,0,0,809,51,1,0,0,0,810,811,5,243,0,0,811,812,
		5,117,0,0,812,813,5,244,0,0,813,814,5,109,0,0,814,815,3,4,2,0,815,53,1,
		0,0,0,816,817,5,239,0,0,817,821,5,213,0,0,818,819,5,120,0,0,819,820,5,
		167,0,0,820,822,3,450,225,0,821,818,1,0,0,0,821,822,1,0,0,0,822,823,1,
		0,0,0,823,824,5,143,0,0,824,825,5,16,0,0,825,826,3,366,183,0,826,827,5,
		17,0,0,827,828,1,0,0,0,828,829,5,30,0,0,829,830,3,96,48,0,830,55,1,0,0,
		0,831,832,5,235,0,0,832,833,5,213,0,0,833,836,7,1,0,0,834,835,7,2,0,0,
		835,837,5,159,0,0,836,834,1,0,0,0,836,837,1,0,0,0,837,846,1,0,0,0,838,
		839,3,420,210,0,839,840,5,14,0,0,840,842,1,0,0,0,841,838,1,0,0,0,841,842,
		1,0,0,0,842,843,1,0,0,0,843,844,3,420,210,0,844,845,5,14,0,0,845,847,1,
		0,0,0,846,841,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,853,3,420,210,
		0,849,850,5,16,0,0,850,851,3,170,85,0,851,852,5,17,0,0,852,854,1,0,0,0,
		853,849,1,0,0,0,853,854,1,0,0,0,854,865,1,0,0,0,855,857,5,236,0,0,856,
		855,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,859,5,237,0,0,859,860,
		5,16,0,0,860,861,3,450,225,0,861,862,5,24,0,0,862,863,3,376,188,0,863,
		864,5,17,0,0,864,866,1,0,0,0,865,856,1,0,0,0,865,866,1,0,0,0,866,870,1,
		0,0,0,867,868,5,94,0,0,868,869,5,35,0,0,869,871,3,376,188,0,870,867,1,
		0,0,0,870,871,1,0,0,0,871,875,1,0,0,0,872,873,5,166,0,0,873,874,5,35,0,
		0,874,876,3,448,224,0,875,872,1,0,0,0,875,876,1,0,0,0,876,882,1,0,0,0,
		877,878,5,143,0,0,878,879,5,16,0,0,879,880,3,366,183,0,880,881,5,17,0,
		0,881,883,1,0,0,0,882,877,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,
		885,5,60,0,0,885,886,5,238,0,0,886,887,5,16,0,0,887,888,3,366,183,0,888,
		898,5,17,0,0,889,890,5,120,0,0,890,891,5,94,0,0,891,896,5,191,0,0,892,
		893,5,16,0,0,893,894,3,118,59,0,894,895,5,17,0,0,895,897,1,0,0,0,896,892,
		1,0,0,0,896,897,1,0,0,0,897,899,1,0,0,0,898,889,1,0,0,0,898,899,1,0,0,
		0,899,903,1,0,0,0,900,901,5,120,0,0,901,902,5,167,0,0,902,904,3,420,210,
		0,903,900,1,0,0,0,903,904,1,0,0,0,904,57,1,0,0,0,905,906,5,234,0,0,906,
		909,3,376,188,0,907,908,5,30,0,0,908,910,3,402,201,0,909,907,1,0,0,0,909,
		910,1,0,0,0,910,59,1,0,0,0,911,912,5,240,0,0,912,914,3,448,224,0,913,915,
		3,398,199,0,914,913,1,0,0,0,914,915,1,0,0,0,915,918,1,0,0,0,916,917,5,
		44,0,0,917,919,3,376,188,0,918,916,1,0,0,0,918,919,1,0,0,0,919,61,1,0,
		0,0,920,921,5,105,0,0,921,922,3,450,225,0,922,923,5,24,0,0,923,924,3,376,
		188,0,924,935,1,0,0,0,925,926,5,105,0,0,926,927,5,16,0,0,927,928,3,448,
		224,0,928,929,5,17,0,0,929,930,5,24,0,0,930,931,5,16,0,0,931,932,3,378,
		189,0,932,933,5,17,0,0,933,935,1,0,0,0,934,920,1,0,0,0,934,925,1,0,0,0,
		935,63,1,0,0,0,936,937,5,241,0,0,937,938,5,242,0,0,938,941,3,376,188,0,
		939,940,5,73,0,0,940,942,3,378,189,0,941,939,1,0,0,0,941,942,1,0,0,0,942,
		945,1,0,0,0,943,944,5,116,0,0,944,946,3,378,189,0,945,943,1,0,0,0,945,
		946,1,0,0,0,946,65,1,0,0,0,947,948,5,200,0,0,948,949,3,4,2,0,949,950,5,
		49,0,0,950,67,1,0,0,0,951,952,5,200,0,0,952,953,3,4,2,0,953,954,5,49,0,
		0,954,69,1,0,0,0,955,961,5,36,0,0,956,957,5,117,0,0,957,958,3,376,188,
		0,958,959,5,109,0,0,959,960,3,376,188,0,960,962,1,0,0,0,961,956,1,0,0,
		0,962,963,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,0,964,967,1,0,0,0,965,
		966,5,48,0,0,966,968,3,376,188,0,967,965,1,0,0,0,967,968,1,0,0,0,968,969,
		1,0,0,0,969,970,5,49,0,0,970,71,1,0,0,0,971,972,5,36,0,0,972,978,3,376,
		188,0,973,974,5,117,0,0,974,975,3,376,188,0,975,976,5,109,0,0,976,977,
		3,4,2,0,977,979,1,0,0,0,978,973,1,0,0,0,979,980,1,0,0,0,980,978,1,0,0,
		0,980,981,1,0,0,0,981,984,1,0,0,0,982,983,5,48,0,0,983,985,3,4,2,0,984,
		982,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,987,5,49,0,0,987,988,5,
		36,0,0,988,73,1,0,0,0,989,990,5,67,0,0,990,991,3,376,188,0,991,993,5,109,
		0,0,992,994,3,4,2,0,993,992,1,0,0,0,993,994,1,0,0,0,994,1002,1,0,0,0,995,
		996,5,246,0,0,996,997,3,376,188,0,997,998,5,109,0,0,998,999,3,4,2,0,999,
		1001,1,0,0,0,1000,995,1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,
		1003,1,0,0,0,1003,1007,1,0,0,0,1004,1002,1,0,0,0,1005,1006,5,48,0,0,1006,
		1008,3,4,2,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,
		1010,5,49,0,0,1010,1011,5,67,0,0,1011,75,1,0,0,0,1012,1013,3,420,210,0,
		1013,1056,5,2,0,0,1014,1015,5,200,0,0,1015,1016,3,4,2,0,1016,1018,5,49,
		0,0,1017,1019,3,420,210,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1057,
		1,0,0,0,1020,1021,5,247,0,0,1021,1022,3,4,2,0,1022,1023,5,49,0,0,1023,
		1025,5,247,0,0,1024,1026,3,420,210,0,1025,1024,1,0,0,0,1025,1026,1,0,0,
		0,1026,1057,1,0,0,0,1027,1028,5,248,0,0,1028,1029,3,376,188,0,1029,1030,
		5,249,0,0,1030,1031,3,4,2,0,1031,1032,5,49,0,0,1032,1034,5,248,0,0,1033,
		1035,3,420,210,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,1035,1057,1,0,0,0,
		1036,1037,5,59,0,0,1037,1038,3,420,210,0,1038,1039,5,69,0,0,1039,1040,
		3,376,188,0,1040,1041,5,249,0,0,1041,1042,3,4,2,0,1042,1043,5,49,0,0,1043,
		1045,5,59,0,0,1044,1046,3,420,210,0,1045,1044,1,0,0,0,1045,1046,1,0,0,
		0,1046,1057,1,0,0,0,1047,1048,5,250,0,0,1048,1049,3,4,2,0,1049,1050,5,
		251,0,0,1050,1051,3,376,188,0,1051,1052,5,49,0,0,1052,1054,5,250,0,0,1053,
		1055,3,420,210,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1057,1,0,0,0,
		1056,1014,1,0,0,0,1056,1020,1,0,0,0,1056,1027,1,0,0,0,1056,1036,1,0,0,
		0,1056,1047,1,0,0,0,1057,77,1,0,0,0,1058,1059,5,247,0,0,1059,1060,3,4,
		2,0,1060,1061,5,49,0,0,1061,1062,5,247,0,0,1062,79,1,0,0,0,1063,1064,5,
		250,0,0,1064,1065,3,4,2,0,1065,1066,5,251,0,0,1066,1067,3,376,188,0,1067,
		1068,5,49,0,0,1068,1069,5,250,0,0,1069,81,1,0,0,0,1070,1071,5,248,0,0,
		1071,1072,3,376,188,0,1072,1073,5,249,0,0,1073,1074,3,4,2,0,1074,1075,
		5,49,0,0,1075,1076,5,248,0,0,1076,83,1,0,0,0,1077,1078,5,59,0,0,1078,1079,
		3,420,210,0,1079,1080,5,69,0,0,1080,1081,3,376,188,0,1081,1082,5,249,0,
		0,1082,1083,3,4,2,0,1083,1084,5,49,0,0,1084,1085,5,59,0,0,1085,85,1,0,
		0,0,1086,1088,5,200,0,0,1087,1089,5,257,0,0,1088,1087,1,0,0,0,1088,1089,
		1,0,0,0,1089,87,1,0,0,0,1090,1092,5,258,0,0,1091,1093,5,257,0,0,1092,1091,
		1,0,0,0,1092,1093,1,0,0,0,1093,89,1,0,0,0,1094,1096,5,259,0,0,1095,1097,
		5,257,0,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,1097,91,1,0,0,0,1098,1103,
		5,261,0,0,1099,1100,5,116,0,0,1100,1101,5,260,0,0,1101,1102,5,24,0,0,1102,
		1104,3,402,201,0,1103,1099,1,0,0,0,1103,1104,1,0,0,0,1104,93,1,0,0,0,1105,
		1106,5,245,0,0,1106,1107,3,450,225,0,1107,1109,5,16,0,0,1108,1110,3,378,
		189,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,1112,
		5,17,0,0,1112,95,1,0,0,0,1113,1114,3,286,143,0,1114,97,1,0,0,0,1115,1118,
		5,40,0,0,1116,1117,5,90,0,0,1117,1119,5,145,0,0,1118,1116,1,0,0,0,1118,
		1119,1,0,0,0,1119,1121,1,0,0,0,1120,1122,7,2,0,0,1121,1120,1,0,0,0,1121,
		1122,1,0,0,0,1122,1123,1,0,0,0,1123,1127,5,159,0,0,1124,1125,5,67,0,0,
		1125,1126,5,85,0,0,1126,1128,5,54,0,0,1127,1124,1,0,0,0,1127,1128,1,0,
		0,0,1128,1129,1,0,0,0,1129,1134,3,450,225,0,1130,1131,5,16,0,0,1131,1132,
		3,272,136,0,1132,1133,5,17,0,0,1133,1135,1,0,0,0,1134,1130,1,0,0,0,1134,
		1135,1,0,0,0,1135,1139,1,0,0,0,1136,1137,5,44,0,0,1137,1138,5,38,0,0,1138,
		1140,3,402,201,0,1139,1136,1,0,0,0,1139,1140,1,0,0,0,1140,1144,1,0,0,0,
		1141,1142,5,94,0,0,1142,1143,5,35,0,0,1143,1145,3,376,188,0,1144,1141,
		1,0,0,0,1144,1145,1,0,0,0,1145,1149,1,0,0,0,1146,1147,5,166,0,0,1147,1148,
		5,35,0,0,1148,1150,3,448,224,0,1149,1146,1,0,0,0,1149,1150,1,0,0,0,1150,
		1154,1,0,0,0,1151,1152,5,120,0,0,1152,1153,5,167,0,0,1153,1155,3,420,210,
		0,1154,1151,1,0,0,0,1154,1155,1,0,0,0,1155,1161,1,0,0,0,1156,1157,5,143,
		0,0,1157,1158,5,16,0,0,1158,1159,3,366,183,0,1159,1160,5,17,0,0,1160,1162,
		1,0,0,0,1161,1156,1,0,0,0,1161,1162,1,0,0,0,1162,1165,1,0,0,0,1163,1164,
		5,30,0,0,1164,1166,3,96,48,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,
		99,1,0,0,0,1167,1170,5,40,0,0,1168,1169,5,90,0,0,1169,1171,5,145,0,0,1170,
		1168,1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,0,0,0,1172,1176,5,159,0,0,1173,
		1174,5,67,0,0,1174,1175,5,85,0,0,1175,1177,5,54,0,0,1176,1173,1,0,0,0,
		1176,1177,1,0,0,0,1177,1178,1,0,0,0,1178,1179,3,450,225,0,1179,1188,5,
		78,0,0,1180,1181,3,420,210,0,1181,1182,5,14,0,0,1182,1184,1,0,0,0,1183,
		1180,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1186,3,420,210,0,
		1186,1187,5,14,0,0,1187,1189,1,0,0,0,1188,1183,1,0,0,0,1188,1189,1,0,0,
		0,1189,1190,1,0,0,0,1190,1194,3,420,210,0,1191,1192,5,44,0,0,1192,1193,
		5,38,0,0,1193,1195,3,402,201,0,1194,1191,1,0,0,0,1194,1195,1,0,0,0,1195,
		1199,1,0,0,0,1196,1197,5,94,0,0,1197,1198,5,35,0,0,1198,1200,3,376,188,
		0,1199,1196,1,0,0,0,1199,1200,1,0,0,0,1200,1204,1,0,0,0,1201,1202,5,166,
		0,0,1202,1203,5,35,0,0,1203,1205,3,448,224,0,1204,1201,1,0,0,0,1204,1205,
		1,0,0,0,1205,1209,1,0,0,0,1206,1207,5,120,0,0,1207,1208,5,167,0,0,1208,
		1210,3,420,210,0,1209,1206,1,0,0,0,1209,1210,1,0,0,0,1210,1216,1,0,0,0,
		1211,1212,5,143,0,0,1212,1213,5,16,0,0,1213,1214,3,366,183,0,1214,1215,
		5,17,0,0,1215,1217,1,0,0,0,1216,1211,1,0,0,0,1216,1217,1,0,0,0,1217,1220,
		1,0,0,0,1218,1219,5,30,0,0,1219,1221,3,96,48,0,1220,1218,1,0,0,0,1220,
		1221,1,0,0,0,1221,101,1,0,0,0,1222,1225,5,40,0,0,1223,1224,5,90,0,0,1224,
		1226,5,145,0,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,1227,
		1231,5,159,0,0,1228,1229,5,67,0,0,1229,1230,5,85,0,0,1230,1232,5,54,0,
		0,1231,1228,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,1234,3,450,
		225,0,1234,1235,5,169,0,0,1235,1239,3,450,225,0,1236,1237,5,44,0,0,1237,
		1238,5,38,0,0,1238,1240,3,402,201,0,1239,1236,1,0,0,0,1239,1240,1,0,0,
		0,1240,1244,1,0,0,0,1241,1242,5,94,0,0,1242,1243,5,35,0,0,1243,1245,3,
		376,188,0,1244,1241,1,0,0,0,1244,1245,1,0,0,0,1245,1249,1,0,0,0,1246,1247,
		5,166,0,0,1247,1248,5,35,0,0,1248,1250,3,448,224,0,1249,1246,1,0,0,0,1249,
		1250,1,0,0,0,1250,1254,1,0,0,0,1251,1252,5,120,0,0,1252,1253,5,167,0,0,
		1253,1255,3,420,210,0,1254,1251,1,0,0,0,1254,1255,1,0,0,0,1255,1261,1,
		0,0,0,1256,1257,5,143,0,0,1257,1258,5,16,0,0,1258,1259,3,366,183,0,1259,
		1260,5,17,0,0,1260,1262,1,0,0,0,1261,1256,1,0,0,0,1261,1262,1,0,0,0,1262,
		1265,1,0,0,0,1263,1264,5,30,0,0,1264,1266,3,96,48,0,1265,1263,1,0,0,0,
		1265,1266,1,0,0,0,1266,103,1,0,0,0,1267,1268,5,40,0,0,1268,1269,5,170,
		0,0,1269,1273,5,159,0,0,1270,1271,5,67,0,0,1271,1272,5,85,0,0,1272,1274,
		5,54,0,0,1273,1270,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1276,
		3,450,225,0,1276,1277,5,171,0,0,1277,1283,3,450,225,0,1278,1279,5,59,0,
		0,1279,1280,5,150,0,0,1280,1281,5,30,0,0,1281,1282,5,88,0,0,1282,1284,
		3,376,188,0,1283,1278,1,0,0,0,1283,1284,1,0,0,0,1284,1290,1,0,0,0,1285,
		1286,5,143,0,0,1286,1287,5,16,0,0,1287,1288,3,366,183,0,1288,1289,5,17,
		0,0,1289,1291,1,0,0,0,1290,1285,1,0,0,0,1290,1291,1,0,0,0,1291,105,1,0,
		0,0,1292,1293,5,40,0,0,1293,1297,5,159,0,0,1294,1295,5,67,0,0,1295,1296,
		5,85,0,0,1296,1298,5,54,0,0,1297,1294,1,0,0,0,1297,1298,1,0,0,0,1298,1299,
		1,0,0,0,1299,1300,3,450,225,0,1300,1301,5,171,0,0,1301,1307,3,450,225,
		0,1302,1303,5,59,0,0,1303,1304,5,150,0,0,1304,1305,5,30,0,0,1305,1306,
		5,88,0,0,1306,1308,3,376,188,0,1307,1302,1,0,0,0,1307,1308,1,0,0,0,1308,
		1312,1,0,0,0,1309,1310,5,44,0,0,1310,1311,5,38,0,0,1311,1313,3,402,201,
		0,1312,1309,1,0,0,0,1312,1313,1,0,0,0,1313,1317,1,0,0,0,1314,1315,5,94,
		0,0,1315,1316,5,35,0,0,1316,1318,3,376,188,0,1317,1314,1,0,0,0,1317,1318,
		1,0,0,0,1318,1322,1,0,0,0,1319,1320,5,166,0,0,1320,1321,5,35,0,0,1321,
		1323,3,448,224,0,1322,1319,1,0,0,0,1322,1323,1,0,0,0,1323,1327,1,0,0,0,
		1324,1325,5,120,0,0,1325,1326,5,167,0,0,1326,1328,3,420,210,0,1327,1324,
		1,0,0,0,1327,1328,1,0,0,0,1328,1334,1,0,0,0,1329,1330,5,143,0,0,1330,1331,
		5,16,0,0,1331,1332,3,366,183,0,1332,1333,5,17,0,0,1333,1335,1,0,0,0,1334,
		1329,1,0,0,0,1334,1335,1,0,0,0,1335,1338,1,0,0,0,1336,1337,5,30,0,0,1337,
		1339,3,96,48,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,107,1,0,0,0,1340,
		1343,5,40,0,0,1341,1342,5,90,0,0,1342,1344,5,145,0,0,1343,1341,1,0,0,0,
		1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1349,5,172,0,0,1346,1347,5,67,
		0,0,1347,1348,5,85,0,0,1348,1350,5,54,0,0,1349,1346,1,0,0,0,1349,1350,
		1,0,0,0,1350,1351,1,0,0,0,1351,1356,3,450,225,0,1352,1353,5,16,0,0,1353,
		1354,3,268,134,0,1354,1355,5,17,0,0,1355,1357,1,0,0,0,1356,1352,1,0,0,
		0,1356,1357,1,0,0,0,1357,1363,1,0,0,0,1358,1359,5,143,0,0,1359,1360,5,
		16,0,0,1360,1361,3,366,183,0,1361,1362,5,17,0,0,1362,1364,1,0,0,0,1363,
		1358,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1366,5,30,0,0,1366,
		1367,3,286,143,0,1367,109,1,0,0,0,1368,1371,5,40,0,0,1369,1370,5,90,0,
		0,1370,1372,5,145,0,0,1371,1369,1,0,0,0,1371,1372,1,0,0,0,1372,1373,1,
		0,0,0,1373,1374,5,186,0,0,1374,1378,5,172,0,0,1375,1376,5,67,0,0,1376,
		1377,5,85,0,0,1377,1379,5,54,0,0,1378,1375,1,0,0,0,1378,1379,1,0,0,0,1379,
		1380,1,0,0,0,1380,1384,3,450,225,0,1381,1382,5,94,0,0,1382,1383,5,35,0,
		0,1383,1385,3,376,188,0,1384,1381,1,0,0,0,1384,1385,1,0,0,0,1385,1389,
		1,0,0,0,1386,1387,5,166,0,0,1387,1388,5,35,0,0,1388,1390,3,448,224,0,1389,
		1386,1,0,0,0,1389,1390,1,0,0,0,1390,1396,1,0,0,0,1391,1392,5,143,0,0,1392,
		1393,5,16,0,0,1393,1394,3,366,183,0,1394,1395,5,17,0,0,1395,1397,1,0,0,
		0,1396,1391,1,0,0,0,1396,1397,1,0,0,0,1397,1398,1,0,0,0,1398,1399,5,30,
		0,0,1399,1400,3,286,143,0,1400,111,1,0,0,0,1401,1402,5,40,0,0,1402,1403,
		5,186,0,0,1403,1404,5,172,0,0,1404,1410,3,450,225,0,1405,1406,5,143,0,
		0,1406,1407,5,16,0,0,1407,1408,3,366,183,0,1408,1409,5,17,0,0,1409,1411,
		1,0,0,0,1410,1405,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,1413,
		5,30,0,0,1413,1414,5,190,0,0,1414,1415,5,88,0,0,1415,1416,3,450,225,0,
		1416,113,1,0,0,0,1417,1418,5,40,0,0,1418,1419,5,185,0,0,1419,1423,5,156,
		0,0,1420,1421,5,67,0,0,1421,1422,5,85,0,0,1422,1424,5,54,0,0,1423,1420,
		1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,0,1425,1429,3,450,225,0,1426,
		1427,5,120,0,0,1427,1428,5,167,0,0,1428,1430,3,450,225,0,1429,1426,1,0,
		0,0,1429,1430,1,0,0,0,1430,1436,1,0,0,0,1431,1432,5,143,0,0,1432,1433,
		5,16,0,0,1433,1434,3,366,183,0,1434,1435,5,17,0,0,1435,1437,1,0,0,0,1436,
		1431,1,0,0,0,1436,1437,1,0,0,0,1437,115,1,0,0,0,1438,1441,5,40,0,0,1439,
		1440,5,90,0,0,1440,1442,5,145,0,0,1441,1439,1,0,0,0,1441,1442,1,0,0,0,
		1442,1443,1,0,0,0,1443,1444,5,185,0,0,1444,1448,5,159,0,0,1445,1446,5,
		67,0,0,1446,1447,5,85,0,0,1447,1449,5,54,0,0,1448,1445,1,0,0,0,1448,1449,
		1,0,0,0,1449,1450,1,0,0,0,1450,1455,3,450,225,0,1451,1452,5,16,0,0,1452,
		1453,3,118,59,0,1453,1454,5,17,0,0,1454,1456,1,0,0,0,1455,1451,1,0,0,0,
		1455,1456,1,0,0,0,1456,1463,1,0,0,0,1457,1458,5,120,0,0,1458,1461,5,167,
		0,0,1459,1462,3,420,210,0,1460,1462,5,44,0,0,1461,1459,1,0,0,0,1461,1460,
		1,0,0,0,1462,1464,1,0,0,0,1463,1457,1,0,0,0,1463,1464,1,0,0,0,1464,1474,
		1,0,0,0,1465,1466,5,120,0,0,1466,1467,5,94,0,0,1467,1472,5,191,0,0,1468,
		1469,5,16,0,0,1469,1470,3,118,59,0,1470,1471,5,17,0,0,1471,1473,1,0,0,
		0,1472,1468,1,0,0,0,1472,1473,1,0,0,0,1473,1475,1,0,0,0,1474,1465,1,0,
		0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1477,5,143,0,0,1477,1478,
		5,16,0,0,1478,1479,3,366,183,0,1479,1480,5,17,0,0,1480,117,1,0,0,0,1481,
		1486,3,120,60,0,1482,1483,5,15,0,0,1483,1485,3,120,60,0,1484,1482,1,0,
		0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,119,1,0,
		0,0,1488,1486,1,0,0,0,1489,1490,3,420,210,0,1490,1491,3,398,199,0,1491,
		121,1,0,0,0,1492,1495,5,40,0,0,1493,1494,5,90,0,0,1494,1496,5,145,0,0,
		1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,1498,1,0,0,0,1497,1499,7,2,0,
		0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1500,1,0,0,0,1500,1504,5,184,
		0,0,1501,1502,5,67,0,0,1502,1503,5,85,0,0,1503,1505,5,54,0,0,1504,1501,
		1,0,0,0,1504,1505,1,0,0,0,1505,1514,1,0,0,0,1506,1507,3,420,210,0,1507,
		1508,5,14,0,0,1508,1510,1,0,0,0,1509,1506,1,0,0,0,1509,1510,1,0,0,0,1510,
		1511,1,0,0,0,1511,1512,3,420,210,0,1512,1513,5,14,0,0,1513,1515,1,0,0,
		0,1514,1509,1,0,0,0,1514,1515,1,0,0,0,1515,1516,1,0,0,0,1516,1517,3,420,
		210,0,1517,1519,5,16,0,0,1518,1520,3,124,62,0,1519,1518,1,0,0,0,1519,1520,
		1,0,0,0,1520,1521,1,0,0,0,1521,1524,5,17,0,0,1522,1523,5,192,0,0,1523,
		1525,3,398,199,0,1524,1522,1,0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,0,0,
		1526,1527,5,30,0,0,1527,1528,5,16,0,0,1528,1529,3,376,188,0,1529,1535,
		5,17,0,0,1530,1531,5,143,0,0,1531,1532,5,16,0,0,1532,1533,3,366,183,0,
		1533,1534,5,17,0,0,1534,1536,1,0,0,0,1535,1530,1,0,0,0,1535,1536,1,0,0,
		0,1536,123,1,0,0,0,1537,1542,3,126,63,0,1538,1539,5,15,0,0,1539,1541,3,
		126,63,0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,1542,1540,1,0,0,0,1542,1543,
		1,0,0,0,1543,125,1,0,0,0,1544,1542,1,0,0,0,1545,1546,3,420,210,0,1546,
		1547,3,398,199,0,1547,127,1,0,0,0,1548,1551,5,40,0,0,1549,1550,5,90,0,
		0,1550,1552,5,145,0,0,1551,1549,1,0,0,0,1551,1552,1,0,0,0,1552,1554,1,
		0,0,0,1553,1555,7,2,0,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,1556,
		1,0,0,0,1556,1560,5,184,0,0,1557,1558,5,67,0,0,1558,1559,5,85,0,0,1559,
		1561,5,54,0,0,1560,1557,1,0,0,0,1560,1561,1,0,0,0,1561,1570,1,0,0,0,1562,
		1563,3,420,210,0,1563,1564,5,14,0,0,1564,1566,1,0,0,0,1565,1562,1,0,0,
		0,1565,1566,1,0,0,0,1566,1567,1,0,0,0,1567,1568,3,420,210,0,1568,1569,
		5,14,0,0,1569,1571,1,0,0,0,1570,1565,1,0,0,0,1570,1571,1,0,0,0,1571,1572,
		1,0,0,0,1572,1573,3,420,210,0,1573,1575,5,16,0,0,1574,1576,3,124,62,0,
		1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1577,1,0,0,0,1577,1578,5,17,0,
		0,1578,1579,5,192,0,0,1579,1583,3,398,199,0,1580,1584,5,193,0,0,1581,1582,
		5,85,0,0,1582,1584,5,193,0,0,1583,1580,1,0,0,0,1583,1581,1,0,0,0,1583,
		1584,1,0,0,0,1584,1585,1,0,0,0,1585,1586,5,194,0,0,1586,1592,3,420,210,
		0,1587,1588,5,143,0,0,1588,1589,5,16,0,0,1589,1590,3,366,183,0,1590,1591,
		5,17,0,0,1591,1593,1,0,0,0,1592,1587,1,0,0,0,1592,1593,1,0,0,0,1593,1594,
		1,0,0,0,1594,1595,5,30,0,0,1595,1596,3,402,201,0,1596,129,1,0,0,0,1597,
		1600,5,40,0,0,1598,1599,5,90,0,0,1599,1601,5,145,0,0,1600,1598,1,0,0,0,
		1600,1601,1,0,0,0,1601,1603,1,0,0,0,1602,1604,7,2,0,0,1603,1602,1,0,0,
		0,1603,1604,1,0,0,0,1604,1605,1,0,0,0,1605,1609,5,184,0,0,1606,1607,5,
		67,0,0,1607,1608,5,85,0,0,1608,1610,5,54,0,0,1609,1606,1,0,0,0,1609,1610,
		1,0,0,0,1610,1619,1,0,0,0,1611,1612,3,420,210,0,1612,1613,5,14,0,0,1613,
		1615,1,0,0,0,1614,1611,1,0,0,0,1614,1615,1,0,0,0,1615,1616,1,0,0,0,1616,
		1617,3,420,210,0,1617,1618,5,14,0,0,1618,1620,1,0,0,0,1619,1614,1,0,0,
		0,1619,1620,1,0,0,0,1620,1621,1,0,0,0,1621,1622,3,420,210,0,1622,1624,
		5,16,0,0,1623,1625,3,124,62,0,1624,1623,1,0,0,0,1624,1625,1,0,0,0,1625,
		1626,1,0,0,0,1626,1627,5,17,0,0,1627,1628,5,192,0,0,1628,1629,3,398,199,
		0,1629,1630,5,194,0,0,1630,1634,3,420,210,0,1631,1632,5,120,0,0,1632,1633,
		5,167,0,0,1633,1635,3,450,225,0,1634,1631,1,0,0,0,1634,1635,1,0,0,0,1635,
		1636,1,0,0,0,1636,1637,5,143,0,0,1637,1638,5,16,0,0,1638,1639,3,366,183,
		0,1639,1640,5,17,0,0,1640,1641,5,30,0,0,1641,1642,3,402,201,0,1642,131,
		1,0,0,0,1643,1646,5,40,0,0,1644,1645,5,90,0,0,1645,1647,5,145,0,0,1646,
		1644,1,0,0,0,1646,1647,1,0,0,0,1647,1649,1,0,0,0,1648,1650,7,2,0,0,1649,
		1648,1,0,0,0,1649,1650,1,0,0,0,1650,1651,1,0,0,0,1651,1655,5,184,0,0,1652,
		1653,5,67,0,0,1653,1654,5,85,0,0,1654,1656,5,54,0,0,1655,1652,1,0,0,0,
		1655,1656,1,0,0,0,1656,1665,1,0,0,0,1657,1658,3,420,210,0,1658,1659,5,
		14,0,0,1659,1661,1,0,0,0,1660,1657,1,0,0,0,1660,1661,1,0,0,0,1661,1662,
		1,0,0,0,1662,1663,3,420,210,0,1663,1664,5,14,0,0,1664,1666,1,0,0,0,1665,
		1660,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1668,3,420,210,0,
		1668,1670,5,16,0,0,1669,1671,3,124,62,0,1670,1669,1,0,0,0,1670,1671,1,
		0,0,0,1671,1672,1,0,0,0,1672,1673,5,17,0,0,1673,1674,5,192,0,0,1674,1675,
		3,398,199,0,1675,1676,5,195,0,0,1676,1677,5,120,0,0,1677,1678,5,167,0,
		0,1678,1684,3,450,225,0,1679,1680,5,143,0,0,1680,1681,5,16,0,0,1681,1682,
		3,366,183,0,1682,1683,5,17,0,0,1683,1685,1,0,0,0,1684,1679,1,0,0,0,1684,
		1685,1,0,0,0,1685,133,1,0,0,0,1686,1689,5,40,0,0,1687,1688,5,90,0,0,1688,
		1690,5,145,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1692,1,0,0,0,1691,
		1693,7,2,0,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,
		1695,5,196,0,0,1695,1699,5,184,0,0,1696,1697,5,67,0,0,1697,1698,5,85,0,
		0,1698,1700,5,54,0,0,1699,1696,1,0,0,0,1699,1700,1,0,0,0,1700,1709,1,0,
		0,0,1701,1702,3,420,210,0,1702,1703,5,14,0,0,1703,1705,1,0,0,0,1704,1701,
		1,0,0,0,1704,1705,1,0,0,0,1705,1706,1,0,0,0,1706,1707,3,420,210,0,1707,
		1708,5,14,0,0,1708,1710,1,0,0,0,1709,1704,1,0,0,0,1709,1710,1,0,0,0,1710,
		1711,1,0,0,0,1711,1712,3,420,210,0,1712,1714,5,16,0,0,1713,1715,3,136,
		68,0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,1716,1,0,0,0,1716,1719,5,
		17,0,0,1717,1718,5,192,0,0,1718,1720,3,398,199,0,1719,1717,1,0,0,0,1719,
		1720,1,0,0,0,1720,1721,1,0,0,0,1721,1722,5,30,0,0,1722,1723,5,16,0,0,1723,
		1724,3,376,188,0,1724,1730,5,17,0,0,1725,1726,5,143,0,0,1726,1727,5,16,
		0,0,1727,1728,3,366,183,0,1728,1729,5,17,0,0,1729,1731,1,0,0,0,1730,1725,
		1,0,0,0,1730,1731,1,0,0,0,1731,135,1,0,0,0,1732,1737,3,138,69,0,1733,1734,
		5,15,0,0,1734,1736,3,138,69,0,1735,1733,1,0,0,0,1736,1739,1,0,0,0,1737,
		1735,1,0,0,0,1737,1738,1,0,0,0,1738,137,1,0,0,0,1739,1737,1,0,0,0,1740,
		1741,3,450,225,0,1741,1744,3,398,199,0,1742,1743,5,85,0,0,1743,1745,5,
		196,0,0,1744,1742,1,0,0,0,1744,1745,1,0,0,0,1745,139,1,0,0,0,1746,1749,
		5,40,0,0,1747,1748,5,90,0,0,1748,1750,5,145,0,0,1749,1747,1,0,0,0,1749,
		1750,1,0,0,0,1750,1752,1,0,0,0,1751,1753,7,2,0,0,1752,1751,1,0,0,0,1752,
		1753,1,0,0,0,1753,1754,1,0,0,0,1754,1755,5,196,0,0,1755,1759,5,184,0,0,
		1756,1757,5,67,0,0,1757,1758,5,85,0,0,1758,1760,5,54,0,0,1759,1756,1,0,
		0,0,1759,1760,1,0,0,0,1760,1769,1,0,0,0,1761,1762,3,420,210,0,1762,1763,
		5,14,0,0,1763,1765,1,0,0,0,1764,1761,1,0,0,0,1764,1765,1,0,0,0,1765,1766,
		1,0,0,0,1766,1767,3,420,210,0,1767,1768,5,14,0,0,1768,1770,1,0,0,0,1769,
		1764,1,0,0,0,1769,1770,1,0,0,0,1770,1771,1,0,0,0,1771,1772,3,420,210,0,
		1772,1774,5,16,0,0,1773,1775,3,136,68,0,1774,1773,1,0,0,0,1774,1775,1,
		0,0,0,1775,1776,1,0,0,0,1776,1777,5,17,0,0,1777,1778,5,192,0,0,1778,1779,
		3,398,199,0,1779,1780,5,194,0,0,1780,1786,3,420,210,0,1781,1782,5,143,
		0,0,1782,1783,5,16,0,0,1783,1784,3,366,183,0,1784,1785,5,17,0,0,1785,1787,
		1,0,0,0,1786,1781,1,0,0,0,1786,1787,1,0,0,0,1787,1788,1,0,0,0,1788,1789,
		5,30,0,0,1789,1790,3,402,201,0,1790,141,1,0,0,0,1791,1794,5,40,0,0,1792,
		1793,5,90,0,0,1793,1795,5,145,0,0,1794,1792,1,0,0,0,1794,1795,1,0,0,0,
		1795,1796,1,0,0,0,1796,1797,5,159,0,0,1797,1801,5,184,0,0,1798,1799,5,
		67,0,0,1799,1800,5,85,0,0,1800,1802,5,54,0,0,1801,1798,1,0,0,0,1801,1802,
		1,0,0,0,1802,1811,1,0,0,0,1803,1804,3,420,210,0,1804,1805,5,14,0,0,1805,
		1807,1,0,0,0,1806,1803,1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,
		1809,3,420,210,0,1809,1810,5,14,0,0,1810,1812,1,0,0,0,1811,1806,1,0,0,
		0,1811,1812,1,0,0,0,1812,1813,1,0,0,0,1813,1814,3,420,210,0,1814,1816,
		5,16,0,0,1815,1817,3,144,72,0,1816,1815,1,0,0,0,1816,1817,1,0,0,0,1817,
		1818,1,0,0,0,1818,1825,5,17,0,0,1819,1820,5,192,0,0,1820,1821,5,159,0,
		0,1821,1822,5,20,0,0,1822,1823,3,148,74,0,1823,1824,5,21,0,0,1824,1826,
		1,0,0,0,1825,1819,1,0,0,0,1825,1826,1,0,0,0,1826,1832,1,0,0,0,1827,1828,
		5,143,0,0,1828,1829,5,16,0,0,1829,1830,3,366,183,0,1830,1831,5,17,0,0,
		1831,1833,1,0,0,0,1832,1827,1,0,0,0,1832,1833,1,0,0,0,1833,1834,1,0,0,
		0,1834,1835,5,30,0,0,1835,1836,3,376,188,0,1836,143,1,0,0,0,1837,1842,
		3,146,73,0,1838,1839,5,15,0,0,1839,1841,3,146,73,0,1840,1838,1,0,0,0,1841,
		1844,1,0,0,0,1842,1840,1,0,0,0,1842,1843,1,0,0,0,1843,145,1,0,0,0,1844,
		1842,1,0,0,0,1845,1849,3,450,225,0,1846,1850,3,398,199,0,1847,1848,5,28,
		0,0,1848,1850,5,197,0,0,1849,1846,1,0,0,0,1849,1847,1,0,0,0,1850,147,1,
		0,0,0,1851,1856,3,150,75,0,1852,1853,5,15,0,0,1853,1855,3,150,75,0,1854,
		1852,1,0,0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,1856,1857,1,0,0,0,1857,
		149,1,0,0,0,1858,1856,1,0,0,0,1859,1860,3,450,225,0,1860,1861,3,398,199,
		0,1861,151,1,0,0,0,1862,1865,5,40,0,0,1863,1864,5,90,0,0,1864,1866,5,145,
		0,0,1865,1863,1,0,0,0,1865,1866,1,0,0,0,1866,1867,1,0,0,0,1867,1871,5,
		183,0,0,1868,1869,5,67,0,0,1869,1870,5,85,0,0,1870,1872,5,54,0,0,1871,
		1868,1,0,0,0,1871,1872,1,0,0,0,1872,1881,1,0,0,0,1873,1874,3,420,210,0,
		1874,1875,5,14,0,0,1875,1877,1,0,0,0,1876,1873,1,0,0,0,1876,1877,1,0,0,
		0,1877,1878,1,0,0,0,1878,1879,3,420,210,0,1879,1880,5,14,0,0,1880,1882,
		1,0,0,0,1881,1876,1,0,0,0,1881,1882,1,0,0,0,1882,1883,1,0,0,0,1883,1884,
		3,420,210,0,1884,1886,5,16,0,0,1885,1887,3,154,77,0,1886,1885,1,0,0,0,
		1886,1887,1,0,0,0,1887,1888,1,0,0,0,1888,1894,5,17,0,0,1889,1890,5,143,
		0,0,1890,1891,5,16,0,0,1891,1892,3,366,183,0,1892,1893,5,17,0,0,1893,1895,
		1,0,0,0,1894,1889,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1897,
		5,200,0,0,1897,1898,3,4,2,0,1898,1899,5,49,0,0,1899,153,1,0,0,0,1900,1905,
		3,156,78,0,1901,1902,5,15,0,0,1902,1904,3,156,78,0,1903,1901,1,0,0,0,1904,
		1907,1,0,0,0,1905,1903,1,0,0,0,1905,1906,1,0,0,0,1906,155,1,0,0,0,1907,
		1905,1,0,0,0,1908,1910,7,3,0,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,
		1911,1,0,0,0,1911,1912,3,450,225,0,1912,1913,3,398,199,0,1913,157,1,0,
		0,0,1914,1917,5,40,0,0,1915,1916,5,90,0,0,1916,1918,5,145,0,0,1917,1915,
		1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,0,0,0,1919,1923,5,183,0,0,1920,1921,
		5,67,0,0,1921,1922,5,85,0,0,1922,1924,5,54,0,0,1923,1920,1,0,0,0,1923,
		1924,1,0,0,0,1924,1933,1,0,0,0,1925,1926,3,420,210,0,1926,1927,5,14,0,
		0,1927,1929,1,0,0,0,1928,1925,1,0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,
		0,0,1930,1931,3,420,210,0,1931,1932,5,14,0,0,1932,1934,1,0,0,0,1933,1928,
		1,0,0,0,1933,1934,1,0,0,0,1934,1935,1,0,0,0,1935,1936,3,420,210,0,1936,
		1938,5,16,0,0,1937,1939,3,154,77,0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,
		1939,1940,1,0,0,0,1940,1944,5,17,0,0,1941,1942,5,185,0,0,1942,1943,5,201,
		0,0,1943,1945,5,202,0,0,1944,1941,1,0,0,0,1944,1945,1,0,0,0,1945,1946,
		1,0,0,0,1946,1947,5,120,0,0,1947,1948,5,167,0,0,1948,1954,3,450,225,0,
		1949,1950,5,143,0,0,1950,1951,5,16,0,0,1951,1952,3,366,183,0,1952,1953,
		5,17,0,0,1953,1955,1,0,0,0,1954,1949,1,0,0,0,1954,1955,1,0,0,0,1955,1956,
		1,0,0,0,1956,1957,5,194,0,0,1957,1960,3,420,210,0,1958,1959,5,30,0,0,1959,
		1961,3,402,201,0,1960,1958,1,0,0,0,1960,1961,1,0,0,0,1961,159,1,0,0,0,
		1962,1965,5,40,0,0,1963,1964,5,90,0,0,1964,1966,5,145,0,0,1965,1963,1,
		0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,0,0,1967,1968,5,151,0,0,1968,1969,
		5,180,0,0,1969,1973,5,181,0,0,1970,1971,5,67,0,0,1971,1972,5,85,0,0,1972,
		1974,5,54,0,0,1973,1970,1,0,0,0,1973,1974,1,0,0,0,1974,1975,1,0,0,0,1975,
		1976,3,450,225,0,1976,1977,5,89,0,0,1977,1984,3,450,225,0,1978,1979,5,
		206,0,0,1979,1980,5,110,0,0,1980,1981,5,16,0,0,1981,1982,3,378,189,0,1982,
		1983,5,17,0,0,1983,1985,1,0,0,0,1984,1978,1,0,0,0,1984,1985,1,0,0,0,1985,
		1986,1,0,0,0,1986,1987,5,207,0,0,1987,1988,5,116,0,0,1988,1989,5,16,0,
		0,1989,1990,3,376,188,0,1990,1991,5,17,0,0,1991,161,1,0,0,0,1992,1993,
		5,40,0,0,1993,1994,5,179,0,0,1994,1995,3,376,188,0,1995,1996,5,143,0,0,
		1996,1997,5,16,0,0,1997,1998,3,366,183,0,1998,1999,5,17,0,0,1999,163,1,
		0,0,0,2000,2001,5,40,0,0,2001,2002,5,178,0,0,2002,2003,3,376,188,0,2003,
		2004,5,143,0,0,2004,2005,5,16,0,0,2005,2006,3,366,183,0,2006,2007,5,17,
		0,0,2007,165,1,0,0,0,2008,2009,5,40,0,0,2009,2010,5,177,0,0,2010,2011,
		3,376,188,0,2011,2012,5,143,0,0,2012,2013,5,16,0,0,2013,2014,3,366,183,
		0,2014,2015,5,17,0,0,2015,167,1,0,0,0,2016,2017,5,40,0,0,2017,2018,5,174,
		0,0,2018,2022,5,175,0,0,2019,2020,5,67,0,0,2020,2021,5,85,0,0,2021,2023,
		5,54,0,0,2022,2019,1,0,0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,2024,2025,
		3,450,225,0,2025,2026,5,89,0,0,2026,2027,3,450,225,0,2027,2040,5,16,0,
		0,2028,2029,5,26,0,0,2029,2037,5,191,0,0,2030,2031,5,120,0,0,2031,2032,
		5,208,0,0,2032,2033,5,143,0,0,2033,2034,5,16,0,0,2034,2035,3,170,85,0,
		2035,2036,5,17,0,0,2036,2038,1,0,0,0,2037,2030,1,0,0,0,2037,2038,1,0,0,
		0,2038,2041,1,0,0,0,2039,2041,3,170,85,0,2040,2028,1,0,0,0,2040,2039,1,
		0,0,0,2041,2042,1,0,0,0,2042,2048,5,17,0,0,2043,2044,5,143,0,0,2044,2045,
		5,16,0,0,2045,2046,3,366,183,0,2046,2047,5,17,0,0,2047,2049,1,0,0,0,2048,
		2043,1,0,0,0,2048,2049,1,0,0,0,2049,169,1,0,0,0,2050,2055,3,172,86,0,2051,
		2052,5,15,0,0,2052,2054,3,172,86,0,2053,2051,1,0,0,0,2054,2057,1,0,0,0,
		2055,2053,1,0,0,0,2055,2056,1,0,0,0,2056,171,1,0,0,0,2057,2055,1,0,0,0,
		2058,2060,3,450,225,0,2059,2061,3,398,199,0,2060,2059,1,0,0,0,2060,2061,
		1,0,0,0,2061,2067,1,0,0,0,2062,2063,5,143,0,0,2063,2064,5,16,0,0,2064,
		2065,3,366,183,0,2065,2066,5,17,0,0,2066,2068,1,0,0,0,2067,2062,1,0,0,
		0,2067,2068,1,0,0,0,2068,173,1,0,0,0,2069,2072,5,40,0,0,2070,2071,5,90,
		0,0,2071,2073,5,145,0,0,2072,2070,1,0,0,0,2072,2073,1,0,0,0,2073,2074,
		1,0,0,0,2074,2075,5,176,0,0,2075,2079,5,175,0,0,2076,2077,5,67,0,0,2077,
		2078,5,85,0,0,2078,2080,5,54,0,0,2079,2076,1,0,0,0,2079,2080,1,0,0,0,2080,
		2081,1,0,0,0,2081,2082,3,450,225,0,2082,2083,5,89,0,0,2083,2084,3,450,
		225,0,2084,2085,5,16,0,0,2085,2086,3,450,225,0,2086,2092,5,17,0,0,2087,
		2088,5,209,0,0,2088,2089,5,16,0,0,2089,2090,3,448,224,0,2090,2091,5,17,
		0,0,2091,2093,1,0,0,0,2092,2087,1,0,0,0,2092,2093,1,0,0,0,2093,2094,1,
		0,0,0,2094,2095,5,143,0,0,2095,2096,5,16,0,0,2096,2097,3,366,183,0,2097,
		2098,5,17,0,0,2098,175,1,0,0,0,2099,2100,5,210,0,0,2100,2103,5,156,0,0,
		2101,2102,5,67,0,0,2102,2104,5,54,0,0,2103,2101,1,0,0,0,2103,2104,1,0,
		0,0,2104,2108,1,0,0,0,2105,2106,3,420,210,0,2106,2107,5,14,0,0,2107,2109,
		1,0,0,0,2108,2105,1,0,0,0,2108,2109,1,0,0,0,2109,2110,1,0,0,0,2110,2111,
		3,420,210,0,2111,2112,5,105,0,0,2112,2113,5,44,0,0,2113,2114,5,38,0,0,
		2114,2115,3,402,201,0,2115,177,1,0,0,0,2116,2117,5,210,0,0,2117,2120,5,
		156,0,0,2118,2119,5,67,0,0,2119,2121,5,54,0,0,2120,2118,1,0,0,0,2120,2121,
		1,0,0,0,2121,2125,1,0,0,0,2122,2123,3,420,210,0,2123,2124,5,14,0,0,2124,
		2126,1,0,0,0,2125,2122,1,0,0,0,2125,2126,1,0,0,0,2126,2127,1,0,0,0,2127,
		2128,3,420,210,0,2128,2129,5,105,0,0,2129,2130,5,143,0,0,2130,2131,5,16,
		0,0,2131,2132,3,366,183,0,2132,2133,5,17,0,0,2133,179,1,0,0,0,2134,2135,
		5,210,0,0,2135,2138,5,156,0,0,2136,2137,5,67,0,0,2137,2139,5,54,0,0,2138,
		2136,1,0,0,0,2138,2139,1,0,0,0,2139,2143,1,0,0,0,2140,2141,3,420,210,0,
		2141,2142,5,14,0,0,2142,2144,1,0,0,0,2143,2140,1,0,0,0,2143,2144,1,0,0,
		0,2144,2145,1,0,0,0,2145,2146,3,420,210,0,2146,2147,5,211,0,0,2147,2148,
		5,190,0,0,2148,2154,3,450,225,0,2149,2150,5,143,0,0,2150,2151,5,16,0,0,
		2151,2152,3,366,183,0,2152,2153,5,17,0,0,2153,2155,1,0,0,0,2154,2149,1,
		0,0,0,2154,2155,1,0,0,0,2155,181,1,0,0,0,2156,2157,5,210,0,0,2157,2160,
		5,156,0,0,2158,2159,5,67,0,0,2159,2161,5,54,0,0,2160,2158,1,0,0,0,2160,
		2161,1,0,0,0,2161,2162,1,0,0,0,2162,2163,3,450,225,0,2163,2164,5,173,0,
		0,2164,2165,5,190,0,0,2165,2166,3,376,188,0,2166,183,1,0,0,0,2167,2168,
		5,210,0,0,2168,2171,5,159,0,0,2169,2170,5,67,0,0,2170,2172,5,54,0,0,2171,
		2169,1,0,0,0,2171,2172,1,0,0,0,2172,2173,1,0,0,0,2173,2174,3,450,225,0,
		2174,2175,5,105,0,0,2175,2176,5,143,0,0,2176,2177,5,16,0,0,2177,2178,3,
		366,183,0,2178,2179,5,17,0,0,2179,185,1,0,0,0,2180,2181,5,210,0,0,2181,
		2182,5,159,0,0,2182,2183,3,450,225,0,2183,2184,5,211,0,0,2184,2188,5,208,
		0,0,2185,2186,5,67,0,0,2186,2187,5,85,0,0,2187,2189,5,54,0,0,2188,2185,
		1,0,0,0,2188,2189,1,0,0,0,2189,2190,1,0,0,0,2190,2202,3,172,86,0,2191,
		2192,5,15,0,0,2192,2193,5,211,0,0,2193,2197,5,208,0,0,2194,2195,5,67,0,
		0,2195,2196,5,85,0,0,2196,2198,5,54,0,0,2197,2194,1,0,0,0,2197,2198,1,
		0,0,0,2198,2199,1,0,0,0,2199,2201,3,172,86,0,2200,2191,1,0,0,0,2201,2204,
		1,0,0,0,2202,2200,1,0,0,0,2202,2203,1,0,0,0,2203,187,1,0,0,0,2204,2202,
		1,0,0,0,2205,2206,5,210,0,0,2206,2215,5,159,0,0,2207,2208,3,420,210,0,
		2208,2209,5,14,0,0,2209,2211,1,0,0,0,2210,2207,1,0,0,0,2210,2211,1,0,0,
		0,2211,2212,1,0,0,0,2212,2213,3,420,210,0,2213,2214,5,14,0,0,2214,2216,
		1,0,0,0,2215,2210,1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,2218,
		3,420,210,0,2218,2223,3,190,95,0,2219,2220,5,15,0,0,2220,2222,3,190,95,
		0,2221,2219,1,0,0,0,2222,2225,1,0,0,0,2223,2221,1,0,0,0,2223,2224,1,0,
		0,0,2224,189,1,0,0,0,2225,2223,1,0,0,0,2226,2234,5,211,0,0,2227,2231,5,
		160,0,0,2228,2229,5,67,0,0,2229,2230,5,85,0,0,2230,2232,5,54,0,0,2231,
		2228,1,0,0,0,2231,2232,1,0,0,0,2232,2233,1,0,0,0,2233,2235,3,420,210,0,
		2234,2227,1,0,0,0,2234,2235,1,0,0,0,2235,2236,1,0,0,0,2236,2237,5,164,
		0,0,2237,2238,5,163,0,0,2238,2239,5,16,0,0,2239,2240,3,170,85,0,2240,2241,
		5,17,0,0,2241,2242,5,165,0,0,2242,2243,3,420,210,0,2243,2244,5,16,0,0,
		2244,2245,3,170,85,0,2245,2246,5,17,0,0,2246,2247,5,85,0,0,2247,2248,5,
		161,0,0,2248,2259,1,0,0,0,2249,2250,5,211,0,0,2250,2251,5,162,0,0,2251,
		2252,5,163,0,0,2252,2253,5,16,0,0,2253,2254,3,170,85,0,2254,2255,5,17,
		0,0,2255,2256,5,85,0,0,2256,2257,5,161,0,0,2257,2259,1,0,0,0,2258,2226,
		1,0,0,0,2258,2249,1,0,0,0,2259,191,1,0,0,0,2260,2261,5,210,0,0,2261,2270,
		5,159,0,0,2262,2263,3,420,210,0,2263,2264,5,14,0,0,2264,2266,1,0,0,0,2265,
		2262,1,0,0,0,2265,2266,1,0,0,0,2266,2267,1,0,0,0,2267,2268,3,420,210,0,
		2268,2269,5,14,0,0,2269,2271,1,0,0,0,2270,2265,1,0,0,0,2270,2271,1,0,0,
		0,2271,2272,1,0,0,0,2272,2273,3,420,210,0,2273,2274,5,211,0,0,2274,2275,
		5,162,0,0,2275,2276,5,163,0,0,2276,2277,5,16,0,0,2277,2278,3,170,85,0,
		2278,2279,5,17,0,0,2279,2280,5,85,0,0,2280,2281,5,161,0,0,2281,193,1,0,
		0,0,2282,2283,5,210,0,0,2283,2286,5,159,0,0,2284,2285,5,67,0,0,2285,2287,
		5,54,0,0,2286,2284,1,0,0,0,2286,2287,1,0,0,0,2287,2288,1,0,0,0,2288,2289,
		3,450,225,0,2289,2290,5,212,0,0,2290,2291,5,110,0,0,2291,2292,3,450,225,
		0,2292,195,1,0,0,0,2293,2294,5,210,0,0,2294,2297,5,159,0,0,2295,2296,5,
		67,0,0,2296,2298,5,54,0,0,2297,2295,1,0,0,0,2297,2298,1,0,0,0,2298,2299,
		1,0,0,0,2299,2300,3,450,225,0,2300,2305,3,198,99,0,2301,2302,5,15,0,0,
		2302,2304,3,198,99,0,2303,2301,1,0,0,0,2304,2307,1,0,0,0,2305,2303,1,0,
		0,0,2305,2306,1,0,0,0,2306,197,1,0,0,0,2307,2305,1,0,0,0,2308,2309,5,212,
		0,0,2309,2312,5,208,0,0,2310,2311,5,67,0,0,2311,2313,5,54,0,0,2312,2310,
		1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,0,0,0,2314,2319,3,200,100,0,2315,
		2316,5,15,0,0,2316,2318,3,200,100,0,2317,2315,1,0,0,0,2318,2321,1,0,0,
		0,2319,2317,1,0,0,0,2319,2320,1,0,0,0,2320,199,1,0,0,0,2321,2319,1,0,0,
		0,2322,2323,3,420,210,0,2323,2324,5,110,0,0,2324,2325,3,420,210,0,2325,
		201,1,0,0,0,2326,2327,5,210,0,0,2327,2328,5,159,0,0,2328,2329,3,450,225,
		0,2329,2334,3,204,102,0,2330,2331,5,15,0,0,2331,2333,3,204,102,0,2332,
		2330,1,0,0,0,2333,2336,1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,
		203,1,0,0,0,2336,2334,1,0,0,0,2337,2338,5,173,0,0,2338,2341,5,208,0,0,
		2339,2340,5,67,0,0,2340,2342,5,54,0,0,2341,2339,1,0,0,0,2341,2342,1,0,
		0,0,2342,2343,1,0,0,0,2343,2344,3,420,210,0,2344,205,1,0,0,0,2345,2346,
		5,210,0,0,2346,2355,5,159,0,0,2347,2348,3,420,210,0,2348,2349,5,14,0,0,
		2349,2351,1,0,0,0,2350,2347,1,0,0,0,2350,2351,1,0,0,0,2351,2352,1,0,0,
		0,2352,2353,3,420,210,0,2353,2354,5,14,0,0,2354,2356,1,0,0,0,2355,2350,
		1,0,0,0,2355,2356,1,0,0,0,2356,2357,1,0,0,0,2357,2358,3,420,210,0,2358,
		2359,5,173,0,0,2359,2362,5,160,0,0,2360,2361,5,67,0,0,2361,2363,5,54,0,
		0,2362,2360,1,0,0,0,2362,2363,1,0,0,0,2363,2364,1,0,0,0,2364,2365,3,376,
		188,0,2365,207,1,0,0,0,2366,2367,5,210,0,0,2367,2376,5,159,0,0,2368,2369,
		3,420,210,0,2369,2370,5,14,0,0,2370,2372,1,0,0,0,2371,2368,1,0,0,0,2371,
		2372,1,0,0,0,2372,2373,1,0,0,0,2373,2374,3,420,210,0,2374,2375,5,14,0,
		0,2375,2377,1,0,0,0,2376,2371,1,0,0,0,2376,2377,1,0,0,0,2377,2378,1,0,
		0,0,2378,2379,3,420,210,0,2379,2380,5,173,0,0,2380,2381,5,162,0,0,2381,
		2384,5,163,0,0,2382,2383,5,67,0,0,2383,2385,5,54,0,0,2384,2382,1,0,0,0,
		2384,2385,1,0,0,0,2385,209,1,0,0,0,2386,2387,5,210,0,0,2387,2388,5,159,
		0,0,2388,2389,3,450,225,0,2389,2390,5,105,0,0,2390,2391,5,44,0,0,2391,
		2392,5,38,0,0,2392,2393,3,402,201,0,2393,211,1,0,0,0,2394,2395,5,210,0,
		0,2395,2398,7,4,0,0,2396,2397,5,67,0,0,2397,2399,5,54,0,0,2398,2396,1,
		0,0,0,2398,2399,1,0,0,0,2399,2400,1,0,0,0,2400,2401,3,450,225,0,2401,2402,
		5,210,0,0,2402,2405,5,208,0,0,2403,2404,5,67,0,0,2404,2406,5,54,0,0,2405,
		2403,1,0,0,0,2405,2406,1,0,0,0,2406,2407,1,0,0,0,2407,2408,3,420,210,0,
		2408,2409,5,105,0,0,2409,2410,5,143,0,0,2410,2411,5,16,0,0,2411,2412,3,
		366,183,0,2412,2413,5,17,0,0,2413,213,1,0,0,0,2414,2415,5,210,0,0,2415,
		2418,5,159,0,0,2416,2417,5,67,0,0,2417,2419,5,54,0,0,2418,2416,1,0,0,0,
		2418,2419,1,0,0,0,2419,2420,1,0,0,0,2420,2421,3,450,225,0,2421,2422,5,
		210,0,0,2422,2425,5,208,0,0,2423,2424,5,67,0,0,2424,2426,5,54,0,0,2425,
		2423,1,0,0,0,2425,2426,1,0,0,0,2426,2427,1,0,0,0,2427,2428,3,420,210,0,
		2428,2429,5,173,0,0,2429,2430,5,85,0,0,2430,2431,5,86,0,0,2431,215,1,0,
		0,0,2432,2433,5,210,0,0,2433,2436,5,159,0,0,2434,2435,5,67,0,0,2435,2437,
		5,54,0,0,2436,2434,1,0,0,0,2436,2437,1,0,0,0,2437,2438,1,0,0,0,2438,2439,
		3,450,225,0,2439,2440,5,210,0,0,2440,2443,5,208,0,0,2441,2442,5,67,0,0,
		2442,2444,5,54,0,0,2443,2441,1,0,0,0,2443,2444,1,0,0,0,2444,2445,1,0,0,
		0,2445,2446,3,420,210,0,2446,2447,5,105,0,0,2447,2448,5,213,0,0,2448,2449,
		5,197,0,0,2449,2450,3,398,199,0,2450,217,1,0,0,0,2451,2452,5,210,0,0,2452,
		2455,5,159,0,0,2453,2454,5,67,0,0,2454,2456,5,54,0,0,2455,2453,1,0,0,0,
		2455,2456,1,0,0,0,2456,2457,1,0,0,0,2457,2458,3,450,225,0,2458,2459,5,
		210,0,0,2459,2462,5,208,0,0,2460,2461,5,67,0,0,2461,2463,5,54,0,0,2462,
		2460,1,0,0,0,2462,2463,1,0,0,0,2463,2464,1,0,0,0,2464,2465,3,420,210,0,
		2465,2466,5,105,0,0,2466,2467,5,44,0,0,2467,2468,3,376,188,0,2468,219,
		1,0,0,0,2469,2470,5,210,0,0,2470,2473,5,159,0,0,2471,2472,5,67,0,0,2472,
		2474,5,54,0,0,2473,2471,1,0,0,0,2473,2474,1,0,0,0,2474,2475,1,0,0,0,2475,
		2476,3,450,225,0,2476,2477,5,210,0,0,2477,2480,5,208,0,0,2478,2479,5,67,
		0,0,2479,2481,5,54,0,0,2480,2478,1,0,0,0,2480,2481,1,0,0,0,2481,2482,1,
		0,0,0,2482,2483,3,420,210,0,2483,2484,5,173,0,0,2484,2485,5,44,0,0,2485,
		221,1,0,0,0,2486,2487,5,210,0,0,2487,2490,5,172,0,0,2488,2489,5,67,0,0,
		2489,2491,5,54,0,0,2490,2488,1,0,0,0,2490,2491,1,0,0,0,2491,2492,1,0,0,
		0,2492,2493,3,450,225,0,2493,2494,5,105,0,0,2494,2495,5,143,0,0,2495,2496,
		5,16,0,0,2496,2497,3,366,183,0,2497,2498,5,17,0,0,2498,223,1,0,0,0,2499,
		2500,5,210,0,0,2500,2501,5,186,0,0,2501,2504,5,172,0,0,2502,2503,5,67,
		0,0,2503,2505,5,54,0,0,2504,2502,1,0,0,0,2504,2505,1,0,0,0,2505,2506,1,
		0,0,0,2506,2507,3,450,225,0,2507,2508,5,105,0,0,2508,2509,5,143,0,0,2509,
		2510,5,16,0,0,2510,2511,3,366,183,0,2511,2512,5,17,0,0,2512,225,1,0,0,
		0,2513,2514,5,210,0,0,2514,2515,5,214,0,0,2515,2516,5,105,0,0,2516,2517,
		5,143,0,0,2517,2518,5,16,0,0,2518,2519,3,366,183,0,2519,2520,5,17,0,0,
		2520,227,1,0,0,0,2521,2522,5,210,0,0,2522,2523,5,215,0,0,2523,2524,3,450,
		225,0,2524,2525,5,105,0,0,2525,2526,5,143,0,0,2526,2527,5,16,0,0,2527,
		2528,3,366,183,0,2528,2529,5,17,0,0,2529,229,1,0,0,0,2530,2531,5,210,0,
		0,2531,2532,5,216,0,0,2532,2533,3,450,225,0,2533,2534,5,105,0,0,2534,2535,
		5,143,0,0,2535,2536,5,16,0,0,2536,2537,3,366,183,0,2537,2538,5,17,0,0,
		2538,231,1,0,0,0,2539,2540,5,210,0,0,2540,2541,5,179,0,0,2541,2542,3,450,
		225,0,2542,2543,5,105,0,0,2543,2544,5,143,0,0,2544,2545,5,16,0,0,2545,
		2546,3,366,183,0,2546,2547,5,17,0,0,2547,233,1,0,0,0,2548,2549,5,210,0,
		0,2549,2550,5,178,0,0,2550,2551,3,450,225,0,2551,2552,5,105,0,0,2552,2553,
		5,143,0,0,2553,2554,5,16,0,0,2554,2555,3,366,183,0,2555,2556,5,17,0,0,
		2556,235,1,0,0,0,2557,2558,5,189,0,0,2558,2562,5,156,0,0,2559,2560,5,67,
		0,0,2560,2561,5,85,0,0,2561,2563,5,54,0,0,2562,2559,1,0,0,0,2562,2563,
		1,0,0,0,2563,2567,1,0,0,0,2564,2565,3,420,210,0,2565,2566,5,14,0,0,2566,
		2568,1,0,0,0,2567,2564,1,0,0,0,2567,2568,1,0,0,0,2568,2569,1,0,0,0,2569,
		2570,3,420,210,0,2570,237,1,0,0,0,2571,2573,5,173,0,0,2572,2574,5,185,
		0,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2575,1,0,0,0,2575,2578,5,
		156,0,0,2576,2577,5,67,0,0,2577,2579,5,54,0,0,2578,2576,1,0,0,0,2578,2579,
		1,0,0,0,2579,2583,1,0,0,0,2580,2581,3,420,210,0,2581,2582,5,14,0,0,2582,
		2584,1,0,0,0,2583,2580,1,0,0,0,2583,2584,1,0,0,0,2584,2585,1,0,0,0,2585,
		2587,3,420,210,0,2586,2588,7,5,0,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,
		2588,239,1,0,0,0,2589,2590,5,173,0,0,2590,2593,5,159,0,0,2591,2592,5,67,
		0,0,2592,2594,5,54,0,0,2593,2591,1,0,0,0,2593,2594,1,0,0,0,2594,2595,1,
		0,0,0,2595,2596,3,450,225,0,2596,241,1,0,0,0,2597,2598,5,173,0,0,2598,
		2599,5,170,0,0,2599,2602,5,159,0,0,2600,2601,5,67,0,0,2601,2603,5,54,0,
		0,2602,2600,1,0,0,0,2602,2603,1,0,0,0,2603,2604,1,0,0,0,2604,2605,3,450,
		225,0,2605,243,1,0,0,0,2606,2607,5,173,0,0,2607,2608,5,185,0,0,2608,2611,
		5,159,0,0,2609,2610,5,67,0,0,2610,2612,5,54,0,0,2611,2609,1,0,0,0,2611,
		2612,1,0,0,0,2612,2613,1,0,0,0,2613,2614,3,450,225,0,2614,245,1,0,0,0,
		2615,2616,5,173,0,0,2616,2619,5,172,0,0,2617,2618,5,67,0,0,2618,2620,5,
		54,0,0,2619,2617,1,0,0,0,2619,2620,1,0,0,0,2620,2621,1,0,0,0,2621,2622,
		3,450,225,0,2622,247,1,0,0,0,2623,2624,5,173,0,0,2624,2625,5,186,0,0,2625,
		2628,5,172,0,0,2626,2627,5,67,0,0,2627,2629,5,54,0,0,2628,2626,1,0,0,0,
		2628,2629,1,0,0,0,2629,2630,1,0,0,0,2630,2631,3,450,225,0,2631,249,1,0,
		0,0,2632,2633,5,173,0,0,2633,2636,5,184,0,0,2634,2635,5,67,0,0,2635,2637,
		5,54,0,0,2636,2634,1,0,0,0,2636,2637,1,0,0,0,2637,2646,1,0,0,0,2638,2639,
		3,420,210,0,2639,2640,5,14,0,0,2640,2642,1,0,0,0,2641,2638,1,0,0,0,2641,
		2642,1,0,0,0,2642,2643,1,0,0,0,2643,2644,3,420,210,0,2644,2645,5,14,0,
		0,2645,2647,1,0,0,0,2646,2641,1,0,0,0,2646,2647,1,0,0,0,2647,2648,1,0,
		0,0,2648,2649,3,420,210,0,2649,251,1,0,0,0,2650,2651,5,173,0,0,2651,2652,
		5,159,0,0,2652,2655,5,184,0,0,2653,2654,5,67,0,0,2654,2656,5,54,0,0,2655,
		2653,1,0,0,0,2655,2656,1,0,0,0,2656,2665,1,0,0,0,2657,2658,3,420,210,0,
		2658,2659,5,14,0,0,2659,2661,1,0,0,0,2660,2657,1,0,0,0,2660,2661,1,0,0,
		0,2661,2662,1,0,0,0,2662,2663,3,420,210,0,2663,2664,5,14,0,0,2664,2666,
		1,0,0,0,2665,2660,1,0,0,0,2665,2666,1,0,0,0,2666,2667,1,0,0,0,2667,2668,
		3,420,210,0,2668,253,1,0,0,0,2669,2670,5,173,0,0,2670,2673,5,183,0,0,2671,
		2672,5,67,0,0,2672,2674,5,54,0,0,2673,2671,1,0,0,0,2673,2674,1,0,0,0,2674,
		2683,1,0,0,0,2675,2676,3,420,210,0,2676,2677,5,14,0,0,2677,2679,1,0,0,
		0,2678,2675,1,0,0,0,2678,2679,1,0,0,0,2679,2680,1,0,0,0,2680,2681,3,420,
		210,0,2681,2682,5,14,0,0,2682,2684,1,0,0,0,2683,2678,1,0,0,0,2683,2684,
		1,0,0,0,2684,2685,1,0,0,0,2685,2686,3,420,210,0,2686,255,1,0,0,0,2687,
		2688,5,173,0,0,2688,2689,5,151,0,0,2689,2690,5,180,0,0,2690,2693,5,181,
		0,0,2691,2692,5,67,0,0,2692,2694,5,54,0,0,2693,2691,1,0,0,0,2693,2694,
		1,0,0,0,2694,2695,1,0,0,0,2695,2696,3,450,225,0,2696,2697,5,89,0,0,2697,
		2698,3,450,225,0,2698,2707,1,0,0,0,2699,2700,5,173,0,0,2700,2701,5,26,
		0,0,2701,2702,5,151,0,0,2702,2703,5,180,0,0,2703,2704,5,182,0,0,2704,2705,
		5,89,0,0,2705,2707,3,450,225,0,2706,2687,1,0,0,0,2706,2699,1,0,0,0,2707,
		257,1,0,0,0,2708,2709,5,173,0,0,2709,2712,5,179,0,0,2710,2711,5,67,0,0,
		2711,2713,5,54,0,0,2712,2710,1,0,0,0,2712,2713,1,0,0,0,2713,2714,1,0,0,
		0,2714,2715,3,450,225,0,2715,259,1,0,0,0,2716,2717,5,173,0,0,2717,2720,
		5,178,0,0,2718,2719,5,67,0,0,2719,2721,5,54,0,0,2720,2718,1,0,0,0,2720,
		2721,1,0,0,0,2721,2722,1,0,0,0,2722,2723,3,450,225,0,2723,261,1,0,0,0,
		2724,2725,5,173,0,0,2725,2728,5,177,0,0,2726,2727,5,67,0,0,2727,2729,5,
		54,0,0,2728,2726,1,0,0,0,2728,2729,1,0,0,0,2729,2730,1,0,0,0,2730,2731,
		3,450,225,0,2731,263,1,0,0,0,2732,2733,5,173,0,0,2733,2734,5,174,0,0,2734,
		2737,5,175,0,0,2735,2736,5,67,0,0,2736,2738,5,54,0,0,2737,2735,1,0,0,0,
		2737,2738,1,0,0,0,2738,2739,1,0,0,0,2739,2740,3,450,225,0,2740,2741,5,
		89,0,0,2741,2742,3,450,225,0,2742,265,1,0,0,0,2743,2744,5,173,0,0,2744,
		2745,5,176,0,0,2745,2748,5,175,0,0,2746,2747,5,67,0,0,2747,2749,5,54,0,
		0,2748,2746,1,0,0,0,2748,2749,1,0,0,0,2749,2750,1,0,0,0,2750,2751,3,450,
		225,0,2751,2752,5,89,0,0,2752,2753,3,450,225,0,2753,267,1,0,0,0,2754,2759,
		3,270,135,0,2755,2756,5,15,0,0,2756,2758,3,270,135,0,2757,2755,1,0,0,0,
		2758,2761,1,0,0,0,2759,2757,1,0,0,0,2759,2760,1,0,0,0,2760,269,1,0,0,0,
		2761,2759,1,0,0,0,2762,2768,3,450,225,0,2763,2764,5,143,0,0,2764,2765,
		5,16,0,0,2765,2766,3,366,183,0,2766,2767,5,17,0,0,2767,2769,1,0,0,0,2768,
		2763,1,0,0,0,2768,2769,1,0,0,0,2769,271,1,0,0,0,2770,2775,3,274,137,0,
		2771,2772,5,15,0,0,2772,2774,3,274,137,0,2773,2771,1,0,0,0,2774,2777,1,
		0,0,0,2775,2773,1,0,0,0,2775,2776,1,0,0,0,2776,273,1,0,0,0,2777,2775,1,
		0,0,0,2778,2797,3,276,138,0,2779,2797,3,278,139,0,2780,2781,5,160,0,0,
		2781,2783,3,420,210,0,2782,2780,1,0,0,0,2782,2783,1,0,0,0,2783,2784,1,
		0,0,0,2784,2793,3,280,140,0,2785,2788,5,15,0,0,2786,2787,5,160,0,0,2787,
		2789,3,420,210,0,2788,2786,1,0,0,0,2788,2789,1,0,0,0,2789,2790,1,0,0,0,
		2790,2792,3,280,140,0,2791,2785,1,0,0,0,2792,2795,1,0,0,0,2793,2791,1,
		0,0,0,2793,2794,1,0,0,0,2794,2797,1,0,0,0,2795,2793,1,0,0,0,2796,2778,
		1,0,0,0,2796,2779,1,0,0,0,2796,2782,1,0,0,0,2797,275,1,0,0,0,2798,2799,
		3,450,225,0,2799,2800,3,398,199,0,2800,277,1,0,0,0,2801,2802,5,162,0,0,
		2802,2803,5,163,0,0,2803,2804,5,16,0,0,2804,2805,3,448,224,0,2805,2806,
		5,17,0,0,2806,2807,5,85,0,0,2807,2808,5,161,0,0,2808,279,1,0,0,0,2809,
		2810,5,164,0,0,2810,2811,5,163,0,0,2811,2812,5,16,0,0,2812,2813,3,448,
		224,0,2813,2814,5,17,0,0,2814,2815,3,282,141,0,2815,281,1,0,0,0,2816,2817,
		5,165,0,0,2817,2818,3,420,210,0,2818,2819,5,16,0,0,2819,2820,3,448,224,
		0,2820,2821,5,17,0,0,2821,2822,5,85,0,0,2822,2823,5,161,0,0,2823,283,1,
		0,0,0,2824,2825,5,40,0,0,2825,2829,5,156,0,0,2826,2827,5,67,0,0,2827,2828,
		5,85,0,0,2828,2830,5,54,0,0,2829,2826,1,0,0,0,2829,2830,1,0,0,0,2830,2834,
		1,0,0,0,2831,2832,3,420,210,0,2832,2833,5,14,0,0,2833,2835,1,0,0,0,2834,
		2831,1,0,0,0,2834,2835,1,0,0,0,2835,2836,1,0,0,0,2836,2840,3,420,210,0,
		2837,2838,5,44,0,0,2838,2839,5,38,0,0,2839,2841,3,402,201,0,2840,2837,
		1,0,0,0,2840,2841,1,0,0,0,2841,2847,1,0,0,0,2842,2843,5,143,0,0,2843,2844,
		5,16,0,0,2844,2845,3,366,183,0,2845,2846,5,17,0,0,2846,2848,1,0,0,0,2847,
		2842,1,0,0,0,2847,2848,1,0,0,0,2848,285,1,0,0,0,2849,2850,6,143,-1,0,2850,
		2852,5,120,0,0,2851,2853,5,99,0,0,2852,2851,1,0,0,0,2852,2853,1,0,0,0,
		2853,2856,1,0,0,0,2854,2857,3,292,146,0,2855,2857,3,294,147,0,2856,2854,
		1,0,0,0,2856,2855,1,0,0,0,2857,2865,1,0,0,0,2858,2861,5,15,0,0,2859,2862,
		3,292,146,0,2860,2862,3,294,147,0,2861,2859,1,0,0,0,2861,2860,1,0,0,0,
		2862,2864,1,0,0,0,2863,2858,1,0,0,0,2864,2867,1,0,0,0,2865,2863,1,0,0,
		0,2865,2866,1,0,0,0,2866,2876,1,0,0,0,2867,2865,1,0,0,0,2868,2877,3,298,
		149,0,2869,2870,5,16,0,0,2870,2871,3,286,143,0,2871,2872,5,17,0,0,2872,
		2877,1,0,0,0,2873,2874,3,286,143,0,2874,2875,3,290,145,0,2875,2877,1,0,
		0,0,2876,2868,1,0,0,0,2876,2869,1,0,0,0,2876,2873,1,0,0,0,2877,2878,1,
		0,0,0,2878,2879,3,288,144,0,2879,2889,1,0,0,0,2880,2881,3,298,149,0,2881,
		2882,3,288,144,0,2882,2889,1,0,0,0,2883,2884,5,16,0,0,2884,2885,3,286,
		143,0,2885,2886,5,17,0,0,2886,2887,3,288,144,0,2887,2889,1,0,0,0,2888,
		2849,1,0,0,0,2888,2880,1,0,0,0,2888,2883,1,0,0,0,2889,2896,1,0,0,0,2890,
		2891,10,1,0,0,2891,2892,3,290,145,0,2892,2893,3,288,144,0,2893,2895,1,
		0,0,0,2894,2890,1,0,0,0,2895,2898,1,0,0,0,2896,2894,1,0,0,0,2896,2897,
		1,0,0,0,2897,287,1,0,0,0,2898,2896,1,0,0,0,2899,2900,5,91,0,0,2900,2901,
		5,35,0,0,2901,2903,3,376,188,0,2902,2904,7,6,0,0,2903,2902,1,0,0,0,2903,
		2904,1,0,0,0,2904,2912,1,0,0,0,2905,2906,5,15,0,0,2906,2908,3,376,188,
		0,2907,2909,7,6,0,0,2908,2907,1,0,0,0,2908,2909,1,0,0,0,2909,2911,1,0,
		0,0,2910,2905,1,0,0,0,2911,2914,1,0,0,0,2912,2910,1,0,0,0,2912,2913,1,
		0,0,0,2913,2916,1,0,0,0,2914,2912,1,0,0,0,2915,2899,1,0,0,0,2915,2916,
		1,0,0,0,2916,2923,1,0,0,0,2917,2918,5,79,0,0,2918,2921,3,376,188,0,2919,
		2920,5,138,0,0,2920,2922,3,376,188,0,2921,2919,1,0,0,0,2921,2922,1,0,0,
		0,2922,2924,1,0,0,0,2923,2917,1,0,0,0,2923,2924,1,0,0,0,2924,289,1,0,0,
		0,2925,2931,5,70,0,0,2926,2928,7,7,0,0,2927,2929,5,92,0,0,2928,2927,1,
		0,0,0,2928,2929,1,0,0,0,2929,2931,1,0,0,0,2930,2925,1,0,0,0,2930,2926,
		1,0,0,0,2930,2931,1,0,0,0,2931,2938,1,0,0,0,2932,2933,5,114,0,0,2933,2939,
		7,8,0,0,2934,2935,5,71,0,0,2935,2939,5,47,0,0,2936,2937,5,52,0,0,2937,
		2939,5,47,0,0,2938,2932,1,0,0,0,2938,2934,1,0,0,0,2938,2936,1,0,0,0,2939,
		2962,1,0,0,0,2940,2941,5,35,0,0,2941,2947,5,139,0,0,2942,2943,5,89,0,0,
		2943,2944,5,16,0,0,2944,2945,3,448,224,0,2945,2946,5,17,0,0,2946,2948,
		1,0,0,0,2947,2942,1,0,0,0,2947,2948,1,0,0,0,2948,2961,1,0,0,0,2949,2951,
		5,140,0,0,2950,2949,1,0,0,0,2950,2951,1,0,0,0,2951,2952,1,0,0,0,2952,2958,
		5,141,0,0,2953,2954,5,35,0,0,2954,2955,5,16,0,0,2955,2956,3,448,224,0,
		2956,2957,5,17,0,0,2957,2959,1,0,0,0,2958,2953,1,0,0,0,2958,2959,1,0,0,
		0,2959,2961,1,0,0,0,2960,2940,1,0,0,0,2960,2950,1,0,0,0,2961,2963,1,0,
		0,0,2962,2960,1,0,0,0,2962,2963,1,0,0,0,2963,2964,1,0,0,0,2964,2965,3,
		286,143,0,2965,291,1,0,0,0,2966,2967,3,420,210,0,2967,2968,5,30,0,0,2968,
		2969,5,16,0,0,2969,2970,3,286,143,0,2970,2971,5,17,0,0,2971,293,1,0,0,
		0,2972,2973,3,420,210,0,2973,2974,5,30,0,0,2974,2975,3,296,148,0,2975,
		295,1,0,0,0,2976,2977,3,286,143,0,2977,2978,5,114,0,0,2978,2979,5,26,0,
		0,2979,2980,3,286,143,0,2980,297,1,0,0,0,2981,2984,5,104,0,0,2982,2983,
		5,120,0,0,2983,2985,3,332,166,0,2984,2982,1,0,0,0,2984,2985,1,0,0,0,2985,
		2987,1,0,0,0,2986,2988,7,8,0,0,2987,2986,1,0,0,0,2987,2988,1,0,0,0,2988,
		2991,1,0,0,0,2989,2990,5,30,0,0,2990,2992,7,9,0,0,2991,2989,1,0,0,0,2991,
		2992,1,0,0,0,2992,2993,1,0,0,0,2993,2996,3,370,185,0,2994,2995,5,60,0,
		0,2995,2997,3,334,167,0,2996,2994,1,0,0,0,2996,2997,1,0,0,0,2997,3000,
		1,0,0,0,2998,2999,5,118,0,0,2999,3001,3,376,188,0,3000,2998,1,0,0,0,3000,
		3001,1,0,0,0,3001,3005,1,0,0,0,3002,3003,5,62,0,0,3003,3004,5,35,0,0,3004,
		3006,3,300,150,0,3005,3002,1,0,0,0,3005,3006,1,0,0,0,3006,3009,1,0,0,0,
		3007,3008,5,66,0,0,3008,3010,3,376,188,0,3009,3007,1,0,0,0,3009,3010,1,
		0,0,0,3010,3013,1,0,0,0,3011,3012,5,97,0,0,3012,3014,3,376,188,0,3013,
		3011,1,0,0,0,3013,3014,1,0,0,0,3014,3017,1,0,0,0,3015,3016,5,119,0,0,3016,
		3018,3,314,157,0,3017,3015,1,0,0,0,3017,3018,1,0,0,0,3018,299,1,0,0,0,
		3019,3027,3,378,189,0,3020,3027,5,26,0,0,3021,3027,3,302,151,0,3022,3027,
		3,312,156,0,3023,3027,3,308,154,0,3024,3025,5,16,0,0,3025,3027,5,17,0,
		0,3026,3019,1,0,0,0,3026,3020,1,0,0,0,3026,3021,1,0,0,0,3026,3022,1,0,
		0,0,3026,3023,1,0,0,0,3026,3024,1,0,0,0,3027,301,1,0,0,0,3028,3029,5,62,
		0,0,3029,3030,5,35,0,0,3030,3031,5,63,0,0,3031,3032,5,154,0,0,3032,3033,
		5,16,0,0,3033,3034,3,304,152,0,3034,3035,5,17,0,0,3035,303,1,0,0,0,3036,
		3041,3,306,153,0,3037,3038,5,15,0,0,3038,3040,3,306,153,0,3039,3037,1,
		0,0,0,3040,3043,1,0,0,0,3041,3039,1,0,0,0,3041,3042,1,0,0,0,3042,305,1,
		0,0,0,3043,3041,1,0,0,0,3044,3049,3,312,156,0,3045,3049,3,308,154,0,3046,
		3049,3,376,188,0,3047,3049,3,310,155,0,3048,3044,1,0,0,0,3048,3045,1,0,
		0,0,3048,3046,1,0,0,0,3048,3047,1,0,0,0,3049,307,1,0,0,0,3050,3051,5,62,
		0,0,3051,3052,5,35,0,0,3052,3053,5,42,0,0,3053,3054,5,16,0,0,3054,3055,
		3,304,152,0,3055,3056,5,17,0,0,3056,309,1,0,0,0,3057,3058,5,16,0,0,3058,
		3059,3,378,189,0,3059,3060,5,17,0,0,3060,311,1,0,0,0,3061,3062,5,62,0,
		0,3062,3063,5,35,0,0,3063,3064,5,102,0,0,3064,3065,5,16,0,0,3065,3066,
		3,304,152,0,3066,3067,5,17,0,0,3067,313,1,0,0,0,3068,3073,3,316,158,0,
		3069,3070,5,15,0,0,3070,3072,3,316,158,0,3071,3069,1,0,0,0,3072,3075,1,
		0,0,0,3073,3071,1,0,0,0,3073,3074,1,0,0,0,3074,315,1,0,0,0,3075,3073,1,
		0,0,0,3076,3077,3,450,225,0,3077,3083,5,30,0,0,3078,3084,3,450,225,0,3079,
		3080,5,16,0,0,3080,3081,3,318,159,0,3081,3082,5,17,0,0,3082,3084,1,0,0,
		0,3083,3078,1,0,0,0,3083,3079,1,0,0,0,3084,317,1,0,0,0,3085,3087,3,450,
		225,0,3086,3085,1,0,0,0,3086,3087,1,0,0,0,3087,3091,1,0,0,0,3088,3089,
		5,94,0,0,3089,3090,5,35,0,0,3090,3092,3,378,189,0,3091,3088,1,0,0,0,3091,
		3092,1,0,0,0,3092,3096,1,0,0,0,3093,3094,5,91,0,0,3094,3095,5,35,0,0,3095,
		3097,3,386,193,0,3096,3093,1,0,0,0,3096,3097,1,0,0,0,3097,3099,1,0,0,0,
		3098,3100,3,320,160,0,3099,3098,1,0,0,0,3099,3100,1,0,0,0,3100,319,1,0,
		0,0,3101,3104,7,10,0,0,3102,3105,3,322,161,0,3103,3105,3,324,162,0,3104,
		3102,1,0,0,0,3104,3103,1,0,0,0,3105,321,1,0,0,0,3106,3107,5,113,0,0,3107,
		3116,5,95,0,0,3108,3109,3,376,188,0,3109,3110,5,95,0,0,3110,3116,1,0,0,
		0,3111,3112,5,43,0,0,3112,3114,5,151,0,0,3113,3111,1,0,0,0,3113,3114,1,
		0,0,0,3114,3116,1,0,0,0,3115,3106,1,0,0,0,3115,3108,1,0,0,0,3115,3113,
		1,0,0,0,3116,323,1,0,0,0,3117,3118,5,34,0,0,3118,3119,5,113,0,0,3119,3120,
		5,95,0,0,3120,3121,5,27,0,0,3121,3140,3,326,163,0,3122,3123,5,34,0,0,3123,
		3124,3,376,188,0,3124,3125,5,95,0,0,3125,3126,5,27,0,0,3126,3127,3,326,
		163,0,3127,3140,1,0,0,0,3128,3129,5,34,0,0,3129,3130,5,43,0,0,3130,3131,
		5,151,0,0,3131,3132,5,27,0,0,3132,3140,3,328,164,0,3133,3134,5,34,0,0,
		3134,3135,3,376,188,0,3135,3136,5,58,0,0,3136,3137,5,27,0,0,3137,3138,
		3,330,165,0,3138,3140,1,0,0,0,3139,3117,1,0,0,0,3139,3122,1,0,0,0,3139,
		3128,1,0,0,0,3139,3133,1,0,0,0,3140,325,1,0,0,0,3141,3142,3,376,188,0,
		3142,3143,5,95,0,0,3143,3152,1,0,0,0,3144,3145,5,43,0,0,3145,3152,5,151,
		0,0,3146,3147,3,376,188,0,3147,3148,5,58,0,0,3148,3152,1,0,0,0,3149,3150,
		5,113,0,0,3150,3152,5,58,0,0,3151,3141,1,0,0,0,3151,3144,1,0,0,0,3151,
		3146,1,0,0,0,3151,3149,1,0,0,0,3152,327,1,0,0,0,3153,3154,5,43,0,0,3154,
		3161,5,151,0,0,3155,3156,3,376,188,0,3156,3157,5,58,0,0,3157,3161,1,0,
		0,0,3158,3159,5,113,0,0,3159,3161,5,58,0,0,3160,3153,1,0,0,0,3160,3155,
		1,0,0,0,3160,3158,1,0,0,0,3161,329,1,0,0,0,3162,3163,3,376,188,0,3163,
		3164,5,58,0,0,3164,3168,1,0,0,0,3165,3166,5,113,0,0,3166,3168,5,58,0,0,
		3167,3162,1,0,0,0,3167,3165,1,0,0,0,3168,331,1,0,0,0,3169,3170,5,142,0,
		0,3170,3171,5,143,0,0,3171,3172,5,16,0,0,3172,3173,3,366,183,0,3173,3174,
		5,17,0,0,3174,333,1,0,0,0,3175,3180,3,336,168,0,3176,3177,5,15,0,0,3177,
		3179,3,336,168,0,3178,3176,1,0,0,0,3179,3182,1,0,0,0,3180,3178,1,0,0,0,
		3180,3181,1,0,0,0,3181,335,1,0,0,0,3182,3180,1,0,0,0,3183,3186,3,338,169,
		0,3184,3187,3,352,176,0,3185,3187,3,354,177,0,3186,3184,1,0,0,0,3186,3185,
		1,0,0,0,3186,3187,1,0,0,0,3187,3189,1,0,0,0,3188,3190,3,364,182,0,3189,
		3188,1,0,0,0,3189,3190,1,0,0,0,3190,337,1,0,0,0,3191,3192,6,169,-1,0,3192,
		3194,3,420,210,0,3193,3195,3,422,211,0,3194,3193,1,0,0,0,3194,3195,1,0,
		0,0,3195,3201,1,0,0,0,3196,3197,5,59,0,0,3197,3198,5,150,0,0,3198,3199,
		5,30,0,0,3199,3200,5,88,0,0,3200,3202,3,376,188,0,3201,3196,1,0,0,0,3201,
		3202,1,0,0,0,3202,3231,1,0,0,0,3203,3213,5,16,0,0,3204,3205,3,338,169,
		0,3205,3206,3,342,171,0,3206,3207,3,338,169,0,3207,3214,1,0,0,0,3208,3209,
		3,338,169,0,3209,3210,3,344,172,0,3210,3211,3,338,169,0,3211,3212,3,346,
		173,0,3212,3214,1,0,0,0,3213,3204,1,0,0,0,3213,3208,1,0,0,0,3214,3215,
		1,0,0,0,3215,3216,5,17,0,0,3216,3231,1,0,0,0,3217,3218,5,16,0,0,3218,3219,
		3,286,143,0,3219,3221,5,17,0,0,3220,3222,3,422,211,0,3221,3220,1,0,0,0,
		3221,3222,1,0,0,0,3222,3231,1,0,0,0,3223,3231,3,450,225,0,3224,3231,3,
		340,170,0,3225,3227,3,450,225,0,3226,3228,3,422,211,0,3227,3226,1,0,0,
		0,3227,3228,1,0,0,0,3228,3231,1,0,0,0,3229,3231,3,424,212,0,3230,3191,
		1,0,0,0,3230,3203,1,0,0,0,3230,3217,1,0,0,0,3230,3223,1,0,0,0,3230,3224,
		1,0,0,0,3230,3225,1,0,0,0,3230,3229,1,0,0,0,3231,3243,1,0,0,0,3232,3233,
		10,8,0,0,3233,3234,3,342,171,0,3234,3235,3,338,169,9,3235,3242,1,0,0,0,
		3236,3237,10,7,0,0,3237,3238,3,344,172,0,3238,3239,3,338,169,0,3239,3240,
		3,346,173,0,3240,3242,1,0,0,0,3241,3232,1,0,0,0,3241,3236,1,0,0,0,3242,
		3245,1,0,0,0,3243,3241,1,0,0,0,3243,3244,1,0,0,0,3244,339,1,0,0,0,3245,
		3243,1,0,0,0,3246,3247,5,115,0,0,3247,3248,5,16,0,0,3248,3249,3,376,188,
		0,3249,3251,5,17,0,0,3250,3252,3,422,211,0,3251,3250,1,0,0,0,3251,3252,
		1,0,0,0,3252,3258,1,0,0,0,3253,3255,3,450,225,0,3254,3256,3,422,211,0,
		3255,3254,1,0,0,0,3255,3256,1,0,0,0,3256,3258,1,0,0,0,3257,3246,1,0,0,
		0,3257,3253,1,0,0,0,3258,3264,1,0,0,0,3259,3260,5,120,0,0,3260,3262,5,
		138,0,0,3261,3263,3,422,211,0,3262,3261,1,0,0,0,3262,3263,1,0,0,0,3263,
		3265,1,0,0,0,3264,3259,1,0,0,0,3264,3265,1,0,0,0,3265,341,1,0,0,0,3266,
		3267,5,41,0,0,3267,3270,5,75,0,0,3268,3270,5,15,0,0,3269,3266,1,0,0,0,
		3269,3268,1,0,0,0,3270,343,1,0,0,0,3271,3273,5,70,0,0,3272,3271,1,0,0,
		0,3272,3273,1,0,0,0,3273,3274,1,0,0,0,3274,3291,5,75,0,0,3275,3277,5,61,
		0,0,3276,3278,5,92,0,0,3277,3276,1,0,0,0,3277,3278,1,0,0,0,3278,3279,1,
		0,0,0,3279,3291,5,75,0,0,3280,3282,5,77,0,0,3281,3283,5,92,0,0,3282,3281,
		1,0,0,0,3282,3283,1,0,0,0,3283,3284,1,0,0,0,3284,3291,5,75,0,0,3285,3287,
		5,101,0,0,3286,3288,5,92,0,0,3287,3286,1,0,0,0,3287,3288,1,0,0,0,3288,
		3289,1,0,0,0,3289,3291,5,75,0,0,3290,3272,1,0,0,0,3290,3275,1,0,0,0,3290,
		3280,1,0,0,0,3290,3285,1,0,0,0,3291,345,1,0,0,0,3292,3295,3,348,174,0,
		3293,3295,3,350,175,0,3294,3292,1,0,0,0,3294,3293,1,0,0,0,3295,347,1,0,
		0,0,3296,3297,5,89,0,0,3297,3298,3,376,188,0,3298,349,1,0,0,0,3299,3300,
		5,116,0,0,3300,3301,5,16,0,0,3301,3302,3,448,224,0,3302,3303,5,17,0,0,
		3303,351,1,0,0,0,3304,3305,5,148,0,0,3305,3306,5,16,0,0,3306,3308,3,424,
		212,0,3307,3309,3,422,211,0,3308,3307,1,0,0,0,3308,3309,1,0,0,0,3309,3317,
		1,0,0,0,3310,3311,5,15,0,0,3311,3313,3,424,212,0,3312,3314,3,422,211,0,
		3313,3312,1,0,0,0,3313,3314,1,0,0,0,3314,3316,1,0,0,0,3315,3310,1,0,0,
		0,3316,3319,1,0,0,0,3317,3315,1,0,0,0,3317,3318,1,0,0,0,3318,3320,1,0,
		0,0,3319,3317,1,0,0,0,3320,3321,5,59,0,0,3321,3322,3,420,210,0,3322,3323,
		5,69,0,0,3323,3324,5,16,0,0,3324,3325,3,384,192,0,3325,3326,5,17,0,0,3326,
		3329,5,17,0,0,3327,3328,5,30,0,0,3328,3330,3,420,210,0,3329,3327,1,0,0,
		0,3329,3330,1,0,0,0,3330,353,1,0,0,0,3331,3336,5,149,0,0,3332,3333,5,152,
		0,0,3333,3337,5,87,0,0,3334,3335,5,53,0,0,3335,3337,5,87,0,0,3336,3332,
		1,0,0,0,3336,3334,1,0,0,0,3336,3337,1,0,0,0,3337,3338,1,0,0,0,3338,3341,
		5,16,0,0,3339,3342,3,356,178,0,3340,3342,3,358,179,0,3341,3339,1,0,0,0,
		3341,3340,1,0,0,0,3342,3343,1,0,0,0,3343,3345,5,17,0,0,3344,3346,3,422,
		211,0,3345,3344,1,0,0,0,3345,3346,1,0,0,0,3346,355,1,0,0,0,3347,3348,3,
		378,189,0,3348,3349,5,59,0,0,3349,3350,3,450,225,0,3350,3351,5,69,0,0,
		3351,3352,5,16,0,0,3352,3353,3,360,180,0,3353,3354,5,17,0,0,3354,357,1,
		0,0,0,3355,3356,5,16,0,0,3356,3357,3,378,189,0,3357,3358,5,17,0,0,3358,
		3359,5,59,0,0,3359,3360,3,450,225,0,3360,3361,5,69,0,0,3361,3362,5,16,
		0,0,3362,3363,3,362,181,0,3363,3364,5,17,0,0,3364,359,1,0,0,0,3365,3367,
		3,376,188,0,3366,3368,3,422,211,0,3367,3366,1,0,0,0,3367,3368,1,0,0,0,
		3368,3376,1,0,0,0,3369,3370,5,15,0,0,3370,3372,3,376,188,0,3371,3373,3,
		420,210,0,3372,3371,1,0,0,0,3372,3373,1,0,0,0,3373,3375,1,0,0,0,3374,3369,
		1,0,0,0,3375,3378,1,0,0,0,3376,3374,1,0,0,0,3376,3377,1,0,0,0,3377,361,
		1,0,0,0,3378,3376,1,0,0,0,3379,3380,5,16,0,0,3380,3382,3,376,188,0,3381,
		3383,3,422,211,0,3382,3381,1,0,0,0,3382,3383,1,0,0,0,3383,3391,1,0,0,0,
		3384,3385,5,15,0,0,3385,3387,3,376,188,0,3386,3388,3,420,210,0,3387,3386,
		1,0,0,0,3387,3388,1,0,0,0,3388,3390,1,0,0,0,3389,3384,1,0,0,0,3390,3393,
		1,0,0,0,3391,3389,1,0,0,0,3391,3392,1,0,0,0,3392,3394,1,0,0,0,3393,3391,
		1,0,0,0,3394,3395,5,17,0,0,3395,363,1,0,0,0,3396,3397,5,108,0,0,3397,3398,
		5,146,0,0,3398,3399,5,16,0,0,3399,3400,3,376,188,0,3400,3401,5,147,0,0,
		3401,3402,5,17,0,0,3402,365,1,0,0,0,3403,3408,3,368,184,0,3404,3405,5,
		15,0,0,3405,3407,3,368,184,0,3406,3404,1,0,0,0,3407,3410,1,0,0,0,3408,
		3406,1,0,0,0,3408,3409,1,0,0,0,3409,367,1,0,0,0,3410,3408,1,0,0,0,3411,
		3412,3,420,210,0,3412,3413,5,24,0,0,3413,3414,3,376,188,0,3414,369,1,0,
		0,0,3415,3420,3,372,186,0,3416,3417,5,15,0,0,3417,3419,3,372,186,0,3418,
		3416,1,0,0,0,3419,3422,1,0,0,0,3420,3418,1,0,0,0,3420,3421,1,0,0,0,3421,
		371,1,0,0,0,3422,3420,1,0,0,0,3423,3429,3,374,187,0,3424,3426,3,376,188,
		0,3425,3427,3,422,211,0,3426,3425,1,0,0,0,3426,3427,1,0,0,0,3427,3429,
		1,0,0,0,3428,3423,1,0,0,0,3428,3424,1,0,0,0,3429,373,1,0,0,0,3430,3431,
		3,376,188,0,3431,3432,5,14,0,0,3432,3434,1,0,0,0,3433,3430,1,0,0,0,3433,
		3434,1,0,0,0,3434,3435,1,0,0,0,3435,3441,5,10,0,0,3436,3437,5,52,0,0,3437,
		3438,5,16,0,0,3438,3439,3,448,224,0,3439,3440,5,17,0,0,3440,3442,1,0,0,
		0,3441,3436,1,0,0,0,3441,3442,1,0,0,0,3442,3448,1,0,0,0,3443,3444,5,145,
		0,0,3444,3445,5,16,0,0,3445,3446,3,452,226,0,3446,3447,5,17,0,0,3447,3449,
		1,0,0,0,3448,3443,1,0,0,0,3448,3449,1,0,0,0,3449,375,1,0,0,0,3450,3451,
		6,188,-1,0,3451,3452,5,16,0,0,3452,3453,3,286,143,0,3453,3454,5,17,0,0,
		3454,3477,1,0,0,0,3455,3477,3,298,149,0,3456,3477,3,450,225,0,3457,3458,
		7,11,0,0,3458,3477,3,376,188,22,3459,3460,5,85,0,0,3460,3477,3,376,188,
		12,3461,3462,5,54,0,0,3462,3463,5,16,0,0,3463,3464,3,376,188,0,3464,3465,
		5,17,0,0,3465,3477,1,0,0,0,3466,3467,5,115,0,0,3467,3468,5,16,0,0,3468,
		3469,3,376,188,0,3469,3470,5,17,0,0,3470,3477,1,0,0,0,3471,3477,3,424,
		212,0,3472,3477,3,442,221,0,3473,3477,3,388,194,0,3474,3477,3,380,190,
		0,3475,3477,3,382,191,0,3476,3450,1,0,0,0,3476,3455,1,0,0,0,3476,3456,
		1,0,0,0,3476,3457,1,0,0,0,3476,3459,1,0,0,0,3476,3461,1,0,0,0,3476,3466,
		1,0,0,0,3476,3471,1,0,0,0,3476,3472,1,0,0,0,3476,3473,1,0,0,0,3476,3474,
		1,0,0,0,3476,3475,1,0,0,0,3477,3557,1,0,0,0,3478,3479,10,21,0,0,3479,3480,
		7,12,0,0,3480,3556,3,376,188,22,3481,3482,10,20,0,0,3482,3483,7,13,0,0,
		3483,3556,3,376,188,21,3484,3489,10,19,0,0,3485,3486,5,20,0,0,3486,3490,
		5,20,0,0,3487,3488,5,21,0,0,3488,3490,5,21,0,0,3489,3485,1,0,0,0,3489,
		3487,1,0,0,0,3490,3491,1,0,0,0,3491,3556,3,376,188,20,3492,3493,10,18,
		0,0,3493,3494,5,7,0,0,3494,3556,3,376,188,19,3495,3496,10,17,0,0,3496,
		3497,5,8,0,0,3497,3556,3,376,188,18,3498,3499,10,16,0,0,3499,3500,5,9,
		0,0,3500,3556,3,376,188,17,3501,3512,10,15,0,0,3502,3513,5,24,0,0,3503,
		3513,5,25,0,0,3504,3513,5,20,0,0,3505,3513,5,21,0,0,3506,3513,5,22,0,0,
		3507,3513,5,23,0,0,3508,3510,5,85,0,0,3509,3508,1,0,0,0,3509,3510,1,0,
		0,0,3510,3511,1,0,0,0,3511,3513,7,14,0,0,3512,3502,1,0,0,0,3512,3503,1,
		0,0,0,3512,3504,1,0,0,0,3512,3505,1,0,0,0,3512,3506,1,0,0,0,3512,3507,
		1,0,0,0,3512,3509,1,0,0,0,3513,3514,1,0,0,0,3514,3556,3,376,188,16,3515,
		3516,10,13,0,0,3516,3518,5,74,0,0,3517,3519,5,85,0,0,3518,3517,1,0,0,0,
		3518,3519,1,0,0,0,3519,3520,1,0,0,0,3520,3521,5,47,0,0,3521,3522,5,60,
		0,0,3522,3556,3,376,188,14,3523,3524,10,11,0,0,3524,3525,5,27,0,0,3525,
		3556,3,376,188,12,3526,3527,10,10,0,0,3527,3528,5,90,0,0,3528,3556,3,376,
		188,11,3529,3531,10,6,0,0,3530,3532,5,85,0,0,3531,3530,1,0,0,0,3531,3532,
		1,0,0,0,3532,3533,1,0,0,0,3533,3534,5,78,0,0,3534,3535,7,15,0,0,3535,3556,
		3,376,188,7,3536,3537,10,24,0,0,3537,3538,5,14,0,0,3538,3556,3,450,225,
		0,3539,3540,10,23,0,0,3540,3541,5,18,0,0,3541,3542,3,376,188,0,3542,3543,
		5,19,0,0,3543,3556,1,0,0,0,3544,3545,10,14,0,0,3545,3547,5,74,0,0,3546,
		3548,5,85,0,0,3547,3546,1,0,0,0,3547,3548,1,0,0,0,3548,3549,1,0,0,0,3549,
		3556,7,16,0,0,3550,3552,10,9,0,0,3551,3553,5,30,0,0,3552,3551,1,0,0,0,
		3552,3553,1,0,0,0,3553,3554,1,0,0,0,3554,3556,3,420,210,0,3555,3478,1,
		0,0,0,3555,3481,1,0,0,0,3555,3484,1,0,0,0,3555,3492,1,0,0,0,3555,3495,
		1,0,0,0,3555,3498,1,0,0,0,3555,3501,1,0,0,0,3555,3515,1,0,0,0,3555,3523,
		1,0,0,0,3555,3526,1,0,0,0,3555,3529,1,0,0,0,3555,3536,1,0,0,0,3555,3539,
		1,0,0,0,3555,3544,1,0,0,0,3555,3550,1,0,0,0,3556,3559,1,0,0,0,3557,3555,
		1,0,0,0,3557,3558,1,0,0,0,3558,377,1,0,0,0,3559,3557,1,0,0,0,3560,3565,
		3,376,188,0,3561,3562,5,15,0,0,3562,3564,3,376,188,0,3563,3561,1,0,0,0,
		3564,3567,1,0,0,0,3565,3563,1,0,0,0,3565,3566,1,0,0,0,3566,379,1,0,0,0,
		3567,3565,1,0,0,0,3568,3569,5,36,0,0,3569,3575,3,376,188,0,3570,3571,5,
		117,0,0,3571,3572,3,376,188,0,3572,3573,5,109,0,0,3573,3574,3,376,188,
		0,3574,3576,1,0,0,0,3575,3570,1,0,0,0,3576,3577,1,0,0,0,3577,3575,1,0,
		0,0,3577,3578,1,0,0,0,3578,3581,1,0,0,0,3579,3580,5,48,0,0,3580,3582,3,
		376,188,0,3581,3579,1,0,0,0,3581,3582,1,0,0,0,3582,3583,1,0,0,0,3583,3584,
		5,49,0,0,3584,381,1,0,0,0,3585,3586,5,203,0,0,3586,3587,5,16,0,0,3587,
		3588,3,378,189,0,3588,3589,5,17,0,0,3589,383,1,0,0,0,3590,3592,3,378,189,
		0,3591,3593,3,422,211,0,3592,3591,1,0,0,0,3592,3593,1,0,0,0,3593,3601,
		1,0,0,0,3594,3595,5,15,0,0,3595,3597,3,378,189,0,3596,3598,3,422,211,0,
		3597,3596,1,0,0,0,3597,3598,1,0,0,0,3598,3600,1,0,0,0,3599,3594,1,0,0,
		0,3600,3603,1,0,0,0,3601,3599,1,0,0,0,3601,3602,1,0,0,0,3602,385,1,0,0,
		0,3603,3601,1,0,0,0,3604,3606,3,376,188,0,3605,3607,7,6,0,0,3606,3605,
		1,0,0,0,3606,3607,1,0,0,0,3607,3615,1,0,0,0,3608,3609,5,15,0,0,3609,3611,
		3,376,188,0,3610,3612,7,6,0,0,3611,3610,1,0,0,0,3611,3612,1,0,0,0,3612,
		3614,1,0,0,0,3613,3608,1,0,0,0,3614,3617,1,0,0,0,3615,3613,1,0,0,0,3615,
		3616,1,0,0,0,3616,387,1,0,0,0,3617,3615,1,0,0,0,3618,3640,3,402,201,0,
		3619,3640,3,418,209,0,3620,3640,3,390,195,0,3621,3640,3,392,196,0,3622,
		3640,3,394,197,0,3623,3640,3,396,198,0,3624,3640,3,404,202,0,3625,3640,
		3,406,203,0,3626,3640,3,408,204,0,3627,3640,3,410,205,0,3628,3640,3,412,
		206,0,3629,3640,3,414,207,0,3630,3640,3,416,208,0,3631,3640,5,283,0,0,
		3632,3640,5,284,0,0,3633,3640,5,86,0,0,3634,3640,5,112,0,0,3635,3640,5,
		56,0,0,3636,3640,5,276,0,0,3637,3640,5,275,0,0,3638,3640,5,44,0,0,3639,
		3618,1,0,0,0,3639,3619,1,0,0,0,3639,3620,1,0,0,0,3639,3621,1,0,0,0,3639,
		3622,1,0,0,0,3639,3623,1,0,0,0,3639,3624,1,0,0,0,3639,3625,1,0,0,0,3639,
		3626,1,0,0,0,3639,3627,1,0,0,0,3639,3628,1,0,0,0,3639,3629,1,0,0,0,3639,
		3630,1,0,0,0,3639,3631,1,0,0,0,3639,3632,1,0,0,0,3639,3633,1,0,0,0,3639,
		3634,1,0,0,0,3639,3635,1,0,0,0,3639,3636,1,0,0,0,3639,3637,1,0,0,0,3639,
		3638,1,0,0,0,3640,389,1,0,0,0,3641,3642,5,125,0,0,3642,3643,3,402,201,
		0,3643,391,1,0,0,0,3644,3645,5,122,0,0,3645,3646,3,402,201,0,3646,393,
		1,0,0,0,3647,3652,5,29,0,0,3648,3649,5,20,0,0,3649,3650,3,398,199,0,3650,
		3651,5,21,0,0,3651,3653,1,0,0,0,3652,3648,1,0,0,0,3652,3653,1,0,0,0,3653,
		3655,1,0,0,0,3654,3647,1,0,0,0,3654,3655,1,0,0,0,3655,3656,1,0,0,0,3656,
		3658,5,18,0,0,3657,3659,3,378,189,0,3658,3657,1,0,0,0,3658,3659,1,0,0,
		0,3659,3660,1,0,0,0,3660,3661,5,19,0,0,3661,395,1,0,0,0,3662,3674,5,107,
		0,0,3663,3664,5,20,0,0,3664,3669,3,398,199,0,3665,3666,5,15,0,0,3666,3668,
		3,398,199,0,3667,3665,1,0,0,0,3668,3671,1,0,0,0,3669,3667,1,0,0,0,3669,
		3670,1,0,0,0,3670,3672,1,0,0,0,3671,3669,1,0,0,0,3672,3673,5,21,0,0,3673,
		3675,1,0,0,0,3674,3663,1,0,0,0,3674,3675,1,0,0,0,3675,3677,1,0,0,0,3676,
		3662,1,0,0,0,3676,3677,1,0,0,0,3677,3678,1,0,0,0,3678,3679,5,16,0,0,3679,
		3680,3,378,189,0,3680,3681,5,17,0,0,3681,397,1,0,0,0,3682,3694,3,400,200,
		0,3683,3684,5,20,0,0,3684,3689,3,398,199,0,3685,3686,5,15,0,0,3686,3688,
		3,398,199,0,3687,3685,1,0,0,0,3688,3691,1,0,0,0,3689,3687,1,0,0,0,3689,
		3690,1,0,0,0,3690,3692,1,0,0,0,3691,3689,1,0,0,0,3692,3693,5,21,0,0,3693,
		3695,1,0,0,0,3694,3683,1,0,0,0,3694,3695,1,0,0,0,3695,3701,1,0,0,0,3696,
		3697,3,420,210,0,3697,3698,3,398,199,0,3698,3701,1,0,0,0,3699,3701,3,420,
		210,0,3700,3682,1,0,0,0,3700,3696,1,0,0,0,3700,3699,1,0,0,0,3701,3706,
		1,0,0,0,3702,3703,5,16,0,0,3703,3704,3,378,189,0,3704,3705,5,17,0,0,3705,
		3707,1,0,0,0,3706,3702,1,0,0,0,3706,3707,1,0,0,0,3707,3710,1,0,0,0,3708,
		3709,5,38,0,0,3709,3711,3,402,201,0,3710,3708,1,0,0,0,3710,3711,1,0,0,
		0,3711,3714,1,0,0,0,3712,3713,5,85,0,0,3713,3715,5,86,0,0,3714,3712,1,
		0,0,0,3714,3715,1,0,0,0,3715,3721,1,0,0,0,3716,3717,5,143,0,0,3717,3718,
		5,16,0,0,3718,3719,3,366,183,0,3719,3720,5,17,0,0,3720,3722,1,0,0,0,3721,
		3716,1,0,0,0,3721,3722,1,0,0,0,3722,399,1,0,0,0,3723,3726,3,456,228,0,
		3724,3726,3,420,210,0,3725,3723,1,0,0,0,3725,3724,1,0,0,0,3726,401,1,0,
		0,0,3727,3728,7,17,0,0,3728,403,1,0,0,0,3729,3730,5,123,0,0,3730,3731,
		3,402,201,0,3731,405,1,0,0,0,3732,3733,5,233,0,0,3733,3734,3,402,201,0,
		3734,407,1,0,0,0,3735,3736,5,124,0,0,3736,3737,3,402,201,0,3737,409,1,
		0,0,0,3738,3739,5,126,0,0,3739,3740,3,402,201,0,3740,411,1,0,0,0,3741,
		3742,5,98,0,0,3742,3743,5,20,0,0,3743,3744,7,18,0,0,3744,3745,5,21,0,0,
		3745,3746,3,402,201,0,3746,413,1,0,0,0,3747,3756,5,72,0,0,3748,3749,3,
		376,188,0,3749,3750,3,458,229,0,3750,3757,1,0,0,0,3751,3752,3,402,201,
		0,3752,3753,3,458,229,0,3753,3754,5,110,0,0,3754,3755,3,458,229,0,3755,
		3757,1,0,0,0,3756,3748,1,0,0,0,3756,3751,1,0,0,0,3757,415,1,0,0,0,3758,
		3759,5,137,0,0,3759,3760,3,402,201,0,3760,417,1,0,0,0,3761,3762,7,19,0,
		0,3762,419,1,0,0,0,3763,3764,7,20,0,0,3764,421,1,0,0,0,3765,3767,5,30,
		0,0,3766,3765,1,0,0,0,3766,3767,1,0,0,0,3767,3768,1,0,0,0,3768,3769,3,
		420,210,0,3769,423,1,0,0,0,3770,3771,3,426,213,0,3771,3773,5,16,0,0,3772,
		3774,3,428,214,0,3773,3772,1,0,0,0,3773,3774,1,0,0,0,3774,3775,1,0,0,0,
		3775,3778,5,17,0,0,3776,3777,5,93,0,0,3777,3779,3,444,222,0,3778,3776,
		1,0,0,0,3778,3779,1,0,0,0,3779,425,1,0,0,0,3780,3783,3,456,228,0,3781,
		3783,3,450,225,0,3782,3780,1,0,0,0,3782,3781,1,0,0,0,3783,427,1,0,0,0,
		3784,3786,5,47,0,0,3785,3784,1,0,0,0,3785,3786,1,0,0,0,3786,3787,1,0,0,
		0,3787,3788,3,430,215,0,3788,3789,3,434,217,0,3789,429,1,0,0,0,3790,3795,
		3,432,216,0,3791,3792,5,15,0,0,3792,3794,3,432,216,0,3793,3791,1,0,0,0,
		3794,3797,1,0,0,0,3795,3793,1,0,0,0,3795,3796,1,0,0,0,3796,431,1,0,0,0,
		3797,3795,1,0,0,0,3798,3801,5,10,0,0,3799,3801,3,376,188,0,3800,3798,1,
		0,0,0,3800,3799,1,0,0,0,3801,3821,1,0,0,0,3802,3803,5,60,0,0,3803,3822,
		3,376,188,0,3804,3805,5,6,0,0,3805,3822,3,376,188,0,3806,3807,5,66,0,0,
		3807,3808,7,21,0,0,3808,3822,3,376,188,0,3809,3810,5,30,0,0,3810,3812,
		3,398,199,0,3811,3813,3,446,223,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,
		3813,3817,1,0,0,0,3814,3815,5,33,0,0,3815,3816,5,232,0,0,3816,3818,3,376,
		188,0,3817,3814,1,0,0,0,3817,3818,1,0,0,0,3818,3822,1,0,0,0,3819,3820,
		7,22,0,0,3820,3822,5,87,0,0,3821,3802,1,0,0,0,3821,3804,1,0,0,0,3821,3806,
		1,0,0,0,3821,3809,1,0,0,0,3821,3819,1,0,0,0,3821,3822,1,0,0,0,3822,3825,
		1,0,0,0,3823,3825,3,286,143,0,3824,3800,1,0,0,0,3824,3823,1,0,0,0,3825,
		433,1,0,0,0,3826,3828,3,438,219,0,3827,3826,1,0,0,0,3827,3828,1,0,0,0,
		3828,3830,1,0,0,0,3829,3831,3,436,218,0,3830,3829,1,0,0,0,3830,3831,1,
		0,0,0,3831,435,1,0,0,0,3832,3833,5,79,0,0,3833,3834,3,376,188,0,3834,437,
		1,0,0,0,3835,3840,3,440,220,0,3836,3837,5,15,0,0,3837,3839,3,440,220,0,
		3838,3836,1,0,0,0,3839,3842,1,0,0,0,3840,3838,1,0,0,0,3840,3841,1,0,0,
		0,3841,439,1,0,0,0,3842,3840,1,0,0,0,3843,3844,5,91,0,0,3844,3845,5,35,
		0,0,3845,3847,3,376,188,0,3846,3848,7,6,0,0,3847,3846,1,0,0,0,3847,3848,
		1,0,0,0,3848,441,1,0,0,0,3849,3850,3,420,210,0,3850,3853,5,16,0,0,3851,
		3854,3,378,189,0,3852,3854,5,10,0,0,3853,3851,1,0,0,0,3853,3852,1,0,0,
		0,3853,3854,1,0,0,0,3854,3855,1,0,0,0,3855,3856,5,17,0,0,3856,3857,5,93,
		0,0,3857,3858,3,444,222,0,3858,443,1,0,0,0,3859,3861,3,420,210,0,3860,
		3862,3,422,211,0,3861,3860,1,0,0,0,3861,3862,1,0,0,0,3862,3868,1,0,0,0,
		3863,3864,5,16,0,0,3864,3865,3,318,159,0,3865,3866,5,17,0,0,3866,3868,
		1,0,0,0,3867,3859,1,0,0,0,3867,3863,1,0,0,0,3868,445,1,0,0,0,3869,3870,
		5,153,0,0,3870,3871,3,376,188,0,3871,447,1,0,0,0,3872,3877,3,450,225,0,
		3873,3874,5,15,0,0,3874,3876,3,450,225,0,3875,3873,1,0,0,0,3876,3879,1,
		0,0,0,3877,3875,1,0,0,0,3877,3878,1,0,0,0,3878,449,1,0,0,0,3879,3877,1,
		0,0,0,3880,3888,3,420,210,0,3881,3884,5,14,0,0,3882,3885,3,420,210,0,3883,
		3885,3,456,228,0,3884,3882,1,0,0,0,3884,3883,1,0,0,0,3885,3887,1,0,0,0,
		3886,3881,1,0,0,0,3887,3890,1,0,0,0,3888,3886,1,0,0,0,3888,3889,1,0,0,
		0,3889,451,1,0,0,0,3890,3888,1,0,0,0,3891,3896,3,454,227,0,3892,3893,5,
		15,0,0,3893,3895,3,454,227,0,3894,3892,1,0,0,0,3895,3898,1,0,0,0,3896,
		3894,1,0,0,0,3896,3897,1,0,0,0,3897,453,1,0,0,0,3898,3896,1,0,0,0,3899,
		3900,3,376,188,0,3900,3901,5,30,0,0,3901,3902,3,420,210,0,3902,455,1,0,
		0,0,3903,3904,7,23,0,0,3904,457,1,0,0,0,3905,3906,7,24,0,0,3906,459,1,
		0,0,0,3907,3916,5,40,0,0,3908,3917,5,271,0,0,3909,3910,5,271,0,0,3910,
		3911,5,67,0,0,3911,3912,5,85,0,0,3912,3917,5,54,0,0,3913,3914,5,90,0,0,
		3914,3915,5,145,0,0,3915,3917,5,271,0,0,3916,3908,1,0,0,0,3916,3909,1,
		0,0,0,3916,3913,1,0,0,0,3917,3918,1,0,0,0,3918,3924,3,450,225,0,3919,3920,
		5,272,0,0,3920,3921,5,16,0,0,3921,3922,3,370,185,0,3922,3923,5,17,0,0,
		3923,3925,1,0,0,0,3924,3919,1,0,0,0,3924,3925,1,0,0,0,3925,3931,1,0,0,
		0,3926,3927,5,273,0,0,3927,3928,3,462,231,0,3928,3929,5,274,0,0,3929,3930,
		3,462,231,0,3930,3932,1,0,0,0,3931,3926,1,0,0,0,3931,3932,1,0,0,0,3932,
		3937,1,0,0,0,3933,3934,5,195,0,0,3934,3935,5,120,0,0,3935,3936,5,167,0,
		0,3936,3938,3,376,188,0,3937,3933,1,0,0,0,3937,3938,1,0,0,0,3938,3944,
		1,0,0,0,3939,3940,5,143,0,0,3940,3941,5,16,0,0,3941,3942,3,366,183,0,3942,
		3943,5,17,0,0,3943,3945,1,0,0,0,3944,3939,1,0,0,0,3944,3945,1,0,0,0,3945,
		3958,1,0,0,0,3946,3956,5,30,0,0,3947,3957,3,96,48,0,3948,3949,5,16,0,0,
		3949,3950,3,420,210,0,3950,3951,5,30,0,0,3951,3952,5,16,0,0,3952,3953,
		3,96,48,0,3953,3954,5,17,0,0,3954,3955,5,17,0,0,3955,3957,1,0,0,0,3956,
		3947,1,0,0,0,3956,3948,1,0,0,0,3957,3959,1,0,0,0,3958,3946,1,0,0,0,3958,
		3959,1,0,0,0,3959,461,1,0,0,0,3960,3961,5,16,0,0,3961,3962,3,420,210,0,
		3962,3969,3,398,199,0,3963,3964,5,15,0,0,3964,3965,3,420,210,0,3965,3966,
		3,398,199,0,3966,3968,1,0,0,0,3967,3963,1,0,0,0,3968,3971,1,0,0,0,3969,
		3967,1,0,0,0,3969,3970,1,0,0,0,3970,3972,1,0,0,0,3971,3969,1,0,0,0,3972,
		3973,5,17,0,0,3973,463,1,0,0,0,457,470,477,485,492,497,503,515,585,592,
		596,603,618,622,626,630,640,645,652,658,672,677,681,690,695,701,706,713,
		717,729,734,745,755,759,774,787,808,821,836,841,846,853,856,865,870,875,
		882,896,898,903,909,914,918,934,941,945,963,967,980,984,993,1002,1007,
		1018,1025,1034,1045,1054,1056,1088,1092,1096,1103,1109,1118,1121,1127,
		1134,1139,1144,1149,1154,1161,1165,1170,1176,1183,1188,1194,1199,1204,
		1209,1216,1220,1225,1231,1239,1244,1249,1254,1261,1265,1273,1283,1290,
		1297,1307,1312,1317,1322,1327,1334,1338,1343,1349,1356,1363,1371,1378,
		1384,1389,1396,1410,1423,1429,1436,1441,1448,1455,1461,1463,1472,1474,
		1486,1495,1498,1504,1509,1514,1519,1524,1535,1542,1551,1554,1560,1565,
		1570,1575,1583,1592,1600,1603,1609,1614,1619,1624,1634,1646,1649,1655,
		1660,1665,1670,1684,1689,1692,1699,1704,1709,1714,1719,1730,1737,1744,
		1749,1752,1759,1764,1769,1774,1786,1794,1801,1806,1811,1816,1825,1832,
		1842,1849,1856,1865,1871,1876,1881,1886,1894,1905,1909,1917,1923,1928,
		1933,1938,1944,1954,1960,1965,1973,1984,2022,2037,2040,2048,2055,2060,
		2067,2072,2079,2092,2103,2108,2120,2125,2138,2143,2154,2160,2171,2188,
		2197,2202,2210,2215,2223,2231,2234,2258,2265,2270,2286,2297,2305,2312,
		2319,2334,2341,2350,2355,2362,2371,2376,2384,2398,2405,2418,2425,2436,
		2443,2455,2462,2473,2480,2490,2504,2562,2567,2573,2578,2583,2587,2593,
		2602,2611,2619,2628,2636,2641,2646,2655,2660,2665,2673,2678,2683,2693,
		2706,2712,2720,2728,2737,2748,2759,2768,2775,2782,2788,2793,2796,2829,
		2834,2840,2847,2852,2856,2861,2865,2876,2888,2896,2903,2908,2912,2915,
		2921,2923,2928,2930,2938,2947,2950,2958,2960,2962,2984,2987,2991,2996,
		3000,3005,3009,3013,3017,3026,3041,3048,3073,3083,3086,3091,3096,3099,
		3104,3113,3115,3139,3151,3160,3167,3180,3186,3189,3194,3201,3213,3221,
		3227,3230,3241,3243,3251,3255,3257,3262,3264,3269,3272,3277,3282,3287,
		3290,3294,3308,3313,3317,3329,3336,3341,3345,3367,3372,3376,3382,3387,
		3391,3408,3420,3426,3428,3433,3441,3448,3476,3489,3509,3512,3518,3531,
		3547,3552,3555,3557,3565,3577,3581,3592,3597,3601,3606,3611,3615,3639,
		3652,3654,3658,3669,3674,3676,3689,3694,3700,3706,3710,3714,3721,3725,
		3756,3766,3773,3778,3782,3785,3795,3800,3812,3817,3821,3824,3827,3830,
		3840,3847,3853,3861,3867,3877,3884,3888,3896,3916,3924,3931,3937,3944,
		3956,3958,3969
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BigO.BigQuery.Parser
