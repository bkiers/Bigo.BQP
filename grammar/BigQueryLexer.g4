lexer grammar BigQueryLexer;

options { caseInsensitive=true; }

COL : ':';
BNOT : '~';
CONCAT : '||';
SCOL : ';';
ARROW : '=>';
BAND : '&';
BXOR : '^';
BOR : '|';
STAR : '*';
DIV : '/';
PLUS : '+';
SUB : '-';
DOT : '.';
COMMA : ',';
OPAR : '(';
CPAR : ')';
OBR : '[';
CBR : ']';
LT : '<';
GT : '>';
LTE : '<=';
GTE : '>=';
EQ : '=';
NEQ : '<>' | '!=';

// Reserved
ALL : 'ALL';
AND : 'AND';
ANY : 'ANY';
ARRAY : 'ARRAY';
AS : 'AS';
ASC : 'ASC';
ASSERT_ROWS_MODIFIED : 'ASSERT_ROWS_MODIFIED';
AT : 'AT';
BETWEEN : 'BETWEEN';
BY : 'BY';
CASE : 'CASE';
CAST : 'CAST';
COLLATE : 'COLLATE';
CONTAINS : 'CONTAINS';
CREATE : 'CREATE';
CROSS : 'CROSS';
CUBE : 'CUBE';
CURRENT : 'CURRENT';
DEFAULT : 'DEFAULT';
DEFINE : 'DEFINE';
DESC : 'DESC';
DISTINCT : 'DISTINCT';
ELSE : 'ELSE';
END : 'END';
ENUM : 'ENUM';
ESCAPE : 'ESCAPE';
EXCEPT : 'EXCEPT';
EXCLUDE : 'EXCLUDE';
EXISTS : 'EXISTS';
EXTRACT : 'EXTRACT';
FALSE : 'FALSE';
FETCH : 'FETCH';
FOLLOWING : 'FOLLOWING';
FOR : 'FOR';
FROM : 'FROM';
FULL : 'FULL';
GROUP : 'GROUP';
GROUPING : 'GROUPING';
GROUPS : 'GROUPS';
HASH : 'HASH';
HAVING : 'HAVING';
IF : 'IF';
IGNORE : 'IGNORE';
IN : 'IN';
INNER : 'INNER';
INTERSECT : 'INTERSECT';
INTERVAL : 'INTERVAL';
INTO : 'INTO';
IS : 'IS';
JOIN : 'JOIN';
LATERAL : 'LATERAL';
LEFT : 'LEFT';
LIKE : 'LIKE';
LIMIT : 'LIMIT';
LOOKUP : 'LOOKUP';
MERGE : 'MERGE';
NATURAL : 'NATURAL';
NEW : 'NEW';
NO : 'NO';
NOT : 'NOT';
NULL : 'NULL';
NULLS : 'NULLS';
OF : 'OF';
ON : 'ON';
OR : 'OR';
ORDER : 'ORDER';
OUTER : 'OUTER';
OVER : 'OVER';
PARTITION : 'PARTITION';
PRECEDING : 'PRECEDING';
PROTO : 'PROTO';
QUALIFY : 'QUALIFY';
RANGE : 'RANGE';
RECURSIVE : 'RECURSIVE';
RESPECT : 'RESPECT';
RIGHT : 'RIGHT';
ROLLUP : 'ROLLUP';
ROWS : 'ROWS';
SELECT : 'SELECT';
SET : 'SET';
SOME : 'SOME';
STRUCT : 'STRUCT';
TABLESAMPLE : 'TABLESAMPLE';
THEN : 'THEN';
TO : 'TO';
TREAT : 'TREAT';
TRUE : 'TRUE';
UNBOUNDED : 'UNBOUNDED';
UNION : 'UNION';
UNNEST : 'UNNEST';
USING : 'USING';
WHEN : 'WHEN';
WHERE : 'WHERE';
WINDOW : 'WINDOW';
WITH : 'WITH';
WITHIN : 'WITHIN';

// Non-reserved
BIGNUMERIC : 'BIGNUMERIC';
DATE : 'DATE';
DATETIME : 'DATETIME';
NUMERIC : 'NUMERIC';
TIMESTAMP : 'TIMESTAMP';
YEAR : 'YEAR';
QUARTER : 'QUARTER';
MONTH : 'MONTH';
WEEK : 'WEEK';
DAY : 'DAY';
HOUR : 'HOUR';
MINUTE : 'MINUTE';
SECOND : 'SECOND';
MILLISECOND : 'MILLISECOND';
MICROSECOND : 'MICROSECOND';
JSON : 'JSON';
OFFSET : 'OFFSET';
NAME : 'NAME';
STRICT : 'STRICT';
CORRESPONDING : 'CORRESPONDING';
DIFFERENTIAL_PRIVACY : 'DIFFERENTIAL_PRIVACY';
OPTIONS : 'OPTIONS';
VALUE : 'VALUE';
REPLACE : 'REPLACE';
SYSTEM : 'SYSTEM';
PERCENT : 'PERCENT';
PIVOT : 'PIVOT';
UNPIVOT : 'UNPIVOT';
SYSTEM_TIME : 'SYSTEM_TIME';
ROW : 'ROW';
INCLUDE : 'INCLUDE';
FORMAT : 'FORMAT';
SETS : 'SETS';
AVG : 'AVG';
SCHEMA : 'SCHEMA';
TEMP : 'TEMP';
TEMPORARY : 'TEMPORARY';
TABLE : 'TABLE';
CONSTRAINT : 'CONSTRAINT';
ENFORCED : 'ENFORCED';
PRIMARY : 'PRIMARY';
KEY : 'KEY';
FOREIGN : 'FOREIGN';
REFERENCES : 'REFERENCES';
CLUSTER : 'CLUSTER';
CONNECTION : 'CONNECTION';
ARRAY_AGG : 'ARRAY_AGG';
COPY : 'COPY';
SNAPSHOT : 'SNAPSHOT';
CLONE : 'CLONE';
VIEW : 'VIEW';
DROP : 'DROP';
SEARCH : 'SEARCH';
INDEX : 'INDEX';
VECTOR : 'VECTOR';
ASSIGNMENT : 'ASSIGNMENT';
RESERVATION : 'RESERVATION';
CAPACITY : 'CAPACITY';
ACCESS : 'ACCESS';
POLICY : 'POLICY';
POLICIES : 'POLICIES';
PROCEDURE : 'PROCEDURE';
FUNCTION : 'FUNCTION';
EXTERNAL : 'EXTERNAL';
MATERIALIZED : 'MATERIALIZED';
CASCADE : 'CASCADE';
RESTRICT : 'RESTRICT';
UNDROP : 'UNDROP';
REPLICA : 'REPLICA';
COLUMNS : 'COLUMNS';
RETURNS : 'RETURNS';
DETERMINISTIC : 'DETERMINISTIC';
LANGUAGE : 'LANGUAGE';
REMOTE : 'REMOTE';
AGGREGATE : 'AGGREGATE';
TYPE : 'TYPE';
OUT : 'OUT';
INOUT : 'INOUT';
BEGIN : 'BEGIN';
SECURITY : 'SECURITY';
INVOKER : 'INVOKER';
COALESCE : 'COALESCE';
NULLIF : 'NULLIF';
IFNULL : 'IFNULL';
GRANT : 'GRANT';
FILTER : 'FILTER';
COLUMN : 'COLUMN';
STORING : 'STORING';
ALTER : 'ALTER';
ADD : 'ADD';
RENAME : 'RENAME';
DATA : 'DATA';
ORGANIZATION : 'ORGANIZATION';
PROJECT : 'PROJECT';
BI_CAPACITY : 'BI_CAPACITY';
ANY_VALUE : 'ANY_VALUE';
MAX : 'MAX';
MIN : 'MIN';
ARRAY_CONCAT_AGG : 'ARRAY_CONCAT_AGG';
BIT_AND : 'BIT_AND';
BIT_OR : 'BIT_OR';
BIT_XOR : 'BIT_XOR';
COUNT : 'COUNT';
COUNTIF : 'COUNTIF';
LOGICAL_AND : 'LOGICAL_AND';
LOGICAL_OR : 'LOGICAL_OR';
MAX_BY : 'MAX_BY';
MIN_BY : 'MIN_BY';
STRING_AGG : 'STRING_AGG';
SUM : 'SUM';
TIMEZONE : 'TIMEZONE';
TIME : 'TIME';
ASSERT : 'ASSERT';
LOAD : 'LOAD';
OVERWRITE : 'OVERWRITE';
PARTITIONS : 'PARTITIONS';
FILES : 'FILES';
EXPORT : 'EXPORT';
DECLARE : 'DECLARE';
EXECUTE : 'EXECUTE';
IMMEDIATE : 'IMMEDIATE';
EXCEPTION : 'EXCEPTION';
ERROR : 'ERROR';
CALL : 'CALL';
ELSEIF : 'ELSEIF';
LOOP : 'LOOP';
WHILE : 'WHILE';
DO : 'DO';
REPEAT : 'REPEAT';
UNTIL : 'UNTIL';
BREAK : 'BREAK';
LEAVE : 'LEAVE';
CONTINUE : 'CONTINUE';
ITERATE : 'ITERATE';
RETURN : 'RETURN';
TRANSACTION : 'TRANSACTION';
COMMIT : 'COMMIT';
ROLLBACK : 'ROLLBACK';
MESSAGE : 'MESSAGE';
RAISE : 'RAISE';
INSERT : 'INSERT';
VALUES : 'VALUES';
DELETE : 'DELETE';
TRUNCATE : 'TRUNCATE';
UPDATE : 'UPDATE';
MATCHED : 'MATCHED';
TARGET : 'TARGET';
SOURCE : 'SOURCE';
REVOKE : 'REVOKE';

NAN : 'NAN';
INF : [+-]? 'INF';

UNQUOTED_IDENTIFIER
 : '@' '@'? [A-Z_] [A-Z_0-9]*
 | [A-Z_] [A-Z_0-9]*
 ;

QUOTED_IDENTIFIER
 : '`' .*? '`'
 ;

STRING_LITERAL
 : '"' ( ~[\r\n"\\] | ESCAPE_SEQUENCE )* '"'
 | '\'' ( ~[\r\n'\\] | ESCAPE_SEQUENCE )* '\''
 | '"""' ( ~[\\] | ESCAPE_SEQUENCE )*? '"""'
 | '\'\'\'' ( ~[\\] | ESCAPE_SEQUENCE )*? '\'\'\''
 ;

RAW_STRING_LITERAL
 : 'R' ( '"' .*? '"'
       | '\'' .*? '\''
       | '"""' .*? '"""'
       | '\'\'\'' .*? '\'\'\''
       )
 ;

BYTES_LITERAL
 : 'B' STRING_LITERAL
 ;

RAW_BYTES_LITERAL
 : ( 'R' 'B'? | 'B' 'R'? ) STRING_LITERAL
 ;

INTEGER_LITERAL
 : [+-]? ( '0X' HEX_DIGIT+ | DIGIT+ )
 ;

FLOATING_POINT_LITERAL
 : [+-]? DIGITS '.' DIGITS? ( 'E' [+-]? DIGITS )?
 | [+-]? DIGITS? '.' DIGITS ( 'E' [+-]? DIGITS )?
 | DIGITS 'E' [+-]? DIGITS
 ;

SPACES
 : [ \t\r\n\f]+ -> channel(HIDDEN)
 ;

COMMENT
 : ( '--' ~[\r\n]*
   | '#' ~[\r\n]*
   | '/*' .*? '*/'
   ) -> channel(HIDDEN)
 ;

// Fall-through rule
UNEXPECTED
 : .
 ;

fragment ESCAPE_SEQUENCE
options { caseInsensitive=false; }
 : '\\' [abfnrtv\\?"'`]
 | '\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT
 | '\\' [xX] HEX_DIGIT HEX_DIGIT
 | '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
 | '\\U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
 ;

fragment OCTAL_DIGIT : [0-7];
fragment HEX_DIGIT : [0-9A-F];
fragment DIGIT : [0-9];
fragment DIGITS : DIGIT+;